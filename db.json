{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":0},{"_id":"source/img/avatar1.jpg","path":"img/avatar1.jpg","modified":1,"renderable":0},{"_id":"source/img/landscape_54-wallpaper-1920x1080.jpg","path":"img/landscape_54-wallpaper-1920x1080.jpg","modified":1,"renderable":0},{"_id":"source/img/earth_sunrise_from_space-wallpaper-2560x1440.jpg","path":"img/earth_sunrise_from_space-wallpaper-2560x1440.jpg","modified":1,"renderable":0},{"_id":"source/img/beautifulmountain.png","path":"img/beautifulmountain.png","modified":1,"renderable":0},{"_id":"source/img/material-1.png","path":"img/material-1.png","modified":1,"renderable":0},{"_id":"source/img/material-10.png","path":"img/material-10.png","modified":1,"renderable":0},{"_id":"source/img/material-5.png","path":"img/material-5.png","modified":1,"renderable":0},{"_id":"source/img/material-2.png","path":"img/material-2.png","modified":1,"renderable":0},{"_id":"source/img/material-3.png","path":"img/material-3.png","modified":1,"renderable":0},{"_id":"source/img/material-4.png","path":"img/material-4.png","modified":1,"renderable":0},{"_id":"source/img/material-6.png","path":"img/material-6.png","modified":1,"renderable":0},{"_id":"source/img/material-7.png","path":"img/material-7.png","modified":1,"renderable":0},{"_id":"source/img/mountains_night_sky-wallpaper-2560x1440.jpg","path":"img/mountains_night_sky-wallpaper-2560x1440.jpg","modified":1,"renderable":0},{"_id":"source/img/material-8.png","path":"img/material-8.png","modified":1,"renderable":0},{"_id":"source/img/material-9.png","path":"img/material-9.png","modified":1,"renderable":0},{"_id":"source/media/12b959efcc454da5a15b9fdec493d61b.png","path":"media/12b959efcc454da5a15b9fdec493d61b.png","modified":1,"renderable":0},{"_id":"source/media/0320bash_1.jpg","path":"media/0320bash_1.jpg","modified":1,"renderable":0},{"_id":"source/media/10e8e9317eca4b14b8682eb30fcbfd6c.png","path":"media/10e8e9317eca4b14b8682eb30fcbfd6c.png","modified":1,"renderable":0},{"_id":"source/media/180ccb58ffd741a589b0b44079f2c589.png","path":"media/180ccb58ffd741a589b0b44079f2c589.png","modified":1,"renderable":0},{"_id":"source/media/1303dcff987147d79a1340c6abe0233e.png","path":"media/1303dcff987147d79a1340c6abe0233e.png","modified":1,"renderable":0},{"_id":"source/media/1GetImage.jpeg","path":"media/1GetImage.jpeg","modified":1,"renderable":0},{"_id":"source/media/19a206038ee44136a2713e8809b6a870.png","path":"media/19a206038ee44136a2713e8809b6a870.png","modified":1,"renderable":0},{"_id":"source/media/1GetImage(1).png","path":"media/1GetImage(1).png","modified":1,"renderable":0},{"_id":"source/media/1dc08fc545592a16bdd4e69456f7603f.png","path":"media/1dc08fc545592a16bdd4e69456f7603f.png","modified":1,"renderable":0},{"_id":"source/media/1GetImage.png","path":"media/1GetImage.png","modified":1,"renderable":0},{"_id":"source/media/30f3d615cb354306a900383295ef8166.png","path":"media/30f3d615cb354306a900383295ef8166.png","modified":1,"renderable":0},{"_id":"source/media/1f6646aa0ab8a10bff97905f3abc2bd0.png","path":"media/1f6646aa0ab8a10bff97905f3abc2bd0.png","modified":1,"renderable":0},{"_id":"source/media/240693210.png","path":"media/240693210.png","modified":1,"renderable":0},{"_id":"source/media/3c5b8613a9e440fdbee8274d463a6427.png","path":"media/3c5b8613a9e440fdbee8274d463a6427.png","modified":1,"renderable":0},{"_id":"source/media/36efc2704d174acab598c4b9addd3694.png","path":"media/36efc2704d174acab598c4b9addd3694.png","modified":1,"renderable":0},{"_id":"source/media/3d9e381b93fe4df790357680b15d4635.png","path":"media/3d9e381b93fe4df790357680b15d4635.png","modified":1,"renderable":0},{"_id":"source/media/46ce665f69594feeae6a97b5bd605acc.png","path":"media/46ce665f69594feeae6a97b5bd605acc.png","modified":1,"renderable":0},{"_id":"source/media/41895494f7064942bc224d6b3783b77b.png","path":"media/41895494f7064942bc224d6b3783b77b.png","modified":1,"renderable":0},{"_id":"source/media/474feca2a40949c0a9dc579122ef4ece.png","path":"media/474feca2a40949c0a9dc579122ef4ece.png","modified":1,"renderable":0},{"_id":"source/media/4c410326f68b9c901ae092e6d1bee594.png","path":"media/4c410326f68b9c901ae092e6d1bee594.png","modified":1,"renderable":0},{"_id":"source/media/47e2a05c214d49f7bbe30c7d58bcd331.png","path":"media/47e2a05c214d49f7bbe30c7d58bcd331.png","modified":1,"renderable":0},{"_id":"source/media/5ef388c5c9214b6c8fab73fbc87d0071.png","path":"media/5ef388c5c9214b6c8fab73fbc87d0071.png","modified":1,"renderable":0},{"_id":"source/media/4e18cfce966b47a599ab6ae87e7cd069.png","path":"media/4e18cfce966b47a599ab6ae87e7cd069.png","modified":1,"renderable":0},{"_id":"source/media/58a8c77bc1b373fbe5c744399c14d865.png","path":"media/58a8c77bc1b373fbe5c744399c14d865.png","modified":1,"renderable":0},{"_id":"source/media/69f20a18f8f1c1c329109e71c3456afc.png","path":"media/69f20a18f8f1c1c329109e71c3456afc.png","modified":1,"renderable":0},{"_id":"source/media/640","path":"media/640","modified":1,"renderable":0},{"_id":"source/media/7d3bd10620d3484cb3cb8fb8714935c1.png","path":"media/7d3bd10620d3484cb3cb8fb8714935c1.png","modified":1,"renderable":0},{"_id":"source/media/7186eb58ef60fc61dc55f573da016c01.png","path":"media/7186eb58ef60fc61dc55f573da016c01.png","modified":1,"renderable":0},{"_id":"source/media/6a677661b9aa46c8919bafb2aa6fce52.png","path":"media/6a677661b9aa46c8919bafb2aa6fce52.png","modified":1,"renderable":0},{"_id":"source/media/84e9d962295b753134094e778499e2a0.png","path":"media/84e9d962295b753134094e778499e2a0.png","modified":1,"renderable":0},{"_id":"source/media/82e528c1d8aeb1e85113f6a7d826cdfd.png","path":"media/82e528c1d8aeb1e85113f6a7d826cdfd.png","modified":1,"renderable":0},{"_id":"source/media/91923e61b62c4872ab222d9b86800dbb.png","path":"media/91923e61b62c4872ab222d9b86800dbb.png","modified":1,"renderable":0},{"_id":"source/media/899e5f1f4f1d4a5651454501e4b6a19c.png","path":"media/899e5f1f4f1d4a5651454501e4b6a19c.png","modified":1,"renderable":0},{"_id":"source/media/90765ad142ae9c04739fde85d776f281.png","path":"media/90765ad142ae9c04739fde85d776f281.png","modified":1,"renderable":0},{"_id":"source/media/GetImage(1).png","path":"media/GetImage(1).png","modified":1,"renderable":0},{"_id":"source/media/GetImage(1).jpeg","path":"media/GetImage(1).jpeg","modified":1,"renderable":0},{"_id":"source/media/GetImage(2).jpeg","path":"media/GetImage(2).jpeg","modified":1,"renderable":0},{"_id":"source/media/GetImage(3).png","path":"media/GetImage(3).png","modified":1,"renderable":0},{"_id":"source/media/GetImage(2).png","path":"media/GetImage(2).png","modified":1,"renderable":0},{"_id":"source/media/GetImage.jpeg","path":"media/GetImage.jpeg","modified":1,"renderable":0},{"_id":"source/media/GetImage1.png","path":"media/GetImage1.png","modified":1,"renderable":0},{"_id":"source/media/GetImage.png","path":"media/GetImage.png","modified":1,"renderable":0},{"_id":"source/media/GetImage10.png","path":"media/GetImage10.png","modified":1,"renderable":0},{"_id":"source/media/GetImage12.png","path":"media/GetImage12.png","modified":1,"renderable":0},{"_id":"source/media/GetImage15.png","path":"media/GetImage15.png","modified":1,"renderable":0},{"_id":"source/media/GetImage11.png","path":"media/GetImage11.png","modified":1,"renderable":0},{"_id":"source/media/GetImage13.png","path":"media/GetImage13.png","modified":1,"renderable":0},{"_id":"source/media/GetImage14.png","path":"media/GetImage14.png","modified":1,"renderable":0},{"_id":"source/media/GetImage16.png","path":"media/GetImage16.png","modified":1,"renderable":0},{"_id":"source/media/GetImage2.png","path":"media/GetImage2.png","modified":1,"renderable":0},{"_id":"source/media/GetImage17.png","path":"media/GetImage17.png","modified":1,"renderable":0},{"_id":"source/media/GetImage18.png","path":"media/GetImage18.png","modified":1,"renderable":0},{"_id":"source/media/GetImage20.png","path":"media/GetImage20.png","modified":1,"renderable":0},{"_id":"source/media/GetImage19.png","path":"media/GetImage19.png","modified":1,"renderable":0},{"_id":"source/media/GetImage23.png","path":"media/GetImage23.png","modified":1,"renderable":0},{"_id":"source/media/GetImage21.png","path":"media/GetImage21.png","modified":1,"renderable":0},{"_id":"source/media/GetImage22.png","path":"media/GetImage22.png","modified":1,"renderable":0},{"_id":"source/media/GetImage24.png","path":"media/GetImage24.png","modified":1,"renderable":0},{"_id":"source/media/GetImage3.png","path":"media/GetImage3.png","modified":1,"renderable":0},{"_id":"source/media/GetImage7.png","path":"media/GetImage7.png","modified":1,"renderable":0},{"_id":"source/media/GetImage4.png","path":"media/GetImage4.png","modified":1,"renderable":0},{"_id":"source/media/GetImage5.jpeg","path":"media/GetImage5.jpeg","modified":1,"renderable":0},{"_id":"source/media/GetImage6.png","path":"media/GetImage6.png","modified":1,"renderable":0},{"_id":"source/media/GetImage8.png","path":"media/GetImage8.png","modified":1,"renderable":0},{"_id":"source/media/a8aee10bbf754abf9bb85b3ad2ac05f9.png","path":"media/a8aee10bbf754abf9bb85b3ad2ac05f9.png","modified":1,"renderable":0},{"_id":"source/media/GetImage9.png","path":"media/GetImage9.png","modified":1,"renderable":0},{"_id":"source/media/a5f23af609c2c0cc2c6cfe51f1ca22f0.png","path":"media/a5f23af609c2c0cc2c6cfe51f1ca22f0.png","modified":1,"renderable":0},{"_id":"source/media/a7d7fe639765492abea6951ae25170c8.png","path":"media/a7d7fe639765492abea6951ae25170c8.png","modified":1,"renderable":0},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS01NjYzNTk5ZTg0MzNmNWI4LnBuZw.png","path":"media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS01NjYzNTk5ZTg0MzNmNWI4LnBuZw.png","modified":1,"renderable":0},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGI3ZTczMjExYjRjODliLnBuZw.png","path":"media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGI3ZTczMjExYjRjODliLnBuZw.png","modified":1,"renderable":0},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGJhY2Q4N2Y0NDlkYmI4LnBuZw.png","path":"media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGJhY2Q4N2Y0NDlkYmI4LnBuZw.png","modified":1,"renderable":0},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png","path":"media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png","modified":1,"renderable":0},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS04Nzc5YmMwOWE1M2ViNDBjLnBuZw.png","path":"media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS04Nzc5YmMwOWE1M2ViNDBjLnBuZw.png","modified":1,"renderable":0},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iZjE3MjU0NTIwOWI4N2UxLnBuZw.png","path":"media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iZjE3MjU0NTIwOWI4N2UxLnBuZw.png","modified":1,"renderable":0},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1hOWIzZmMyZWQxNmY2MWU1LnBuZw","path":"media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1hOWIzZmMyZWQxNmY2MWU1LnBuZw","modified":1,"renderable":0},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iNDg4YzYyMDk0NTE2ZTBjLnBuZw.png","path":"media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iNDg4YzYyMDk0NTE2ZTBjLnBuZw.png","modified":1,"renderable":0},{"_id":"source/media/aed0d72bbc3449959f6423e074167458.png","path":"media/aed0d72bbc3449959f6423e074167458.png","modified":1,"renderable":0},{"_id":"source/media/ad0e5659850d4708b89e93f9340c9e9e.png","path":"media/ad0e5659850d4708b89e93f9340c9e9e.png","modified":1,"renderable":0},{"_id":"source/media/b871c543fa5142f08deee9b5fdb5bdf5.png","path":"media/b871c543fa5142f08deee9b5fdb5bdf5.png","modified":1,"renderable":0},{"_id":"source/media/b5d733fac8312c1270eb8bc87d58c555.png","path":"media/b5d733fac8312c1270eb8bc87d58c555.png","modified":1,"renderable":0},{"_id":"source/media/b80e022befbbb1f86356f354c265237d.png","path":"media/b80e022befbbb1f86356f354c265237d.png","modified":1,"renderable":0},{"_id":"source/media/c48e58454fc351e9fe69d2891a001cae.png","path":"media/c48e58454fc351e9fe69d2891a001cae.png","modified":1,"renderable":0},{"_id":"source/media/c++const修饰的局部变量分配到符号表上.png","path":"media/c++const修饰的局部变量分配到符号表上.png","modified":1,"renderable":0},{"_id":"source/media/d4517e01d32c4567bd9327c728938916.png","path":"media/d4517e01d32c4567bd9327c728938916.png","modified":1,"renderable":0},{"_id":"source/media/c58d9bc86cac4a9f8b993aefaebe4151.png","path":"media/c58d9bc86cac4a9f8b993aefaebe4151.png","modified":1,"renderable":0},{"_id":"source/media/c98f8577d9e440afacc1f33900f90835.png","path":"media/c98f8577d9e440afacc1f33900f90835.png","modified":1,"renderable":0},{"_id":"source/media/dbebbbdaf4c6e4278a0ac2e62db89a81.png","path":"media/dbebbbdaf4c6e4278a0ac2e62db89a81.png","modified":1,"renderable":0},{"_id":"source/media/d46f4d8198bf146ef7995d5708b2b454.png","path":"media/d46f4d8198bf146ef7995d5708b2b454.png","modified":1,"renderable":0},{"_id":"source/media/e3b2ae52a820296728e9a11336313dcd.png","path":"media/e3b2ae52a820296728e9a11336313dcd.png","modified":1,"renderable":0},{"_id":"source/media/e2030cb9f4954d5f9d38a93f20c3265a.png","path":"media/e2030cb9f4954d5f9d38a93f20c3265a.png","modified":1,"renderable":0},{"_id":"source/media/e26b16e4dfa08f27a6be90000c53f58e.png","path":"media/e26b16e4dfa08f27a6be90000c53f58e.png","modified":1,"renderable":0},{"_id":"source/media/f1a009c02af2e121f29b74a8c7899747.png","path":"media/f1a009c02af2e121f29b74a8c7899747.png","modified":1,"renderable":0},{"_id":"source/media/ea41ef6e45a44d1780182e7f1f483c60.png","path":"media/ea41ef6e45a44d1780182e7f1f483c60.png","modified":1,"renderable":0},{"_id":"source/media/f9cc100e8e0f482fb801795123574c78.png","path":"media/f9cc100e8e0f482fb801795123574c78.png","modified":1,"renderable":0},{"_id":"source/media/f3bdcd5cb41b42a6bc70d01e7f62be57.png","path":"media/f3bdcd5cb41b42a6bc70d01e7f62be57.png","modified":1,"renderable":0},{"_id":"source/media/f700387f242b93abd4799aae4384a23a.png","path":"media/f700387f242b93abd4799aae4384a23a.png","modified":1,"renderable":0},{"_id":"source/media/image-20230423204352633.png","path":"media/image-20230423204352633.png","modified":1,"renderable":0},{"_id":"source/media/fda7277fe1a8ca54433d8f2a47a26758.png","path":"media/fda7277fe1a8ca54433d8f2a47a26758.png","modified":1,"renderable":0},{"_id":"source/media/image-20230423204921026.png","path":"media/image-20230423204921026.png","modified":1,"renderable":0},{"_id":"source/media/image-20230821183317880.png","path":"media/image-20230821183317880.png","modified":1,"renderable":0},{"_id":"source/media/ppid.gif","path":"media/ppid.gif","modified":1,"renderable":0},{"_id":"source/media/v2-8b77b08acc39bfc9cb569116ff6905e2_720w.webp","path":"media/v2-8b77b08acc39bfc9cb569116ff6905e2_720w.webp","modified":1,"renderable":0},{"_id":"source/media/var_01.gif","path":"media/var_01.gif","modified":1,"renderable":0},{"_id":"source/media/var_02.gif","path":"media/var_02.gif","modified":1,"renderable":0},{"_id":"source/media/image-20230821184834825.png","path":"media/image-20230821184834825.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"2579982f3b72166a54c8b86aa88a6257c8c5baa2","modified":1692787760073},{"_id":"source/link/index.md","hash":"4db31cb9cbe254aa24057cc429ff14360f7a0d78","modified":1692713318936},{"_id":"source/_posts/README.md","hash":"5ceace4dd3dcbb4415ecf98f2f711325c5ba0edb","modified":1692612517866},{"_id":"source/resource/index.md","hash":"d38bf48b755a87fa2f44398746a9a63874436645","modified":1692960010502},{"_id":"source/about/index.md","hash":"25436f400ff5ac25315a34f7b5fe0fedf8ee72a6","modified":1692960072336},{"_id":"source/software/index.md","hash":"758e947aaaa549184e87b679a369a61f50e9ac82","modified":1692960022062},{"_id":"source/img/avatar.png","hash":"16615605a9c2d46fba3e8c1bec94258649aa5a4b","modified":1692804863508},{"_id":"source/img/avatar1.jpg","hash":"ad42266cd221268f96fd454c345ff7b7c93f7434","modified":1692875375485},{"_id":"source/img/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1692942850125},{"_id":"source/img/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1692942889407},{"_id":"source/img/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1692942880379},{"_id":"source/img/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1692942833250},{"_id":"source/img/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1692942812781},{"_id":"source/img/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1692942938845},{"_id":"source/categories/index.md","hash":"c5b39515a6c2eeb833d48f3ced879eecb3ceffe6","modified":1692960049149},{"_id":"source/media/12b959efcc454da5a15b9fdec493d61b.png","hash":"1b09c99d61837f03429836a2c62090ab29aeb5a0","modified":1672370024844},{"_id":"source/tags/index.md","hash":"2011dc2551d658f292174b3c9dc0bee7b7366bfd","modified":1692960107088},{"_id":"source/media/19a206038ee44136a2713e8809b6a870.png","hash":"a0ef943e39f63090193c9216971fed97b99db4d6","modified":1672370024845},{"_id":"source/media/1GetImage.jpeg","hash":"11b5d0167a4d6454fc0f12f98b8f2d851ed3bfd0","modified":1672370024856},{"_id":"source/media/1GetImage(1).png","hash":"c97b0b6a1fa0828ac9640b6027d381b989d35f34","modified":1672370024856},{"_id":"source/media/1dc08fc545592a16bdd4e69456f7603f.png","hash":"d331238b1d702f641d96a830a4a9658c8796e40d","modified":1672370024817},{"_id":"source/media/3d9e381b93fe4df790357680b15d4635.png","hash":"77263e78cc605e067e989530faf4798e1b9d3993","modified":1672370024817},{"_id":"source/media/3c5b8613a9e440fdbee8274d463a6427.png","hash":"1617310b9b4b321478b552426835dd0d10fde4cc","modified":1672370024846},{"_id":"source/media/36efc2704d174acab598c4b9addd3694.png","hash":"5911774c8af960c35363409fcd5f2ac6ddfcf24b","modified":1672370024846},{"_id":"source/media/41895494f7064942bc224d6b3783b77b.png","hash":"54681c333945171a36ee2a3b211cf8bccb3c480e","modified":1672370024853},{"_id":"source/media/474feca2a40949c0a9dc579122ef4ece.png","hash":"b7259beb60ea7b900797e71b136f690172be575b","modified":1672370024846},{"_id":"source/media/4e18cfce966b47a599ab6ae87e7cd069.png","hash":"ce082bd66df31e0da6aea9ea2a2357631b114355","modified":1672370024854},{"_id":"source/media/640","hash":"6c41f35a89c59248edd57f92feab724384f91a47","modified":1672370025123},{"_id":"source/media/84e9d962295b753134094e778499e2a0.png","hash":"658fb0b3661edfc262e25f6b121a2d78a08f550f","modified":1672370024820},{"_id":"source/media/91923e61b62c4872ab222d9b86800dbb.png","hash":"6d6261576557889d7cc82988636941cb37472199","modified":1672370024856},{"_id":"source/media/899e5f1f4f1d4a5651454501e4b6a19c.png","hash":"b46020a05ef74367622f1564d63403b8e9e2bc20","modified":1672370024820},{"_id":"source/media/GetImage(1).png","hash":"1de2d0231623da0ff97baadce48ce89c9af422df","modified":1672370024822},{"_id":"source/media/GetImage(3).png","hash":"7abd451098d9b44370f0195c929ae4cd67b9db96","modified":1672370024856},{"_id":"source/media/GetImage(2).png","hash":"7abd451098d9b44370f0195c929ae4cd67b9db96","modified":1672370024856},{"_id":"source/media/GetImage.png","hash":"f8820ce334ff2f8bcbcafa1aaf4703215b61c54a","modified":1672370024822},{"_id":"source/media/GetImage12.png","hash":"55cebb086c214eb11f285c8fa54a98171658aeb6","modified":1672370024860},{"_id":"source/media/GetImage15.png","hash":"dbc573ed9ee0f953d47b401c091e92dd5320ae86","modified":1672370024860},{"_id":"source/media/GetImage16.png","hash":"f04b6071b2e2a94fba5012177236b2acf05ab5cd","modified":1672370024860},{"_id":"source/media/GetImage13.png","hash":"0b3d06cc93bb223b7833cac9e54ad1560053b927","modified":1672370024860},{"_id":"source/media/GetImage14.png","hash":"e06228c6cc55d1229e7b4b5f244d8d4bfebb6811","modified":1672370024860},{"_id":"source/media/GetImage2.png","hash":"6a3028d847a45cdf7a9ff9505ed0b6d809f7d8c6","modified":1672370024862},{"_id":"source/media/GetImage17.png","hash":"6a7c5c1873d3061e078ce12c0890c56329202d5e","modified":1672370024861},{"_id":"source/media/GetImage5.jpeg","hash":"058ba8deb7a7b22c7e025f466f4ab9c642706b43","modified":1672370024869},{"_id":"source/media/a7d7fe639765492abea6951ae25170c8.png","hash":"5728082a7acc936501516150b82512030de3f11f","modified":1672370024848},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGI3ZTczMjExYjRjODliLnBuZw.png","hash":"e06df56cfb89ef3f7968e73494e92caeeea92aa2","modified":1672370024823},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iNDg4YzYyMDk0NTE2ZTBjLnBuZw.png","hash":"ae5ac019e222faa603a826ca9a57986f0b4da567","modified":1672370024827},{"_id":"source/media/b5d733fac8312c1270eb8bc87d58c555.png","hash":"b9e4dc24a6089ae3003b4075333fda22cf092d34","modified":1672370024828},{"_id":"source/media/c++const修饰的局部变量分配到符号表上.png","hash":"cb17f92ba81b69b161a914db030fadb5a030bf83","modified":1672370024828},{"_id":"source/media/d46f4d8198bf146ef7995d5708b2b454.png","hash":"7b77a4437aa192e3f65653bcc556b826001efb85","modified":1672370024849},{"_id":"source/media/e26b16e4dfa08f27a6be90000c53f58e.png","hash":"a810816dd008b2a6ac2dd0c922893d89ed814d67","modified":1672370024849},{"_id":"source/media/dbebbbdaf4c6e4278a0ac2e62db89a81.png","hash":"f128934d4fefbae5d277ff1d74986b9802864a02","modified":1672370024849},{"_id":"source/media/f700387f242b93abd4799aae4384a23a.png","hash":"4e33e0f0486f2a68b6e42839acb4c06d32252f21","modified":1672370024833},{"_id":"source/media/image-20230423204921026.png","hash":"7f069387d557da36cf2b3381003aa8041953453f","modified":1687751716605},{"_id":"source/media/ppid.gif","hash":"463140397ab2ff43ca5006e94707b5525b438ed8","modified":1672370024836},{"_id":"source/media/var_01.gif","hash":"6b71c36582a5a82f023185a8520590aa143087c1","modified":1672370024836},{"_id":"source/media/v2-8b77b08acc39bfc9cb569116ff6905e2_720w.webp","hash":"9f2ce4ba1d6f9fd1ed5a1017c61976f1cf159f88","modified":1672370024852},{"_id":"source/media/var_02.gif","hash":"ce43987995e0b6b20d86b568af29d094f383a9a0","modified":1672370024836},{"_id":"source/_posts/C++/C++11chrono库.md","hash":"633630d02191059f7e780f3045f711c4edd21b36","modified":1692891877042},{"_id":"source/_posts/C++/EigenGeometry.md","hash":"b4563dc2658eedb870b7f3192732fcf0d7a6ef47","modified":1692952889241},{"_id":"source/_posts/C++/C++下const增强.md","hash":"a3a4648f0ba9d19a84a43b634294ca1216e46689","modified":1692952398320},{"_id":"source/_posts/C++/CMakeLists简易模板.md","hash":"de4574d6609dd5abe394af062cbe26cfb1bd0a87","modified":1692952922535},{"_id":"source/_posts/C++/CMakelists基础指令.md","hash":"38f81ffc2ab05d6e6e13d611ce00d4d59c30c1ca","modified":1692952708810},{"_id":"source/_posts/C++/Opencv_Mat.md","hash":"f63361e0a543ab175b091ecc9c2fe2260ca79f30","modified":1692953108592},{"_id":"source/_posts/C++/Eigen几何模块的引入.md","hash":"4f636b4c758b4a1dbdcd8af18543c483dba097fa","modified":1692952908952},{"_id":"source/_posts/C++/Find_package.md","hash":"07e618364390d95d069f68aa5235bd813fa2eeb6","modified":1692952944357},{"_id":"source/_posts/C++/c++并发与多线程.md","hash":"1b3f9e9d2968a6c039beb7c76edc367780e4d54f","modified":1692952166167},{"_id":"source/_posts/C++/STL容器使用时机.md","hash":"f1432d84de9b6c28b16540f3fb8a395e250d92db","modified":1692953168373},{"_id":"source/_posts/C++/GoogleTest.md","hash":"98229099a2a765225b2499fd984e3bd79c25e764","modified":1692953090905},{"_id":"source/_posts/C++/gflags使用.md","hash":"f16e659e4f655d6c62553055dfbadc41ccc73d30","modified":1692953063836},{"_id":"source/_posts/C++/const成员函数.md","hash":"b0a2295763075ff32b7ae784104a28759561f94a","modified":1692952792401},{"_id":"source/_posts/C++/Protocol_Buffers基本使用.md","hash":"b1d82e4daa0a8911194b2cc3762f45d4ac8f49ed","modified":1692953140192},{"_id":"source/_posts/C++/cin与get()getline()输入问题.md","hash":"f8a1734ce9259ac56a3a224fd2f95082c6958d4c","modified":1692952443757},{"_id":"source/_posts/C++/二叉树遍历.md","hash":"ee7863d68180cee0b58af2d898be34087fa89ead","modified":1692953211934},{"_id":"source/_posts/C++/opencv常用api.md","hash":"64505f99ba8f9bf6bf1d73a338a3751aea2617c2","modified":1692953129111},{"_id":"source/_posts/C++/内联函数.md","hash":"87fd003e2e403c4e661c5add68bb556d68c317bf","modified":1692953254459},{"_id":"source/_posts/C++/string和cstring头文件的区别.md","hash":"a9b8d866539644b53da50083555165195e0ea0ca","modified":1692953176001},{"_id":"source/_posts/C++/常规函数与内联函数.md","hash":"201b0de48acab850aad1b2a2e6bc020a77bb3cfb","modified":1692953187153},{"_id":"source/_posts/C++/函数指针的定义方式.md","hash":"35c228dc798bdeb5365f177479c35194f5fbd38f","modified":1692953227999},{"_id":"source/_posts/C++/左值与右值.md","hash":"73680253f3f3412b6e065463852cefd3691fcd53","modified":1692953288705},{"_id":"source/_posts/C++/单例模式.md","hash":"6f73d289383b4db5ef4836d40f5338e94184b5df","modified":1692953203745},{"_id":"source/_posts/C++/常用函数.md","hash":"5985a5949277bfcdced741682435d15f3acf8e32","modified":1692953196172},{"_id":"source/_posts/C++/构造函数的调用时机.md","hash":"092e3309b0163c8ea2e5a55b91b887adca8fce80","modified":1692953220092},{"_id":"source/_posts/C++/数据类型字节数.md","hash":"e6f81e790ec1d161a6038aecb846d45aaa66d27a","modified":1692953261493},{"_id":"source/_posts/QT/QT迁移项目后显示修改时间大于当前时间.md","hash":"3a40b6c377c2551210e6ab5406f2025cf9f38a87","modified":1692955005481},{"_id":"source/_posts/C++/计算时间.md","hash":"86f51165938002ebd0522dbab35a4441d375c07f","modified":1692953236048},{"_id":"source/_posts/C++/类知识点.md","hash":"90fabc846064aec43196e913c64d0da91aed1add","modified":1692953246219},{"_id":"source/_posts/QT/Qt点击按钮进行页面的切换.md","hash":"a66d513019bccad08feb215655b8b692f8bc63b4","modified":1692955429158},{"_id":"source/_posts/C++/转换.md","hash":"bea75a0b824bcecfe3adc2780252c93e9d292f66","modified":1692953280613},{"_id":"source/_posts/QT/项目默认文件介绍.md","hash":"36d87af986fa9b1128dd5ce5274a399be00b7a57","modified":1692954654078},{"_id":"source/_posts/Linux/Shell的变量功能.md","hash":"b52b020d007789438a10872133701fbb16de2c64","modified":1692955277316},{"_id":"source/_posts/QT/基于arm架构的NVIDIA_Xavier安装Qt.md","hash":"3ffd8b9ce3b5b3a15bce615f04011828b711957e","modified":1692954677053},{"_id":"source/_posts/slam_theory/ROS指令.md","hash":"bf93c61ab7b983d2c300abde682e991d0661430c","modified":1692954421845},{"_id":"source/_posts/something_else/stable-diffusion-webui手动安装详细步骤.md","hash":"53fe018dd27262c1910ccd6bae29b75faef3a427","modified":1692955513213},{"_id":"source/_posts/Linux/认识BASH这个Shell.md","hash":"11032cf2642d7ae1a6623288a424b0bb1356cd32","modified":1692955285499},{"_id":"source/_posts/something_else/获取Office2021安装包及相关激活工具.md","hash":"d61836d413a7881a6d3abb9643058c6654fb70e3","modified":1692955550422},{"_id":"source/_posts/command/Git中submodule的使用.md","hash":"98b7abdc06f257a4860a62e362e8b224c23a4158","modified":1692954261105},{"_id":"source/_posts/something_else/如何在Linux中使用Clash.md","hash":"06b9120ed1f439ed558b653c3f445f33368f28bd","modified":1692955541391},{"_id":"source/_posts/command/Git_Command.md","hash":"d5d50c965926de1515df7c42d9efd26ebd3838a6","modified":1692954243340},{"_id":"source/_posts/command/LIO-SAM运行.md","hash":"f14005a5d3e55754eb8a87e00d5f4b5bfa96d655","modified":1692954278204},{"_id":"source/_posts/command/Orb-slam2运行.md","hash":"5f756400325019f200e338df36e9e169b898ed18","modified":1692954316295},{"_id":"source/_posts/command/ROS查看ZED节点效果.md","hash":"f258bb7bbbd59c23715be542609110080b8d4a2b","modified":1692954455712},{"_id":"source/_posts/command/Ubuntu-xavier.md","hash":"3377816822a901bd4d9c5b08b6aac1f1c9db1dae","modified":1692954354097},{"_id":"source/_posts/command/Xsens传感器调用.md","hash":"baede3b92c68fe92554d053325e975e13fa115a2","modified":1692954509298},{"_id":"source/_posts/command/git_rebase的两种用法.md","hash":"567be74ab2725556898eeae5fd24a61dc0b00fec","modified":1692954252584},{"_id":"source/_posts/command/Velodyne_VLP16激光雷达调用.md","hash":"949fe7dca7989945bfc826bf95261303245b6295","modified":1692954366985},{"_id":"source/_posts/command/git_cherry-pick.md","hash":"db488b3eac3e3acd4f1c41c549e507fa405df61d","modified":1692953919923},{"_id":"source/_posts/slam_config/Ubuntu18.04环境配置.md","hash":"12376574226bda3e74d35f16d092fd208b37f274","modified":1692957505205},{"_id":"source/_posts/slam_config/Rosdep_update_failed.md","hash":"181c4378f2c4502abcf260dde9772abbaa530aa2","modified":1692957066469},{"_id":"source/_posts/slam_config/基于ROS的opencv安装与卸载.md","hash":"f548093f72b8be851bbee1969d9b54c656cb9e30","modified":1692957196375},{"_id":"source/_posts/slam_config/ubuntu18.04系统下安装turtlebot2.md","hash":"c8f381d9d6f6cdd1699397ee1321537b61187d84","modified":1692957367218},{"_id":"source/_posts/slam_config/turbot建图导航算法汇总.md","hash":"e54f0b482f2a9f0841ce3a4348378b777a4ad303","modified":1692957401769},{"_id":"source/_posts/slam_config/安装Orb-slam2.md","hash":"af943c99c5d7f7b5e829f3d405e1f4ccf110dade","modified":1692957302841},{"_id":"source/_posts/slam_config/xavier装机文档.md","hash":"b398069185097c258b4cf4556a48537c4775e2bb","modified":1692957332784},{"_id":"source/_posts/slam_config/安装Rtabmap.md","hash":"0ecc748721e4ae16c58b4cc6959055a0df939b29","modified":1692957288537},{"_id":"source/_posts/slam_config/安装LIO-SAM.md","hash":"8bd5b23ec118b4c652b265c5e1f7f112bba34e67","modified":1692957316956},{"_id":"source/_posts/slam_config/安装VINS-Fusion.md","hash":"9618f54923fed7ad02a86054015ed6526c68e804","modified":1692957264264},{"_id":"source/_posts/slam_config/安装ZED以及ros驱动.md","hash":"b15df9b21873eff2c6b42d0f8a39f879ad7eec4c","modified":1692957248299},{"_id":"source/_posts/slam_config/激光雷达与IMU联合标定(lidar_IMU_calib).md","hash":"691f2670732954a1c73924db4f3e802fe25ea553","modified":1692957174178},{"_id":"source/_posts/slam_config/轨迹评估介绍与evo工具使用.md","hash":"b88cce5b80c16f78d92cdc9dcf8b5449677061dd","modified":1692957222237},{"_id":"source/_posts/C++/media/1dc08fc545592a16bdd4e69456f7603f.png","hash":"d331238b1d702f641d96a830a4a9658c8796e40d","modified":1672370024817},{"_id":"source/_posts/C++/media/3d9e381b93fe4df790357680b15d4635.png","hash":"77263e78cc605e067e989530faf4798e1b9d3993","modified":1672370024817},{"_id":"source/_posts/C++/media/84e9d962295b753134094e778499e2a0.png","hash":"658fb0b3661edfc262e25f6b121a2d78a08f550f","modified":1672370024820},{"_id":"source/_posts/C++/media/899e5f1f4f1d4a5651454501e4b6a19c.png","hash":"b46020a05ef74367622f1564d63403b8e9e2bc20","modified":1672370024820},{"_id":"source/_posts/C++/media/GetImage(1).png","hash":"1de2d0231623da0ff97baadce48ce89c9af422df","modified":1672370024822},{"_id":"source/_posts/C++/media/GetImage.png","hash":"f8820ce334ff2f8bcbcafa1aaf4703215b61c54a","modified":1672370024822},{"_id":"source/_posts/C++/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGI3ZTczMjExYjRjODliLnBuZw.png","hash":"e06df56cfb89ef3f7968e73494e92caeeea92aa2","modified":1672370024823},{"_id":"source/_posts/C++/media/c++const修饰的局部变量分配到符号表上.png","hash":"cb17f92ba81b69b161a914db030fadb5a030bf83","modified":1672370024828},{"_id":"source/_posts/C++/media/b5d733fac8312c1270eb8bc87d58c555.png","hash":"b9e4dc24a6089ae3003b4075333fda22cf092d34","modified":1672370024828},{"_id":"source/_posts/C++/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iNDg4YzYyMDk0NTE2ZTBjLnBuZw.png","hash":"ae5ac019e222faa603a826ca9a57986f0b4da567","modified":1672370024827},{"_id":"source/_posts/Linux/media/ppid.gif","hash":"463140397ab2ff43ca5006e94707b5525b438ed8","modified":1672370024836},{"_id":"source/_posts/C++/media/f700387f242b93abd4799aae4384a23a.png","hash":"4e33e0f0486f2a68b6e42839acb4c06d32252f21","modified":1672370024833},{"_id":"source/_posts/Linux/media/var_01.gif","hash":"6b71c36582a5a82f023185a8520590aa143087c1","modified":1672370024836},{"_id":"source/_posts/Linux/media/var_02.gif","hash":"ce43987995e0b6b20d86b568af29d094f383a9a0","modified":1672370024836},{"_id":"source/_posts/something_else/media/640","hash":"6c41f35a89c59248edd57f92feab724384f91a47","modified":1672370025123},{"_id":"source/_posts/something_else/media/image-20230423204921026.png","hash":"7f069387d557da36cf2b3381003aa8041953453f","modified":1687751716605},{"_id":"source/_posts/command/media/12b959efcc454da5a15b9fdec493d61b.png","hash":"1b09c99d61837f03429836a2c62090ab29aeb5a0","modified":1672370024844},{"_id":"source/_posts/command/media/19a206038ee44136a2713e8809b6a870.png","hash":"a0ef943e39f63090193c9216971fed97b99db4d6","modified":1672370024845},{"_id":"source/_posts/command/media/36efc2704d174acab598c4b9addd3694.png","hash":"5911774c8af960c35363409fcd5f2ac6ddfcf24b","modified":1672370024846},{"_id":"source/_posts/command/media/3c5b8613a9e440fdbee8274d463a6427.png","hash":"1617310b9b4b321478b552426835dd0d10fde4cc","modified":1672370024846},{"_id":"source/_posts/command/media/a7d7fe639765492abea6951ae25170c8.png","hash":"5728082a7acc936501516150b82512030de3f11f","modified":1672370024848},{"_id":"source/_posts/command/media/474feca2a40949c0a9dc579122ef4ece.png","hash":"b7259beb60ea7b900797e71b136f690172be575b","modified":1672370024846},{"_id":"source/_posts/command/media/d46f4d8198bf146ef7995d5708b2b454.png","hash":"7b77a4437aa192e3f65653bcc556b826001efb85","modified":1672370024849},{"_id":"source/_posts/command/media/dbebbbdaf4c6e4278a0ac2e62db89a81.png","hash":"f128934d4fefbae5d277ff1d74986b9802864a02","modified":1672370024849},{"_id":"source/_posts/slam_config/media/1GetImage.jpeg","hash":"11b5d0167a4d6454fc0f12f98b8f2d851ed3bfd0","modified":1672370024856},{"_id":"source/_posts/command/media/e26b16e4dfa08f27a6be90000c53f58e.png","hash":"a810816dd008b2a6ac2dd0c922893d89ed814d67","modified":1672370024849},{"_id":"source/_posts/slam_config/media/1GetImage(1).png","hash":"c97b0b6a1fa0828ac9640b6027d381b989d35f34","modified":1672370024856},{"_id":"source/_posts/command/media/v2-8b77b08acc39bfc9cb569116ff6905e2_720w.webp","hash":"9f2ce4ba1d6f9fd1ed5a1017c61976f1cf159f88","modified":1672370024852},{"_id":"source/_posts/slam_config/media/41895494f7064942bc224d6b3783b77b.png","hash":"54681c333945171a36ee2a3b211cf8bccb3c480e","modified":1672370024853},{"_id":"source/_posts/slam_config/media/91923e61b62c4872ab222d9b86800dbb.png","hash":"6d6261576557889d7cc82988636941cb37472199","modified":1672370024856},{"_id":"source/_posts/slam_config/media/GetImage(2).png","hash":"7abd451098d9b44370f0195c929ae4cd67b9db96","modified":1672370024856},{"_id":"source/_posts/slam_config/media/4e18cfce966b47a599ab6ae87e7cd069.png","hash":"ce082bd66df31e0da6aea9ea2a2357631b114355","modified":1672370024854},{"_id":"source/_posts/slam_config/media/GetImage(1).png","hash":"c97b0b6a1fa0828ac9640b6027d381b989d35f34","modified":1672370024856},{"_id":"source/_posts/slam_config/media/GetImage(3).png","hash":"7abd451098d9b44370f0195c929ae4cd67b9db96","modified":1672370024856},{"_id":"source/_posts/slam_config/media/GetImage.jpeg","hash":"11b5d0167a4d6454fc0f12f98b8f2d851ed3bfd0","modified":1672370024856},{"_id":"source/_posts/slam_config/media/GetImage13.png","hash":"0b3d06cc93bb223b7833cac9e54ad1560053b927","modified":1672370024860},{"_id":"source/_posts/slam_config/media/GetImage12.png","hash":"55cebb086c214eb11f285c8fa54a98171658aeb6","modified":1672370024860},{"_id":"source/_posts/slam_config/media/GetImage17.png","hash":"6a7c5c1873d3061e078ce12c0890c56329202d5e","modified":1672370024861},{"_id":"source/_posts/slam_config/media/GetImage16.png","hash":"f04b6071b2e2a94fba5012177236b2acf05ab5cd","modified":1672370024860},{"_id":"source/_posts/slam_config/media/GetImage14.png","hash":"e06228c6cc55d1229e7b4b5f244d8d4bfebb6811","modified":1672370024860},{"_id":"source/_posts/slam_config/media/GetImage15.png","hash":"dbc573ed9ee0f953d47b401c091e92dd5320ae86","modified":1672370024860},{"_id":"source/_posts/slam_config/media/GetImage2.png","hash":"6a3028d847a45cdf7a9ff9505ed0b6d809f7d8c6","modified":1672370024862},{"_id":"source/_posts/slam_config/media/GetImage5.jpeg","hash":"058ba8deb7a7b22c7e025f466f4ab9c642706b43","modified":1672370024869},{"_id":"source/img/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1692942953780},{"_id":"source/img/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1692942927921},{"_id":"source/img/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1692942917610},{"_id":"source/img/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1692942905388},{"_id":"source/media/0320bash_1.jpg","hash":"15e433cf76da1580dde59dd5f2faacb1540945e8","modified":1672370024836},{"_id":"source/media/1303dcff987147d79a1340c6abe0233e.png","hash":"672c6859c53cb538157a6e598ca9bb7837d070fe","modified":1672370024845},{"_id":"source/media/30f3d615cb354306a900383295ef8166.png","hash":"12b9b8478940a36ed26c3f91cea24ba581e8f2cb","modified":1672370024845},{"_id":"source/media/240693210.png","hash":"6081f2e06e903871e4e5fac0d7f82c4855cb0908","modified":1687751716603},{"_id":"source/media/58a8c77bc1b373fbe5c744399c14d865.png","hash":"d4f05dad0dbf7ee9025df9aa9e1ffe46f84fc471","modified":1672370024839},{"_id":"source/media/7d3bd10620d3484cb3cb8fb8714935c1.png","hash":"4aacaa04bd748bee445eb4811ebde96a50aeb3a3","modified":1692613028965},{"_id":"source/media/69f20a18f8f1c1c329109e71c3456afc.png","hash":"d1f4e7d7b303b53e0b1f0b408cc93680ca6aef4c","modified":1672370024819},{"_id":"source/media/7186eb58ef60fc61dc55f573da016c01.png","hash":"b1532e42947c534b5c0711f57dbceac3b655fb02","modified":1672370024819},{"_id":"source/media/82e528c1d8aeb1e85113f6a7d826cdfd.png","hash":"b8c7f08b686bccbd1cc2a729492544a76f2840ea","modified":1672370024820},{"_id":"source/media/90765ad142ae9c04739fde85d776f281.png","hash":"7e4a726eb9d110647923e89296b30a465775af70","modified":1672370024821},{"_id":"source/media/GetImage10.png","hash":"30ee170addcf30187ba90f0dc974a8901a67374a","modified":1672370024859},{"_id":"source/media/GetImage8.png","hash":"3cc4b08ddfbca0d8ec4bdbffc3a8d9bf5b58c84c","modified":1672370024872},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS01NjYzNTk5ZTg0MzNmNWI4LnBuZw.png","hash":"032bde9ad75d0604fee9ee3f482385546a00b173","modified":1672370024823},{"_id":"source/media/a5f23af609c2c0cc2c6cfe51f1ca22f0.png","hash":"2993d43fb0126beaff642eb5d28ebd1870a37831","modified":1672370024822},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGJhY2Q4N2Y0NDlkYmI4LnBuZw.png","hash":"098fb3bd15a3627b077f60de22df7724ae512842","modified":1672370024824},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png","hash":"6278e38b49ac16264d4b0a28dbbedfc9a0c39661","modified":1672370024825},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iZjE3MjU0NTIwOWI4N2UxLnBuZw.png","hash":"4fc06223e530b50b7c1929e6915d8ef82af8497d","modified":1672370024828},{"_id":"source/media/b80e022befbbb1f86356f354c265237d.png","hash":"96e542ef5a3e3532ede7d8c879f529960f73537c","modified":1672370024828},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS04Nzc5YmMwOWE1M2ViNDBjLnBuZw.png","hash":"b34846923a38341adc41e607877bd3a53f3ea403","modified":1672370024825},{"_id":"source/media/b871c543fa5142f08deee9b5fdb5bdf5.png","hash":"c39c81feb0fb2ea3aa80a01cef8cd78c13689411","modified":1692613039055},{"_id":"source/media/c98f8577d9e440afacc1f33900f90835.png","hash":"ef643a913ad6decd3b89433008951984a0a55e1c","modified":1672370024848},{"_id":"source/media/image-20230423204352633.png","hash":"2e77d442a391978d6d791b9aab7c3989fb09febf","modified":1687751716605},{"_id":"source/media/image-20230821184834825.png","hash":"64701436811a00957b8479c7a62b4cf0f36bc265","modified":1692614914890},{"_id":"source/_posts/C++/media/7186eb58ef60fc61dc55f573da016c01.png","hash":"b1532e42947c534b5c0711f57dbceac3b655fb02","modified":1672370024819},{"_id":"source/_posts/C++/media/82e528c1d8aeb1e85113f6a7d826cdfd.png","hash":"b8c7f08b686bccbd1cc2a729492544a76f2840ea","modified":1672370024820},{"_id":"source/_posts/C++/media/69f20a18f8f1c1c329109e71c3456afc.png","hash":"d1f4e7d7b303b53e0b1f0b408cc93680ca6aef4c","modified":1672370024819},{"_id":"source/_posts/C++/media/90765ad142ae9c04739fde85d776f281.png","hash":"7e4a726eb9d110647923e89296b30a465775af70","modified":1672370024821},{"_id":"source/_posts/C++/media/a5f23af609c2c0cc2c6cfe51f1ca22f0.png","hash":"2993d43fb0126beaff642eb5d28ebd1870a37831","modified":1672370024822},{"_id":"source/_posts/C++/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS01NjYzNTk5ZTg0MzNmNWI4LnBuZw.png","hash":"032bde9ad75d0604fee9ee3f482385546a00b173","modified":1672370024823},{"_id":"source/_posts/C++/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS04Nzc5YmMwOWE1M2ViNDBjLnBuZw.png","hash":"b34846923a38341adc41e607877bd3a53f3ea403","modified":1672370024825},{"_id":"source/_posts/C++/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGJhY2Q4N2Y0NDlkYmI4LnBuZw.png","hash":"098fb3bd15a3627b077f60de22df7724ae512842","modified":1672370024824},{"_id":"source/_posts/C++/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png","hash":"6278e38b49ac16264d4b0a28dbbedfc9a0c39661","modified":1672370024825},{"_id":"source/_posts/C++/media/b80e022befbbb1f86356f354c265237d.png","hash":"96e542ef5a3e3532ede7d8c879f529960f73537c","modified":1672370024828},{"_id":"source/_posts/C++/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iZjE3MjU0NTIwOWI4N2UxLnBuZw.png","hash":"4fc06223e530b50b7c1929e6915d8ef82af8497d","modified":1672370024828},{"_id":"source/_posts/QT/media/58a8c77bc1b373fbe5c744399c14d865.png","hash":"d4f05dad0dbf7ee9025df9aa9e1ffe46f84fc471","modified":1672370024839},{"_id":"source/_posts/Linux/media/0320bash_1.jpg","hash":"15e433cf76da1580dde59dd5f2faacb1540945e8","modified":1672370024836},{"_id":"source/_posts/something_else/media/240693210.png","hash":"6081f2e06e903871e4e5fac0d7f82c4855cb0908","modified":1687751716603},{"_id":"source/_posts/something_else/media/7d3bd10620d3484cb3cb8fb8714935c1.png","hash":"4aacaa04bd748bee445eb4811ebde96a50aeb3a3","modified":1692613028965},{"_id":"source/_posts/something_else/media/b871c543fa5142f08deee9b5fdb5bdf5.png","hash":"c39c81feb0fb2ea3aa80a01cef8cd78c13689411","modified":1692613039055},{"_id":"source/_posts/something_else/media/image-20230423204352633.png","hash":"2e77d442a391978d6d791b9aab7c3989fb09febf","modified":1687751716605},{"_id":"source/_posts/command/media/1303dcff987147d79a1340c6abe0233e.png","hash":"672c6859c53cb538157a6e598ca9bb7837d070fe","modified":1672370024845},{"_id":"source/_posts/something_else/media/image-20230821184834825.png","hash":"64701436811a00957b8479c7a62b4cf0f36bc265","modified":1692614914890},{"_id":"source/_posts/command/media/30f3d615cb354306a900383295ef8166.png","hash":"12b9b8478940a36ed26c3f91cea24ba581e8f2cb","modified":1672370024845},{"_id":"source/_posts/command/media/c98f8577d9e440afacc1f33900f90835.png","hash":"ef643a913ad6decd3b89433008951984a0a55e1c","modified":1672370024848},{"_id":"source/_posts/slam_config/media/GetImage10.png","hash":"30ee170addcf30187ba90f0dc974a8901a67374a","modified":1672370024859},{"_id":"source/_posts/slam_config/media/GetImage8.png","hash":"3cc4b08ddfbca0d8ec4bdbffc3a8d9bf5b58c84c","modified":1672370024872},{"_id":"source/media/1GetImage.png","hash":"137495eda4c675811b111b180465444c71c2a6de","modified":1672370024857},{"_id":"source/media/47e2a05c214d49f7bbe30c7d58bcd331.png","hash":"57fcb4eeda06631090bff02ffbcff58d7da53fc4","modified":1672370024847},{"_id":"source/media/5ef388c5c9214b6c8fab73fbc87d0071.png","hash":"e4990124e8cecfceed1ef1c6cfb901f6b2c04c7c","modified":1692612751224},{"_id":"source/media/GetImage(2).jpeg","hash":"3683e7dc1eb981bae63a61e998df410b32e14ce9","modified":1672370025126},{"_id":"source/media/GetImage1.png","hash":"670d34418fdf57fc38503deb6db28a7470c0c11e","modified":1672370024858},{"_id":"source/media/GetImage11.png","hash":"bab00657a7237588bbeafcb6d0026685d8fea832","modified":1672370024860},{"_id":"source/media/GetImage18.png","hash":"eac6bbed9b12b8f757186df47fb24bc92c029585","modified":1672370024861},{"_id":"source/media/GetImage19.png","hash":"7d8ea229ad1b368b3dfd500c69dd48929f90f4bc","modified":1672370024862},{"_id":"source/media/GetImage20.png","hash":"2517dfed7d394d4bda7c69ba39af8de9ee49db61","modified":1672370024863},{"_id":"source/media/GetImage21.png","hash":"20f0aa27fda8f7e2174f8a28bd8d25b377ce98d7","modified":1672370024864},{"_id":"source/media/GetImage6.png","hash":"cded0485445c84cafd9573f137db3933b7fcd196","modified":1672370024870},{"_id":"source/media/a8aee10bbf754abf9bb85b3ad2ac05f9.png","hash":"c6b39b39e7ba23b9f83e9698046c777880848feb","modified":1692613028996},{"_id":"source/media/GetImage9.png","hash":"26c9444fd26624d5d43e9bad1d0c09c3a5e8e8c3","modified":1672370024873},{"_id":"source/media/c48e58454fc351e9fe69d2891a001cae.png","hash":"c6729861a1661c9bae092fe7e9b9866bacc34540","modified":1672370024829},{"_id":"source/media/d4517e01d32c4567bd9327c728938916.png","hash":"867d270bb6e291196ae1b22fb16dff76fdf9970d","modified":1672370024874},{"_id":"source/media/image-20230821183317880.png","hash":"a1eac37ada64c21c0cb29a4e4b6a103c1ce10c04","modified":1692613997906},{"_id":"source/_posts/C++/media/c48e58454fc351e9fe69d2891a001cae.png","hash":"c6729861a1661c9bae092fe7e9b9866bacc34540","modified":1672370024829},{"_id":"source/_posts/something_else/media/5ef388c5c9214b6c8fab73fbc87d0071.png","hash":"e4990124e8cecfceed1ef1c6cfb901f6b2c04c7c","modified":1692612751224},{"_id":"source/_posts/something_else/media/GetImage(2).jpeg","hash":"3683e7dc1eb981bae63a61e998df410b32e14ce9","modified":1672370025126},{"_id":"source/_posts/something_else/media/a8aee10bbf754abf9bb85b3ad2ac05f9.png","hash":"c6b39b39e7ba23b9f83e9698046c777880848feb","modified":1692613028996},{"_id":"source/_posts/something_else/media/image-20230821183317880.png","hash":"a1eac37ada64c21c0cb29a4e4b6a103c1ce10c04","modified":1692613997906},{"_id":"source/_posts/command/media/47e2a05c214d49f7bbe30c7d58bcd331.png","hash":"57fcb4eeda06631090bff02ffbcff58d7da53fc4","modified":1672370024847},{"_id":"source/_posts/slam_config/media/1GetImage.png","hash":"137495eda4c675811b111b180465444c71c2a6de","modified":1672370024857},{"_id":"source/_posts/slam_config/media/GetImage.png","hash":"137495eda4c675811b111b180465444c71c2a6de","modified":1672370024857},{"_id":"source/_posts/slam_config/media/GetImage11.png","hash":"bab00657a7237588bbeafcb6d0026685d8fea832","modified":1672370024860},{"_id":"source/_posts/slam_config/media/GetImage1.png","hash":"670d34418fdf57fc38503deb6db28a7470c0c11e","modified":1672370024858},{"_id":"source/_posts/slam_config/media/GetImage19.png","hash":"7d8ea229ad1b368b3dfd500c69dd48929f90f4bc","modified":1672370024862},{"_id":"source/_posts/slam_config/media/GetImage18.png","hash":"eac6bbed9b12b8f757186df47fb24bc92c029585","modified":1672370024861},{"_id":"source/_posts/slam_config/media/GetImage21.png","hash":"20f0aa27fda8f7e2174f8a28bd8d25b377ce98d7","modified":1672370024864},{"_id":"source/_posts/slam_config/media/GetImage20.png","hash":"2517dfed7d394d4bda7c69ba39af8de9ee49db61","modified":1672370024863},{"_id":"source/_posts/slam_config/media/GetImage6.png","hash":"cded0485445c84cafd9573f137db3933b7fcd196","modified":1672370024870},{"_id":"source/_posts/slam_config/media/GetImage9.png","hash":"26c9444fd26624d5d43e9bad1d0c09c3a5e8e8c3","modified":1672370024873},{"_id":"source/_posts/slam_config/media/d4517e01d32c4567bd9327c728938916.png","hash":"867d270bb6e291196ae1b22fb16dff76fdf9970d","modified":1672370024874},{"_id":"source/media/180ccb58ffd741a589b0b44079f2c589.png","hash":"e03792cdc0f1206a72c00c9e2a7d7bae2166e9c0","modified":1692613029012},{"_id":"source/media/1f6646aa0ab8a10bff97905f3abc2bd0.png","hash":"36d23002a5c52aa1344ef3ded85ed62a434c2afb","modified":1672370024839},{"_id":"source/media/6a677661b9aa46c8919bafb2aa6fce52.png","hash":"3b8fa60a359cc555d090b3e4b7397baf0f35467d","modified":1672370024855},{"_id":"source/media/GetImage.jpeg","hash":"60ff547b36f702e92d5eeab9ea295fab4e8eba10","modified":1672370025127},{"_id":"source/media/GetImage3.png","hash":"374fbfffe8a7823fd8f685beddacbc64b410cea2","modified":1672370024868},{"_id":"source/media/GetImage4.png","hash":"45275028e1c2aa308f732c1e10555b843f3793d5","modified":1672370024869},{"_id":"source/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1hOWIzZmMyZWQxNmY2MWU1LnBuZw","hash":"aa71e1867d6a1938bd91df4723d7b07481396d01","modified":1672370024826},{"_id":"source/media/c58d9bc86cac4a9f8b993aefaebe4151.png","hash":"3f6ce17264c89869583e0ed2b8003599f23eda24","modified":1692612983080},{"_id":"source/media/e2030cb9f4954d5f9d38a93f20c3265a.png","hash":"ec4990aa656bd41eb6d0cf68b1a6d8318ddfa364","modified":1692613885271},{"_id":"source/_posts/C++/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1hOWIzZmMyZWQxNmY2MWU1LnBuZw","hash":"aa71e1867d6a1938bd91df4723d7b07481396d01","modified":1672370024826},{"_id":"source/_posts/QT/media/1f6646aa0ab8a10bff97905f3abc2bd0.png","hash":"36d23002a5c52aa1344ef3ded85ed62a434c2afb","modified":1672370024839},{"_id":"source/_posts/something_else/media/180ccb58ffd741a589b0b44079f2c589.png","hash":"e03792cdc0f1206a72c00c9e2a7d7bae2166e9c0","modified":1692613029012},{"_id":"source/_posts/something_else/media/GetImage.jpeg","hash":"60ff547b36f702e92d5eeab9ea295fab4e8eba10","modified":1672370025127},{"_id":"source/_posts/something_else/media/c58d9bc86cac4a9f8b993aefaebe4151.png","hash":"3f6ce17264c89869583e0ed2b8003599f23eda24","modified":1692612983080},{"_id":"source/_posts/something_else/media/e2030cb9f4954d5f9d38a93f20c3265a.png","hash":"ec4990aa656bd41eb6d0cf68b1a6d8318ddfa364","modified":1692613885271},{"_id":"source/_posts/slam_config/media/6a677661b9aa46c8919bafb2aa6fce52.png","hash":"3b8fa60a359cc555d090b3e4b7397baf0f35467d","modified":1672370024855},{"_id":"source/_posts/slam_config/media/GetImage3.png","hash":"374fbfffe8a7823fd8f685beddacbc64b410cea2","modified":1672370024868},{"_id":"source/_posts/slam_config/media/GetImage4.png","hash":"45275028e1c2aa308f732c1e10555b843f3793d5","modified":1672370024869},{"_id":"source/media/GetImage(1).jpeg","hash":"c769494687cd0771344c5f4749805c14bb522393","modified":1672370025125},{"_id":"source/media/GetImage7.png","hash":"c933910654687fce4962adbc33b02b36eb95d4a6","modified":1672370024871},{"_id":"source/media/aed0d72bbc3449959f6423e074167458.png","hash":"9e8b9b8d14c548b856860970bfcfbc79db67a3c8","modified":1692612944248},{"_id":"source/media/f9cc100e8e0f482fb801795123574c78.png","hash":"c3089dc2d0324a7a23aa40e086cf709bbd7d7164","modified":1692613028979},{"_id":"source/_posts/slam_config/相机+imu标定.pdf","hash":"d939e5d7ee7adfe8fa674b1f436dbee277e2d780","modified":1672370024886},{"_id":"source/_posts/something_else/media/GetImage(1).jpeg","hash":"c769494687cd0771344c5f4749805c14bb522393","modified":1672370025125},{"_id":"source/_posts/something_else/media/aed0d72bbc3449959f6423e074167458.png","hash":"9e8b9b8d14c548b856860970bfcfbc79db67a3c8","modified":1692612944248},{"_id":"source/_posts/something_else/media/f9cc100e8e0f482fb801795123574c78.png","hash":"c3089dc2d0324a7a23aa40e086cf709bbd7d7164","modified":1692613028979},{"_id":"source/_posts/slam_config/media/GetImage7.png","hash":"c933910654687fce4962adbc33b02b36eb95d4a6","modified":1672370024871},{"_id":"source/media/4c410326f68b9c901ae092e6d1bee594.png","hash":"b69d76fc3ceb2c42c09c31b643de13f661cdcc9a","modified":1672370024818},{"_id":"source/media/GetImage23.png","hash":"17190170263421bf3abb0bc287bf861fe24aeec5","modified":1672370024866},{"_id":"source/media/GetImage22.png","hash":"92cef1bfe1684448c8101b70d1cf185f89ad0787","modified":1672370024865},{"_id":"source/media/ad0e5659850d4708b89e93f9340c9e9e.png","hash":"6ae5f23dcbac1b6dda4a2a7a96916fb296a99040","modified":1692613028872},{"_id":"source/media/fda7277fe1a8ca54433d8f2a47a26758.png","hash":"8e917f3797bebcf2a330bbc01650bb891e508b79","modified":1672370024841},{"_id":"source/_posts/C++/media/4c410326f68b9c901ae092e6d1bee594.png","hash":"b69d76fc3ceb2c42c09c31b643de13f661cdcc9a","modified":1672370024818},{"_id":"source/_posts/QT/media/fda7277fe1a8ca54433d8f2a47a26758.png","hash":"8e917f3797bebcf2a330bbc01650bb891e508b79","modified":1672370024841},{"_id":"source/_posts/something_else/media/ad0e5659850d4708b89e93f9340c9e9e.png","hash":"6ae5f23dcbac1b6dda4a2a7a96916fb296a99040","modified":1692613028872},{"_id":"themes/butterfly/README.md","hash":"5ca893c78f8971f512da55c785b8ccbfa9d37cfc","modified":1692703059480},{"_id":"themes/butterfly/plugins.yml","hash":"6d68dab3b79accb1bceb4710c8aaab724a45053a","modified":1692703059501},{"_id":"themes/butterfly/package.json","hash":"a6a032654a36408d7b7274bc9cfe21f89946d29c","modified":1692703059501},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1692703059480},{"_id":"themes/butterfly/_config.yml","hash":"b684e7cc1100d22a59a13ec48d09b1eef0610e34","modified":1692944171265},{"_id":"themes/butterfly/languages/default.yml","hash":"d444cbb5c5456aaf27f3fb1b4308634689c7bb53","modified":1692703059481},{"_id":"themes/butterfly/README_CN.md","hash":"f6ae7f38d016135340fd25c5fd1be65452b6773d","modified":1692703059480},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"145ec301db185c8a06de1f34a77ca391e1d2729b","modified":1692703059483},{"_id":"themes/butterfly/languages/en.yml","hash":"4957fd976c99745d3aa24000a85b2955e8d1cf81","modified":1692703059481},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"cc8672dc0c2762b694f689cbeb6e34810f1c194e","modified":1692703059483},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1692703059483},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1692703059483},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1692703059501},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1692703059500},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1692703059501},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1692703059500},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1692703059483},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1692703059479},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1692703059479},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1692703059479},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1692703059479},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1692703059479},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1692703059487},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1692703059483},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"b50b0afdc41c54279587410c3f82c8cb3c5ff46d","modified":1692703059483},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1692703059486},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1692703059488},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"c55f05400eb27ab051f47396ec8d4249ce6f71ec","modified":1692703059488},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1692703059501},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1692703059483},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1692703059502},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1692703059502},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1692703059502},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1692703059502},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1692703059502},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1692703059503},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"7222102f9919f8e961d4f1688425845fb7775ada","modified":1692703059503},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"6005907245dd74b153f03afdccfae1abb66bb482","modified":1692703059503},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1692703059503},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1692703059504},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1692703059503},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1692703059516},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a3323fcb11cfd3f3e21230737341beb5d76b40aa","modified":1692703059503},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1692703059516},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1692703059516},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1692703059502},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1692703059504},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"b8d95ac1851c37f1dce4b1dd4a1d3ffdff501a03","modified":1692703059504},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1692703059504},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1692703059505},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1692703059504},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1692703059505},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1692703059505},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1692703059505},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1692703059505},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"fc5a80707cf522378be3cf8638ef78bccc88c510","modified":1692703059505},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1692703059505},{"_id":"themes/butterfly/source/js/main.js","hash":"4fd1cd7a02dedcb686caf6149c35fd8e1fbcafc9","modified":1692703059516},{"_id":"themes/butterfly/source/css/var.styl","hash":"e1e37a2e932163886789b72624c7348545003f1d","modified":1692703059515},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1692703059483},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1692703059515},{"_id":"themes/butterfly/source/js/utils.js","hash":"13b2b02118a0f4ec2e9e0bb1b90f5b1a30a70f44","modified":1692703059517},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"a102a6cacf7b20183946a54580867a964f3674c4","modified":1692703059517},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1692703059484},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1692703059483},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1692703059484},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f5207840c96df6b26ad227433babca4f8c362624","modified":1692703059483},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1692703059484},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1692703059484},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1692703059484},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1692703059484},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1692703059485},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1692703059485},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1692703059485},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1692703059485},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1692703059485},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"3adb731465a4ab14529277fd7867889e0800ad16","modified":1692703059486},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1692703059486},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1692703059487},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1692703059487},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1692703059486},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1692703059487},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1692703059487},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1692703059487},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1692703059486},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1692703059499},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1692703059486},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1692703059488},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1692703059499},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1692703059499},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1692703059499},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1692703059499},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1692703059499},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1692703059500},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1692703059499},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1692703059499},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1692703059500},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1692703059500},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1692703059500},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ba94ceb40d7c81372a76103d958dcc2cc6a84f00","modified":1692703059500},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1692703059489},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1692703059496},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1692703059496},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1692703059493},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1692703059498},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"82bb447a5d045980789cf3f9de9d49cc32011b13","modified":1692703059496},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1692703059507},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"e43017dbc73e0ce95dcfcb9dfb4fcce0c1715dd4","modified":1692703059506},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"3969f599e8657adf8c3ce287d83f5d0a23f276a9","modified":1692703059508},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1692703059508},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1692703059508},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"20303c0dad28e5c5335ce2fa6582f1fafae5b628","modified":1692703059508},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1692703059508},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1692703059508},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1692703059509},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1692703059509},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1692703059509},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1692703059510},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"fc029f5e00d7904c0878efd20dd4e09fc55e1d03","modified":1692703059509},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1692703059510},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"431b4a252443e224872bd6b4f6aa76ed1679a82c","modified":1692703059506},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1692703059511},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"9893656128c347d1c09c90784627c84c979b326f","modified":1692703059506},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1692703059511},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1692703059511},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1692703059510},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1692703059511},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1692703059511},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"57d333ef47bfb8fd22da31f600527c9d91e8e322","modified":1692703059511},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1692703059512},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1692703059514},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"4c86c10f8ec0c8fb60b400a5a2f14699d3155be4","modified":1692703059510},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"9066a62e442affce3a923a06a90486bf9d364e0e","modified":1692703059510},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1692703059512},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1692703059512},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1692703059513},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1692703059513},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1692703059513},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1692703059513},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"cf90ea339fbb7f345212319627fcd68964024e40","modified":1692703059512},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1692703059513},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1692703059513},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1692703059514},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1692703059513},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"40e76d6da538cb3c1ef6b79ffc0adfa64fe6b8ba","modified":1692703059517},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"bbe930d8425bdaee2a5ba3cade42b617cee42934","modified":1692703059517},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1692703059514},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"0010c7a10d265c4329f0fd4db85b4a9ea7ba06b5","modified":1692703059488},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1692703059488},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1692703059490},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1692703059491},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1692703059490},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1692703059491},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"19b5cfa1f77781246e02967cefe149f19170e45f","modified":1692703059489},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1692703059489},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1692703059491},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1692703059489},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1692703059490},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1692703059490},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1692703059489},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"c42bbce31fcd8846cf3360f4c383dec9368daeba","modified":1692703059490},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1692703059490},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"b47698e153c73cb29286b19bec5ddd920cb7ffba","modified":1692703059491},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f8b73bc63ec1b45d86aa3891d8c81ef4d5980943","modified":1692703059491},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1692703059489},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"7c7fbe27d82becc9ee509765f1195c69f5864a0b","modified":1692703059492},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"b19b123df682b23491b17dcca386d79062cd8f6e","modified":1692703059491},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"1a20b11fa0e6b1943e9b4d81e197a25ca36af66d","modified":1692703059492},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"a56edeb1ce2f1b1fb0e866a30543f274b9f7d69e","modified":1692703059492},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"c5e131d65a7ad30f3cb98ac3b94cd2f6a94c22e9","modified":1692703059492},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4bb4cf58e219dfb8787273c931b1ea978b2ab88f","modified":1692703059493},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"386a2b371644c2682560733617561ba6e6bf9ab2","modified":1692703059493},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1692703059494},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1692703059493},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f618457d62ef35d78a31e7fb1e375a462f64b228","modified":1692703059493},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1692703059492},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1692703059494},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1692703059494},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1692703059492},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"6b0d28671afd5ed286a714f25ba16256a2e7d880","modified":1692703059493},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"4f8bd22c5c32d5430cbe08ab4e861b6f8b86f820","modified":1692703059495},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"da94966a9650ef3e4c69f3ee93758b30fa42cb78","modified":1692703059494},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"cfcfaed3a52fa47fff4cc65a053a2f025fb3b7b6","modified":1692703059495},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1692703059495},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"4fb998a05e51ef2302775945883307ee3039a544","modified":1692703059495},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"2f3af113713563e34b10bbe998cc15008f81c85a","modified":1692703059496},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"a6be932d1f64c6190f5d03b5b77fba09fa0fd6b8","modified":1692703059495},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"edd4ebf76a79fb74cfae03a286fab90f74324dbd","modified":1692703059495},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ce4ab79c85df9f77395269eb01e9a023d7f96376","modified":1692703059496},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1692703059497},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1692703059497},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"ba04174d977da988a1d49c06641262c413352346","modified":1692703059497},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"4b9c35375e0eb9cf99ad246d5ca838eca64a635d","modified":1692703059497},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1692703059497},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1692703059498},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1692703059507},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1692703059498},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1692703059497},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1692703059507},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1692703059507},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1692703059507},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1692703059507},{"_id":"source/_posts/slam_config/media/GetImage22.png","hash":"92cef1bfe1684448c8101b70d1cf185f89ad0787","modified":1672370024865},{"_id":"source/_posts/slam_config/media/GetImage23.png","hash":"17190170263421bf3abb0bc287bf861fe24aeec5","modified":1672370024866},{"_id":"source/media/GetImage24.png","hash":"b92304f21280b03ee19e7b3acbf83662c906f8e8","modified":1672370024867},{"_id":"source/_posts/slam_config/media/GetImage24.png","hash":"b92304f21280b03ee19e7b3acbf83662c906f8e8","modified":1672370024867},{"_id":"source/media/10e8e9317eca4b14b8682eb30fcbfd6c.png","hash":"f9a06dada720515c284cff725ad377b845d49883","modified":1692612777317},{"_id":"source/media/46ce665f69594feeae6a97b5bd605acc.png","hash":"741796ee1e5a503248e6c28553ebcc3686bc1751","modified":1692612948791},{"_id":"source/media/e3b2ae52a820296728e9a11336313dcd.png","hash":"f6c03fc190a9e827632dfad0e7216ea2f04c40ce","modified":1672370024831},{"_id":"source/media/f3bdcd5cb41b42a6bc70d01e7f62be57.png","hash":"08754fd435ecb1a34f7617e7f30c3e876d1a3594","modified":1692612764863},{"_id":"source/_posts/C++/media/e3b2ae52a820296728e9a11336313dcd.png","hash":"f6c03fc190a9e827632dfad0e7216ea2f04c40ce","modified":1672370024831},{"_id":"source/_posts/something_else/media/10e8e9317eca4b14b8682eb30fcbfd6c.png","hash":"f9a06dada720515c284cff725ad377b845d49883","modified":1692612777317},{"_id":"source/_posts/something_else/media/46ce665f69594feeae6a97b5bd605acc.png","hash":"741796ee1e5a503248e6c28553ebcc3686bc1751","modified":1692612948791},{"_id":"source/_posts/something_else/media/f3bdcd5cb41b42a6bc70d01e7f62be57.png","hash":"08754fd435ecb1a34f7617e7f30c3e876d1a3594","modified":1692612764863},{"_id":"source/media/f1a009c02af2e121f29b74a8c7899747.png","hash":"289afe0ae037b03569398f8d8b12f91fb94e61a8","modified":1672370024833},{"_id":"source/media/ea41ef6e45a44d1780182e7f1f483c60.png","hash":"e29069530b5a0797c6804206c6447c50ce47988c","modified":1672370024852},{"_id":"source/_posts/C++/media/f1a009c02af2e121f29b74a8c7899747.png","hash":"289afe0ae037b03569398f8d8b12f91fb94e61a8","modified":1672370024833},{"_id":"source/_posts/command/media/ea41ef6e45a44d1780182e7f1f483c60.png","hash":"e29069530b5a0797c6804206c6447c50ce47988c","modified":1672370024852},{"_id":"source/img/earth_sunrise_from_space-wallpaper-2560x1440.jpg","hash":"17f0d57373b73a27bf32c0c49a78154957e6eeb2","modified":1692928425320},{"_id":"source/_posts/slam_config/激光+imu标定(lidar_align​).pdf","hash":"6dfb4d5645057878bf97fed3e472b63714131a44","modified":1672370024879},{"_id":"source/img/beautifulmountain.png","hash":"01d52fa2920daa59b7bfcb7fc005030eff5295b7","modified":1692805861571},{"_id":"source/_posts/slam_config/激光雷达+相机标定.pdf","hash":"6c26274735bf5690761aedfb18dbb0108c838515","modified":1672370024885},{"_id":"source/img/landscape_54-wallpaper-1920x1080.jpg","hash":"a6bdabee513b0dd357bd4319a61525bb51cb32a5","modified":1692928468233},{"_id":"source/img/mountains_night_sky-wallpaper-2560x1440.jpg","hash":"5863d36513d6c5a5a4ae7e3fcbd8d4aa5cee6e18","modified":1692928366683},{"_id":"public/link/index.html","hash":"e49fdc6d209ee490eee69430e7ccabd7e5d0d667","modified":1692961161743},{"_id":"public/categories/index.html","hash":"71e8f952aa7e40978c1d1053278afb7000c45b94","modified":1692961161743},{"_id":"public/tags/index.html","hash":"3c4d06f58560a3bbfc0bc7f484c21110ab059ad9","modified":1692961161743},{"_id":"public/resource/index.html","hash":"4efa762948b30e6b667a8e6b3584b79c1fd88304","modified":1692961161743},{"_id":"public/software/index.html","hash":"59d2749672ae07a25a44c7d4f158dd779f63fcf4","modified":1692961161743},{"_id":"public/about/index.html","hash":"c1faaf77cb3823f306c84c74c55df5e0da1b3474","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/轨迹评估介绍与evo工具使用/index.html","hash":"9d0ee88450e6b5faabf00225675db9f447360a82","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/激光雷达与IMU联合标定(lidar_IMU_calib)/index.html","hash":"63d945df3f07753e27a452bb0a67852ea8453fa9","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/安装ZED以及ros驱动/index.html","hash":"c517bc3035ce6e07d0567bd8fc2f40bf698f4a20","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/安装VINS-Fusion/index.html","hash":"7aff0d9d20af299d4eb11d85e8ca9c510175b6e6","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/安装Rtabmap/index.html","hash":"fd58f0293c33060292c1fefa5eb710a4274b25c2","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/安装Orb-slam2/index.html","hash":"c870f49d20afe5a5c4724181bbc565fe28779e7c","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/安装LIO-SAM/index.html","hash":"9a12ab50f811b1e34ec06b204c2a43840d2918e5","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/基于ROS的opencv安装与卸载/index.html","hash":"62f33c89d2cbd3f9a09f4da28d02981cb08074fd","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/xavier装机文档/index.html","hash":"67b0f69af4319002736e154bb056a915ea4de2f1","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/ubuntu18.04系统下安装turtlebot2/index.html","hash":"9459e3746ef8121cf24f1d78c8a3562715ee9317","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/Ubuntu18.04环境配置/index.html","hash":"0e2a6130b79e140094b878769cd877f8be0c207a","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/turbot建图导航算法汇总/index.html","hash":"cb681d77b2f7e264a2ec4fa964d2c09edeca4010","modified":1692961161743},{"_id":"public/2023/08/25/slam_config/Rosdep_update_failed/index.html","hash":"6a2c9891dec89b4857d09799867c1bb3966620bb","modified":1692961161743},{"_id":"public/2023/08/25/something_else/获取Office2021安装包及相关激活工具/index.html","hash":"44dd24b4cbd3aa3ee27d727b27d1ef9036d4bd88","modified":1692961161743},{"_id":"public/2023/08/25/something_else/如何在Linux中使用Clash/index.html","hash":"cc83d2e639f0f71fa69fc29bdb890e77f6b1c191","modified":1692961161743},{"_id":"public/2023/08/25/something_else/stable-diffusion-webui手动安装详细步骤/index.html","hash":"aa25f8bf7f93780dbab0a9c9f9ddafafaddfa797","modified":1692961161743},{"_id":"public/2023/08/25/Linux/认识BASH这个Shell/index.html","hash":"2e8684a362646f84f59b616261a15f5104d3716b","modified":1692961161743},{"_id":"public/2023/08/25/Linux/Shell的变量功能/index.html","hash":"928f1d3a50f096e46b47ab218539fce2d7303a0c","modified":1692961161743},{"_id":"public/2023/08/25/README/index.html","hash":"0d0e57b4a5c8f492784d9de9bc072f8606807de3","modified":1692961161743},{"_id":"public/2023/08/25/QT/项目默认文件介绍/index.html","hash":"452447652d494cfb6bc3dc94986dae4dfddd2c48","modified":1692961161743},{"_id":"public/2023/08/25/QT/基于arm架构的NVIDIA_Xavier安装Qt/index.html","hash":"55211825a327d9de0232bddab5f6a2938ccf0d8e","modified":1692961161743},{"_id":"public/2023/08/25/QT/QT迁移项目后显示修改时间大于当前时间/index.html","hash":"eb754d50962c67952968fb18a298159711fd4ead","modified":1692961161743},{"_id":"public/2023/08/25/QT/Qt点击按钮进行页面的切换/index.html","hash":"19f601c550a78d789fbec55c3d6bed1a595d47ac","modified":1692961161743},{"_id":"public/2023/08/25/command/Xsens传感器调用/index.html","hash":"027d7c5b07f5860d731cf50dc67464209f7e8bc4","modified":1692961161743},{"_id":"public/2023/08/25/command/Velodyne_VLP16激光雷达调用/index.html","hash":"848b684ab3e7eba97a8a6619a7901ae618edafdb","modified":1692961161743},{"_id":"public/2023/08/25/command/Ubuntu-xavier/index.html","hash":"5f2bcec363e468d95c81bb1673610fd051b31ae6","modified":1692961161743},{"_id":"public/2023/08/25/command/ROS查看ZED节点效果/index.html","hash":"0f907b9282276d7d9cadfe2fcb6db0d624d42c39","modified":1692961161743},{"_id":"public/2023/08/25/command/Orb-slam2运行/index.html","hash":"772aad4df284e5a6d2a7ed684612c6048012dfc5","modified":1692961161743},{"_id":"public/2023/08/25/command/LIO-SAM运行/index.html","hash":"dbedbb0d1fa150d8244fcdb167d03b3397d1c7ed","modified":1692961161743},{"_id":"public/2023/08/25/command/Git中submodule的使用/index.html","hash":"7611ddef732f233e51e3e1de964b755f4e96f1a1","modified":1692961161743},{"_id":"public/2023/08/25/command/git_rebase的两种用法/index.html","hash":"24c6e97e66be12ed69a3b8bbf740f4b3635e3f09","modified":1692961161743},{"_id":"public/2023/08/25/command/Git_Command/index.html","hash":"d6e54fa5b8e60f65cc6fd5b349fbaa7307d18de3","modified":1692961161743},{"_id":"public/2023/08/25/command/git_cherry-pick/index.html","hash":"a8e949dc246e21250e3b4d9d570fc737670aaea4","modified":1692961161743},{"_id":"public/2023/08/24/C++/转换/index.html","hash":"2f0323f42629521233ae363537df796f43b3b4c0","modified":1692961161743},{"_id":"public/2023/08/24/C++/计算时间/index.html","hash":"66c2a3a369f24705b3150dd4358e852a6502d832","modified":1692961161743},{"_id":"public/2023/08/24/C++/类知识点/index.html","hash":"661879b90205c6474593a84736a34d44cd4cfc97","modified":1692961161743},{"_id":"public/2023/08/24/C++/构造函数的调用时机/index.html","hash":"c7e6cf7a9c7d418f532573b68279ab02f824a364","modified":1692961161743},{"_id":"public/2023/08/24/C++/数据类型字节数/index.html","hash":"ee785dbfeba1c0235134ad6be58068d90b91a3fe","modified":1692961161743},{"_id":"public/2023/08/24/C++/常规函数与内联函数/index.html","hash":"899b47be74747f2bcd10bf077ab4b3b06c34481f","modified":1692961161743},{"_id":"public/2023/08/24/C++/常用函数/index.html","hash":"58a5687cf432778ecf61a14e163de0581ef5ff02","modified":1692961161743},{"_id":"public/2023/08/24/C++/左值与右值/index.html","hash":"43e6cb1a8afed1e8316aa87ff5776281a35aaca3","modified":1692961161743},{"_id":"public/2023/08/24/C++/单例模式/index.html","hash":"82a94b460793d507d6f50827fbf6d009c8acedc8","modified":1692961161743},{"_id":"public/2023/08/24/C++/函数指针的定义方式/index.html","hash":"f1ff6d42c4183ea811296061c5c0048e9c3dabe7","modified":1692961161743},{"_id":"public/2023/08/24/C++/内联函数/index.html","hash":"d41bd461522152c06d53baa529cbb95746c22255","modified":1692961161743},{"_id":"public/2023/08/24/C++/二叉树遍历/index.html","hash":"5ae5067a9e7306f48013406921dbb4b19579a939","modified":1692961161743},{"_id":"public/2023/08/24/C++/string和cstring头文件的区别/index.html","hash":"f2aa41496c6d99c8e05d6581dd7952c76a5b22d4","modified":1692961161743},{"_id":"public/2023/08/24/C++/STL容器使用时机/index.html","hash":"8c60ff90105813491f8bd80b639917a4289b6653","modified":1692961161743},{"_id":"public/2023/08/24/slam_theory/ROS指令/index.html","hash":"06651d25e71a6781266108f423661f62591b3774","modified":1692961161743},{"_id":"public/2023/08/24/C++/Protocol_Buffers基本使用/index.html","hash":"1cd12762bf66fd5bd9c96a2473b76e2400a084df","modified":1692961161743},{"_id":"public/2023/08/24/C++/opencv常用api/index.html","hash":"4b758d657e895f389dc2786e45c08a68ee408ef2","modified":1692961161743},{"_id":"public/2023/08/24/C++/Opencv_Mat/index.html","hash":"e0e63a88af0062e88d3d6705ffe6c35745ee8f6d","modified":1692961161743},{"_id":"public/2023/08/24/C++/GoogleTest/index.html","hash":"d5c494150e855727072bf120c860df1bc2e49657","modified":1692961161743},{"_id":"public/2023/08/24/C++/gflags使用/index.html","hash":"35d5650ef4e61bde6482f2fd5b0fa752c3e536f6","modified":1692961161743},{"_id":"public/2023/08/24/C++/Find_package/index.html","hash":"5cb44ca95b356eee2110d23c141af8da14c70098","modified":1692961161743},{"_id":"public/2023/08/24/C++/Eigen几何模块的引入/index.html","hash":"78bace5330036d2e3218fc1d1131b7d489ef864e","modified":1692961161743},{"_id":"public/2023/08/24/C++/EigenGeometry/index.html","hash":"153f8e57d94fa486067c08803d0ebb73e727c5b8","modified":1692961161743},{"_id":"public/2023/08/24/C++/const成员函数/index.html","hash":"d42905905ba3bbfde7413df919580541a124e937","modified":1692961161743},{"_id":"public/2023/08/24/C++/CMakeLists简易模板/index.html","hash":"3720b18e3be45a4e66fc177c569d6a7de21c1e99","modified":1692961161743},{"_id":"public/2023/08/24/C++/CMakelists基础指令/index.html","hash":"bbebc547d3c6568cba1d0a051fb7742603279cce","modified":1692961161743},{"_id":"public/2023/08/24/C++/cin与get()getline()输入问题/index.html","hash":"a6b4d74d1844eefa3690991fb2e42235bfd2ac2a","modified":1692961161743},{"_id":"public/2023/08/24/C++/c++并发与多线程/index.html","hash":"be881bee3a6fc50ed45320d3948303183ed4ec94","modified":1692961161743},{"_id":"public/2023/08/24/C++/C++下const增强/index.html","hash":"5e3850c5ea140dd7be0d342b38c6b3744159e6c2","modified":1692961161743},{"_id":"public/2023/08/24/C++/C++11chrono库/index.html","hash":"408ce3ded9824e10a7ca48648c47c7d69014f802","modified":1692961161743},{"_id":"public/archives/index.html","hash":"c7540b087a97f6520dc5f961553120128d87bfd3","modified":1692961161743},{"_id":"public/archives/page/2/index.html","hash":"522b37b5fa52e64a95ed9a8fa0808f26ee97f731","modified":1692961161743},{"_id":"public/archives/page/3/index.html","hash":"11d953b0322ea90d654fe3a815ed84b716f5b5b4","modified":1692961161743},{"_id":"public/archives/page/4/index.html","hash":"e815e6025b5bcfe9f5669fe310acd8db268af9f8","modified":1692961161743},{"_id":"public/archives/page/5/index.html","hash":"6346cab55658ae6b482a4708b18fc761626a9bcd","modified":1692961161743},{"_id":"public/archives/page/6/index.html","hash":"9e3a59adfcf47f3c9a41221417af57f250c05622","modified":1692961161743},{"_id":"public/archives/page/7/index.html","hash":"2d885f915c01313df5bdd4f3230a62e1a3b0bcd4","modified":1692961161743},{"_id":"public/archives/2023/index.html","hash":"c3408196ba0eb8d76b93e00a1b2380d2dfb3829e","modified":1692961161743},{"_id":"public/archives/2023/page/2/index.html","hash":"1ef9600fe9f8b058bb191b87f5291064d3626e2b","modified":1692961161743},{"_id":"public/archives/2023/page/3/index.html","hash":"8342602894e9418a240b93483111ba8789749f19","modified":1692961161743},{"_id":"public/archives/2023/page/4/index.html","hash":"b0d62dff162e17f3e2c6104b25854bfac76ad4a1","modified":1692961161743},{"_id":"public/archives/2023/page/5/index.html","hash":"4e18beed23789a42d3b9382c9b53adc61cb56283","modified":1692961161743},{"_id":"public/archives/2023/page/6/index.html","hash":"81b221695cf1c3173a53e5cff5d02e5a6af9dd00","modified":1692961161743},{"_id":"public/archives/2023/page/7/index.html","hash":"993d7a8308bf01a34cc334582893fa306dd00c1a","modified":1692961161743},{"_id":"public/archives/2023/08/index.html","hash":"e5fadba62646955c3d5709c23082223269c5a095","modified":1692961161743},{"_id":"public/archives/2023/08/page/2/index.html","hash":"23bcaac5570c82ef0949847a6b0a8593b950a86e","modified":1692961161743},{"_id":"public/archives/2023/08/page/3/index.html","hash":"3a19265a6a0c20ad4348c7b0f7cca7ac08f3f550","modified":1692961161743},{"_id":"public/archives/2023/08/page/4/index.html","hash":"c54170004c3747bafe895778aac6f7a2ffe83744","modified":1692961161743},{"_id":"public/archives/2023/08/page/5/index.html","hash":"c830374215197196ae39ee2f272cfcaa0fb74640","modified":1692961161743},{"_id":"public/archives/2023/08/page/6/index.html","hash":"698c93fab501f5d7b85ff37e5afa148346a9f438","modified":1692961161743},{"_id":"public/archives/2023/08/page/7/index.html","hash":"1179154f12341e97190445e58a4c9712ad2eb961","modified":1692961161743},{"_id":"public/index.html","hash":"f52b5635ae580ca0bc4437fd5a41db7b9a0dc180","modified":1692961161743},{"_id":"public/page/2/index.html","hash":"7117389720c399fcf5b76932fc8b8388e63c8a46","modified":1692961161743},{"_id":"public/page/3/index.html","hash":"33b522537c21c3e0aa8ba58fa56b33e789fa5a9d","modified":1692961161743},{"_id":"public/page/4/index.html","hash":"64b1d1cba179e20057efd24218ce7eb2d4364266","modified":1692961161743},{"_id":"public/page/5/index.html","hash":"feab82f5e9126c229f5ec219bfc5b46a19d1705b","modified":1692961161743},{"_id":"public/page/6/index.html","hash":"b024c2727086602b7b573ce4e7d4609bb3fdf244","modified":1692961161743},{"_id":"public/page/7/index.html","hash":"595b00cf4fe52cbe0181890a000d0ccb5277368c","modified":1692961161743},{"_id":"public/tags/C/index.html","hash":"5c6d297d729cb2158d2e4632b435438f0f5de872","modified":1692961161743},{"_id":"public/tags/C/page/2/index.html","hash":"771631283065bcf40834df68ad463229dfe9c9f4","modified":1692961161743},{"_id":"public/tags/C/page/3/index.html","hash":"aca91340b23f65f07df1571971401c69cfa10999","modified":1692961161743},{"_id":"public/tags/CMakelists/index.html","hash":"799fb3420fc5fbe06221be809e4be29f02b05324","modified":1692961161743},{"_id":"public/tags/Eigen/index.html","hash":"ac241156a2eaf67cfe52123f343545ea95518da0","modified":1692961161743},{"_id":"public/tags/Opencv/index.html","hash":"e8614b89249b834354440074d671c40ae7935024","modified":1692961161743},{"_id":"public/tags/Qt/index.html","hash":"cec07286826a7ddf6186e7dba4534d280caca686","modified":1692961161743},{"_id":"public/tags/Xavier/index.html","hash":"df83a27aa69ef67f109b7751eb85f8cc1af70cd2","modified":1692961161743},{"_id":"public/tags/SLAM/index.html","hash":"a90a8d1470858c5f0b37067acebe75eaac8bdf8d","modified":1692961161743},{"_id":"public/tags/ROS/index.html","hash":"0d8ddd94a4ed0634d7c3a1b99b0ff3725c9cec0a","modified":1692961161743},{"_id":"public/tags/Shell/index.html","hash":"23773b6a63ef12a39be58dfe014f4f3fafb2b5e5","modified":1692961161743},{"_id":"public/tags/Jottings/index.html","hash":"3861c65bdbe31b3758384c8a0bda15ba5ddaefd8","modified":1692961161743},{"_id":"public/tags/Linux/index.html","hash":"e5fefd860fc09ec34abb55b97a284f6d6a3275b9","modified":1692961161743},{"_id":"public/tags/Clash/index.html","hash":"9adbf20c5204aeae0f92001ce29a4b65d82a2647","modified":1692961161743},{"_id":"public/tags/Git/index.html","hash":"fa6c293b04d6cb86ecfb95af12af73c2523aba03","modified":1692961161743},{"_id":"public/tags/LIO-SAM/index.html","hash":"227bc6ddf070d136c0f0e1748064cc07bcd1b02a","modified":1692961161743},{"_id":"public/tags/Velodyne/index.html","hash":"8aa27e40d05b4d80f3b94edb47683f7480fc91bb","modified":1692961161743},{"_id":"public/tags/Ubuntu/index.html","hash":"45466191ace75152ebc1395e50fc2d596af34d71","modified":1692961161743},{"_id":"public/tags/ORB-SLAM/index.html","hash":"b73fabb3d842312a1cdcfd08e2fb7312dd851724","modified":1692961161743},{"_id":"public/tags/Ros/index.html","hash":"5fe75e992cf76eeead78e246e3fd70e5eff4a3da","modified":1692961161743},{"_id":"public/tags/VINS/index.html","hash":"2d776333b8da2fc9b73f86f17572c69eb9c2d9bc","modified":1692961161743},{"_id":"public/tags/Rtabmap/index.html","hash":"abcdcbabeab7b715bd45ccdde35731ffe551829b","modified":1692961161743},{"_id":"public/tags/Calib/index.html","hash":"17611b18cb1a65039b6f961157555534778fb2f5","modified":1692961161743},{"_id":"public/tags/evo/index.html","hash":"a64b2087370e06f241dae3c3f435a6b2ccfc4af3","modified":1692961161743},{"_id":"public/categories/C/index.html","hash":"eed8269b9d14139512ddbdce242aebf9d1520004","modified":1692961161743},{"_id":"public/categories/C/page/2/index.html","hash":"24290e867b2c3dc1a8f1ddea527eb66634f724af","modified":1692961161743},{"_id":"public/categories/C/page/3/index.html","hash":"7b34efc207260345f1c31a121db28eaa6599e8c2","modified":1692961161743},{"_id":"public/categories/C/CMakelists/index.html","hash":"da0a346ae613bf4c65362355707362b8be426bf6","modified":1692961161743},{"_id":"public/categories/Qt/index.html","hash":"f041c0d2f3d9d612b3181b14c038feaf04da1743","modified":1692961161743},{"_id":"public/categories/SLAM/index.html","hash":"22f550919b8b08a98d6cff4bc6368a28b32b1b5a","modified":1692961161743},{"_id":"public/categories/Linux/index.html","hash":"4ea572eaa85a56ad077228117c88a39936985b67","modified":1692961161743},{"_id":"public/categories/Jottings/index.html","hash":"0860a2ef8f1702d0376ead980ff7c314e805c168","modified":1692961161743},{"_id":"public/categories/SLAM/ROS/index.html","hash":"ae9d3440c5b0a8bd1ce57fe23dd24de1c01fd348","modified":1692961161743},{"_id":"public/categories/command/index.html","hash":"324c5ef4b2f19a93b510641b417b496a5ceb6052","modified":1692961161743},{"_id":"public/categories/slam-config/index.html","hash":"c95b0edc7258276e91a9efa86bb9d4fdfdf76f54","modified":1692961161743},{"_id":"public/categories/slam-config/page/2/index.html","hash":"0ee6e7552532d33e45c52f04eba98b238cfc48ff","modified":1692961161743},{"_id":"public/img/avatar.png","hash":"16615605a9c2d46fba3e8c1bec94258649aa5a4b","modified":1692961161743},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1692961161743},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1692961161743},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1692961161743},{"_id":"public/img/avatar1.jpg","hash":"ad42266cd221268f96fd454c345ff7b7c93f7434","modified":1692961161743},{"_id":"public/img/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1692961161743},{"_id":"public/img/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1692961161743},{"_id":"public/img/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1692961161743},{"_id":"public/img/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1692961161743},{"_id":"public/img/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1692961161743},{"_id":"public/img/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1692961161743},{"_id":"public/media/12b959efcc454da5a15b9fdec493d61b.png","hash":"1b09c99d61837f03429836a2c62090ab29aeb5a0","modified":1692961161743},{"_id":"public/media/1GetImage.jpeg","hash":"11b5d0167a4d6454fc0f12f98b8f2d851ed3bfd0","modified":1692961161743},{"_id":"public/media/19a206038ee44136a2713e8809b6a870.png","hash":"a0ef943e39f63090193c9216971fed97b99db4d6","modified":1692961161743},{"_id":"public/media/1GetImage(1).png","hash":"c97b0b6a1fa0828ac9640b6027d381b989d35f34","modified":1692961161743},{"_id":"public/media/1dc08fc545592a16bdd4e69456f7603f.png","hash":"d331238b1d702f641d96a830a4a9658c8796e40d","modified":1692961161743},{"_id":"public/media/36efc2704d174acab598c4b9addd3694.png","hash":"5911774c8af960c35363409fcd5f2ac6ddfcf24b","modified":1692961161743},{"_id":"public/media/3d9e381b93fe4df790357680b15d4635.png","hash":"77263e78cc605e067e989530faf4798e1b9d3993","modified":1692961161743},{"_id":"public/media/3c5b8613a9e440fdbee8274d463a6427.png","hash":"1617310b9b4b321478b552426835dd0d10fde4cc","modified":1692961161743},{"_id":"public/media/41895494f7064942bc224d6b3783b77b.png","hash":"54681c333945171a36ee2a3b211cf8bccb3c480e","modified":1692961161743},{"_id":"public/media/474feca2a40949c0a9dc579122ef4ece.png","hash":"b7259beb60ea7b900797e71b136f690172be575b","modified":1692961161743},{"_id":"public/media/4e18cfce966b47a599ab6ae87e7cd069.png","hash":"ce082bd66df31e0da6aea9ea2a2357631b114355","modified":1692961161743},{"_id":"public/media/640","hash":"6c41f35a89c59248edd57f92feab724384f91a47","modified":1692961161743},{"_id":"public/media/84e9d962295b753134094e778499e2a0.png","hash":"658fb0b3661edfc262e25f6b121a2d78a08f550f","modified":1692961161743},{"_id":"public/media/91923e61b62c4872ab222d9b86800dbb.png","hash":"6d6261576557889d7cc82988636941cb37472199","modified":1692961161743},{"_id":"public/media/GetImage(1).png","hash":"1de2d0231623da0ff97baadce48ce89c9af422df","modified":1692961161743},{"_id":"public/media/899e5f1f4f1d4a5651454501e4b6a19c.png","hash":"b46020a05ef74367622f1564d63403b8e9e2bc20","modified":1692961161743},{"_id":"public/media/GetImage(3).png","hash":"7abd451098d9b44370f0195c929ae4cd67b9db96","modified":1692961161743},{"_id":"public/media/GetImage(2).png","hash":"7abd451098d9b44370f0195c929ae4cd67b9db96","modified":1692961161743},{"_id":"public/media/GetImage.png","hash":"f8820ce334ff2f8bcbcafa1aaf4703215b61c54a","modified":1692961161743},{"_id":"public/media/GetImage12.png","hash":"55cebb086c214eb11f285c8fa54a98171658aeb6","modified":1692961161743},{"_id":"public/media/GetImage13.png","hash":"0b3d06cc93bb223b7833cac9e54ad1560053b927","modified":1692961161743},{"_id":"public/media/GetImage15.png","hash":"dbc573ed9ee0f953d47b401c091e92dd5320ae86","modified":1692961161743},{"_id":"public/media/GetImage14.png","hash":"e06228c6cc55d1229e7b4b5f244d8d4bfebb6811","modified":1692961161743},{"_id":"public/media/GetImage16.png","hash":"f04b6071b2e2a94fba5012177236b2acf05ab5cd","modified":1692961161743},{"_id":"public/media/GetImage2.png","hash":"6a3028d847a45cdf7a9ff9505ed0b6d809f7d8c6","modified":1692961161743},{"_id":"public/media/GetImage17.png","hash":"6a7c5c1873d3061e078ce12c0890c56329202d5e","modified":1692961161743},{"_id":"public/media/GetImage5.jpeg","hash":"058ba8deb7a7b22c7e025f466f4ab9c642706b43","modified":1692961161743},{"_id":"public/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGI3ZTczMjExYjRjODliLnBuZw.png","hash":"e06df56cfb89ef3f7968e73494e92caeeea92aa2","modified":1692961161743},{"_id":"public/media/a7d7fe639765492abea6951ae25170c8.png","hash":"5728082a7acc936501516150b82512030de3f11f","modified":1692961161743},{"_id":"public/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iNDg4YzYyMDk0NTE2ZTBjLnBuZw.png","hash":"ae5ac019e222faa603a826ca9a57986f0b4da567","modified":1692961161743},{"_id":"public/media/b5d733fac8312c1270eb8bc87d58c555.png","hash":"b9e4dc24a6089ae3003b4075333fda22cf092d34","modified":1692961161743},{"_id":"public/media/dbebbbdaf4c6e4278a0ac2e62db89a81.png","hash":"f128934d4fefbae5d277ff1d74986b9802864a02","modified":1692961161743},{"_id":"public/media/c++const修饰的局部变量分配到符号表上.png","hash":"cb17f92ba81b69b161a914db030fadb5a030bf83","modified":1692961161743},{"_id":"public/media/d46f4d8198bf146ef7995d5708b2b454.png","hash":"7b77a4437aa192e3f65653bcc556b826001efb85","modified":1692961161743},{"_id":"public/media/e26b16e4dfa08f27a6be90000c53f58e.png","hash":"a810816dd008b2a6ac2dd0c922893d89ed814d67","modified":1692961161743},{"_id":"public/media/f700387f242b93abd4799aae4384a23a.png","hash":"4e33e0f0486f2a68b6e42839acb4c06d32252f21","modified":1692961161743},{"_id":"public/media/ppid.gif","hash":"463140397ab2ff43ca5006e94707b5525b438ed8","modified":1692961161743},{"_id":"public/media/var_01.gif","hash":"6b71c36582a5a82f023185a8520590aa143087c1","modified":1692961161743},{"_id":"public/media/image-20230423204921026.png","hash":"7f069387d557da36cf2b3381003aa8041953453f","modified":1692961161743},{"_id":"public/media/var_02.gif","hash":"ce43987995e0b6b20d86b568af29d094f383a9a0","modified":1692961161743},{"_id":"public/media/v2-8b77b08acc39bfc9cb569116ff6905e2_720w.webp","hash":"9f2ce4ba1d6f9fd1ed5a1017c61976f1cf159f88","modified":1692961161743},{"_id":"public/img/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1692961161743},{"_id":"public/img/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1692961161743},{"_id":"public/img/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1692961161743},{"_id":"public/img/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1692961161743},{"_id":"public/media/0320bash_1.jpg","hash":"15e433cf76da1580dde59dd5f2faacb1540945e8","modified":1692961161743},{"_id":"public/media/1303dcff987147d79a1340c6abe0233e.png","hash":"672c6859c53cb538157a6e598ca9bb7837d070fe","modified":1692961161743},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1692961161743},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1692961161743},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1692961161743},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1692961161743},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1692961161743},{"_id":"public/css/index.css","hash":"511ddcf7690dd03825e28a3421310f0058d0a05b","modified":1692961161743},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1692961161743},{"_id":"public/media/30f3d615cb354306a900383295ef8166.png","hash":"12b9b8478940a36ed26c3f91cea24ba581e8f2cb","modified":1692961161743},{"_id":"public/media/240693210.png","hash":"6081f2e06e903871e4e5fac0d7f82c4855cb0908","modified":1692961161743},{"_id":"public/media/69f20a18f8f1c1c329109e71c3456afc.png","hash":"d1f4e7d7b303b53e0b1f0b408cc93680ca6aef4c","modified":1692961161743},{"_id":"public/media/58a8c77bc1b373fbe5c744399c14d865.png","hash":"d4f05dad0dbf7ee9025df9aa9e1ffe46f84fc471","modified":1692961161743},{"_id":"public/media/7d3bd10620d3484cb3cb8fb8714935c1.png","hash":"4aacaa04bd748bee445eb4811ebde96a50aeb3a3","modified":1692961161743},{"_id":"public/media/7186eb58ef60fc61dc55f573da016c01.png","hash":"b1532e42947c534b5c0711f57dbceac3b655fb02","modified":1692961161743},{"_id":"public/media/90765ad142ae9c04739fde85d776f281.png","hash":"7e4a726eb9d110647923e89296b30a465775af70","modified":1692961161743},{"_id":"public/media/82e528c1d8aeb1e85113f6a7d826cdfd.png","hash":"b8c7f08b686bccbd1cc2a729492544a76f2840ea","modified":1692961161743},{"_id":"public/media/GetImage10.png","hash":"30ee170addcf30187ba90f0dc974a8901a67374a","modified":1692961161743},{"_id":"public/media/GetImage8.png","hash":"3cc4b08ddfbca0d8ec4bdbffc3a8d9bf5b58c84c","modified":1692961161743},{"_id":"public/media/a5f23af609c2c0cc2c6cfe51f1ca22f0.png","hash":"2993d43fb0126beaff642eb5d28ebd1870a37831","modified":1692961161743},{"_id":"public/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png","hash":"6278e38b49ac16264d4b0a28dbbedfc9a0c39661","modified":1692961161743},{"_id":"public/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGJhY2Q4N2Y0NDlkYmI4LnBuZw.png","hash":"098fb3bd15a3627b077f60de22df7724ae512842","modified":1692961161743},{"_id":"public/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS01NjYzNTk5ZTg0MzNmNWI4LnBuZw.png","hash":"032bde9ad75d0604fee9ee3f482385546a00b173","modified":1692961161743},{"_id":"public/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS04Nzc5YmMwOWE1M2ViNDBjLnBuZw.png","hash":"b34846923a38341adc41e607877bd3a53f3ea403","modified":1692961161743},{"_id":"public/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iZjE3MjU0NTIwOWI4N2UxLnBuZw.png","hash":"4fc06223e530b50b7c1929e6915d8ef82af8497d","modified":1692961161743},{"_id":"public/media/b871c543fa5142f08deee9b5fdb5bdf5.png","hash":"c39c81feb0fb2ea3aa80a01cef8cd78c13689411","modified":1692961161743},{"_id":"public/media/b80e022befbbb1f86356f354c265237d.png","hash":"96e542ef5a3e3532ede7d8c879f529960f73537c","modified":1692961161743},{"_id":"public/media/c98f8577d9e440afacc1f33900f90835.png","hash":"ef643a913ad6decd3b89433008951984a0a55e1c","modified":1692961161743},{"_id":"public/media/image-20230423204352633.png","hash":"2e77d442a391978d6d791b9aab7c3989fb09febf","modified":1692961161743},{"_id":"public/media/image-20230821184834825.png","hash":"64701436811a00957b8479c7a62b4cf0f36bc265","modified":1692961161743},{"_id":"public/media/1GetImage.png","hash":"137495eda4c675811b111b180465444c71c2a6de","modified":1692961161743},{"_id":"public/media/5ef388c5c9214b6c8fab73fbc87d0071.png","hash":"e4990124e8cecfceed1ef1c6cfb901f6b2c04c7c","modified":1692961161743},{"_id":"public/media/47e2a05c214d49f7bbe30c7d58bcd331.png","hash":"57fcb4eeda06631090bff02ffbcff58d7da53fc4","modified":1692961161743},{"_id":"public/media/GetImage(2).jpeg","hash":"3683e7dc1eb981bae63a61e998df410b32e14ce9","modified":1692961161743},{"_id":"public/media/GetImage1.png","hash":"670d34418fdf57fc38503deb6db28a7470c0c11e","modified":1692961161743},{"_id":"public/media/GetImage11.png","hash":"bab00657a7237588bbeafcb6d0026685d8fea832","modified":1692961161743},{"_id":"public/media/GetImage18.png","hash":"eac6bbed9b12b8f757186df47fb24bc92c029585","modified":1692961161743},{"_id":"public/media/GetImage20.png","hash":"2517dfed7d394d4bda7c69ba39af8de9ee49db61","modified":1692961161743},{"_id":"public/media/GetImage19.png","hash":"7d8ea229ad1b368b3dfd500c69dd48929f90f4bc","modified":1692961161743},{"_id":"public/media/GetImage21.png","hash":"20f0aa27fda8f7e2174f8a28bd8d25b377ce98d7","modified":1692961161743},{"_id":"public/media/a8aee10bbf754abf9bb85b3ad2ac05f9.png","hash":"c6b39b39e7ba23b9f83e9698046c777880848feb","modified":1692961161743},{"_id":"public/media/GetImage9.png","hash":"26c9444fd26624d5d43e9bad1d0c09c3a5e8e8c3","modified":1692961161743},{"_id":"public/media/GetImage6.png","hash":"cded0485445c84cafd9573f137db3933b7fcd196","modified":1692961161743},{"_id":"public/media/d4517e01d32c4567bd9327c728938916.png","hash":"867d270bb6e291196ae1b22fb16dff76fdf9970d","modified":1692961161743},{"_id":"public/media/c48e58454fc351e9fe69d2891a001cae.png","hash":"c6729861a1661c9bae092fe7e9b9866bacc34540","modified":1692961161743},{"_id":"public/media/image-20230821183317880.png","hash":"a1eac37ada64c21c0cb29a4e4b6a103c1ce10c04","modified":1692961161743},{"_id":"public/media/180ccb58ffd741a589b0b44079f2c589.png","hash":"e03792cdc0f1206a72c00c9e2a7d7bae2166e9c0","modified":1692961161743},{"_id":"public/media/1f6646aa0ab8a10bff97905f3abc2bd0.png","hash":"36d23002a5c52aa1344ef3ded85ed62a434c2afb","modified":1692961161743},{"_id":"public/media/6a677661b9aa46c8919bafb2aa6fce52.png","hash":"3b8fa60a359cc555d090b3e4b7397baf0f35467d","modified":1692961161743},{"_id":"public/media/GetImage.jpeg","hash":"60ff547b36f702e92d5eeab9ea295fab4e8eba10","modified":1692961161743},{"_id":"public/media/GetImage3.png","hash":"374fbfffe8a7823fd8f685beddacbc64b410cea2","modified":1692961161743},{"_id":"public/media/GetImage4.png","hash":"45275028e1c2aa308f732c1e10555b843f3793d5","modified":1692961161743},{"_id":"public/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1hOWIzZmMyZWQxNmY2MWU1LnBuZw","hash":"aa71e1867d6a1938bd91df4723d7b07481396d01","modified":1692961161743},{"_id":"public/media/c58d9bc86cac4a9f8b993aefaebe4151.png","hash":"3f6ce17264c89869583e0ed2b8003599f23eda24","modified":1692961161743},{"_id":"public/media/e2030cb9f4954d5f9d38a93f20c3265a.png","hash":"ec4990aa656bd41eb6d0cf68b1a6d8318ddfa364","modified":1692961161743},{"_id":"public/media/GetImage(1).jpeg","hash":"c769494687cd0771344c5f4749805c14bb522393","modified":1692961161743},{"_id":"public/media/GetImage7.png","hash":"c933910654687fce4962adbc33b02b36eb95d4a6","modified":1692961161743},{"_id":"public/media/f9cc100e8e0f482fb801795123574c78.png","hash":"c3089dc2d0324a7a23aa40e086cf709bbd7d7164","modified":1692961161743},{"_id":"public/media/aed0d72bbc3449959f6423e074167458.png","hash":"9e8b9b8d14c548b856860970bfcfbc79db67a3c8","modified":1692961161743},{"_id":"public/media/4c410326f68b9c901ae092e6d1bee594.png","hash":"b69d76fc3ceb2c42c09c31b643de13f661cdcc9a","modified":1692961161743},{"_id":"public/media/GetImage22.png","hash":"92cef1bfe1684448c8101b70d1cf185f89ad0787","modified":1692961161743},{"_id":"public/media/GetImage23.png","hash":"17190170263421bf3abb0bc287bf861fe24aeec5","modified":1692961161743},{"_id":"public/media/fda7277fe1a8ca54433d8f2a47a26758.png","hash":"8e917f3797bebcf2a330bbc01650bb891e508b79","modified":1692961161743},{"_id":"public/media/ad0e5659850d4708b89e93f9340c9e9e.png","hash":"6ae5f23dcbac1b6dda4a2a7a96916fb296a99040","modified":1692961161743},{"_id":"public/media/GetImage24.png","hash":"b92304f21280b03ee19e7b3acbf83662c906f8e8","modified":1692961161743},{"_id":"public/media/10e8e9317eca4b14b8682eb30fcbfd6c.png","hash":"f9a06dada720515c284cff725ad377b845d49883","modified":1692961161743},{"_id":"public/media/46ce665f69594feeae6a97b5bd605acc.png","hash":"741796ee1e5a503248e6c28553ebcc3686bc1751","modified":1692961161743},{"_id":"public/media/e3b2ae52a820296728e9a11336313dcd.png","hash":"f6c03fc190a9e827632dfad0e7216ea2f04c40ce","modified":1692961161743},{"_id":"public/media/f3bdcd5cb41b42a6bc70d01e7f62be57.png","hash":"08754fd435ecb1a34f7617e7f30c3e876d1a3594","modified":1692961161743},{"_id":"public/media/ea41ef6e45a44d1780182e7f1f483c60.png","hash":"e29069530b5a0797c6804206c6447c50ce47988c","modified":1692961161743},{"_id":"public/media/f1a009c02af2e121f29b74a8c7899747.png","hash":"289afe0ae037b03569398f8d8b12f91fb94e61a8","modified":1692961161743},{"_id":"public/img/earth_sunrise_from_space-wallpaper-2560x1440.jpg","hash":"17f0d57373b73a27bf32c0c49a78154957e6eeb2","modified":1692961161743},{"_id":"public/img/beautifulmountain.png","hash":"01d52fa2920daa59b7bfcb7fc005030eff5295b7","modified":1692961161743},{"_id":"public/img/landscape_54-wallpaper-1920x1080.jpg","hash":"a6bdabee513b0dd357bd4319a61525bb51cb32a5","modified":1692961161743},{"_id":"public/img/mountains_night_sky-wallpaper-2560x1440.jpg","hash":"5863d36513d6c5a5a4ae7e3fcbd8d4aa5cee6e18","modified":1692961161743}],"Category":[{"name":"C++","_id":"cllqhd66o0006gcr7e6og2zm7"},{"name":"CMakelists","parent":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66u000lgcr7giekcomx"},{"name":"Qt","_id":"cllqhd674002pgcr71qy598em"},{"name":"SLAM","_id":"cllqhd679003bgcr70sgd4md9"},{"name":"Linux","_id":"cllqhd67a003kgcr7bmb2asx2"},{"name":"Jottings","_id":"cllqhd67b003sgcr70age5sfr"},{"name":"ROS","parent":"cllqhd679003bgcr70sgd4md9","_id":"cllqhd67d0048gcr7gi5ceata"},{"name":"command","_id":"cllqhd67f004ogcr7ck03bdfw"},{"name":"slam_config","_id":"cllqhd67m0065gcr74fj6ftuo"}],"Data":[{"_id":"link","data":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}],"Page":[{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2018-06-07 22:17:49\ntype: \"link\"\n---\n","updated":"2023-08-22T14:08:38.936Z","path":"link/index.html","comments":1,"layout":"page","_id":"cllqhd66h0000gcr74tua490c","content":"","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":""},{"title":"Categories","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---","updated":"2023-08-25T10:40:49.149Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cllqhd66l0002gcr7aaab86o0","content":"","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-1.png","cover_type":"img","excerpt":"","more":""},{"title":"Tags","date":"2018-01-04T16:00:00.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\norderby: random\norder: 1\n---","updated":"2023-08-25T10:41:47.088Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cllqhd66n0004gcr7d7vb0nt4","content":"","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-5.png","cover_type":"img","excerpt":"","more":""},{"title":"Resource","date":"2023-08-25T06:06:08.000Z","_content":"\n# Resource\n\n一些可能有用的电子书籍和学习资源：\n\n## Online Learning\n\n- 文献检索：研究僧的好伴侣，[Sci-Hub](https://www.sci-hub.ren/)和[arXiv](https://arxiv.org/)，基本顶会论文都可以免费下载阅读。\n- [Paperswithcode](https://paperswithcode.com/)：作为AI工程师（cv工程师）中的一员，这个网站可以找到许多附带开源代码的高质量论文。\n- [*Z-Library*](https://zh.1lib.education/)：这个数字图书馆可以搜索下载到各种各样的电子书，十分强大，而且免费，不过需要科学上网才能访问。\n- EbookFoundation开源了一个仓库[free-programming-books](https://github.com/EbookFoundation/free-programming-books)，在这里你可以找到许多编程类电子书籍和开源课程。\n- [awesome-cs-books](https://github.com/imarvinle/awesome-cs-books)这个仓库包含了许多经典计算机书籍： 编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、程序员数学、测试、前端开发、后台开发、网络编程、Linux使用及内核、求职面试、算法与数据结构 安卓、IOS、数据库、Redis等主流的编程学习书籍。\n- [HelloGitHub](https://github.com/521xueweihan/HelloGitHub)：HelloGitHub 每个月定期分享 GitHub 上有趣、入门级的开源项目。包含多种编程语言，有助于编程语言的学习。\n- [基本素养](https://github.com/ahangchen/How-to-Be-A-Programmer-CN)：当然除了编程语言外，想要成长为一个合格的程序员还是需要具备许多其他的基本素养。\n- [数据结构](https://github.com/youngyangyang04/leetcode-master)：数据结构很重要哦，毕竟也要去面试嘛，还有一个[算法可视化平台](https://github.com/algorithm-visualizer/algorithm-visualizer)，极大地提高了我自己的算法学习理解效率。\n- [鸟哥的私房菜](http://cn.linux.vbird.org/linux_basic/linux_basic.php#part3)：这本书应该是不少linux开发者必读书籍吧。\n- [Linux命令大全](https://www.linuxcool.com/)：当然了鸟哥的私房菜实在是过于详细，平常的学习工作中我们可能只是想要简单快速查一下某一个命令的用法。 \n- [PPT模板](https://www.1ppt.com/)：面向ppt编程（手动狗头），怎么可以没有好用的模板呢。\n\n## Electronic Book\n\n- [视觉SLAM](https://pan.baidu.com/s/1yFiZ_fqGnKi7ExvMyvChgQ)\t提取码：`1314`\n- [深度学习](https://pan.baidu.com/s/12Y30nfWqwDqeXz6sCvZgTw)\t提取码：`1314`\n- [C++](https://pan.baidu.com/s/1DsBbgs2GZlxJel5cXpIOYQ)\t提取码：`1314`\n- [Linux](https://pan.baidu.com/s/1f_jGoBzd1ZihH_OhGTC82w)\t提取码：`1314`\n- [Python](https://pan.baidu.com/s/1m7_FToasf8VPln4-8jilLw)\t提取码：`1314`\n- [操作系统](https://pan.baidu.com/s/17eCDh-8gxEpyBoNORodYaA)\t提取码：`1314`\n- [分布式系统](https://pan.baidu.com/s/1GaSVK03EPcnQdH4BhcxZZA)\t提取码：`1314`\n- [后端组件](https://pan.baidu.com/s/1drB61wzhg7NG5L3KhOmrXw)\t提取码：`1314`\n- [计算机网络](https://pan.baidu.com/s/1qBYrPLhRpF_dhPXOQBRNZQ)\t提取码：`1314`\n- [计算机系统知识](https://pan.baidu.com/s/1I54KS6usF89NhRgagSGjeQ)\t提取码：`1314`\n- [前端&全栈](https://pan.baidu.com/s/1pKy4BJKc7SpRGq0Js-0t_A)\t提取码：`1314`\n- [数据库](https://pan.baidu.com/s/1eWlvbY0MrqRF2fI6p7kb4g)\t提取码：`1314`\n- [算法和数据结构](https://pan.baidu.com/s/1Xl8U-exf7lb2b9ss593_2g)\t提取码：`1314`\n- [网络编程&服务器开发](https://pan.baidu.com/s/1diwvkJGb2CFkonj40yvtew)\t提取码：`1314`\n- [面经](https://pan.baidu.com/s/1WGa1TRnHh3m1wmV4F7EkGA)\t提取码：`1314`\n- [面试准备](https://pan.baidu.com/s/1FCYJ-TDRfKKkHlQWSgmL3g)\t提取码：`1314`\n\n## Other\n\n- [科学上网](https://github.com/shadowsocks/shadowsocks-windows)：一个程序员咋能不会科学上网捏，国内的程序员论坛实在是不敢恭维。这里推荐一个比较不错的，至于怎么用，请自己去学习吧^_^。","source":"resource/index.md","raw":"---\ntitle: Resource\ndate: 2023-08-25 14:06:08\n---\n\n# Resource\n\n一些可能有用的电子书籍和学习资源：\n\n## Online Learning\n\n- 文献检索：研究僧的好伴侣，[Sci-Hub](https://www.sci-hub.ren/)和[arXiv](https://arxiv.org/)，基本顶会论文都可以免费下载阅读。\n- [Paperswithcode](https://paperswithcode.com/)：作为AI工程师（cv工程师）中的一员，这个网站可以找到许多附带开源代码的高质量论文。\n- [*Z-Library*](https://zh.1lib.education/)：这个数字图书馆可以搜索下载到各种各样的电子书，十分强大，而且免费，不过需要科学上网才能访问。\n- EbookFoundation开源了一个仓库[free-programming-books](https://github.com/EbookFoundation/free-programming-books)，在这里你可以找到许多编程类电子书籍和开源课程。\n- [awesome-cs-books](https://github.com/imarvinle/awesome-cs-books)这个仓库包含了许多经典计算机书籍： 编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、程序员数学、测试、前端开发、后台开发、网络编程、Linux使用及内核、求职面试、算法与数据结构 安卓、IOS、数据库、Redis等主流的编程学习书籍。\n- [HelloGitHub](https://github.com/521xueweihan/HelloGitHub)：HelloGitHub 每个月定期分享 GitHub 上有趣、入门级的开源项目。包含多种编程语言，有助于编程语言的学习。\n- [基本素养](https://github.com/ahangchen/How-to-Be-A-Programmer-CN)：当然除了编程语言外，想要成长为一个合格的程序员还是需要具备许多其他的基本素养。\n- [数据结构](https://github.com/youngyangyang04/leetcode-master)：数据结构很重要哦，毕竟也要去面试嘛，还有一个[算法可视化平台](https://github.com/algorithm-visualizer/algorithm-visualizer)，极大地提高了我自己的算法学习理解效率。\n- [鸟哥的私房菜](http://cn.linux.vbird.org/linux_basic/linux_basic.php#part3)：这本书应该是不少linux开发者必读书籍吧。\n- [Linux命令大全](https://www.linuxcool.com/)：当然了鸟哥的私房菜实在是过于详细，平常的学习工作中我们可能只是想要简单快速查一下某一个命令的用法。 \n- [PPT模板](https://www.1ppt.com/)：面向ppt编程（手动狗头），怎么可以没有好用的模板呢。\n\n## Electronic Book\n\n- [视觉SLAM](https://pan.baidu.com/s/1yFiZ_fqGnKi7ExvMyvChgQ)\t提取码：`1314`\n- [深度学习](https://pan.baidu.com/s/12Y30nfWqwDqeXz6sCvZgTw)\t提取码：`1314`\n- [C++](https://pan.baidu.com/s/1DsBbgs2GZlxJel5cXpIOYQ)\t提取码：`1314`\n- [Linux](https://pan.baidu.com/s/1f_jGoBzd1ZihH_OhGTC82w)\t提取码：`1314`\n- [Python](https://pan.baidu.com/s/1m7_FToasf8VPln4-8jilLw)\t提取码：`1314`\n- [操作系统](https://pan.baidu.com/s/17eCDh-8gxEpyBoNORodYaA)\t提取码：`1314`\n- [分布式系统](https://pan.baidu.com/s/1GaSVK03EPcnQdH4BhcxZZA)\t提取码：`1314`\n- [后端组件](https://pan.baidu.com/s/1drB61wzhg7NG5L3KhOmrXw)\t提取码：`1314`\n- [计算机网络](https://pan.baidu.com/s/1qBYrPLhRpF_dhPXOQBRNZQ)\t提取码：`1314`\n- [计算机系统知识](https://pan.baidu.com/s/1I54KS6usF89NhRgagSGjeQ)\t提取码：`1314`\n- [前端&全栈](https://pan.baidu.com/s/1pKy4BJKc7SpRGq0Js-0t_A)\t提取码：`1314`\n- [数据库](https://pan.baidu.com/s/1eWlvbY0MrqRF2fI6p7kb4g)\t提取码：`1314`\n- [算法和数据结构](https://pan.baidu.com/s/1Xl8U-exf7lb2b9ss593_2g)\t提取码：`1314`\n- [网络编程&服务器开发](https://pan.baidu.com/s/1diwvkJGb2CFkonj40yvtew)\t提取码：`1314`\n- [面经](https://pan.baidu.com/s/1WGa1TRnHh3m1wmV4F7EkGA)\t提取码：`1314`\n- [面试准备](https://pan.baidu.com/s/1FCYJ-TDRfKKkHlQWSgmL3g)\t提取码：`1314`\n\n## Other\n\n- [科学上网](https://github.com/shadowsocks/shadowsocks-windows)：一个程序员咋能不会科学上网捏，国内的程序员论坛实在是不敢恭维。这里推荐一个比较不错的，至于怎么用，请自己去学习吧^_^。","updated":"2023-08-25T10:40:10.502Z","path":"resource/index.html","comments":1,"layout":"page","_id":"cllqhd66p0008gcr7hxov9sbm","content":"<h1 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h1><p>一些可能有用的电子书籍和学习资源：</p>\n<h2 id=\"Online-Learning\"><a href=\"#Online-Learning\" class=\"headerlink\" title=\"Online Learning\"></a>Online Learning</h2><ul>\n<li>文献检索：研究僧的好伴侣，<a href=\"https://www.sci-hub.ren/\">Sci-Hub</a>和<a href=\"https://arxiv.org/\">arXiv</a>，基本顶会论文都可以免费下载阅读。</li>\n<li><a href=\"https://paperswithcode.com/\">Paperswithcode</a>：作为AI工程师（cv工程师）中的一员，这个网站可以找到许多附带开源代码的高质量论文。</li>\n<li><a href=\"https://zh.1lib.education/\"><em>Z-Library</em></a>：这个数字图书馆可以搜索下载到各种各样的电子书，十分强大，而且免费，不过需要科学上网才能访问。</li>\n<li>EbookFoundation开源了一个仓库<a href=\"https://github.com/EbookFoundation/free-programming-books\">free-programming-books</a>，在这里你可以找到许多编程类电子书籍和开源课程。</li>\n<li><a href=\"https://github.com/imarvinle/awesome-cs-books\">awesome-cs-books</a>这个仓库包含了许多经典计算机书籍： 编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、程序员数学、测试、前端开发、后台开发、网络编程、Linux使用及内核、求职面试、算法与数据结构 安卓、IOS、数据库、Redis等主流的编程学习书籍。</li>\n<li><a href=\"https://github.com/521xueweihan/HelloGitHub\">HelloGitHub</a>：HelloGitHub 每个月定期分享 GitHub 上有趣、入门级的开源项目。包含多种编程语言，有助于编程语言的学习。</li>\n<li><a href=\"https://github.com/ahangchen/How-to-Be-A-Programmer-CN\">基本素养</a>：当然除了编程语言外，想要成长为一个合格的程序员还是需要具备许多其他的基本素养。</li>\n<li><a href=\"https://github.com/youngyangyang04/leetcode-master\">数据结构</a>：数据结构很重要哦，毕竟也要去面试嘛，还有一个<a href=\"https://github.com/algorithm-visualizer/algorithm-visualizer\">算法可视化平台</a>，极大地提高了我自己的算法学习理解效率。</li>\n<li><a href=\"http://cn.linux.vbird.org/linux_basic/linux_basic.php#part3\">鸟哥的私房菜</a>：这本书应该是不少linux开发者必读书籍吧。</li>\n<li><a href=\"https://www.linuxcool.com/\">Linux命令大全</a>：当然了鸟哥的私房菜实在是过于详细，平常的学习工作中我们可能只是想要简单快速查一下某一个命令的用法。 </li>\n<li><a href=\"https://www.1ppt.com/\">PPT模板</a>：面向ppt编程（手动狗头），怎么可以没有好用的模板呢。</li>\n</ul>\n<h2 id=\"Electronic-Book\"><a href=\"#Electronic-Book\" class=\"headerlink\" title=\"Electronic Book\"></a>Electronic Book</h2><ul>\n<li><a href=\"https://pan.baidu.com/s/1yFiZ_fqGnKi7ExvMyvChgQ\">视觉SLAM</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/12Y30nfWqwDqeXz6sCvZgTw\">深度学习</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1DsBbgs2GZlxJel5cXpIOYQ\">C++</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1f_jGoBzd1ZihH_OhGTC82w\">Linux</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1m7_FToasf8VPln4-8jilLw\">Python</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/17eCDh-8gxEpyBoNORodYaA\">操作系统</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1GaSVK03EPcnQdH4BhcxZZA\">分布式系统</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1drB61wzhg7NG5L3KhOmrXw\">后端组件</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1qBYrPLhRpF_dhPXOQBRNZQ\">计算机网络</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1I54KS6usF89NhRgagSGjeQ\">计算机系统知识</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1pKy4BJKc7SpRGq0Js-0t_A\">前端&amp;全栈</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1eWlvbY0MrqRF2fI6p7kb4g\">数据库</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1Xl8U-exf7lb2b9ss593_2g\">算法和数据结构</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1diwvkJGb2CFkonj40yvtew\">网络编程&amp;服务器开发</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1WGa1TRnHh3m1wmV4F7EkGA\">面经</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1FCYJ-TDRfKKkHlQWSgmL3g\">面试准备</a>\t提取码：<code>1314</code></li>\n</ul>\n<h2 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h2><ul>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows\">科学上网</a>：一个程序员咋能不会科学上网捏，国内的程序员论坛实在是不敢恭维。这里推荐一个比较不错的，至于怎么用，请自己去学习吧^_^。</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-5.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h1><p>一些可能有用的电子书籍和学习资源：</p>\n<h2 id=\"Online-Learning\"><a href=\"#Online-Learning\" class=\"headerlink\" title=\"Online Learning\"></a>Online Learning</h2><ul>\n<li>文献检索：研究僧的好伴侣，<a href=\"https://www.sci-hub.ren/\">Sci-Hub</a>和<a href=\"https://arxiv.org/\">arXiv</a>，基本顶会论文都可以免费下载阅读。</li>\n<li><a href=\"https://paperswithcode.com/\">Paperswithcode</a>：作为AI工程师（cv工程师）中的一员，这个网站可以找到许多附带开源代码的高质量论文。</li>\n<li><a href=\"https://zh.1lib.education/\"><em>Z-Library</em></a>：这个数字图书馆可以搜索下载到各种各样的电子书，十分强大，而且免费，不过需要科学上网才能访问。</li>\n<li>EbookFoundation开源了一个仓库<a href=\"https://github.com/EbookFoundation/free-programming-books\">free-programming-books</a>，在这里你可以找到许多编程类电子书籍和开源课程。</li>\n<li><a href=\"https://github.com/imarvinle/awesome-cs-books\">awesome-cs-books</a>这个仓库包含了许多经典计算机书籍： 编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、程序员数学、测试、前端开发、后台开发、网络编程、Linux使用及内核、求职面试、算法与数据结构 安卓、IOS、数据库、Redis等主流的编程学习书籍。</li>\n<li><a href=\"https://github.com/521xueweihan/HelloGitHub\">HelloGitHub</a>：HelloGitHub 每个月定期分享 GitHub 上有趣、入门级的开源项目。包含多种编程语言，有助于编程语言的学习。</li>\n<li><a href=\"https://github.com/ahangchen/How-to-Be-A-Programmer-CN\">基本素养</a>：当然除了编程语言外，想要成长为一个合格的程序员还是需要具备许多其他的基本素养。</li>\n<li><a href=\"https://github.com/youngyangyang04/leetcode-master\">数据结构</a>：数据结构很重要哦，毕竟也要去面试嘛，还有一个<a href=\"https://github.com/algorithm-visualizer/algorithm-visualizer\">算法可视化平台</a>，极大地提高了我自己的算法学习理解效率。</li>\n<li><a href=\"http://cn.linux.vbird.org/linux_basic/linux_basic.php#part3\">鸟哥的私房菜</a>：这本书应该是不少linux开发者必读书籍吧。</li>\n<li><a href=\"https://www.linuxcool.com/\">Linux命令大全</a>：当然了鸟哥的私房菜实在是过于详细，平常的学习工作中我们可能只是想要简单快速查一下某一个命令的用法。 </li>\n<li><a href=\"https://www.1ppt.com/\">PPT模板</a>：面向ppt编程（手动狗头），怎么可以没有好用的模板呢。</li>\n</ul>\n<h2 id=\"Electronic-Book\"><a href=\"#Electronic-Book\" class=\"headerlink\" title=\"Electronic Book\"></a>Electronic Book</h2><ul>\n<li><a href=\"https://pan.baidu.com/s/1yFiZ_fqGnKi7ExvMyvChgQ\">视觉SLAM</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/12Y30nfWqwDqeXz6sCvZgTw\">深度学习</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1DsBbgs2GZlxJel5cXpIOYQ\">C++</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1f_jGoBzd1ZihH_OhGTC82w\">Linux</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1m7_FToasf8VPln4-8jilLw\">Python</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/17eCDh-8gxEpyBoNORodYaA\">操作系统</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1GaSVK03EPcnQdH4BhcxZZA\">分布式系统</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1drB61wzhg7NG5L3KhOmrXw\">后端组件</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1qBYrPLhRpF_dhPXOQBRNZQ\">计算机网络</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1I54KS6usF89NhRgagSGjeQ\">计算机系统知识</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1pKy4BJKc7SpRGq0Js-0t_A\">前端&amp;全栈</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1eWlvbY0MrqRF2fI6p7kb4g\">数据库</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1Xl8U-exf7lb2b9ss593_2g\">算法和数据结构</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1diwvkJGb2CFkonj40yvtew\">网络编程&amp;服务器开发</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1WGa1TRnHh3m1wmV4F7EkGA\">面经</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1FCYJ-TDRfKKkHlQWSgmL3g\">面试准备</a>\t提取码：<code>1314</code></li>\n</ul>\n<h2 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h2><ul>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows\">科学上网</a>：一个程序员咋能不会科学上网捏，国内的程序员论坛实在是不敢恭维。这里推荐一个比较不错的，至于怎么用，请自己去学习吧^_^。</li>\n</ul>\n"},{"title":"Software","date":"2023-08-25T06:05:09.000Z","_content":"\n# Software\n\n一些学习软件（白嫖^_^，仅供自身学习使用，请勿外传，亲测无病毒，放心使用！）\n\n- ### Typora\n\n  ​\t作为一名程序员，强烈建议大家使用Markdown语法编写文档。它允许人们使用纯文本格式编写文档，由于 Markdown 的轻量化、易读易写特性，许多网站都广泛使用 Markdown 来撰写帮助文档， 如 GitHub等， Markdown格式同步github远程仓库十分方便，不用担心windows层出不穷的格式错误。这里推荐一款Markdown语法软件Typora，由于最近该软件开始收费了，本着学习（白嫖）的精神，因此保存了不收费的一个版本。\n\n  - [Windows版本](https://pan.baidu.com/s/14Fftz3ECigAh-abV-7VHrw)\t提取码：`1314`\n  - [Linux版本](https://pan.baidu.com/s/1rAC-yfhA9-UNVo0y0AIxyg)\t提取码：`1314`\n\n\n\n- ### XMind\n\n  ​\t最好的思维导图软件，没有之一，可惜高级功能要收费，这里分享一个破解版，可以无水印导出。下载安装直接使用，破解版软件不能登录不用我多说吧，亲测无病毒，放心使用。\n\n  - [Windows版本](https://pan.baidu.com/s/1oFZS5czuOF2hEbw1LfxgIw)\t提取码：`1314`\n  - [Linux版本](https://pan.baidu.com/s/1eiOgY8p2Ytlt8AaEUIHelQ)\t提取码：`1314`\n  - 流氓软件默认安装c盘，安装好后将破解包里的app.asar文件复制替换到Program Files/XMind/resources目录下即可。\t\n\n\n\n- ### MATLAB\n\n  ​\tMATLAB，工科生居家旅行必备。有什么好说的吗？没什么好说的吧......\n\n  - [MATLAB](https://pan.baidu.com/s/1aH7OmFjjGApE-v0Md8aB8w)\t提取码：`1314`\n  - 至于详细怎么安装，请自行百度。ps：安装镜像文件，选择密钥安装，最后将补丁文件复制到软件文件夹下全部替换就可以啦O(∩_∩)O\n\n\n\n- ### IDM\n\n  ​\t受够了百度云，迅雷的限速，请使用IDM下载器，还支持浏览器插件版本。\n\n  - [IDM](https://pan.baidu.com/s/1vDUlk8r0bn7eb6zqnMEYkQ?pwd=1314)\t提取码：`1314`\n  - IDM支持百度云不限速下载助手，至于怎么用，tampermonkey插件yyds。\n\n\n\n- ### Adobe pdf\n\n  ​\t功能最全的pdf编辑器，一键安装。\n\n  - [Adobe pdf](https://pan.baidu.com/s/1Fz0iAbfkJAFFD0ye20nvVA)\t提取码：`1314`\n  - Adobe系列版本越高对电脑配置要求越高，所以全家桶都有点卡顿，但不影响正常使用。附[Adobe全家桶](https://pan.baidu.com/s/1SYvUb4AeAQ5R6Lq6xypQNw)\t提取码：`1314`\n\n\n\n- ### Pycharm\n\n  ​\tPython IDE推荐，我是JetBrains家一系列开发工具的忠实使用者，主要优点：与时俱进，界面优美，功能强大。你还在为同步GitHub仓库发愁吗，你还在为ssh链接服务器痛苦吗，Pycharm一键注册99年，从此告别Mobxterm。\n\n  - [Pycharm(windows版本)](https://pan.baidu.com/s/11syiJLEngQL3-8pzqshe7w)\t提取码：`1314`\n  - 将注册机拖到pycharm里一键完成注册即可。\n\n\n\n- ### Office全家桶\n\n  ​\toffice是目前最常用的一类办公软件，使用它可以解决日常生活和工作中遇到的很多问题。里面包含了常用的办公组件而其中就包含了Word、Excel、PowerPoint、Access等。熟练掌握offic的操作技巧是对计算机工作者的基本要求,也可以帮助你提高工作效率出色的完成企业办公需求!新版的Office与之前的老版本相比，不仅是界面上有所改进，同时在功能上也带来一些新特性!\n\n  - [Office全家桶](https://pan.baidu.com/s/1LJo45XDnsSltjNCaiWT0MQ) 提取码：`1314`\n  - [破解教程](./something_else/获取Office2021安装包及相关激活工具.md)","source":"software/index.md","raw":"---\ntitle: Software\ndate: 2023-08-25 14:05:09\n---\n\n# Software\n\n一些学习软件（白嫖^_^，仅供自身学习使用，请勿外传，亲测无病毒，放心使用！）\n\n- ### Typora\n\n  ​\t作为一名程序员，强烈建议大家使用Markdown语法编写文档。它允许人们使用纯文本格式编写文档，由于 Markdown 的轻量化、易读易写特性，许多网站都广泛使用 Markdown 来撰写帮助文档， 如 GitHub等， Markdown格式同步github远程仓库十分方便，不用担心windows层出不穷的格式错误。这里推荐一款Markdown语法软件Typora，由于最近该软件开始收费了，本着学习（白嫖）的精神，因此保存了不收费的一个版本。\n\n  - [Windows版本](https://pan.baidu.com/s/14Fftz3ECigAh-abV-7VHrw)\t提取码：`1314`\n  - [Linux版本](https://pan.baidu.com/s/1rAC-yfhA9-UNVo0y0AIxyg)\t提取码：`1314`\n\n\n\n- ### XMind\n\n  ​\t最好的思维导图软件，没有之一，可惜高级功能要收费，这里分享一个破解版，可以无水印导出。下载安装直接使用，破解版软件不能登录不用我多说吧，亲测无病毒，放心使用。\n\n  - [Windows版本](https://pan.baidu.com/s/1oFZS5czuOF2hEbw1LfxgIw)\t提取码：`1314`\n  - [Linux版本](https://pan.baidu.com/s/1eiOgY8p2Ytlt8AaEUIHelQ)\t提取码：`1314`\n  - 流氓软件默认安装c盘，安装好后将破解包里的app.asar文件复制替换到Program Files/XMind/resources目录下即可。\t\n\n\n\n- ### MATLAB\n\n  ​\tMATLAB，工科生居家旅行必备。有什么好说的吗？没什么好说的吧......\n\n  - [MATLAB](https://pan.baidu.com/s/1aH7OmFjjGApE-v0Md8aB8w)\t提取码：`1314`\n  - 至于详细怎么安装，请自行百度。ps：安装镜像文件，选择密钥安装，最后将补丁文件复制到软件文件夹下全部替换就可以啦O(∩_∩)O\n\n\n\n- ### IDM\n\n  ​\t受够了百度云，迅雷的限速，请使用IDM下载器，还支持浏览器插件版本。\n\n  - [IDM](https://pan.baidu.com/s/1vDUlk8r0bn7eb6zqnMEYkQ?pwd=1314)\t提取码：`1314`\n  - IDM支持百度云不限速下载助手，至于怎么用，tampermonkey插件yyds。\n\n\n\n- ### Adobe pdf\n\n  ​\t功能最全的pdf编辑器，一键安装。\n\n  - [Adobe pdf](https://pan.baidu.com/s/1Fz0iAbfkJAFFD0ye20nvVA)\t提取码：`1314`\n  - Adobe系列版本越高对电脑配置要求越高，所以全家桶都有点卡顿，但不影响正常使用。附[Adobe全家桶](https://pan.baidu.com/s/1SYvUb4AeAQ5R6Lq6xypQNw)\t提取码：`1314`\n\n\n\n- ### Pycharm\n\n  ​\tPython IDE推荐，我是JetBrains家一系列开发工具的忠实使用者，主要优点：与时俱进，界面优美，功能强大。你还在为同步GitHub仓库发愁吗，你还在为ssh链接服务器痛苦吗，Pycharm一键注册99年，从此告别Mobxterm。\n\n  - [Pycharm(windows版本)](https://pan.baidu.com/s/11syiJLEngQL3-8pzqshe7w)\t提取码：`1314`\n  - 将注册机拖到pycharm里一键完成注册即可。\n\n\n\n- ### Office全家桶\n\n  ​\toffice是目前最常用的一类办公软件，使用它可以解决日常生活和工作中遇到的很多问题。里面包含了常用的办公组件而其中就包含了Word、Excel、PowerPoint、Access等。熟练掌握offic的操作技巧是对计算机工作者的基本要求,也可以帮助你提高工作效率出色的完成企业办公需求!新版的Office与之前的老版本相比，不仅是界面上有所改进，同时在功能上也带来一些新特性!\n\n  - [Office全家桶](https://pan.baidu.com/s/1LJo45XDnsSltjNCaiWT0MQ) 提取码：`1314`\n  - [破解教程](./something_else/获取Office2021安装包及相关激活工具.md)","updated":"2023-08-25T10:40:22.062Z","path":"software/index.html","comments":1,"layout":"page","_id":"cllqhd66q000agcr7c1qn1u5s","content":"<h1 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h1><p>一些学习软件（白嫖^_^，仅供自身学习使用，请勿外传，亲测无病毒，放心使用！）</p>\n<ul>\n<li><h3 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h3><p>​\t作为一名程序员，强烈建议大家使用Markdown语法编写文档。它允许人们使用纯文本格式编写文档，由于 Markdown 的轻量化、易读易写特性，许多网站都广泛使用 Markdown 来撰写帮助文档， 如 GitHub等， Markdown格式同步github远程仓库十分方便，不用担心windows层出不穷的格式错误。这里推荐一款Markdown语法软件Typora，由于最近该软件开始收费了，本着学习（白嫖）的精神，因此保存了不收费的一个版本。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/14Fftz3ECigAh-abV-7VHrw\">Windows版本</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1rAC-yfhA9-UNVo0y0AIxyg\">Linux版本</a>\t提取码：<code>1314</code></li>\n</ul>\n</li>\n<li><h3 id=\"XMind\"><a href=\"#XMind\" class=\"headerlink\" title=\"XMind\"></a>XMind</h3><p>​\t最好的思维导图软件，没有之一，可惜高级功能要收费，这里分享一个破解版，可以无水印导出。下载安装直接使用，破解版软件不能登录不用我多说吧，亲测无病毒，放心使用。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1oFZS5czuOF2hEbw1LfxgIw\">Windows版本</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1eiOgY8p2Ytlt8AaEUIHelQ\">Linux版本</a>\t提取码：<code>1314</code></li>\n<li>流氓软件默认安装c盘，安装好后将破解包里的app.asar文件复制替换到Program Files&#x2F;XMind&#x2F;resources目录下即可。</li>\n</ul>\n<p>\t</p>\n</li>\n<li><h3 id=\"MATLAB\"><a href=\"#MATLAB\" class=\"headerlink\" title=\"MATLAB\"></a>MATLAB</h3><p>​\tMATLAB，工科生居家旅行必备。有什么好说的吗？没什么好说的吧……</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1aH7OmFjjGApE-v0Md8aB8w\">MATLAB</a>\t提取码：<code>1314</code></li>\n<li>至于详细怎么安装，请自行百度。ps：安装镜像文件，选择密钥安装，最后将补丁文件复制到软件文件夹下全部替换就可以啦O(∩_∩)O</li>\n</ul>\n</li>\n<li><h3 id=\"IDM\"><a href=\"#IDM\" class=\"headerlink\" title=\"IDM\"></a>IDM</h3><p>​\t受够了百度云，迅雷的限速，请使用IDM下载器，还支持浏览器插件版本。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1vDUlk8r0bn7eb6zqnMEYkQ?pwd=1314\">IDM</a>\t提取码：<code>1314</code></li>\n<li>IDM支持百度云不限速下载助手，至于怎么用，tampermonkey插件yyds。</li>\n</ul>\n</li>\n<li><h3 id=\"Adobe-pdf\"><a href=\"#Adobe-pdf\" class=\"headerlink\" title=\"Adobe pdf\"></a>Adobe pdf</h3><p>​\t功能最全的pdf编辑器，一键安装。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1Fz0iAbfkJAFFD0ye20nvVA\">Adobe pdf</a>\t提取码：<code>1314</code></li>\n<li>Adobe系列版本越高对电脑配置要求越高，所以全家桶都有点卡顿，但不影响正常使用。附<a href=\"https://pan.baidu.com/s/1SYvUb4AeAQ5R6Lq6xypQNw\">Adobe全家桶</a>\t提取码：<code>1314</code></li>\n</ul>\n</li>\n<li><h3 id=\"Pycharm\"><a href=\"#Pycharm\" class=\"headerlink\" title=\"Pycharm\"></a>Pycharm</h3><p>​\tPython IDE推荐，我是JetBrains家一系列开发工具的忠实使用者，主要优点：与时俱进，界面优美，功能强大。你还在为同步GitHub仓库发愁吗，你还在为ssh链接服务器痛苦吗，Pycharm一键注册99年，从此告别Mobxterm。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/11syiJLEngQL3-8pzqshe7w\">Pycharm(windows版本)</a>\t提取码：<code>1314</code></li>\n<li>将注册机拖到pycharm里一键完成注册即可。</li>\n</ul>\n</li>\n<li><h3 id=\"Office全家桶\"><a href=\"#Office全家桶\" class=\"headerlink\" title=\"Office全家桶\"></a>Office全家桶</h3><p>​\toffice是目前最常用的一类办公软件，使用它可以解决日常生活和工作中遇到的很多问题。里面包含了常用的办公组件而其中就包含了Word、Excel、PowerPoint、Access等。熟练掌握offic的操作技巧是对计算机工作者的基本要求,也可以帮助你提高工作效率出色的完成企业办公需求!新版的Office与之前的老版本相比，不仅是界面上有所改进，同时在功能上也带来一些新特性!</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1LJo45XDnsSltjNCaiWT0MQ\">Office全家桶</a> 提取码：<code>1314</code></li>\n<li><a href=\"./something_else/%E8%8E%B7%E5%8F%96Office2021%E5%AE%89%E8%A3%85%E5%8C%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7.md\">破解教程</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-7.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h1><p>一些学习软件（白嫖^_^，仅供自身学习使用，请勿外传，亲测无病毒，放心使用！）</p>\n<ul>\n<li><h3 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h3><p>​\t作为一名程序员，强烈建议大家使用Markdown语法编写文档。它允许人们使用纯文本格式编写文档，由于 Markdown 的轻量化、易读易写特性，许多网站都广泛使用 Markdown 来撰写帮助文档， 如 GitHub等， Markdown格式同步github远程仓库十分方便，不用担心windows层出不穷的格式错误。这里推荐一款Markdown语法软件Typora，由于最近该软件开始收费了，本着学习（白嫖）的精神，因此保存了不收费的一个版本。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/14Fftz3ECigAh-abV-7VHrw\">Windows版本</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1rAC-yfhA9-UNVo0y0AIxyg\">Linux版本</a>\t提取码：<code>1314</code></li>\n</ul>\n</li>\n<li><h3 id=\"XMind\"><a href=\"#XMind\" class=\"headerlink\" title=\"XMind\"></a>XMind</h3><p>​\t最好的思维导图软件，没有之一，可惜高级功能要收费，这里分享一个破解版，可以无水印导出。下载安装直接使用，破解版软件不能登录不用我多说吧，亲测无病毒，放心使用。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1oFZS5czuOF2hEbw1LfxgIw\">Windows版本</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1eiOgY8p2Ytlt8AaEUIHelQ\">Linux版本</a>\t提取码：<code>1314</code></li>\n<li>流氓软件默认安装c盘，安装好后将破解包里的app.asar文件复制替换到Program Files&#x2F;XMind&#x2F;resources目录下即可。</li>\n</ul>\n<p>\t</p>\n</li>\n<li><h3 id=\"MATLAB\"><a href=\"#MATLAB\" class=\"headerlink\" title=\"MATLAB\"></a>MATLAB</h3><p>​\tMATLAB，工科生居家旅行必备。有什么好说的吗？没什么好说的吧……</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1aH7OmFjjGApE-v0Md8aB8w\">MATLAB</a>\t提取码：<code>1314</code></li>\n<li>至于详细怎么安装，请自行百度。ps：安装镜像文件，选择密钥安装，最后将补丁文件复制到软件文件夹下全部替换就可以啦O(∩_∩)O</li>\n</ul>\n</li>\n<li><h3 id=\"IDM\"><a href=\"#IDM\" class=\"headerlink\" title=\"IDM\"></a>IDM</h3><p>​\t受够了百度云，迅雷的限速，请使用IDM下载器，还支持浏览器插件版本。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1vDUlk8r0bn7eb6zqnMEYkQ?pwd=1314\">IDM</a>\t提取码：<code>1314</code></li>\n<li>IDM支持百度云不限速下载助手，至于怎么用，tampermonkey插件yyds。</li>\n</ul>\n</li>\n<li><h3 id=\"Adobe-pdf\"><a href=\"#Adobe-pdf\" class=\"headerlink\" title=\"Adobe pdf\"></a>Adobe pdf</h3><p>​\t功能最全的pdf编辑器，一键安装。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1Fz0iAbfkJAFFD0ye20nvVA\">Adobe pdf</a>\t提取码：<code>1314</code></li>\n<li>Adobe系列版本越高对电脑配置要求越高，所以全家桶都有点卡顿，但不影响正常使用。附<a href=\"https://pan.baidu.com/s/1SYvUb4AeAQ5R6Lq6xypQNw\">Adobe全家桶</a>\t提取码：<code>1314</code></li>\n</ul>\n</li>\n<li><h3 id=\"Pycharm\"><a href=\"#Pycharm\" class=\"headerlink\" title=\"Pycharm\"></a>Pycharm</h3><p>​\tPython IDE推荐，我是JetBrains家一系列开发工具的忠实使用者，主要优点：与时俱进，界面优美，功能强大。你还在为同步GitHub仓库发愁吗，你还在为ssh链接服务器痛苦吗，Pycharm一键注册99年，从此告别Mobxterm。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/11syiJLEngQL3-8pzqshe7w\">Pycharm(windows版本)</a>\t提取码：<code>1314</code></li>\n<li>将注册机拖到pycharm里一键完成注册即可。</li>\n</ul>\n</li>\n<li><h3 id=\"Office全家桶\"><a href=\"#Office全家桶\" class=\"headerlink\" title=\"Office全家桶\"></a>Office全家桶</h3><p>​\toffice是目前最常用的一类办公软件，使用它可以解决日常生活和工作中遇到的很多问题。里面包含了常用的办公组件而其中就包含了Word、Excel、PowerPoint、Access等。熟练掌握offic的操作技巧是对计算机工作者的基本要求,也可以帮助你提高工作效率出色的完成企业办公需求!新版的Office与之前的老版本相比，不仅是界面上有所改进，同时在功能上也带来一些新特性!</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1LJo45XDnsSltjNCaiWT0MQ\">Office全家桶</a> 提取码：<code>1314</code></li>\n<li><a href=\"./something_else/%E8%8E%B7%E5%8F%96Office2021%E5%AE%89%E8%A3%85%E5%8C%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7.md\">破解教程</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"Resume","date":"2023-08-24T14:16:41.000Z","type":"about","_content":"\n吕程的简历\n\n","source":"about/index.md","raw":"---\ntitle: Resume\ndate: 2023-08-24 22:16:41\ntype: \"about\"\n---\n\n吕程的简历\n\n","updated":"2023-08-25T10:41:12.336Z","path":"about/index.html","comments":1,"layout":"page","_id":"cllqhd66r000cgcr728vnc1hb","content":"<p>吕程的简历</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-8.png","cover_type":"img","excerpt":"","more":"<p>吕程的简历</p>\n"}],"Post":[{"_content":"# Study-note from HanLin\n\n##### *内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来...*\n\n\n\n本仓库包含以下内容：\n\n1. 一些学习的[心得笔记](#心的笔记)\n\n3. 一些可能有用的[电子书籍和学习资源](#Resource)（白嫖使我快乐）\n\n3. 一些[学习软件](#Software)的安装（还是白嫖^_^，仅供自身学习使用，请勿外传，亲测无病毒，放心使用！）\n\n4. 一些[杂项](#Other)\n\n5. TODO......!^_^\n\n\n\n\n\n\n## 心得笔记\n\n- ### [SLAM Theory](./slam_theory/)\n\n  - [匈牙利算法](./slam_theory/匈牙利算法.md)\n  - [相机参数DKPR的解释](./slam_theory/相机参数DKPR的解释.md)\n  - [多维高斯分布](./slam_theory/多维高斯分布.md)\n  - [正态分布](./slam_theory/正态分布.md)\n  - [灰度质心法](./slam_theory/灰度质心法.md)\n  - [雅可比矩阵和海塞矩阵](./slam_theory/雅克比矩阵和海塞矩阵.md)\n  - [高斯牛顿法](./slam_theory/高斯牛顿法.md)\n  - [归一化与标准化](./slam_theory/归一化与标准化.md)\n  - [超定方程组的最小二乘解](./slam_theory/超定方程组的最小二乘解.md)\n  - [单目视觉的尺度等价性](./slam_theory/单目视觉的尺度等价性.md)\n  - [多元函数的泰勒展开式](./slam_theory/多元函数的泰勒展开式.md)\n  - [矩阵的奇异值分解](./slam_theory/矩阵的奇异值分解.md)\n  - [为什么使用齐次坐标](./slam_theory/为什么使用齐次坐标.md)\n  - [向量积(矢积)与数量积(标积)的区别](./slam_theory/向量积(矢积)与数量积(标积)的区别.md)\n  - [协方差矩阵](./slam_theory/协方差矩阵.md)\n  - [重投影误差](./slam_theory/重投影误差.md)\n  - [多线激光雷达与组合惯导外参标定原理](./slam_theory/lidar_calibration_cn.pdf)\n  - [图优化g2o](./slam_theory/图优化g2o.pdf)\n  - [矩阵微分](./slam_theory/矩阵微分-清华.pdf)\n  - [本质矩阵/基础矩阵/自由度及其解法](./slam_theory/本质矩阵，基础矩阵，自由度及其解法.md)\n  - [2d激光雷达运动补偿方法(去畸变)](./slam_theory/2d激光雷达运动补偿方法(去畸变).md)\n  - [局部规划算法DWA](./slam_theory/局部规划算法DWA.md)\n  - [ros2 cost function](./slam_theory/ros2_cost_function.md)\n  - [路径规划之A*算法](./slam_theory/路径规划之A-star算法.md)\n  - [路径规划之Theta*算法](./slam_theory/Theta_star-Any-Angle-Path-Planning-on-Grids.md)\n  - [欧拉角与坐标系旋转变换](./slam_theory/欧拉角与坐标系旋转变换.md)\n  - [本质矩阵基础矩阵的自由度及其解法](./slam_theory/本质矩阵基础矩阵的自由度及其解法.md)\n  - [SLAM中的位姿变换与轨迹评价指标APE、RPE、ATE、RTE](./slam_theory/SLAM中的位姿变换与轨迹评价指标.md)\n  - [激光雷达性能指标](./slam_theory/激光雷达性能指标.md)\n  - ROS相关\n    - [ROS指令](./C++/ROS指令.md)\n    - [ROS激光雷达信息点云信息和PCL信息之间的转换](./slam_theory/ROS激光雷达信息、点云信息和PCL信息之间的转换.md)\n    - [ROS Nodehandle句柄的理解](./slam_theory/ROSNodehandle句柄的理解.md)\n    - [ROS param 的使用](./slam_theory/ROSparam的使用.md)\n    - [ROS中Remap(话题重映射)的两种使用方法](./slam_theory/Ros中Remap(话题重映射)的两种使用方法.md)\n  - 待上传\n\n- ### [C++相关知识](./C++)\n  \n  - [常用函数](./C++/常用函数.md)\n  - [opencv常用api](./C++/opencv常用api.md)\n  - [c++并发与多线程](./C++/c++并发与多线程.md)\n  - [STL容器使用时机](./C++/STL容器使用时机.md)\n  - [类型转换](./C++/转换.md)\n  - [Opencv_Mat](./C++/Opencv_Mat.md)\n  - [const成员函数](./C++/const成员函数.md)\n  - [cin与get()getline()输入问题](./C++/cin与get()getline()输入问题.md)\n  - [string和cstring头文件的区别](./C++/string和cstring头文件的区别.md)\n  - [常规函数与内联函数](./C++/常规函数与内联函数.md)\n  - [单例模式](./C++/单例模式.md)\n  - [二叉树遍历](./C++/二叉树遍历.md)\n  - [构造函数的调用时机](./C++/构造函数的调用时机.md)\n  - [函数指针的定义方式](./C++/函数指针的定义方式.md)\n  - [计算时间](./C++/计算时间.md)\n  - [类知识点](./C++/类知识点.md)\n  - [内联函数](./C++/内联函数.md)\n  - [数据类型字节数](./C++/数据类型字节数.md)\n  - [protobuf基本使用](./C++/Protocol_Buffers基本使用.md)\n  - [EigenGeometry](./C++/EigenGeometry.md)\n  - [Eigen几何模块的引入](./C++/EigenGeometry.md)\n  - [gflags使用](./C++/gflags使用.md)\n  - [左值与右值](./C++/左值与右值.md)\n  - [C++下const增强](./C++/C++下const增强.md)\n  - [C++11chrono库](./C++/C++11chrono库.md)\n  - [GoogleTest](./C++/GoogleTest.md)\n  - [二维空间中的点坐标旋转关系](./slam_theory/二维空间中的点坐标旋转关系.md)\n  - Cmake相关\n    - [CMakelists基础指令](./C++/CMakelists基础指令.md)\n    - [CMakeLists简易模板](./C++/CMakeLists简易模板.md)\n    - [find_package指令](./C++/Find_package.md)\n  \n- ### [SLAM配置文档](./slam_config/)\n\n  - [ubuntu18.04系统下安装turtlebot2](slam_config/ubuntu18.04系统下安装turtlebot2.md)\n  - [xavier装机文档](slam_config/xavier装机文档.md)\n  - [turbot建图导航算法](slam_config/turbot建图导航算法汇总.md)\n  - [Rosdep_update_falied](slam_config/Rosdep_update_failed.md)\n  - [安装LIO-SAM](slam_config/安装LIO-SAM.md)\n  - [安装orb-slam2](slam_config/安装Orb-slam2.md)\n  - [安装Rtabmap](slam_config/安装Rtabmap.md)\n  - [安装VINS-Fusion](slam_config/安装VINS-Fusion.md)\n  - [安装ZED以及ros驱动](slam_config/安装ZED以及ros驱动.md)\n  - [轨迹评估介绍与evo工具使用](slam_config/轨迹评估介绍与evo工具使用.md)\n  - [基于ROS的opencv安装与卸载](slam_config/基于ROS的opencv安装与卸载.md)\n  - [激光+imu标定(lidar_align)](slam_config/激光+imu标定(lidar_align​).pdf)\n  - [激光+imu标定(lidar_imu_calib)](slam_config/激光雷达与IMU联合标定(lidar_IMU_calib).md)\n  - [相机+imu标定](slam_config/相机+imu标定.pdf)\n  - [激光雷达+相机标定](slam_config/激光雷达+相机标定.pdf)\n  - [ubuntu18.04环境配置](./slam_config/Ubuntu18.04环境配置.md)\n\n- ### Linux\n\n  - 待上传\n\n- ### [QT编程](./QT)\n  \n  - [项目默认文件介绍](./QT/项目默认文件介绍.md)\n  - [qt点击按钮进行页面的切换](./QT/Qt点击按钮进行页面的切换.md)\n  - [qt迁移项目后修改时间大于当前时间](./QT/QT迁移项目后显示修改时间大于当前时间.md)\n  - [基于arm架构的NVIDIA Xavier安装Qt](./QT/基于arm架构的NVIDIA_Xavier安装Qt.md)\n  \n- ### 一些怎么也记不全的[command](./command/)指令\n  \n  - [Git_Command](./command/Git_Command.md)\n  - [Git中submodule的使用](./command/Git中submodule的使用.md)\n  - [Git cherry-pick的使用](./command/git_cherry-pick.md)\n  - [Git rebase的两种用法](./command/git_rebase的两种用法.md)\n  - [Ubuntu-xavier](./command/Ubuntu-xavier.md)\n  - [LIO-SAM运行](./command/LIO-SAM运行.md)\n  - [Orb-slam2运行](./command/Orb-slam2运行.md)\n  - [Velodyne_VLP16线激光雷达调用](./command/Velodyne_VLP16激光雷达调用.md)\n  - [Xsens传感器调用](./command/Xsens传感器调用.md)\n  - [ROS查看ZED节点此效果](./command/ROS查看ZED节点效果.md)\n\n\n\n\n\n## Resource\n\n#### Online Learning\n\n- 文献检索：研究僧的好伴侣，[Sci-Hub](https://www.sci-hub.ren/)和[arXiv](https://arxiv.org/)，基本顶会论文都可以免费下载阅读。\n- [Paperswithcode](https://paperswithcode.com/)：作为AI工程师（cv工程师）中的一员，这个网站可以找到许多附带开源代码的高质量论文。\n- [*Z-Library*](https://zh.1lib.education/)：这个数字图书馆可以搜索下载到各种各样的电子书，十分强大，而且免费，不过需要科学上网才能访问。\n- EbookFoundation开源了一个仓库[free-programming-books](https://github.com/EbookFoundation/free-programming-books)，在这里你可以找到许多编程类电子书籍和开源课程。\n- [awesome-cs-books](https://github.com/imarvinle/awesome-cs-books)这个仓库包含了许多经典计算机书籍： 编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、程序员数学、测试、前端开发、后台开发、网络编程、Linux使用及内核、求职面试、算法与数据结构 安卓、IOS、数据库、Redis等主流的编程学习书籍。\n- [HelloGitHub](https://github.com/521xueweihan/HelloGitHub)：HelloGitHub 每个月定期分享 GitHub 上有趣、入门级的开源项目。包含多种编程语言，有助于编程语言的学习。\n- [基本素养](https://github.com/ahangchen/How-to-Be-A-Programmer-CN)：当然除了编程语言外，想要成长为一个合格的程序员还是需要具备许多其他的基本素养。\n- [数据结构](https://github.com/youngyangyang04/leetcode-master)：数据结构很重要哦，毕竟也要去面试嘛，还有一个[算法可视化平台](https://github.com/algorithm-visualizer/algorithm-visualizer)，极大地提高了我自己的算法学习理解效率。\n- [鸟哥的私房菜](http://cn.linux.vbird.org/linux_basic/linux_basic.php#part3)：这本书应该是不少linux开发者必读书籍吧。\n- [Linux命令大全](https://www.linuxcool.com/)：当然了鸟哥的私房菜实在是过于详细，平常的学习工作中我们可能只是想要简单快速查一下某一个命令的用法。 \n- [PPT模板](https://www.pptsupermarket.com/)：面向ppt编程（手动狗头），怎么可以没有好用的模板呢。\n\n\n\n#### Electronic Book\n\n- [视觉SLAM](https://pan.baidu.com/s/1yFiZ_fqGnKi7ExvMyvChgQ)\t提取码：`1314`\n- [深度学习](https://pan.baidu.com/s/12Y30nfWqwDqeXz6sCvZgTw)\t提取码：`1314`\n- [C++](https://pan.baidu.com/s/1DsBbgs2GZlxJel5cXpIOYQ)\t提取码：`1314`\n- [Linux](https://pan.baidu.com/s/1f_jGoBzd1ZihH_OhGTC82w)\t提取码：`1314`\n- [Python](https://pan.baidu.com/s/1m7_FToasf8VPln4-8jilLw)\t提取码：`1314`\n- [操作系统](https://pan.baidu.com/s/17eCDh-8gxEpyBoNORodYaA)\t提取码：`1314`\n- [分布式系统](https://pan.baidu.com/s/1GaSVK03EPcnQdH4BhcxZZA)\t提取码：`1314`\n- [后端组件](https://pan.baidu.com/s/1drB61wzhg7NG5L3KhOmrXw)\t提取码：`1314`\n- [计算机网络](https://pan.baidu.com/s/1qBYrPLhRpF_dhPXOQBRNZQ)\t提取码：`1314`\n- [计算机系统知识](https://pan.baidu.com/s/1I54KS6usF89NhRgagSGjeQ)\t提取码：`1314`\n- [前端&全栈](https://pan.baidu.com/s/1pKy4BJKc7SpRGq0Js-0t_A)\t提取码：`1314`\n- [数据库](https://pan.baidu.com/s/1eWlvbY0MrqRF2fI6p7kb4g)\t提取码：`1314`\n- [算法和数据结构](https://pan.baidu.com/s/1Xl8U-exf7lb2b9ss593_2g)\t提取码：`1314`\n- [网络编程&服务器开发](https://pan.baidu.com/s/1diwvkJGb2CFkonj40yvtew)\t提取码：`1314`\n- [面经](https://pan.baidu.com/s/1WGa1TRnHh3m1wmV4F7EkGA)\t提取码：`1314`\n- [面试准备](https://pan.baidu.com/s/1FCYJ-TDRfKKkHlQWSgmL3g)\t提取码：`1314`\n\n\n\n## Software\n\n- ### Typora\n\n  ​\t作为一名程序员，强烈建议大家使用Markdown语法编写文档。它允许人们使用纯文本格式编写文档，由于 Markdown 的轻量化、易读易写特性，许多网站都广泛使用 Markdown 来撰写帮助文档， 如 GitHub等， Markdown格式同步github远程仓库十分方便，不用担心windows层出不穷的格式错误。这里推荐一款Markdown语法软件Typora，由于最近该软件开始收费了，本着学习（白嫖）的精神，因此保存了不收费的一个版本。\n\n  - [Windows版本](https://pan.baidu.com/s/14Fftz3ECigAh-abV-7VHrw)\t提取码：`1314`\n  - [Linux版本](https://pan.baidu.com/s/1rAC-yfhA9-UNVo0y0AIxyg)\t提取码：`1314`\n\n\n\n- ### XMind\n\n  ​\t最好的思维导图软件，没有之一，可惜高级功能要收费，这里分享一个破解版，可以无水印导出。下载安装直接使用，破解版软件不能登录不用我多说吧，亲测无病毒，放心使用。\n\n  - [Windows版本](https://pan.baidu.com/s/1oFZS5czuOF2hEbw1LfxgIw)\t提取码：`1314`\n  - [Linux版本](https://pan.baidu.com/s/1eiOgY8p2Ytlt8AaEUIHelQ)\t提取码：`1314`\n  - 流氓软件默认安装c盘，安装好后将破解包里的app.asar文件复制替换到Program Files/XMind/resources目录下即可。\t\n\n\n\n- ### MATLAB\n\n  ​\tMATLAB，工科生居家旅行必备。有什么好说的吗？没什么好说的吧......\n\n  - [MATLAB](https://pan.baidu.com/s/1aH7OmFjjGApE-v0Md8aB8w)\t提取码：`1314`\n  - 至于详细怎么安装，请自行百度。ps：安装镜像文件，选择密钥安装，最后将补丁文件复制到软件文件夹下全部替换就可以啦O(∩_∩)O\n\n\n\n- ### IDM\n\n  ​\t受够了百度云，迅雷的限速吗，请使用IDM下载器，还支持浏览器插件版本，天下苦百度迅雷久矣........\n\n  - [IDM](https://pan.baidu.com/s/1vDUlk8r0bn7eb6zqnMEYkQ?pwd=1314)\t提取码：`1314`\n  - IDM支持百度云不限速下载助手，至于怎么用，tampermonkey插件yyds。\n\n\n\n- ### Adobe pdf\n\n  ​\t功能最全的pdf编辑器，一键安装。\n\n  - [Adobe pdf](https://pan.baidu.com/s/1Fz0iAbfkJAFFD0ye20nvVA)\t提取码：`1314`\n  - Adobe系列版本越高对电脑配置要求越高，所以全家桶都有点卡顿，但不影响正常使用。附[Adobe全家桶](https://pan.baidu.com/s/1SYvUb4AeAQ5R6Lq6xypQNw)\t提取码：`1314`\n\n\n\n- ### Pycharm\n\n  ​\tPython IDE推荐，我是JetBrains家一系列开发工具的忠实使用者，主要优点：与时俱进，界面优美，功能强大。你还在为同步GitHub仓库发愁吗，你还在为ssh链接服务器痛苦吗，Pycharm一键注册99年，从此告别Mobxterm。\n\n  - [Pycharm(windows版本)](https://pan.baidu.com/s/11syiJLEngQL3-8pzqshe7w)\t提取码：`1314`\n  - 将注册机拖到pycharm里一键完成注册即可。\n\n\n\n- ### Office全家桶\n\n  ​\toffice是目前最常用的一类办公软件，使用它可以解决日常生活和工作中遇到的很多问题。里面包含了常用的办公组件而其中就包含了Word、Excel、PowerPoint、Access等。熟练掌握offic的操作技巧是对计算机工作者的基本要求,也可以帮助你提高工作效率出色的完成企业办公需求!新版的Office与之前的老版本相比，不仅是界面上有所改进，同时在功能上也带来一些新特性!\n\n  - [Office全家桶](https://pan.baidu.com/s/1LJo45XDnsSltjNCaiWT0MQ) 提取码：`1314`\n  - [破解教程](./something_else/获取Office2021安装包及相关激活工具.md)\n\n\n\n## Other\n\n- [科学上网](https://github.com/shadowsocks/shadowsocks-windows)：一个程序员咋能不会科学上网捏，国内的程序员论坛实在是不敢恭维。这里推荐一个比较不错的，至于怎么用，请自己去学习吧^_^。\n- 一些拥有slam相关业务并且表现不错的[公司](./something_else/Company.md)\n\n\n\n\n\n## 维护者\n\n[@HanLin](https://github.com/hanlin-cheng)\n\n> *关山难越，谁悲失路之人。萍水相逢，尽是他乡之客。*\n\n\n","source":"_posts/README.md","raw":"# Study-note from HanLin\n\n##### *内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来...*\n\n\n\n本仓库包含以下内容：\n\n1. 一些学习的[心得笔记](#心的笔记)\n\n3. 一些可能有用的[电子书籍和学习资源](#Resource)（白嫖使我快乐）\n\n3. 一些[学习软件](#Software)的安装（还是白嫖^_^，仅供自身学习使用，请勿外传，亲测无病毒，放心使用！）\n\n4. 一些[杂项](#Other)\n\n5. TODO......!^_^\n\n\n\n\n\n\n## 心得笔记\n\n- ### [SLAM Theory](./slam_theory/)\n\n  - [匈牙利算法](./slam_theory/匈牙利算法.md)\n  - [相机参数DKPR的解释](./slam_theory/相机参数DKPR的解释.md)\n  - [多维高斯分布](./slam_theory/多维高斯分布.md)\n  - [正态分布](./slam_theory/正态分布.md)\n  - [灰度质心法](./slam_theory/灰度质心法.md)\n  - [雅可比矩阵和海塞矩阵](./slam_theory/雅克比矩阵和海塞矩阵.md)\n  - [高斯牛顿法](./slam_theory/高斯牛顿法.md)\n  - [归一化与标准化](./slam_theory/归一化与标准化.md)\n  - [超定方程组的最小二乘解](./slam_theory/超定方程组的最小二乘解.md)\n  - [单目视觉的尺度等价性](./slam_theory/单目视觉的尺度等价性.md)\n  - [多元函数的泰勒展开式](./slam_theory/多元函数的泰勒展开式.md)\n  - [矩阵的奇异值分解](./slam_theory/矩阵的奇异值分解.md)\n  - [为什么使用齐次坐标](./slam_theory/为什么使用齐次坐标.md)\n  - [向量积(矢积)与数量积(标积)的区别](./slam_theory/向量积(矢积)与数量积(标积)的区别.md)\n  - [协方差矩阵](./slam_theory/协方差矩阵.md)\n  - [重投影误差](./slam_theory/重投影误差.md)\n  - [多线激光雷达与组合惯导外参标定原理](./slam_theory/lidar_calibration_cn.pdf)\n  - [图优化g2o](./slam_theory/图优化g2o.pdf)\n  - [矩阵微分](./slam_theory/矩阵微分-清华.pdf)\n  - [本质矩阵/基础矩阵/自由度及其解法](./slam_theory/本质矩阵，基础矩阵，自由度及其解法.md)\n  - [2d激光雷达运动补偿方法(去畸变)](./slam_theory/2d激光雷达运动补偿方法(去畸变).md)\n  - [局部规划算法DWA](./slam_theory/局部规划算法DWA.md)\n  - [ros2 cost function](./slam_theory/ros2_cost_function.md)\n  - [路径规划之A*算法](./slam_theory/路径规划之A-star算法.md)\n  - [路径规划之Theta*算法](./slam_theory/Theta_star-Any-Angle-Path-Planning-on-Grids.md)\n  - [欧拉角与坐标系旋转变换](./slam_theory/欧拉角与坐标系旋转变换.md)\n  - [本质矩阵基础矩阵的自由度及其解法](./slam_theory/本质矩阵基础矩阵的自由度及其解法.md)\n  - [SLAM中的位姿变换与轨迹评价指标APE、RPE、ATE、RTE](./slam_theory/SLAM中的位姿变换与轨迹评价指标.md)\n  - [激光雷达性能指标](./slam_theory/激光雷达性能指标.md)\n  - ROS相关\n    - [ROS指令](./C++/ROS指令.md)\n    - [ROS激光雷达信息点云信息和PCL信息之间的转换](./slam_theory/ROS激光雷达信息、点云信息和PCL信息之间的转换.md)\n    - [ROS Nodehandle句柄的理解](./slam_theory/ROSNodehandle句柄的理解.md)\n    - [ROS param 的使用](./slam_theory/ROSparam的使用.md)\n    - [ROS中Remap(话题重映射)的两种使用方法](./slam_theory/Ros中Remap(话题重映射)的两种使用方法.md)\n  - 待上传\n\n- ### [C++相关知识](./C++)\n  \n  - [常用函数](./C++/常用函数.md)\n  - [opencv常用api](./C++/opencv常用api.md)\n  - [c++并发与多线程](./C++/c++并发与多线程.md)\n  - [STL容器使用时机](./C++/STL容器使用时机.md)\n  - [类型转换](./C++/转换.md)\n  - [Opencv_Mat](./C++/Opencv_Mat.md)\n  - [const成员函数](./C++/const成员函数.md)\n  - [cin与get()getline()输入问题](./C++/cin与get()getline()输入问题.md)\n  - [string和cstring头文件的区别](./C++/string和cstring头文件的区别.md)\n  - [常规函数与内联函数](./C++/常规函数与内联函数.md)\n  - [单例模式](./C++/单例模式.md)\n  - [二叉树遍历](./C++/二叉树遍历.md)\n  - [构造函数的调用时机](./C++/构造函数的调用时机.md)\n  - [函数指针的定义方式](./C++/函数指针的定义方式.md)\n  - [计算时间](./C++/计算时间.md)\n  - [类知识点](./C++/类知识点.md)\n  - [内联函数](./C++/内联函数.md)\n  - [数据类型字节数](./C++/数据类型字节数.md)\n  - [protobuf基本使用](./C++/Protocol_Buffers基本使用.md)\n  - [EigenGeometry](./C++/EigenGeometry.md)\n  - [Eigen几何模块的引入](./C++/EigenGeometry.md)\n  - [gflags使用](./C++/gflags使用.md)\n  - [左值与右值](./C++/左值与右值.md)\n  - [C++下const增强](./C++/C++下const增强.md)\n  - [C++11chrono库](./C++/C++11chrono库.md)\n  - [GoogleTest](./C++/GoogleTest.md)\n  - [二维空间中的点坐标旋转关系](./slam_theory/二维空间中的点坐标旋转关系.md)\n  - Cmake相关\n    - [CMakelists基础指令](./C++/CMakelists基础指令.md)\n    - [CMakeLists简易模板](./C++/CMakeLists简易模板.md)\n    - [find_package指令](./C++/Find_package.md)\n  \n- ### [SLAM配置文档](./slam_config/)\n\n  - [ubuntu18.04系统下安装turtlebot2](slam_config/ubuntu18.04系统下安装turtlebot2.md)\n  - [xavier装机文档](slam_config/xavier装机文档.md)\n  - [turbot建图导航算法](slam_config/turbot建图导航算法汇总.md)\n  - [Rosdep_update_falied](slam_config/Rosdep_update_failed.md)\n  - [安装LIO-SAM](slam_config/安装LIO-SAM.md)\n  - [安装orb-slam2](slam_config/安装Orb-slam2.md)\n  - [安装Rtabmap](slam_config/安装Rtabmap.md)\n  - [安装VINS-Fusion](slam_config/安装VINS-Fusion.md)\n  - [安装ZED以及ros驱动](slam_config/安装ZED以及ros驱动.md)\n  - [轨迹评估介绍与evo工具使用](slam_config/轨迹评估介绍与evo工具使用.md)\n  - [基于ROS的opencv安装与卸载](slam_config/基于ROS的opencv安装与卸载.md)\n  - [激光+imu标定(lidar_align)](slam_config/激光+imu标定(lidar_align​).pdf)\n  - [激光+imu标定(lidar_imu_calib)](slam_config/激光雷达与IMU联合标定(lidar_IMU_calib).md)\n  - [相机+imu标定](slam_config/相机+imu标定.pdf)\n  - [激光雷达+相机标定](slam_config/激光雷达+相机标定.pdf)\n  - [ubuntu18.04环境配置](./slam_config/Ubuntu18.04环境配置.md)\n\n- ### Linux\n\n  - 待上传\n\n- ### [QT编程](./QT)\n  \n  - [项目默认文件介绍](./QT/项目默认文件介绍.md)\n  - [qt点击按钮进行页面的切换](./QT/Qt点击按钮进行页面的切换.md)\n  - [qt迁移项目后修改时间大于当前时间](./QT/QT迁移项目后显示修改时间大于当前时间.md)\n  - [基于arm架构的NVIDIA Xavier安装Qt](./QT/基于arm架构的NVIDIA_Xavier安装Qt.md)\n  \n- ### 一些怎么也记不全的[command](./command/)指令\n  \n  - [Git_Command](./command/Git_Command.md)\n  - [Git中submodule的使用](./command/Git中submodule的使用.md)\n  - [Git cherry-pick的使用](./command/git_cherry-pick.md)\n  - [Git rebase的两种用法](./command/git_rebase的两种用法.md)\n  - [Ubuntu-xavier](./command/Ubuntu-xavier.md)\n  - [LIO-SAM运行](./command/LIO-SAM运行.md)\n  - [Orb-slam2运行](./command/Orb-slam2运行.md)\n  - [Velodyne_VLP16线激光雷达调用](./command/Velodyne_VLP16激光雷达调用.md)\n  - [Xsens传感器调用](./command/Xsens传感器调用.md)\n  - [ROS查看ZED节点此效果](./command/ROS查看ZED节点效果.md)\n\n\n\n\n\n## Resource\n\n#### Online Learning\n\n- 文献检索：研究僧的好伴侣，[Sci-Hub](https://www.sci-hub.ren/)和[arXiv](https://arxiv.org/)，基本顶会论文都可以免费下载阅读。\n- [Paperswithcode](https://paperswithcode.com/)：作为AI工程师（cv工程师）中的一员，这个网站可以找到许多附带开源代码的高质量论文。\n- [*Z-Library*](https://zh.1lib.education/)：这个数字图书馆可以搜索下载到各种各样的电子书，十分强大，而且免费，不过需要科学上网才能访问。\n- EbookFoundation开源了一个仓库[free-programming-books](https://github.com/EbookFoundation/free-programming-books)，在这里你可以找到许多编程类电子书籍和开源课程。\n- [awesome-cs-books](https://github.com/imarvinle/awesome-cs-books)这个仓库包含了许多经典计算机书籍： 编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、程序员数学、测试、前端开发、后台开发、网络编程、Linux使用及内核、求职面试、算法与数据结构 安卓、IOS、数据库、Redis等主流的编程学习书籍。\n- [HelloGitHub](https://github.com/521xueweihan/HelloGitHub)：HelloGitHub 每个月定期分享 GitHub 上有趣、入门级的开源项目。包含多种编程语言，有助于编程语言的学习。\n- [基本素养](https://github.com/ahangchen/How-to-Be-A-Programmer-CN)：当然除了编程语言外，想要成长为一个合格的程序员还是需要具备许多其他的基本素养。\n- [数据结构](https://github.com/youngyangyang04/leetcode-master)：数据结构很重要哦，毕竟也要去面试嘛，还有一个[算法可视化平台](https://github.com/algorithm-visualizer/algorithm-visualizer)，极大地提高了我自己的算法学习理解效率。\n- [鸟哥的私房菜](http://cn.linux.vbird.org/linux_basic/linux_basic.php#part3)：这本书应该是不少linux开发者必读书籍吧。\n- [Linux命令大全](https://www.linuxcool.com/)：当然了鸟哥的私房菜实在是过于详细，平常的学习工作中我们可能只是想要简单快速查一下某一个命令的用法。 \n- [PPT模板](https://www.pptsupermarket.com/)：面向ppt编程（手动狗头），怎么可以没有好用的模板呢。\n\n\n\n#### Electronic Book\n\n- [视觉SLAM](https://pan.baidu.com/s/1yFiZ_fqGnKi7ExvMyvChgQ)\t提取码：`1314`\n- [深度学习](https://pan.baidu.com/s/12Y30nfWqwDqeXz6sCvZgTw)\t提取码：`1314`\n- [C++](https://pan.baidu.com/s/1DsBbgs2GZlxJel5cXpIOYQ)\t提取码：`1314`\n- [Linux](https://pan.baidu.com/s/1f_jGoBzd1ZihH_OhGTC82w)\t提取码：`1314`\n- [Python](https://pan.baidu.com/s/1m7_FToasf8VPln4-8jilLw)\t提取码：`1314`\n- [操作系统](https://pan.baidu.com/s/17eCDh-8gxEpyBoNORodYaA)\t提取码：`1314`\n- [分布式系统](https://pan.baidu.com/s/1GaSVK03EPcnQdH4BhcxZZA)\t提取码：`1314`\n- [后端组件](https://pan.baidu.com/s/1drB61wzhg7NG5L3KhOmrXw)\t提取码：`1314`\n- [计算机网络](https://pan.baidu.com/s/1qBYrPLhRpF_dhPXOQBRNZQ)\t提取码：`1314`\n- [计算机系统知识](https://pan.baidu.com/s/1I54KS6usF89NhRgagSGjeQ)\t提取码：`1314`\n- [前端&全栈](https://pan.baidu.com/s/1pKy4BJKc7SpRGq0Js-0t_A)\t提取码：`1314`\n- [数据库](https://pan.baidu.com/s/1eWlvbY0MrqRF2fI6p7kb4g)\t提取码：`1314`\n- [算法和数据结构](https://pan.baidu.com/s/1Xl8U-exf7lb2b9ss593_2g)\t提取码：`1314`\n- [网络编程&服务器开发](https://pan.baidu.com/s/1diwvkJGb2CFkonj40yvtew)\t提取码：`1314`\n- [面经](https://pan.baidu.com/s/1WGa1TRnHh3m1wmV4F7EkGA)\t提取码：`1314`\n- [面试准备](https://pan.baidu.com/s/1FCYJ-TDRfKKkHlQWSgmL3g)\t提取码：`1314`\n\n\n\n## Software\n\n- ### Typora\n\n  ​\t作为一名程序员，强烈建议大家使用Markdown语法编写文档。它允许人们使用纯文本格式编写文档，由于 Markdown 的轻量化、易读易写特性，许多网站都广泛使用 Markdown 来撰写帮助文档， 如 GitHub等， Markdown格式同步github远程仓库十分方便，不用担心windows层出不穷的格式错误。这里推荐一款Markdown语法软件Typora，由于最近该软件开始收费了，本着学习（白嫖）的精神，因此保存了不收费的一个版本。\n\n  - [Windows版本](https://pan.baidu.com/s/14Fftz3ECigAh-abV-7VHrw)\t提取码：`1314`\n  - [Linux版本](https://pan.baidu.com/s/1rAC-yfhA9-UNVo0y0AIxyg)\t提取码：`1314`\n\n\n\n- ### XMind\n\n  ​\t最好的思维导图软件，没有之一，可惜高级功能要收费，这里分享一个破解版，可以无水印导出。下载安装直接使用，破解版软件不能登录不用我多说吧，亲测无病毒，放心使用。\n\n  - [Windows版本](https://pan.baidu.com/s/1oFZS5czuOF2hEbw1LfxgIw)\t提取码：`1314`\n  - [Linux版本](https://pan.baidu.com/s/1eiOgY8p2Ytlt8AaEUIHelQ)\t提取码：`1314`\n  - 流氓软件默认安装c盘，安装好后将破解包里的app.asar文件复制替换到Program Files/XMind/resources目录下即可。\t\n\n\n\n- ### MATLAB\n\n  ​\tMATLAB，工科生居家旅行必备。有什么好说的吗？没什么好说的吧......\n\n  - [MATLAB](https://pan.baidu.com/s/1aH7OmFjjGApE-v0Md8aB8w)\t提取码：`1314`\n  - 至于详细怎么安装，请自行百度。ps：安装镜像文件，选择密钥安装，最后将补丁文件复制到软件文件夹下全部替换就可以啦O(∩_∩)O\n\n\n\n- ### IDM\n\n  ​\t受够了百度云，迅雷的限速吗，请使用IDM下载器，还支持浏览器插件版本，天下苦百度迅雷久矣........\n\n  - [IDM](https://pan.baidu.com/s/1vDUlk8r0bn7eb6zqnMEYkQ?pwd=1314)\t提取码：`1314`\n  - IDM支持百度云不限速下载助手，至于怎么用，tampermonkey插件yyds。\n\n\n\n- ### Adobe pdf\n\n  ​\t功能最全的pdf编辑器，一键安装。\n\n  - [Adobe pdf](https://pan.baidu.com/s/1Fz0iAbfkJAFFD0ye20nvVA)\t提取码：`1314`\n  - Adobe系列版本越高对电脑配置要求越高，所以全家桶都有点卡顿，但不影响正常使用。附[Adobe全家桶](https://pan.baidu.com/s/1SYvUb4AeAQ5R6Lq6xypQNw)\t提取码：`1314`\n\n\n\n- ### Pycharm\n\n  ​\tPython IDE推荐，我是JetBrains家一系列开发工具的忠实使用者，主要优点：与时俱进，界面优美，功能强大。你还在为同步GitHub仓库发愁吗，你还在为ssh链接服务器痛苦吗，Pycharm一键注册99年，从此告别Mobxterm。\n\n  - [Pycharm(windows版本)](https://pan.baidu.com/s/11syiJLEngQL3-8pzqshe7w)\t提取码：`1314`\n  - 将注册机拖到pycharm里一键完成注册即可。\n\n\n\n- ### Office全家桶\n\n  ​\toffice是目前最常用的一类办公软件，使用它可以解决日常生活和工作中遇到的很多问题。里面包含了常用的办公组件而其中就包含了Word、Excel、PowerPoint、Access等。熟练掌握offic的操作技巧是对计算机工作者的基本要求,也可以帮助你提高工作效率出色的完成企业办公需求!新版的Office与之前的老版本相比，不仅是界面上有所改进，同时在功能上也带来一些新特性!\n\n  - [Office全家桶](https://pan.baidu.com/s/1LJo45XDnsSltjNCaiWT0MQ) 提取码：`1314`\n  - [破解教程](./something_else/获取Office2021安装包及相关激活工具.md)\n\n\n\n## Other\n\n- [科学上网](https://github.com/shadowsocks/shadowsocks-windows)：一个程序员咋能不会科学上网捏，国内的程序员论坛实在是不敢恭维。这里推荐一个比较不错的，至于怎么用，请自己去学习吧^_^。\n- 一些拥有slam相关业务并且表现不错的[公司](./something_else/Company.md)\n\n\n\n\n\n## 维护者\n\n[@HanLin](https://github.com/hanlin-cheng)\n\n> *关山难越，谁悲失路之人。萍水相逢，尽是他乡之客。*\n\n\n","slug":"README","published":1,"date":"2023-08-25T09:17:14.390Z","updated":"2023-08-21T10:08:37.866Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66j0001gcr78d1w7we0","content":"<h1 id=\"Study-note-from-HanLin\"><a href=\"#Study-note-from-HanLin\" class=\"headerlink\" title=\"Study-note from HanLin\"></a>Study-note from HanLin</h1><h5 id=\"内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来…\"><a href=\"#内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来…\" class=\"headerlink\" title=\"内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来…\"></a><em>内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来…</em></h5><p>本仓库包含以下内容：</p>\n<ol>\n<li><p>一些学习的<a href=\"#%E5%BF%83%E7%9A%84%E7%AC%94%E8%AE%B0\">心得笔记</a></p>\n</li>\n<li><p>一些可能有用的<a href=\"#Resource\">电子书籍和学习资源</a>（白嫖使我快乐）</p>\n</li>\n<li><p>一些<a href=\"#Software\">学习软件</a>的安装（还是白嫖^_^，仅供自身学习使用，请勿外传，亲测无病毒，放心使用！）</p>\n</li>\n<li><p>一些<a href=\"#Other\">杂项</a></p>\n</li>\n<li><p>TODO……!^_^</p>\n</li>\n</ol>\n<h2 id=\"心得笔记\"><a href=\"#心得笔记\" class=\"headerlink\" title=\"心得笔记\"></a>心得笔记</h2><ul>\n<li><h3 id=\"SLAM-Theory\"><a href=\"#SLAM-Theory\" class=\"headerlink\" title=\"SLAM Theory\"></a><a href=\"./slam_theory/\">SLAM Theory</a></h3><ul>\n<li><a href=\"./slam_theory/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95.md\">匈牙利算法</a></li>\n<li><a href=\"./slam_theory/%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0DKPR%E7%9A%84%E8%A7%A3%E9%87%8A.md\">相机参数DKPR的解释</a></li>\n<li><a href=\"./slam_theory/%E5%A4%9A%E7%BB%B4%E9%AB%98%E6%96%AF%E5%88%86%E5%B8%83.md\">多维高斯分布</a></li>\n<li><a href=\"./slam_theory/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83.md\">正态分布</a></li>\n<li><a href=\"./slam_theory/%E7%81%B0%E5%BA%A6%E8%B4%A8%E5%BF%83%E6%B3%95.md\">灰度质心法</a></li>\n<li><a href=\"./slam_theory/%E9%9B%85%E5%85%8B%E6%AF%94%E7%9F%A9%E9%98%B5%E5%92%8C%E6%B5%B7%E5%A1%9E%E7%9F%A9%E9%98%B5.md\">雅可比矩阵和海塞矩阵</a></li>\n<li><a href=\"./slam_theory/%E9%AB%98%E6%96%AF%E7%89%9B%E9%A1%BF%E6%B3%95.md\">高斯牛顿法</a></li>\n<li><a href=\"./slam_theory/%E5%BD%92%E4%B8%80%E5%8C%96%E4%B8%8E%E6%A0%87%E5%87%86%E5%8C%96.md\">归一化与标准化</a></li>\n<li><a href=\"./slam_theory/%E8%B6%85%E5%AE%9A%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E8%A7%A3.md\">超定方程组的最小二乘解</a></li>\n<li><a href=\"./slam_theory/%E5%8D%95%E7%9B%AE%E8%A7%86%E8%A7%89%E7%9A%84%E5%B0%BA%E5%BA%A6%E7%AD%89%E4%BB%B7%E6%80%A7.md\">单目视觉的尺度等价性</a></li>\n<li><a href=\"./slam_theory/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80%E5%BC%8F.md\">多元函数的泰勒展开式</a></li>\n<li><a href=\"./slam_theory/%E7%9F%A9%E9%98%B5%E7%9A%84%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3.md\">矩阵的奇异值分解</a></li>\n<li><a href=\"./slam_theory/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87.md\">为什么使用齐次坐标</a></li>\n<li><a href=\"./slam_theory/%E5%90%91%E9%87%8F%E7%A7%AF(%E7%9F%A2%E7%A7%AF)%E4%B8%8E%E6%95%B0%E9%87%8F%E7%A7%AF(%E6%A0%87%E7%A7%AF)%E7%9A%84%E5%8C%BA%E5%88%AB.md\">向量积(矢积)与数量积(标积)的区别</a></li>\n<li><a href=\"./slam_theory/%E5%8D%8F%E6%96%B9%E5%B7%AE%E7%9F%A9%E9%98%B5.md\">协方差矩阵</a></li>\n<li><a href=\"./slam_theory/%E9%87%8D%E6%8A%95%E5%BD%B1%E8%AF%AF%E5%B7%AE.md\">重投影误差</a></li>\n<li><a href=\"./slam_theory/lidar_calibration_cn.pdf\">多线激光雷达与组合惯导外参标定原理</a></li>\n<li><a href=\"./slam_theory/%E5%9B%BE%E4%BC%98%E5%8C%96g2o.pdf\">图优化g2o</a></li>\n<li><a href=\"./slam_theory/%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86-%E6%B8%85%E5%8D%8E.pdf\">矩阵微分</a></li>\n<li><a href=\"./slam_theory/%E6%9C%AC%E8%B4%A8%E7%9F%A9%E9%98%B5%EF%BC%8C%E5%9F%BA%E7%A1%80%E7%9F%A9%E9%98%B5%EF%BC%8C%E8%87%AA%E7%94%B1%E5%BA%A6%E5%8F%8A%E5%85%B6%E8%A7%A3%E6%B3%95.md\">本质矩阵&#x2F;基础矩阵&#x2F;自由度及其解法</a></li>\n<li><a href=\"./slam_theory/2d%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF%E6%96%B9%E6%B3%95(%E5%8E%BB%E7%95%B8%E5%8F%98).md\">2d激光雷达运动补偿方法(去畸变)</a></li>\n<li><a href=\"./slam_theory/%E5%B1%80%E9%83%A8%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95DWA.md\">局部规划算法DWA</a></li>\n<li><a href=\"./slam_theory/ros2_cost_function.md\">ros2 cost function</a></li>\n<li><a href=\"./slam_theory/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E4%B9%8BA-star%E7%AE%97%E6%B3%95.md\">路径规划之A*算法</a></li>\n<li><a href=\"./slam_theory/Theta_star-Any-Angle-Path-Planning-on-Grids.md\">路径规划之Theta*算法</a></li>\n<li><a href=\"./slam_theory/%E6%AC%A7%E6%8B%89%E8%A7%92%E4%B8%8E%E5%9D%90%E6%A0%87%E7%B3%BB%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2.md\">欧拉角与坐标系旋转变换</a></li>\n<li><a href=\"./slam_theory/%E6%9C%AC%E8%B4%A8%E7%9F%A9%E9%98%B5%E5%9F%BA%E7%A1%80%E7%9F%A9%E9%98%B5%E7%9A%84%E8%87%AA%E7%94%B1%E5%BA%A6%E5%8F%8A%E5%85%B6%E8%A7%A3%E6%B3%95.md\">本质矩阵基础矩阵的自由度及其解法</a></li>\n<li><a href=\"./slam_theory/SLAM%E4%B8%AD%E7%9A%84%E4%BD%8D%E5%A7%BF%E5%8F%98%E6%8D%A2%E4%B8%8E%E8%BD%A8%E8%BF%B9%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.md\">SLAM中的位姿变换与轨迹评价指标APE、RPE、ATE、RTE</a></li>\n<li><a href=\"./slam_theory/%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87.md\">激光雷达性能指标</a></li>\n<li>ROS相关<ul>\n<li><a href=\"./C++/ROS%E6%8C%87%E4%BB%A4.md\">ROS指令</a></li>\n<li><a href=\"./slam_theory/ROS%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E4%BF%A1%E6%81%AF%E3%80%81%E7%82%B9%E4%BA%91%E4%BF%A1%E6%81%AF%E5%92%8CPCL%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.md\">ROS激光雷达信息点云信息和PCL信息之间的转换</a></li>\n<li><a href=\"./slam_theory/ROSNodehandle%E5%8F%A5%E6%9F%84%E7%9A%84%E7%90%86%E8%A7%A3.md\">ROS Nodehandle句柄的理解</a></li>\n<li><a href=\"./slam_theory/ROSparam%E7%9A%84%E4%BD%BF%E7%94%A8.md\">ROS param 的使用</a></li>\n<li><a href=\"./slam_theory/Ros%E4%B8%ADRemap(%E8%AF%9D%E9%A2%98%E9%87%8D%E6%98%A0%E5%B0%84)%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.md\">ROS中Remap(话题重映射)的两种使用方法</a></li>\n</ul>\n</li>\n<li>待上传</li>\n</ul>\n</li>\n<li><h3 id=\"C-相关知识\"><a href=\"#C-相关知识\" class=\"headerlink\" title=\"C++相关知识\"></a><a href=\"./C++\">C++相关知识</a></h3><ul>\n<li><a href=\"./C++/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.md\">常用函数</a></li>\n<li><a href=\"./C++/opencv%E5%B8%B8%E7%94%A8api.md\">opencv常用api</a></li>\n<li><a href=\"./C++/c++%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B.md\">c++并发与多线程</a></li>\n<li><a href=\"./C++/STL%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8%E6%97%B6%E6%9C%BA.md\">STL容器使用时机</a></li>\n<li><a href=\"./C++/%E8%BD%AC%E6%8D%A2.md\">类型转换</a></li>\n<li><a href=\"./C++/Opencv_Mat.md\">Opencv_Mat</a></li>\n<li><a href=\"./C++/const%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0.md\">const成员函数</a></li>\n<li><a href=\"./C++/cin%E4%B8%8Eget()getline()%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98.md\">cin与get()getline()输入问题</a></li>\n<li><a href=\"./C++/string%E5%92%8Ccstring%E5%A4%B4%E6%96%87%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB.md\">string和cstring头文件的区别</a></li>\n<li><a href=\"./C++/%E5%B8%B8%E8%A7%84%E5%87%BD%E6%95%B0%E4%B8%8E%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.md\">常规函数与内联函数</a></li>\n<li><a href=\"./C++/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.md\">单例模式</a></li>\n<li><a href=\"./C++/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86.md\">二叉树遍历</a></li>\n<li><a href=\"./C++/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA.md\">构造函数的调用时机</a></li>\n<li><a href=\"./C++/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E7%9A%84%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F.md\">函数指针的定义方式</a></li>\n<li><a href=\"./C++/%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4.md\">计算时间</a></li>\n<li><a href=\"./C++/%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9.md\">类知识点</a></li>\n<li><a href=\"./C++/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.md\">内联函数</a></li>\n<li><a href=\"./C++/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%97%E8%8A%82%E6%95%B0.md\">数据类型字节数</a></li>\n<li><a href=\"./C++/Protocol_Buffers%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.md\">protobuf基本使用</a></li>\n<li><a href=\"./C++/EigenGeometry.md\">EigenGeometry</a></li>\n<li><a href=\"./C++/EigenGeometry.md\">Eigen几何模块的引入</a></li>\n<li><a href=\"./C++/gflags%E4%BD%BF%E7%94%A8.md\">gflags使用</a></li>\n<li><a href=\"./C++/%E5%B7%A6%E5%80%BC%E4%B8%8E%E5%8F%B3%E5%80%BC.md\">左值与右值</a></li>\n<li><a href=\"./C++/C++%E4%B8%8Bconst%E5%A2%9E%E5%BC%BA.md\">C++下const增强</a></li>\n<li><a href=\"./C++/C++11chrono%E5%BA%93.md\">C++11chrono库</a></li>\n<li><a href=\"./C++/GoogleTest.md\">GoogleTest</a></li>\n<li><a href=\"./slam_theory/%E4%BA%8C%E7%BB%B4%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%9A%84%E7%82%B9%E5%9D%90%E6%A0%87%E6%97%8B%E8%BD%AC%E5%85%B3%E7%B3%BB.md\">二维空间中的点坐标旋转关系</a></li>\n<li>Cmake相关<ul>\n<li><a href=\"./C++/CMakelists%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4.md\">CMakelists基础指令</a></li>\n<li><a href=\"./C++/CMakeLists%E7%AE%80%E6%98%93%E6%A8%A1%E6%9D%BF.md\">CMakeLists简易模板</a></li>\n<li><a href=\"./C++/Find_package.md\">find_package指令</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"SLAM配置文档\"><a href=\"#SLAM配置文档\" class=\"headerlink\" title=\"SLAM配置文档\"></a><a href=\"./slam_config/\">SLAM配置文档</a></h3><ul>\n<li><a href=\"slam_config/ubuntu18.04%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85turtlebot2.md\">ubuntu18.04系统下安装turtlebot2</a></li>\n<li><a href=\"slam_config/xavier%E8%A3%85%E6%9C%BA%E6%96%87%E6%A1%A3.md\">xavier装机文档</a></li>\n<li><a href=\"slam_config/turbot%E5%BB%BA%E5%9B%BE%E5%AF%BC%E8%88%AA%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB.md\">turbot建图导航算法</a></li>\n<li><a href=\"slam_config/Rosdep_update_failed.md\">Rosdep_update_falied</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85LIO-SAM.md\">安装LIO-SAM</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85Orb-slam2.md\">安装orb-slam2</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85Rtabmap.md\">安装Rtabmap</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85VINS-Fusion.md\">安装VINS-Fusion</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85ZED%E4%BB%A5%E5%8F%8Aros%E9%A9%B1%E5%8A%A8.md\">安装ZED以及ros驱动</a></li>\n<li><a href=\"slam_config/%E8%BD%A8%E8%BF%B9%E8%AF%84%E4%BC%B0%E4%BB%8B%E7%BB%8D%E4%B8%8Eevo%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.md\">轨迹评估介绍与evo工具使用</a></li>\n<li><a href=\"slam_config/%E5%9F%BA%E4%BA%8EROS%E7%9A%84opencv%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD.md\">基于ROS的opencv安装与卸载</a></li>\n<li><a href=\"slam_config/%E6%BF%80%E5%85%89+imu%E6%A0%87%E5%AE%9A(lidar_align%E2%80%8B).pdf\">激光+imu标定(lidar_align)</a></li>\n<li><a href=\"slam_config/%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E4%B8%8EIMU%E8%81%94%E5%90%88%E6%A0%87%E5%AE%9A(lidar_IMU_calib).md\">激光+imu标定(lidar_imu_calib)</a></li>\n<li><a href=\"slam_config/%E7%9B%B8%E6%9C%BA+imu%E6%A0%87%E5%AE%9A.pdf\">相机+imu标定</a></li>\n<li><a href=\"slam_config/%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE+%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A.pdf\">激光雷达+相机标定</a></li>\n<li><a href=\"./slam_config/Ubuntu18.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.md\">ubuntu18.04环境配置</a></li>\n</ul>\n</li>\n<li><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li>待上传</li>\n</ul>\n</li>\n<li><h3 id=\"QT编程\"><a href=\"#QT编程\" class=\"headerlink\" title=\"QT编程\"></a><a href=\"./QT\">QT编程</a></h3><ul>\n<li><a href=\"./QT/%E9%A1%B9%E7%9B%AE%E9%BB%98%E8%AE%A4%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D.md\">项目默认文件介绍</a></li>\n<li><a href=\"./QT/Qt%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E8%BF%9B%E8%A1%8C%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%88%87%E6%8D%A2.md\">qt点击按钮进行页面的切换</a></li>\n<li><a href=\"./QT/QT%E8%BF%81%E7%A7%BB%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%98%BE%E7%A4%BA%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E5%A4%A7%E4%BA%8E%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4.md\">qt迁移项目后修改时间大于当前时间</a></li>\n<li><a href=\"./QT/%E5%9F%BA%E4%BA%8Earm%E6%9E%B6%E6%9E%84%E7%9A%84NVIDIA_Xavier%E5%AE%89%E8%A3%85Qt.md\">基于arm架构的NVIDIA Xavier安装Qt</a></li>\n</ul>\n</li>\n<li><h3 id=\"一些怎么也记不全的command指令\"><a href=\"#一些怎么也记不全的command指令\" class=\"headerlink\" title=\"一些怎么也记不全的command指令\"></a>一些怎么也记不全的<a href=\"./command/\">command</a>指令</h3><ul>\n<li><a href=\"./command/Git_Command.md\">Git_Command</a></li>\n<li><a href=\"./command/Git%E4%B8%ADsubmodule%E7%9A%84%E4%BD%BF%E7%94%A8.md\">Git中submodule的使用</a></li>\n<li><a href=\"./command/git_cherry-pick.md\">Git cherry-pick的使用</a></li>\n<li><a href=\"./command/git_rebase%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95.md\">Git rebase的两种用法</a></li>\n<li><a href=\"./command/Ubuntu-xavier.md\">Ubuntu-xavier</a></li>\n<li><a href=\"./command/LIO-SAM%E8%BF%90%E8%A1%8C.md\">LIO-SAM运行</a></li>\n<li><a href=\"./command/Orb-slam2%E8%BF%90%E8%A1%8C.md\">Orb-slam2运行</a></li>\n<li><a href=\"./command/Velodyne_VLP16%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E8%B0%83%E7%94%A8.md\">Velodyne_VLP16线激光雷达调用</a></li>\n<li><a href=\"./command/Xsens%E4%BC%A0%E6%84%9F%E5%99%A8%E8%B0%83%E7%94%A8.md\">Xsens传感器调用</a></li>\n<li><a href=\"./command/ROS%E6%9F%A5%E7%9C%8BZED%E8%8A%82%E7%82%B9%E6%95%88%E6%9E%9C.md\">ROS查看ZED节点此效果</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h2><h4 id=\"Online-Learning\"><a href=\"#Online-Learning\" class=\"headerlink\" title=\"Online Learning\"></a>Online Learning</h4><ul>\n<li>文献检索：研究僧的好伴侣，<a href=\"https://www.sci-hub.ren/\">Sci-Hub</a>和<a href=\"https://arxiv.org/\">arXiv</a>，基本顶会论文都可以免费下载阅读。</li>\n<li><a href=\"https://paperswithcode.com/\">Paperswithcode</a>：作为AI工程师（cv工程师）中的一员，这个网站可以找到许多附带开源代码的高质量论文。</li>\n<li><a href=\"https://zh.1lib.education/\"><em>Z-Library</em></a>：这个数字图书馆可以搜索下载到各种各样的电子书，十分强大，而且免费，不过需要科学上网才能访问。</li>\n<li>EbookFoundation开源了一个仓库<a href=\"https://github.com/EbookFoundation/free-programming-books\">free-programming-books</a>，在这里你可以找到许多编程类电子书籍和开源课程。</li>\n<li><a href=\"https://github.com/imarvinle/awesome-cs-books\">awesome-cs-books</a>这个仓库包含了许多经典计算机书籍： 编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、程序员数学、测试、前端开发、后台开发、网络编程、Linux使用及内核、求职面试、算法与数据结构 安卓、IOS、数据库、Redis等主流的编程学习书籍。</li>\n<li><a href=\"https://github.com/521xueweihan/HelloGitHub\">HelloGitHub</a>：HelloGitHub 每个月定期分享 GitHub 上有趣、入门级的开源项目。包含多种编程语言，有助于编程语言的学习。</li>\n<li><a href=\"https://github.com/ahangchen/How-to-Be-A-Programmer-CN\">基本素养</a>：当然除了编程语言外，想要成长为一个合格的程序员还是需要具备许多其他的基本素养。</li>\n<li><a href=\"https://github.com/youngyangyang04/leetcode-master\">数据结构</a>：数据结构很重要哦，毕竟也要去面试嘛，还有一个<a href=\"https://github.com/algorithm-visualizer/algorithm-visualizer\">算法可视化平台</a>，极大地提高了我自己的算法学习理解效率。</li>\n<li><a href=\"http://cn.linux.vbird.org/linux_basic/linux_basic.php#part3\">鸟哥的私房菜</a>：这本书应该是不少linux开发者必读书籍吧。</li>\n<li><a href=\"https://www.linuxcool.com/\">Linux命令大全</a>：当然了鸟哥的私房菜实在是过于详细，平常的学习工作中我们可能只是想要简单快速查一下某一个命令的用法。 </li>\n<li><a href=\"https://www.pptsupermarket.com/\">PPT模板</a>：面向ppt编程（手动狗头），怎么可以没有好用的模板呢。</li>\n</ul>\n<h4 id=\"Electronic-Book\"><a href=\"#Electronic-Book\" class=\"headerlink\" title=\"Electronic Book\"></a>Electronic Book</h4><ul>\n<li><a href=\"https://pan.baidu.com/s/1yFiZ_fqGnKi7ExvMyvChgQ\">视觉SLAM</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/12Y30nfWqwDqeXz6sCvZgTw\">深度学习</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1DsBbgs2GZlxJel5cXpIOYQ\">C++</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1f_jGoBzd1ZihH_OhGTC82w\">Linux</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1m7_FToasf8VPln4-8jilLw\">Python</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/17eCDh-8gxEpyBoNORodYaA\">操作系统</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1GaSVK03EPcnQdH4BhcxZZA\">分布式系统</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1drB61wzhg7NG5L3KhOmrXw\">后端组件</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1qBYrPLhRpF_dhPXOQBRNZQ\">计算机网络</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1I54KS6usF89NhRgagSGjeQ\">计算机系统知识</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1pKy4BJKc7SpRGq0Js-0t_A\">前端&amp;全栈</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1eWlvbY0MrqRF2fI6p7kb4g\">数据库</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1Xl8U-exf7lb2b9ss593_2g\">算法和数据结构</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1diwvkJGb2CFkonj40yvtew\">网络编程&amp;服务器开发</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1WGa1TRnHh3m1wmV4F7EkGA\">面经</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1FCYJ-TDRfKKkHlQWSgmL3g\">面试准备</a>\t提取码：<code>1314</code></li>\n</ul>\n<h2 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h2><ul>\n<li><h3 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h3><p>​\t作为一名程序员，强烈建议大家使用Markdown语法编写文档。它允许人们使用纯文本格式编写文档，由于 Markdown 的轻量化、易读易写特性，许多网站都广泛使用 Markdown 来撰写帮助文档， 如 GitHub等， Markdown格式同步github远程仓库十分方便，不用担心windows层出不穷的格式错误。这里推荐一款Markdown语法软件Typora，由于最近该软件开始收费了，本着学习（白嫖）的精神，因此保存了不收费的一个版本。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/14Fftz3ECigAh-abV-7VHrw\">Windows版本</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1rAC-yfhA9-UNVo0y0AIxyg\">Linux版本</a>\t提取码：<code>1314</code></li>\n</ul>\n</li>\n<li><h3 id=\"XMind\"><a href=\"#XMind\" class=\"headerlink\" title=\"XMind\"></a>XMind</h3><p>​\t最好的思维导图软件，没有之一，可惜高级功能要收费，这里分享一个破解版，可以无水印导出。下载安装直接使用，破解版软件不能登录不用我多说吧，亲测无病毒，放心使用。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1oFZS5czuOF2hEbw1LfxgIw\">Windows版本</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1eiOgY8p2Ytlt8AaEUIHelQ\">Linux版本</a>\t提取码：<code>1314</code></li>\n<li>流氓软件默认安装c盘，安装好后将破解包里的app.asar文件复制替换到Program Files&#x2F;XMind&#x2F;resources目录下即可。</li>\n</ul>\n<p>\t</p>\n</li>\n<li><h3 id=\"MATLAB\"><a href=\"#MATLAB\" class=\"headerlink\" title=\"MATLAB\"></a>MATLAB</h3><p>​\tMATLAB，工科生居家旅行必备。有什么好说的吗？没什么好说的吧……</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1aH7OmFjjGApE-v0Md8aB8w\">MATLAB</a>\t提取码：<code>1314</code></li>\n<li>至于详细怎么安装，请自行百度。ps：安装镜像文件，选择密钥安装，最后将补丁文件复制到软件文件夹下全部替换就可以啦O(∩_∩)O</li>\n</ul>\n</li>\n<li><h3 id=\"IDM\"><a href=\"#IDM\" class=\"headerlink\" title=\"IDM\"></a>IDM</h3><p>​\t受够了百度云，迅雷的限速吗，请使用IDM下载器，还支持浏览器插件版本，天下苦百度迅雷久矣……..</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1vDUlk8r0bn7eb6zqnMEYkQ?pwd=1314\">IDM</a>\t提取码：<code>1314</code></li>\n<li>IDM支持百度云不限速下载助手，至于怎么用，tampermonkey插件yyds。</li>\n</ul>\n</li>\n<li><h3 id=\"Adobe-pdf\"><a href=\"#Adobe-pdf\" class=\"headerlink\" title=\"Adobe pdf\"></a>Adobe pdf</h3><p>​\t功能最全的pdf编辑器，一键安装。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1Fz0iAbfkJAFFD0ye20nvVA\">Adobe pdf</a>\t提取码：<code>1314</code></li>\n<li>Adobe系列版本越高对电脑配置要求越高，所以全家桶都有点卡顿，但不影响正常使用。附<a href=\"https://pan.baidu.com/s/1SYvUb4AeAQ5R6Lq6xypQNw\">Adobe全家桶</a>\t提取码：<code>1314</code></li>\n</ul>\n</li>\n<li><h3 id=\"Pycharm\"><a href=\"#Pycharm\" class=\"headerlink\" title=\"Pycharm\"></a>Pycharm</h3><p>​\tPython IDE推荐，我是JetBrains家一系列开发工具的忠实使用者，主要优点：与时俱进，界面优美，功能强大。你还在为同步GitHub仓库发愁吗，你还在为ssh链接服务器痛苦吗，Pycharm一键注册99年，从此告别Mobxterm。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/11syiJLEngQL3-8pzqshe7w\">Pycharm(windows版本)</a>\t提取码：<code>1314</code></li>\n<li>将注册机拖到pycharm里一键完成注册即可。</li>\n</ul>\n</li>\n<li><h3 id=\"Office全家桶\"><a href=\"#Office全家桶\" class=\"headerlink\" title=\"Office全家桶\"></a>Office全家桶</h3><p>​\toffice是目前最常用的一类办公软件，使用它可以解决日常生活和工作中遇到的很多问题。里面包含了常用的办公组件而其中就包含了Word、Excel、PowerPoint、Access等。熟练掌握offic的操作技巧是对计算机工作者的基本要求,也可以帮助你提高工作效率出色的完成企业办公需求!新版的Office与之前的老版本相比，不仅是界面上有所改进，同时在功能上也带来一些新特性!</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1LJo45XDnsSltjNCaiWT0MQ\">Office全家桶</a> 提取码：<code>1314</code></li>\n<li><a href=\"./something_else/%E8%8E%B7%E5%8F%96Office2021%E5%AE%89%E8%A3%85%E5%8C%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7.md\">破解教程</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h2><ul>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows\">科学上网</a>：一个程序员咋能不会科学上网捏，国内的程序员论坛实在是不敢恭维。这里推荐一个比较不错的，至于怎么用，请自己去学习吧^_^。</li>\n<li>一些拥有slam相关业务并且表现不错的<a href=\"./something_else/Company.md\">公司</a></li>\n</ul>\n<h2 id=\"维护者\"><a href=\"#维护者\" class=\"headerlink\" title=\"维护者\"></a>维护者</h2><p><a href=\"https://github.com/hanlin-cheng\">@HanLin</a></p>\n<blockquote>\n<p><em>关山难越，谁悲失路之人。萍水相逢，尽是他乡之客。</em></p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-3.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Study-note-from-HanLin\"><a href=\"#Study-note-from-HanLin\" class=\"headerlink\" title=\"Study-note from HanLin\"></a>Study-note from HanLin</h1><h5 id=\"内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来…\"><a href=\"#内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来…\" class=\"headerlink\" title=\"内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来…\"></a><em>内心os：我好笨，我记不住，虽然好麻烦好麻烦，但是我得做笔记记录下来…</em></h5><p>本仓库包含以下内容：</p>\n<ol>\n<li><p>一些学习的<a href=\"#%E5%BF%83%E7%9A%84%E7%AC%94%E8%AE%B0\">心得笔记</a></p>\n</li>\n<li><p>一些可能有用的<a href=\"#Resource\">电子书籍和学习资源</a>（白嫖使我快乐）</p>\n</li>\n<li><p>一些<a href=\"#Software\">学习软件</a>的安装（还是白嫖^_^，仅供自身学习使用，请勿外传，亲测无病毒，放心使用！）</p>\n</li>\n<li><p>一些<a href=\"#Other\">杂项</a></p>\n</li>\n<li><p>TODO……!^_^</p>\n</li>\n</ol>\n<h2 id=\"心得笔记\"><a href=\"#心得笔记\" class=\"headerlink\" title=\"心得笔记\"></a>心得笔记</h2><ul>\n<li><h3 id=\"SLAM-Theory\"><a href=\"#SLAM-Theory\" class=\"headerlink\" title=\"SLAM Theory\"></a><a href=\"./slam_theory/\">SLAM Theory</a></h3><ul>\n<li><a href=\"./slam_theory/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95.md\">匈牙利算法</a></li>\n<li><a href=\"./slam_theory/%E7%9B%B8%E6%9C%BA%E5%8F%82%E6%95%B0DKPR%E7%9A%84%E8%A7%A3%E9%87%8A.md\">相机参数DKPR的解释</a></li>\n<li><a href=\"./slam_theory/%E5%A4%9A%E7%BB%B4%E9%AB%98%E6%96%AF%E5%88%86%E5%B8%83.md\">多维高斯分布</a></li>\n<li><a href=\"./slam_theory/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83.md\">正态分布</a></li>\n<li><a href=\"./slam_theory/%E7%81%B0%E5%BA%A6%E8%B4%A8%E5%BF%83%E6%B3%95.md\">灰度质心法</a></li>\n<li><a href=\"./slam_theory/%E9%9B%85%E5%85%8B%E6%AF%94%E7%9F%A9%E9%98%B5%E5%92%8C%E6%B5%B7%E5%A1%9E%E7%9F%A9%E9%98%B5.md\">雅可比矩阵和海塞矩阵</a></li>\n<li><a href=\"./slam_theory/%E9%AB%98%E6%96%AF%E7%89%9B%E9%A1%BF%E6%B3%95.md\">高斯牛顿法</a></li>\n<li><a href=\"./slam_theory/%E5%BD%92%E4%B8%80%E5%8C%96%E4%B8%8E%E6%A0%87%E5%87%86%E5%8C%96.md\">归一化与标准化</a></li>\n<li><a href=\"./slam_theory/%E8%B6%85%E5%AE%9A%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E8%A7%A3.md\">超定方程组的最小二乘解</a></li>\n<li><a href=\"./slam_theory/%E5%8D%95%E7%9B%AE%E8%A7%86%E8%A7%89%E7%9A%84%E5%B0%BA%E5%BA%A6%E7%AD%89%E4%BB%B7%E6%80%A7.md\">单目视觉的尺度等价性</a></li>\n<li><a href=\"./slam_theory/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80%E5%BC%8F.md\">多元函数的泰勒展开式</a></li>\n<li><a href=\"./slam_theory/%E7%9F%A9%E9%98%B5%E7%9A%84%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3.md\">矩阵的奇异值分解</a></li>\n<li><a href=\"./slam_theory/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E9%BD%90%E6%AC%A1%E5%9D%90%E6%A0%87.md\">为什么使用齐次坐标</a></li>\n<li><a href=\"./slam_theory/%E5%90%91%E9%87%8F%E7%A7%AF(%E7%9F%A2%E7%A7%AF)%E4%B8%8E%E6%95%B0%E9%87%8F%E7%A7%AF(%E6%A0%87%E7%A7%AF)%E7%9A%84%E5%8C%BA%E5%88%AB.md\">向量积(矢积)与数量积(标积)的区别</a></li>\n<li><a href=\"./slam_theory/%E5%8D%8F%E6%96%B9%E5%B7%AE%E7%9F%A9%E9%98%B5.md\">协方差矩阵</a></li>\n<li><a href=\"./slam_theory/%E9%87%8D%E6%8A%95%E5%BD%B1%E8%AF%AF%E5%B7%AE.md\">重投影误差</a></li>\n<li><a href=\"./slam_theory/lidar_calibration_cn.pdf\">多线激光雷达与组合惯导外参标定原理</a></li>\n<li><a href=\"./slam_theory/%E5%9B%BE%E4%BC%98%E5%8C%96g2o.pdf\">图优化g2o</a></li>\n<li><a href=\"./slam_theory/%E7%9F%A9%E9%98%B5%E5%BE%AE%E5%88%86-%E6%B8%85%E5%8D%8E.pdf\">矩阵微分</a></li>\n<li><a href=\"./slam_theory/%E6%9C%AC%E8%B4%A8%E7%9F%A9%E9%98%B5%EF%BC%8C%E5%9F%BA%E7%A1%80%E7%9F%A9%E9%98%B5%EF%BC%8C%E8%87%AA%E7%94%B1%E5%BA%A6%E5%8F%8A%E5%85%B6%E8%A7%A3%E6%B3%95.md\">本质矩阵&#x2F;基础矩阵&#x2F;自由度及其解法</a></li>\n<li><a href=\"./slam_theory/2d%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E8%BF%90%E5%8A%A8%E8%A1%A5%E5%81%BF%E6%96%B9%E6%B3%95(%E5%8E%BB%E7%95%B8%E5%8F%98).md\">2d激光雷达运动补偿方法(去畸变)</a></li>\n<li><a href=\"./slam_theory/%E5%B1%80%E9%83%A8%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95DWA.md\">局部规划算法DWA</a></li>\n<li><a href=\"./slam_theory/ros2_cost_function.md\">ros2 cost function</a></li>\n<li><a href=\"./slam_theory/%E8%B7%AF%E5%BE%84%E8%A7%84%E5%88%92%E4%B9%8BA-star%E7%AE%97%E6%B3%95.md\">路径规划之A*算法</a></li>\n<li><a href=\"./slam_theory/Theta_star-Any-Angle-Path-Planning-on-Grids.md\">路径规划之Theta*算法</a></li>\n<li><a href=\"./slam_theory/%E6%AC%A7%E6%8B%89%E8%A7%92%E4%B8%8E%E5%9D%90%E6%A0%87%E7%B3%BB%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2.md\">欧拉角与坐标系旋转变换</a></li>\n<li><a href=\"./slam_theory/%E6%9C%AC%E8%B4%A8%E7%9F%A9%E9%98%B5%E5%9F%BA%E7%A1%80%E7%9F%A9%E9%98%B5%E7%9A%84%E8%87%AA%E7%94%B1%E5%BA%A6%E5%8F%8A%E5%85%B6%E8%A7%A3%E6%B3%95.md\">本质矩阵基础矩阵的自由度及其解法</a></li>\n<li><a href=\"./slam_theory/SLAM%E4%B8%AD%E7%9A%84%E4%BD%8D%E5%A7%BF%E5%8F%98%E6%8D%A2%E4%B8%8E%E8%BD%A8%E8%BF%B9%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87.md\">SLAM中的位姿变换与轨迹评价指标APE、RPE、ATE、RTE</a></li>\n<li><a href=\"./slam_theory/%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87.md\">激光雷达性能指标</a></li>\n<li>ROS相关<ul>\n<li><a href=\"./C++/ROS%E6%8C%87%E4%BB%A4.md\">ROS指令</a></li>\n<li><a href=\"./slam_theory/ROS%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E4%BF%A1%E6%81%AF%E3%80%81%E7%82%B9%E4%BA%91%E4%BF%A1%E6%81%AF%E5%92%8CPCL%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2.md\">ROS激光雷达信息点云信息和PCL信息之间的转换</a></li>\n<li><a href=\"./slam_theory/ROSNodehandle%E5%8F%A5%E6%9F%84%E7%9A%84%E7%90%86%E8%A7%A3.md\">ROS Nodehandle句柄的理解</a></li>\n<li><a href=\"./slam_theory/ROSparam%E7%9A%84%E4%BD%BF%E7%94%A8.md\">ROS param 的使用</a></li>\n<li><a href=\"./slam_theory/Ros%E4%B8%ADRemap(%E8%AF%9D%E9%A2%98%E9%87%8D%E6%98%A0%E5%B0%84)%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.md\">ROS中Remap(话题重映射)的两种使用方法</a></li>\n</ul>\n</li>\n<li>待上传</li>\n</ul>\n</li>\n<li><h3 id=\"C-相关知识\"><a href=\"#C-相关知识\" class=\"headerlink\" title=\"C++相关知识\"></a><a href=\"./C++\">C++相关知识</a></h3><ul>\n<li><a href=\"./C++/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.md\">常用函数</a></li>\n<li><a href=\"./C++/opencv%E5%B8%B8%E7%94%A8api.md\">opencv常用api</a></li>\n<li><a href=\"./C++/c++%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B.md\">c++并发与多线程</a></li>\n<li><a href=\"./C++/STL%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8%E6%97%B6%E6%9C%BA.md\">STL容器使用时机</a></li>\n<li><a href=\"./C++/%E8%BD%AC%E6%8D%A2.md\">类型转换</a></li>\n<li><a href=\"./C++/Opencv_Mat.md\">Opencv_Mat</a></li>\n<li><a href=\"./C++/const%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0.md\">const成员函数</a></li>\n<li><a href=\"./C++/cin%E4%B8%8Eget()getline()%E8%BE%93%E5%85%A5%E9%97%AE%E9%A2%98.md\">cin与get()getline()输入问题</a></li>\n<li><a href=\"./C++/string%E5%92%8Ccstring%E5%A4%B4%E6%96%87%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB.md\">string和cstring头文件的区别</a></li>\n<li><a href=\"./C++/%E5%B8%B8%E8%A7%84%E5%87%BD%E6%95%B0%E4%B8%8E%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.md\">常规函数与内联函数</a></li>\n<li><a href=\"./C++/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.md\">单例模式</a></li>\n<li><a href=\"./C++/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86.md\">二叉树遍历</a></li>\n<li><a href=\"./C++/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8%E6%97%B6%E6%9C%BA.md\">构造函数的调用时机</a></li>\n<li><a href=\"./C++/%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E7%9A%84%E5%AE%9A%E4%B9%89%E6%96%B9%E5%BC%8F.md\">函数指针的定义方式</a></li>\n<li><a href=\"./C++/%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4.md\">计算时间</a></li>\n<li><a href=\"./C++/%E7%B1%BB%E7%9F%A5%E8%AF%86%E7%82%B9.md\">类知识点</a></li>\n<li><a href=\"./C++/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0.md\">内联函数</a></li>\n<li><a href=\"./C++/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%97%E8%8A%82%E6%95%B0.md\">数据类型字节数</a></li>\n<li><a href=\"./C++/Protocol_Buffers%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.md\">protobuf基本使用</a></li>\n<li><a href=\"./C++/EigenGeometry.md\">EigenGeometry</a></li>\n<li><a href=\"./C++/EigenGeometry.md\">Eigen几何模块的引入</a></li>\n<li><a href=\"./C++/gflags%E4%BD%BF%E7%94%A8.md\">gflags使用</a></li>\n<li><a href=\"./C++/%E5%B7%A6%E5%80%BC%E4%B8%8E%E5%8F%B3%E5%80%BC.md\">左值与右值</a></li>\n<li><a href=\"./C++/C++%E4%B8%8Bconst%E5%A2%9E%E5%BC%BA.md\">C++下const增强</a></li>\n<li><a href=\"./C++/C++11chrono%E5%BA%93.md\">C++11chrono库</a></li>\n<li><a href=\"./C++/GoogleTest.md\">GoogleTest</a></li>\n<li><a href=\"./slam_theory/%E4%BA%8C%E7%BB%B4%E7%A9%BA%E9%97%B4%E4%B8%AD%E7%9A%84%E7%82%B9%E5%9D%90%E6%A0%87%E6%97%8B%E8%BD%AC%E5%85%B3%E7%B3%BB.md\">二维空间中的点坐标旋转关系</a></li>\n<li>Cmake相关<ul>\n<li><a href=\"./C++/CMakelists%E5%9F%BA%E7%A1%80%E6%8C%87%E4%BB%A4.md\">CMakelists基础指令</a></li>\n<li><a href=\"./C++/CMakeLists%E7%AE%80%E6%98%93%E6%A8%A1%E6%9D%BF.md\">CMakeLists简易模板</a></li>\n<li><a href=\"./C++/Find_package.md\">find_package指令</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"SLAM配置文档\"><a href=\"#SLAM配置文档\" class=\"headerlink\" title=\"SLAM配置文档\"></a><a href=\"./slam_config/\">SLAM配置文档</a></h3><ul>\n<li><a href=\"slam_config/ubuntu18.04%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%89%E8%A3%85turtlebot2.md\">ubuntu18.04系统下安装turtlebot2</a></li>\n<li><a href=\"slam_config/xavier%E8%A3%85%E6%9C%BA%E6%96%87%E6%A1%A3.md\">xavier装机文档</a></li>\n<li><a href=\"slam_config/turbot%E5%BB%BA%E5%9B%BE%E5%AF%BC%E8%88%AA%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB.md\">turbot建图导航算法</a></li>\n<li><a href=\"slam_config/Rosdep_update_failed.md\">Rosdep_update_falied</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85LIO-SAM.md\">安装LIO-SAM</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85Orb-slam2.md\">安装orb-slam2</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85Rtabmap.md\">安装Rtabmap</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85VINS-Fusion.md\">安装VINS-Fusion</a></li>\n<li><a href=\"slam_config/%E5%AE%89%E8%A3%85ZED%E4%BB%A5%E5%8F%8Aros%E9%A9%B1%E5%8A%A8.md\">安装ZED以及ros驱动</a></li>\n<li><a href=\"slam_config/%E8%BD%A8%E8%BF%B9%E8%AF%84%E4%BC%B0%E4%BB%8B%E7%BB%8D%E4%B8%8Eevo%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.md\">轨迹评估介绍与evo工具使用</a></li>\n<li><a href=\"slam_config/%E5%9F%BA%E4%BA%8EROS%E7%9A%84opencv%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD.md\">基于ROS的opencv安装与卸载</a></li>\n<li><a href=\"slam_config/%E6%BF%80%E5%85%89+imu%E6%A0%87%E5%AE%9A(lidar_align%E2%80%8B).pdf\">激光+imu标定(lidar_align)</a></li>\n<li><a href=\"slam_config/%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E4%B8%8EIMU%E8%81%94%E5%90%88%E6%A0%87%E5%AE%9A(lidar_IMU_calib).md\">激光+imu标定(lidar_imu_calib)</a></li>\n<li><a href=\"slam_config/%E7%9B%B8%E6%9C%BA+imu%E6%A0%87%E5%AE%9A.pdf\">相机+imu标定</a></li>\n<li><a href=\"slam_config/%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE+%E7%9B%B8%E6%9C%BA%E6%A0%87%E5%AE%9A.pdf\">激光雷达+相机标定</a></li>\n<li><a href=\"./slam_config/Ubuntu18.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.md\">ubuntu18.04环境配置</a></li>\n</ul>\n</li>\n<li><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li>待上传</li>\n</ul>\n</li>\n<li><h3 id=\"QT编程\"><a href=\"#QT编程\" class=\"headerlink\" title=\"QT编程\"></a><a href=\"./QT\">QT编程</a></h3><ul>\n<li><a href=\"./QT/%E9%A1%B9%E7%9B%AE%E9%BB%98%E8%AE%A4%E6%96%87%E4%BB%B6%E4%BB%8B%E7%BB%8D.md\">项目默认文件介绍</a></li>\n<li><a href=\"./QT/Qt%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E8%BF%9B%E8%A1%8C%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%88%87%E6%8D%A2.md\">qt点击按钮进行页面的切换</a></li>\n<li><a href=\"./QT/QT%E8%BF%81%E7%A7%BB%E9%A1%B9%E7%9B%AE%E5%90%8E%E6%98%BE%E7%A4%BA%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E5%A4%A7%E4%BA%8E%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4.md\">qt迁移项目后修改时间大于当前时间</a></li>\n<li><a href=\"./QT/%E5%9F%BA%E4%BA%8Earm%E6%9E%B6%E6%9E%84%E7%9A%84NVIDIA_Xavier%E5%AE%89%E8%A3%85Qt.md\">基于arm架构的NVIDIA Xavier安装Qt</a></li>\n</ul>\n</li>\n<li><h3 id=\"一些怎么也记不全的command指令\"><a href=\"#一些怎么也记不全的command指令\" class=\"headerlink\" title=\"一些怎么也记不全的command指令\"></a>一些怎么也记不全的<a href=\"./command/\">command</a>指令</h3><ul>\n<li><a href=\"./command/Git_Command.md\">Git_Command</a></li>\n<li><a href=\"./command/Git%E4%B8%ADsubmodule%E7%9A%84%E4%BD%BF%E7%94%A8.md\">Git中submodule的使用</a></li>\n<li><a href=\"./command/git_cherry-pick.md\">Git cherry-pick的使用</a></li>\n<li><a href=\"./command/git_rebase%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%94%A8%E6%B3%95.md\">Git rebase的两种用法</a></li>\n<li><a href=\"./command/Ubuntu-xavier.md\">Ubuntu-xavier</a></li>\n<li><a href=\"./command/LIO-SAM%E8%BF%90%E8%A1%8C.md\">LIO-SAM运行</a></li>\n<li><a href=\"./command/Orb-slam2%E8%BF%90%E8%A1%8C.md\">Orb-slam2运行</a></li>\n<li><a href=\"./command/Velodyne_VLP16%E6%BF%80%E5%85%89%E9%9B%B7%E8%BE%BE%E8%B0%83%E7%94%A8.md\">Velodyne_VLP16线激光雷达调用</a></li>\n<li><a href=\"./command/Xsens%E4%BC%A0%E6%84%9F%E5%99%A8%E8%B0%83%E7%94%A8.md\">Xsens传感器调用</a></li>\n<li><a href=\"./command/ROS%E6%9F%A5%E7%9C%8BZED%E8%8A%82%E7%82%B9%E6%95%88%E6%9E%9C.md\">ROS查看ZED节点此效果</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Resource\"><a href=\"#Resource\" class=\"headerlink\" title=\"Resource\"></a>Resource</h2><h4 id=\"Online-Learning\"><a href=\"#Online-Learning\" class=\"headerlink\" title=\"Online Learning\"></a>Online Learning</h4><ul>\n<li>文献检索：研究僧的好伴侣，<a href=\"https://www.sci-hub.ren/\">Sci-Hub</a>和<a href=\"https://arxiv.org/\">arXiv</a>，基本顶会论文都可以免费下载阅读。</li>\n<li><a href=\"https://paperswithcode.com/\">Paperswithcode</a>：作为AI工程师（cv工程师）中的一员，这个网站可以找到许多附带开源代码的高质量论文。</li>\n<li><a href=\"https://zh.1lib.education/\"><em>Z-Library</em></a>：这个数字图书馆可以搜索下载到各种各样的电子书，十分强大，而且免费，不过需要科学上网才能访问。</li>\n<li>EbookFoundation开源了一个仓库<a href=\"https://github.com/EbookFoundation/free-programming-books\">free-programming-books</a>，在这里你可以找到许多编程类电子书籍和开源课程。</li>\n<li><a href=\"https://github.com/imarvinle/awesome-cs-books\">awesome-cs-books</a>这个仓库包含了许多经典计算机书籍： 编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、程序员数学、测试、前端开发、后台开发、网络编程、Linux使用及内核、求职面试、算法与数据结构 安卓、IOS、数据库、Redis等主流的编程学习书籍。</li>\n<li><a href=\"https://github.com/521xueweihan/HelloGitHub\">HelloGitHub</a>：HelloGitHub 每个月定期分享 GitHub 上有趣、入门级的开源项目。包含多种编程语言，有助于编程语言的学习。</li>\n<li><a href=\"https://github.com/ahangchen/How-to-Be-A-Programmer-CN\">基本素养</a>：当然除了编程语言外，想要成长为一个合格的程序员还是需要具备许多其他的基本素养。</li>\n<li><a href=\"https://github.com/youngyangyang04/leetcode-master\">数据结构</a>：数据结构很重要哦，毕竟也要去面试嘛，还有一个<a href=\"https://github.com/algorithm-visualizer/algorithm-visualizer\">算法可视化平台</a>，极大地提高了我自己的算法学习理解效率。</li>\n<li><a href=\"http://cn.linux.vbird.org/linux_basic/linux_basic.php#part3\">鸟哥的私房菜</a>：这本书应该是不少linux开发者必读书籍吧。</li>\n<li><a href=\"https://www.linuxcool.com/\">Linux命令大全</a>：当然了鸟哥的私房菜实在是过于详细，平常的学习工作中我们可能只是想要简单快速查一下某一个命令的用法。 </li>\n<li><a href=\"https://www.pptsupermarket.com/\">PPT模板</a>：面向ppt编程（手动狗头），怎么可以没有好用的模板呢。</li>\n</ul>\n<h4 id=\"Electronic-Book\"><a href=\"#Electronic-Book\" class=\"headerlink\" title=\"Electronic Book\"></a>Electronic Book</h4><ul>\n<li><a href=\"https://pan.baidu.com/s/1yFiZ_fqGnKi7ExvMyvChgQ\">视觉SLAM</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/12Y30nfWqwDqeXz6sCvZgTw\">深度学习</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1DsBbgs2GZlxJel5cXpIOYQ\">C++</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1f_jGoBzd1ZihH_OhGTC82w\">Linux</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1m7_FToasf8VPln4-8jilLw\">Python</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/17eCDh-8gxEpyBoNORodYaA\">操作系统</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1GaSVK03EPcnQdH4BhcxZZA\">分布式系统</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1drB61wzhg7NG5L3KhOmrXw\">后端组件</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1qBYrPLhRpF_dhPXOQBRNZQ\">计算机网络</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1I54KS6usF89NhRgagSGjeQ\">计算机系统知识</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1pKy4BJKc7SpRGq0Js-0t_A\">前端&amp;全栈</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1eWlvbY0MrqRF2fI6p7kb4g\">数据库</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1Xl8U-exf7lb2b9ss593_2g\">算法和数据结构</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1diwvkJGb2CFkonj40yvtew\">网络编程&amp;服务器开发</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1WGa1TRnHh3m1wmV4F7EkGA\">面经</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1FCYJ-TDRfKKkHlQWSgmL3g\">面试准备</a>\t提取码：<code>1314</code></li>\n</ul>\n<h2 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h2><ul>\n<li><h3 id=\"Typora\"><a href=\"#Typora\" class=\"headerlink\" title=\"Typora\"></a>Typora</h3><p>​\t作为一名程序员，强烈建议大家使用Markdown语法编写文档。它允许人们使用纯文本格式编写文档，由于 Markdown 的轻量化、易读易写特性，许多网站都广泛使用 Markdown 来撰写帮助文档， 如 GitHub等， Markdown格式同步github远程仓库十分方便，不用担心windows层出不穷的格式错误。这里推荐一款Markdown语法软件Typora，由于最近该软件开始收费了，本着学习（白嫖）的精神，因此保存了不收费的一个版本。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/14Fftz3ECigAh-abV-7VHrw\">Windows版本</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1rAC-yfhA9-UNVo0y0AIxyg\">Linux版本</a>\t提取码：<code>1314</code></li>\n</ul>\n</li>\n<li><h3 id=\"XMind\"><a href=\"#XMind\" class=\"headerlink\" title=\"XMind\"></a>XMind</h3><p>​\t最好的思维导图软件，没有之一，可惜高级功能要收费，这里分享一个破解版，可以无水印导出。下载安装直接使用，破解版软件不能登录不用我多说吧，亲测无病毒，放心使用。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1oFZS5czuOF2hEbw1LfxgIw\">Windows版本</a>\t提取码：<code>1314</code></li>\n<li><a href=\"https://pan.baidu.com/s/1eiOgY8p2Ytlt8AaEUIHelQ\">Linux版本</a>\t提取码：<code>1314</code></li>\n<li>流氓软件默认安装c盘，安装好后将破解包里的app.asar文件复制替换到Program Files&#x2F;XMind&#x2F;resources目录下即可。</li>\n</ul>\n<p>\t</p>\n</li>\n<li><h3 id=\"MATLAB\"><a href=\"#MATLAB\" class=\"headerlink\" title=\"MATLAB\"></a>MATLAB</h3><p>​\tMATLAB，工科生居家旅行必备。有什么好说的吗？没什么好说的吧……</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1aH7OmFjjGApE-v0Md8aB8w\">MATLAB</a>\t提取码：<code>1314</code></li>\n<li>至于详细怎么安装，请自行百度。ps：安装镜像文件，选择密钥安装，最后将补丁文件复制到软件文件夹下全部替换就可以啦O(∩_∩)O</li>\n</ul>\n</li>\n<li><h3 id=\"IDM\"><a href=\"#IDM\" class=\"headerlink\" title=\"IDM\"></a>IDM</h3><p>​\t受够了百度云，迅雷的限速吗，请使用IDM下载器，还支持浏览器插件版本，天下苦百度迅雷久矣……..</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1vDUlk8r0bn7eb6zqnMEYkQ?pwd=1314\">IDM</a>\t提取码：<code>1314</code></li>\n<li>IDM支持百度云不限速下载助手，至于怎么用，tampermonkey插件yyds。</li>\n</ul>\n</li>\n<li><h3 id=\"Adobe-pdf\"><a href=\"#Adobe-pdf\" class=\"headerlink\" title=\"Adobe pdf\"></a>Adobe pdf</h3><p>​\t功能最全的pdf编辑器，一键安装。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1Fz0iAbfkJAFFD0ye20nvVA\">Adobe pdf</a>\t提取码：<code>1314</code></li>\n<li>Adobe系列版本越高对电脑配置要求越高，所以全家桶都有点卡顿，但不影响正常使用。附<a href=\"https://pan.baidu.com/s/1SYvUb4AeAQ5R6Lq6xypQNw\">Adobe全家桶</a>\t提取码：<code>1314</code></li>\n</ul>\n</li>\n<li><h3 id=\"Pycharm\"><a href=\"#Pycharm\" class=\"headerlink\" title=\"Pycharm\"></a>Pycharm</h3><p>​\tPython IDE推荐，我是JetBrains家一系列开发工具的忠实使用者，主要优点：与时俱进，界面优美，功能强大。你还在为同步GitHub仓库发愁吗，你还在为ssh链接服务器痛苦吗，Pycharm一键注册99年，从此告别Mobxterm。</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/11syiJLEngQL3-8pzqshe7w\">Pycharm(windows版本)</a>\t提取码：<code>1314</code></li>\n<li>将注册机拖到pycharm里一键完成注册即可。</li>\n</ul>\n</li>\n<li><h3 id=\"Office全家桶\"><a href=\"#Office全家桶\" class=\"headerlink\" title=\"Office全家桶\"></a>Office全家桶</h3><p>​\toffice是目前最常用的一类办公软件，使用它可以解决日常生活和工作中遇到的很多问题。里面包含了常用的办公组件而其中就包含了Word、Excel、PowerPoint、Access等。熟练掌握offic的操作技巧是对计算机工作者的基本要求,也可以帮助你提高工作效率出色的完成企业办公需求!新版的Office与之前的老版本相比，不仅是界面上有所改进，同时在功能上也带来一些新特性!</p>\n<ul>\n<li><a href=\"https://pan.baidu.com/s/1LJo45XDnsSltjNCaiWT0MQ\">Office全家桶</a> 提取码：<code>1314</code></li>\n<li><a href=\"./something_else/%E8%8E%B7%E5%8F%96Office2021%E5%AE%89%E8%A3%85%E5%8C%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%BF%80%E6%B4%BB%E5%B7%A5%E5%85%B7.md\">破解教程</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Other\"><a href=\"#Other\" class=\"headerlink\" title=\"Other\"></a>Other</h2><ul>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows\">科学上网</a>：一个程序员咋能不会科学上网捏，国内的程序员论坛实在是不敢恭维。这里推荐一个比较不错的，至于怎么用，请自己去学习吧^_^。</li>\n<li>一些拥有slam相关业务并且表现不错的<a href=\"./something_else/Company.md\">公司</a></li>\n</ul>\n<h2 id=\"维护者\"><a href=\"#维护者\" class=\"headerlink\" title=\"维护者\"></a>维护者</h2><p><a href=\"https://github.com/hanlin-cheng\">@HanLin</a></p>\n<blockquote>\n<p><em>关山难越，谁悲失路之人。萍水相逢，尽是他乡之客。</em></p>\n</blockquote>\n"},{"title":"C++下const增强","date":"2023-08-24T14:38:18.607Z","description":null,"top_img":false,"_content":"\n# C++下const增强\n\n### 全局const间接修改\n\n```c++\nconst int m_a = 100;\t//分配到常量区\nvoid fun()\n{\n\tint * p = (int *)&m_a;\n\t*p = 200;\n}\n```\n\n结论：编译成功，但是运行失败，修改失败\n\n###  局部const间接修改\n\n```c++\nvoid fun()\n{\n\tconst int m_b = 100;\t//分配到栈上\n\tint * p = (int *)&m_b;\n\t*p = 200; \n    cout << m_b << endl;\n}\n```\n\n结论：运行成功，修改失败\n\n### 原因分析：\n\n![c++const修饰的局部变量分配到符号表上](media/c++const%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%88%86%E9%85%8D%E5%88%B0%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%B8%8A.png)\n\n`因此c++ const可以称为常量`\n\n### 链接属性\n\nconst变量默认是内部链接属性，加extern可以提高作用域\n\n### 内存分配\n\n```c++\nvoid fun()\n{\n\tconst int m_b = 100;\t//分配到栈上\n\tint * p = (int *)&m_b;\n\t*p = 200; \n}\n```\n\n同上分配的临时内存\n\n```c++\nvoid fun()\n{\n\tint a = 10;\n\tconst int m_b = a;\t//分配到栈上\n\tint * p = (int *)&m_b;\n\t*p = 200; \n}\n```\n\n修改成功，因为分配了内存\n\n```c++\nstruct Person\n{\n\tstring m_Name;\n\tint m_Age;\n};\nvoid test03()\n{\n\tconst Person p;\n\t//p.m_Age = 10;      //直接修改失败\n\n\tPerson * pp = (Person *)&p;\n\t(*pp).m_Name = \"Tom\";\n\tpp->m_Age = 10;\n\n\tcout << \"姓名 \" << p.m_Name << \" 年龄\" << p.m_Age << endl;\n}\n```\n\n间接修改成功，分配了内存","source":"_posts/C++/C++下const增强.md","raw":"---\ntitle: C++下const增强\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n---\n\n# C++下const增强\n\n### 全局const间接修改\n\n```c++\nconst int m_a = 100;\t//分配到常量区\nvoid fun()\n{\n\tint * p = (int *)&m_a;\n\t*p = 200;\n}\n```\n\n结论：编译成功，但是运行失败，修改失败\n\n###  局部const间接修改\n\n```c++\nvoid fun()\n{\n\tconst int m_b = 100;\t//分配到栈上\n\tint * p = (int *)&m_b;\n\t*p = 200; \n    cout << m_b << endl;\n}\n```\n\n结论：运行成功，修改失败\n\n### 原因分析：\n\n![c++const修饰的局部变量分配到符号表上](media/c++const%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%88%86%E9%85%8D%E5%88%B0%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%B8%8A.png)\n\n`因此c++ const可以称为常量`\n\n### 链接属性\n\nconst变量默认是内部链接属性，加extern可以提高作用域\n\n### 内存分配\n\n```c++\nvoid fun()\n{\n\tconst int m_b = 100;\t//分配到栈上\n\tint * p = (int *)&m_b;\n\t*p = 200; \n}\n```\n\n同上分配的临时内存\n\n```c++\nvoid fun()\n{\n\tint a = 10;\n\tconst int m_b = a;\t//分配到栈上\n\tint * p = (int *)&m_b;\n\t*p = 200; \n}\n```\n\n修改成功，因为分配了内存\n\n```c++\nstruct Person\n{\n\tstring m_Name;\n\tint m_Age;\n};\nvoid test03()\n{\n\tconst Person p;\n\t//p.m_Age = 10;      //直接修改失败\n\n\tPerson * pp = (Person *)&p;\n\t(*pp).m_Name = \"Tom\";\n\tpp->m_Age = 10;\n\n\tcout << \"姓名 \" << p.m_Name << \" 年龄\" << p.m_Age << endl;\n}\n```\n\n间接修改成功，分配了内存","slug":"C++/C++下const增强","published":1,"updated":"2023-08-25T08:33:18.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66m0003gcr736557n96","content":"<h1 id=\"C-下const增强\"><a href=\"#C-下const增强\" class=\"headerlink\" title=\"C++下const增强\"></a>C++下const增强</h1><h3 id=\"全局const间接修改\"><a href=\"#全局const间接修改\" class=\"headerlink\" title=\"全局const间接修改\"></a>全局const间接修改</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> m_a = <span class=\"number\">100</span>;\t<span class=\"comment\">//分配到常量区</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)&amp;m_a;</span><br><span class=\"line\">\t*p = <span class=\"number\">200</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结论：编译成功，但是运行失败，修改失败</p>\n<h3 id=\"局部const间接修改\"><a href=\"#局部const间接修改\" class=\"headerlink\" title=\"局部const间接修改\"></a>局部const间接修改</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> m_b = <span class=\"number\">100</span>;\t<span class=\"comment\">//分配到栈上</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)&amp;m_b;</span><br><span class=\"line\">\t*p = <span class=\"number\">200</span>; </span><br><span class=\"line\">    cout &lt;&lt; m_b &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结论：运行成功，修改失败</p>\n<h3 id=\"原因分析：\"><a href=\"#原因分析：\" class=\"headerlink\" title=\"原因分析：\"></a>原因分析：</h3><p><img src=\"/media/c++const%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%88%86%E9%85%8D%E5%88%B0%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%B8%8A.png\" alt=\"c++const修饰的局部变量分配到符号表上\"></p>\n<p><code>因此c++ const可以称为常量</code></p>\n<h3 id=\"链接属性\"><a href=\"#链接属性\" class=\"headerlink\" title=\"链接属性\"></a>链接属性</h3><p>const变量默认是内部链接属性，加extern可以提高作用域</p>\n<h3 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> m_b = <span class=\"number\">100</span>;\t<span class=\"comment\">//分配到栈上</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)&amp;m_b;</span><br><span class=\"line\">\t*p = <span class=\"number\">200</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同上分配的临时内存</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> m_b = a;\t<span class=\"comment\">//分配到栈上</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)&amp;m_b;</span><br><span class=\"line\">\t*p = <span class=\"number\">200</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改成功，因为分配了内存</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring m_Name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> Person p;</span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Age = 10;      //直接修改失败</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson * pp = (Person *)&amp;p;</span><br><span class=\"line\">\t(*pp).m_Name = <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\">\tpp-&gt;m_Age = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名 &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class=\"string\">&quot; 年龄&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>间接修改成功，分配了内存</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-6.png","cover_type":"img","excerpt":"","more":"<h1 id=\"C-下const增强\"><a href=\"#C-下const增强\" class=\"headerlink\" title=\"C++下const增强\"></a>C++下const增强</h1><h3 id=\"全局const间接修改\"><a href=\"#全局const间接修改\" class=\"headerlink\" title=\"全局const间接修改\"></a>全局const间接修改</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> m_a = <span class=\"number\">100</span>;\t<span class=\"comment\">//分配到常量区</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)&amp;m_a;</span><br><span class=\"line\">\t*p = <span class=\"number\">200</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结论：编译成功，但是运行失败，修改失败</p>\n<h3 id=\"局部const间接修改\"><a href=\"#局部const间接修改\" class=\"headerlink\" title=\"局部const间接修改\"></a>局部const间接修改</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> m_b = <span class=\"number\">100</span>;\t<span class=\"comment\">//分配到栈上</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)&amp;m_b;</span><br><span class=\"line\">\t*p = <span class=\"number\">200</span>; </span><br><span class=\"line\">    cout &lt;&lt; m_b &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结论：运行成功，修改失败</p>\n<h3 id=\"原因分析：\"><a href=\"#原因分析：\" class=\"headerlink\" title=\"原因分析：\"></a>原因分析：</h3><p><img src=\"/media/c++const%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%88%86%E9%85%8D%E5%88%B0%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%B8%8A.png\" alt=\"c++const修饰的局部变量分配到符号表上\"></p>\n<p><code>因此c++ const可以称为常量</code></p>\n<h3 id=\"链接属性\"><a href=\"#链接属性\" class=\"headerlink\" title=\"链接属性\"></a>链接属性</h3><p>const变量默认是内部链接属性，加extern可以提高作用域</p>\n<h3 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> m_b = <span class=\"number\">100</span>;\t<span class=\"comment\">//分配到栈上</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)&amp;m_b;</span><br><span class=\"line\">\t*p = <span class=\"number\">200</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同上分配的临时内存</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">fun</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> m_b = a;\t<span class=\"comment\">//分配到栈上</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> * p = (<span class=\"type\">int</span> *)&amp;m_b;</span><br><span class=\"line\">\t*p = <span class=\"number\">200</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改成功，因为分配了内存</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstring m_Name;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test03</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">const</span> Person p;</span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Age = 10;      //直接修改失败</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson * pp = (Person *)&amp;p;</span><br><span class=\"line\">\t(*pp).m_Name = <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\">\tpp-&gt;m_Age = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;姓名 &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class=\"string\">&quot; 年龄&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>间接修改成功，分配了内存</p>\n"},{"title":"CMakeLists简易模板","date":"2023-08-24T14:38:18.614Z","description":null,"top_img":false,"_content":"\n# CMakeLists简易模板\n\n```cmake\ncmake_minimum_required(VERSION 2.8)\nPROJECT(ndt_mapping)\n\n#dboost\nadd_definitions(-DBOOST_ERROR_CODE_HEADER_ONLY)\n\nfind_package(OpenCV 4.5.2 QUIET)\nif(NOT OpenCV_FOUND)\n    find_package(OpenCV 2.4.3 QUIET)\n    if(NOT OpenCV_FOUND)\n        message(FATAL_ERROR \"OpenCV > 2.4.3 not found.\")\n    endif()\nendif()\n\nfind_package(Eigen3 3.1.0 REQUIRED NO_MODULE)\nfind_package(PCL REQUIRED)\n\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}\n        ${PROJECT_SOURCE_DIR}/src\n        ${OpenCV_INCLUDE_DIRS}\n        #eigen库只包含头文件\n        #${EIGEN3_INCLUDE_DIR}\n        ${PCL_INCLUDE_DIRS}\n)\n\nadd_library(async_buffer SHARED\n        src/async_buffer.cc\n        src/async_buffer.h)\n\ntarget_link_libraries(async_buffer\n        ${OpenCV_LIBRARIES}\n        ${PCL_LIBRARIES}\n        #gflags可以直接链接\n        gflags)\n\nadd_executable(ndt_mapping src/ndt_mapping.cc)\ntarget_link_libraries(ndt_mapping async_buffer)\n\n#设置了CMake变量OpenCV_DIR为OpenCV库的配置文件所在路径，正是通过载入这个路径下的OpenCVConfig.cmake配置文件才能配置好OpenCV库，\n#然后在OpenCVConfig.cmake配置文件中定义了变量OpenCV_INCLUDE_DIRS为OpenCV库头文件包含路径，这样我们才能才在代码中\n#使用#include <opencv2/opencv.hpp>而不会出现编译错误，同时定义了变量OpenCV_LIBS为OpenCV链接库路径，这样我们才能正确链接到\n#OpenCV中的库文件，而不会出现类似未定义的引用这样的链接错误。\nmessage(STATUS \"OpenCV_DIR = ${OpenCV_DIR}\")\nmessage(STATUS \"OpenCV_INCLUDE_DIRS = ${OpenCV_INCLUDE_DIRS}\")\nmessage(STATUS \"OpenCV_LIBS = ${OpenCV_LIBS}\")\nmessage(STATUS \"OpenCV_LIBRARIES = ${OpenCV_LIBRARIES}\")\n\nmessage(STATUS \"PCL_DIR = ${PCL_DIR}\")\nmessage(STATUS \"Gflags_DIR = ${Gflags_DIR}\")\n```","source":"_posts/C++/CMakeLists简易模板.md","raw":"---\ntitle: CMakeLists简易模板\ndate:\ntags: \n- C++\n- CMakelists\ncategories:\n- [C++, CMakelists]\ndescription:\ntop_img: false\n---\n\n# CMakeLists简易模板\n\n```cmake\ncmake_minimum_required(VERSION 2.8)\nPROJECT(ndt_mapping)\n\n#dboost\nadd_definitions(-DBOOST_ERROR_CODE_HEADER_ONLY)\n\nfind_package(OpenCV 4.5.2 QUIET)\nif(NOT OpenCV_FOUND)\n    find_package(OpenCV 2.4.3 QUIET)\n    if(NOT OpenCV_FOUND)\n        message(FATAL_ERROR \"OpenCV > 2.4.3 not found.\")\n    endif()\nendif()\n\nfind_package(Eigen3 3.1.0 REQUIRED NO_MODULE)\nfind_package(PCL REQUIRED)\n\ninclude_directories(\n        ${PROJECT_SOURCE_DIR}\n        ${PROJECT_SOURCE_DIR}/src\n        ${OpenCV_INCLUDE_DIRS}\n        #eigen库只包含头文件\n        #${EIGEN3_INCLUDE_DIR}\n        ${PCL_INCLUDE_DIRS}\n)\n\nadd_library(async_buffer SHARED\n        src/async_buffer.cc\n        src/async_buffer.h)\n\ntarget_link_libraries(async_buffer\n        ${OpenCV_LIBRARIES}\n        ${PCL_LIBRARIES}\n        #gflags可以直接链接\n        gflags)\n\nadd_executable(ndt_mapping src/ndt_mapping.cc)\ntarget_link_libraries(ndt_mapping async_buffer)\n\n#设置了CMake变量OpenCV_DIR为OpenCV库的配置文件所在路径，正是通过载入这个路径下的OpenCVConfig.cmake配置文件才能配置好OpenCV库，\n#然后在OpenCVConfig.cmake配置文件中定义了变量OpenCV_INCLUDE_DIRS为OpenCV库头文件包含路径，这样我们才能才在代码中\n#使用#include <opencv2/opencv.hpp>而不会出现编译错误，同时定义了变量OpenCV_LIBS为OpenCV链接库路径，这样我们才能正确链接到\n#OpenCV中的库文件，而不会出现类似未定义的引用这样的链接错误。\nmessage(STATUS \"OpenCV_DIR = ${OpenCV_DIR}\")\nmessage(STATUS \"OpenCV_INCLUDE_DIRS = ${OpenCV_INCLUDE_DIRS}\")\nmessage(STATUS \"OpenCV_LIBS = ${OpenCV_LIBS}\")\nmessage(STATUS \"OpenCV_LIBRARIES = ${OpenCV_LIBRARIES}\")\n\nmessage(STATUS \"PCL_DIR = ${PCL_DIR}\")\nmessage(STATUS \"Gflags_DIR = ${Gflags_DIR}\")\n```","slug":"C++/CMakeLists简易模板","published":1,"updated":"2023-08-25T08:42:02.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66n0005gcr7d6fqbqk0","content":"<h1 id=\"CMakeLists简易模板\"><a href=\"#CMakeLists简易模板\" class=\"headerlink\" title=\"CMakeLists简易模板\"></a>CMakeLists简易模板</h1><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\"><span class=\"keyword\">PROJECT</span>(ndt_mapping)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#dboost</span></span><br><span class=\"line\"><span class=\"keyword\">add_definitions</span>(-DBOOST_ERROR_CODE_HEADER_ONLY)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(OpenCV <span class=\"number\">4.5</span>.<span class=\"number\">2</span> QUIET)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> OpenCV_FOUND)</span><br><span class=\"line\">    <span class=\"keyword\">find_package</span>(OpenCV <span class=\"number\">2.4</span>.<span class=\"number\">3</span> QUIET)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> OpenCV_FOUND)</span><br><span class=\"line\">        <span class=\"keyword\">message</span>(FATAL_ERROR <span class=\"string\">&quot;OpenCV &gt; 2.4.3 not found.&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(Eigen3 <span class=\"number\">3.1</span>.<span class=\"number\">0</span> REQUIRED NO_MODULE)</span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(PCL REQUIRED)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(</span><br><span class=\"line\">        <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span></span><br><span class=\"line\">        <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src</span><br><span class=\"line\">        <span class=\"variable\">$&#123;OpenCV_INCLUDE_DIRS&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#eigen库只包含头文件</span></span><br><span class=\"line\">        <span class=\"comment\">#$&#123;EIGEN3_INCLUDE_DIR&#125;</span></span><br><span class=\"line\">        <span class=\"variable\">$&#123;PCL_INCLUDE_DIRS&#125;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(async_buffer SHARED</span><br><span class=\"line\">        src/async_buffer.cc</span><br><span class=\"line\">        src/async_buffer.h)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(async_buffer</span><br><span class=\"line\">        <span class=\"variable\">$&#123;OpenCV_LIBRARIES&#125;</span></span><br><span class=\"line\">        <span class=\"variable\">$&#123;PCL_LIBRARIES&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#gflags可以直接链接</span></span><br><span class=\"line\">        gflags)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(ndt_mapping src/ndt_mapping.cc)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(ndt_mapping async_buffer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置了CMake变量OpenCV_DIR为OpenCV库的配置文件所在路径，正是通过载入这个路径下的OpenCVConfig.cmake配置文件才能配置好OpenCV库，</span></span><br><span class=\"line\"><span class=\"comment\">#然后在OpenCVConfig.cmake配置文件中定义了变量OpenCV_INCLUDE_DIRS为OpenCV库头文件包含路径，这样我们才能才在代码中</span></span><br><span class=\"line\"><span class=\"comment\">#使用#include &lt;opencv2/opencv.hpp&gt;而不会出现编译错误，同时定义了变量OpenCV_LIBS为OpenCV链接库路径，这样我们才能正确链接到</span></span><br><span class=\"line\"><span class=\"comment\">#OpenCV中的库文件，而不会出现类似未定义的引用这样的链接错误。</span></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;OpenCV_DIR = $&#123;OpenCV_DIR&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;OpenCV_INCLUDE_DIRS = $&#123;OpenCV_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;OpenCV_LIBS = $&#123;OpenCV_LIBS&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;OpenCV_LIBRARIES = $&#123;OpenCV_LIBRARIES&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;PCL_DIR = $&#123;PCL_DIR&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;Gflags_DIR = $&#123;Gflags_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-8.png","cover_type":"img","excerpt":"","more":"<h1 id=\"CMakeLists简易模板\"><a href=\"#CMakeLists简易模板\" class=\"headerlink\" title=\"CMakeLists简易模板\"></a>CMakeLists简易模板</h1><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\"><span class=\"keyword\">PROJECT</span>(ndt_mapping)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#dboost</span></span><br><span class=\"line\"><span class=\"keyword\">add_definitions</span>(-DBOOST_ERROR_CODE_HEADER_ONLY)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(OpenCV <span class=\"number\">4.5</span>.<span class=\"number\">2</span> QUIET)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> OpenCV_FOUND)</span><br><span class=\"line\">    <span class=\"keyword\">find_package</span>(OpenCV <span class=\"number\">2.4</span>.<span class=\"number\">3</span> QUIET)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">NOT</span> OpenCV_FOUND)</span><br><span class=\"line\">        <span class=\"keyword\">message</span>(FATAL_ERROR <span class=\"string\">&quot;OpenCV &gt; 2.4.3 not found.&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">endif</span>()</span><br><span class=\"line\"><span class=\"keyword\">endif</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(Eigen3 <span class=\"number\">3.1</span>.<span class=\"number\">0</span> REQUIRED NO_MODULE)</span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(PCL REQUIRED)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">include_directories</span>(</span><br><span class=\"line\">        <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span></span><br><span class=\"line\">        <span class=\"variable\">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src</span><br><span class=\"line\">        <span class=\"variable\">$&#123;OpenCV_INCLUDE_DIRS&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#eigen库只包含头文件</span></span><br><span class=\"line\">        <span class=\"comment\">#$&#123;EIGEN3_INCLUDE_DIR&#125;</span></span><br><span class=\"line\">        <span class=\"variable\">$&#123;PCL_INCLUDE_DIRS&#125;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_library</span>(async_buffer SHARED</span><br><span class=\"line\">        src/async_buffer.cc</span><br><span class=\"line\">        src/async_buffer.h)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(async_buffer</span><br><span class=\"line\">        <span class=\"variable\">$&#123;OpenCV_LIBRARIES&#125;</span></span><br><span class=\"line\">        <span class=\"variable\">$&#123;PCL_LIBRARIES&#125;</span></span><br><span class=\"line\">        <span class=\"comment\">#gflags可以直接链接</span></span><br><span class=\"line\">        gflags)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(ndt_mapping src/ndt_mapping.cc)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(ndt_mapping async_buffer)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#设置了CMake变量OpenCV_DIR为OpenCV库的配置文件所在路径，正是通过载入这个路径下的OpenCVConfig.cmake配置文件才能配置好OpenCV库，</span></span><br><span class=\"line\"><span class=\"comment\">#然后在OpenCVConfig.cmake配置文件中定义了变量OpenCV_INCLUDE_DIRS为OpenCV库头文件包含路径，这样我们才能才在代码中</span></span><br><span class=\"line\"><span class=\"comment\">#使用#include &lt;opencv2/opencv.hpp&gt;而不会出现编译错误，同时定义了变量OpenCV_LIBS为OpenCV链接库路径，这样我们才能正确链接到</span></span><br><span class=\"line\"><span class=\"comment\">#OpenCV中的库文件，而不会出现类似未定义的引用这样的链接错误。</span></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;OpenCV_DIR = $&#123;OpenCV_DIR&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;OpenCV_INCLUDE_DIRS = $&#123;OpenCV_INCLUDE_DIRS&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;OpenCV_LIBS = $&#123;OpenCV_LIBS&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;OpenCV_LIBRARIES = $&#123;OpenCV_LIBRARIES&#125;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;PCL_DIR = $&#123;PCL_DIR&#125;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">message</span>(STATUS <span class=\"string\">&quot;Gflags_DIR = $&#123;Gflags_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>"},{"title":"CMakelists基础指令","date":"2023-08-24T14:38:18.612Z","description":null,"top_img":false,"_content":"\n# CMakelists基础指令 \n\n## （1）include_directories \n\n用于设置头文件的相对路径。全局路径默认是功能包所在目录，一般会放在功能包根目录下的include文件夹中，所以此处需要添加该文件夹。此外，该配置项还包含ROS catkin编译器默认包含的其他头文件路径${catkin_INCLUDE_DIRS}，比如ROS默认安装路径、Linux系统路径等。在本例中，所用的是ROS默认安装路径下的头文件。 \n\n##  （2）add_executable \n\n用于设置需要编译的代码和生成的可执行文件。第一个参数为期望生成的可执行文件的名称，后边的参数为参与编译的源码文件（cpp），如果需要多个代码文件，则可在后面依次列出，中间用空格进行分隔。 \n\n##  （3）target_link_libraries \n\n用于设置链接库。很多功能需要使用系统或者第三方的库函数，通过该选项可以配置 执行文件链接的库文件，第一个参数是可执行文件的名称，后面依次列出需要链接的库。此处编译没有使用其他库，添加默认链接库${catkin_LIBRARIES}即可。 \n\n##  （4）add_dependencies \n\n用于设置依赖。在很多应用中，我们需要定义语言无关的消息类型，消息类型会在编译过程中产生相应语言的代码，如果编译的可执行文件依赖这些动态生成的代码，则需要使用add_dependencies添加${PROJECT_NAME}_generate_messages_cpp 配置，即该功能包动态产生的消息代码。该编译规则也可以添加其他需要依赖的功能包。 ","source":"_posts/C++/CMakelists基础指令.md","raw":"---\ntitle: CMakelists基础指令\ndate:\ntags: \n- C++\n- CMakelists\ncategories:\n- [C++, CMakelists]\ndescription:\ntop_img: false\n---\n\n# CMakelists基础指令 \n\n## （1）include_directories \n\n用于设置头文件的相对路径。全局路径默认是功能包所在目录，一般会放在功能包根目录下的include文件夹中，所以此处需要添加该文件夹。此外，该配置项还包含ROS catkin编译器默认包含的其他头文件路径${catkin_INCLUDE_DIRS}，比如ROS默认安装路径、Linux系统路径等。在本例中，所用的是ROS默认安装路径下的头文件。 \n\n##  （2）add_executable \n\n用于设置需要编译的代码和生成的可执行文件。第一个参数为期望生成的可执行文件的名称，后边的参数为参与编译的源码文件（cpp），如果需要多个代码文件，则可在后面依次列出，中间用空格进行分隔。 \n\n##  （3）target_link_libraries \n\n用于设置链接库。很多功能需要使用系统或者第三方的库函数，通过该选项可以配置 执行文件链接的库文件，第一个参数是可执行文件的名称，后面依次列出需要链接的库。此处编译没有使用其他库，添加默认链接库${catkin_LIBRARIES}即可。 \n\n##  （4）add_dependencies \n\n用于设置依赖。在很多应用中，我们需要定义语言无关的消息类型，消息类型会在编译过程中产生相应语言的代码，如果编译的可执行文件依赖这些动态生成的代码，则需要使用add_dependencies添加${PROJECT_NAME}_generate_messages_cpp 配置，即该功能包动态产生的消息代码。该编译规则也可以添加其他需要依赖的功能包。 ","slug":"C++/CMakelists基础指令","published":1,"updated":"2023-08-25T08:38:28.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66q0009gcr7d9a2a9pu","content":"<h1 id=\"CMakelists基础指令\"><a href=\"#CMakelists基础指令\" class=\"headerlink\" title=\"CMakelists基础指令\"></a>CMakelists基础指令</h1><h2 id=\"（1）include-directories\"><a href=\"#（1）include-directories\" class=\"headerlink\" title=\"（1）include_directories\"></a>（1）include_directories</h2><p>用于设置头文件的相对路径。全局路径默认是功能包所在目录，一般会放在功能包根目录下的include文件夹中，所以此处需要添加该文件夹。此外，该配置项还包含ROS catkin编译器默认包含的其他头文件路径${catkin_INCLUDE_DIRS}，比如ROS默认安装路径、Linux系统路径等。在本例中，所用的是ROS默认安装路径下的头文件。 </p>\n<h2 id=\"（2）add-executable\"><a href=\"#（2）add-executable\" class=\"headerlink\" title=\"（2）add_executable\"></a>（2）add_executable</h2><p>用于设置需要编译的代码和生成的可执行文件。第一个参数为期望生成的可执行文件的名称，后边的参数为参与编译的源码文件（cpp），如果需要多个代码文件，则可在后面依次列出，中间用空格进行分隔。 </p>\n<h2 id=\"（3）target-link-libraries\"><a href=\"#（3）target-link-libraries\" class=\"headerlink\" title=\"（3）target_link_libraries\"></a>（3）target_link_libraries</h2><p>用于设置链接库。很多功能需要使用系统或者第三方的库函数，通过该选项可以配置 执行文件链接的库文件，第一个参数是可执行文件的名称，后面依次列出需要链接的库。此处编译没有使用其他库，添加默认链接库${catkin_LIBRARIES}即可。 </p>\n<h2 id=\"（4）add-dependencies\"><a href=\"#（4）add-dependencies\" class=\"headerlink\" title=\"（4）add_dependencies\"></a>（4）add_dependencies</h2><p>用于设置依赖。在很多应用中，我们需要定义语言无关的消息类型，消息类型会在编译过程中产生相应语言的代码，如果编译的可执行文件依赖这些动态生成的代码，则需要使用add_dependencies添加${PROJECT_NAME}_generate_messages_cpp 配置，即该功能包动态产生的消息代码。该编译规则也可以添加其他需要依赖的功能包。 </p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-6.png","cover_type":"img","excerpt":"","more":"<h1 id=\"CMakelists基础指令\"><a href=\"#CMakelists基础指令\" class=\"headerlink\" title=\"CMakelists基础指令\"></a>CMakelists基础指令</h1><h2 id=\"（1）include-directories\"><a href=\"#（1）include-directories\" class=\"headerlink\" title=\"（1）include_directories\"></a>（1）include_directories</h2><p>用于设置头文件的相对路径。全局路径默认是功能包所在目录，一般会放在功能包根目录下的include文件夹中，所以此处需要添加该文件夹。此外，该配置项还包含ROS catkin编译器默认包含的其他头文件路径${catkin_INCLUDE_DIRS}，比如ROS默认安装路径、Linux系统路径等。在本例中，所用的是ROS默认安装路径下的头文件。 </p>\n<h2 id=\"（2）add-executable\"><a href=\"#（2）add-executable\" class=\"headerlink\" title=\"（2）add_executable\"></a>（2）add_executable</h2><p>用于设置需要编译的代码和生成的可执行文件。第一个参数为期望生成的可执行文件的名称，后边的参数为参与编译的源码文件（cpp），如果需要多个代码文件，则可在后面依次列出，中间用空格进行分隔。 </p>\n<h2 id=\"（3）target-link-libraries\"><a href=\"#（3）target-link-libraries\" class=\"headerlink\" title=\"（3）target_link_libraries\"></a>（3）target_link_libraries</h2><p>用于设置链接库。很多功能需要使用系统或者第三方的库函数，通过该选项可以配置 执行文件链接的库文件，第一个参数是可执行文件的名称，后面依次列出需要链接的库。此处编译没有使用其他库，添加默认链接库${catkin_LIBRARIES}即可。 </p>\n<h2 id=\"（4）add-dependencies\"><a href=\"#（4）add-dependencies\" class=\"headerlink\" title=\"（4）add_dependencies\"></a>（4）add_dependencies</h2><p>用于设置依赖。在很多应用中，我们需要定义语言无关的消息类型，消息类型会在编译过程中产生相应语言的代码，如果编译的可执行文件依赖这些动态生成的代码，则需要使用add_dependencies添加${PROJECT_NAME}_generate_messages_cpp 配置，即该功能包动态产生的消息代码。该编译规则也可以添加其他需要依赖的功能包。 </p>\n"},{"title":"C++11:chrono库 (日期和时间库)","date":"2023-08-24T11:00:19.071Z","description":null,"top_img":false,"_content":"\n# C++11:chrono库 (日期和时间库)\n\n> ​\tC++11标准已经支持std::chrono了，但是为了兼容老编译系统现在很多C++库和程序都使用boost::chrono作为时间类库(还有的原因就std::chrono没有收录boost::chrono的所有功能，比如统计CPU使用时间、自定义时间输出格式等)，Boost::Chrono的时间类型分为duration和time_point，也就是时长和时刻两类，很多概念和接口都是围绕这两个维度去定义和实现的。\n\nchrono库主要包含了三种类型:\n时间间隔Duration\n时钟Clocks\n时间点Time point\n\n## **Duration**\n\nduration表示一段时间间隔，用来记录时间长度，可以表示几秒钟、几分钟或者几个小时的时间间隔。\n\n其原型:\n\n```c++\ntemplate<class Rep,class Period = std::ration<1>> class duration;\n```\n\n第一个模板参数Rep是一个数值类型，表明存储所用的数据类型(int、long、double等)；第二个模板参数是一个默认模板参数std::ratio，它的原型是：\n\n```c++\ntemplate<std::intmax_t Num, std::intmax_t Denom = 1> class ratio;\n```\n\n第一个模板参数Rep是一个数值类型，表明存储所用的数据类型(int、long、double等)；第二个模板参数是一个默认模板参数std::ratio，它的原型是：\n\n它表示每个时钟周期的秒数，其中第一个模板参数Num代表分子，Denom代表分母，分母默认为1，ratio代表的是一个分子除以分母的分数值，比如ratio<2>代表一个时钟周期是两秒，ratio<60>代表了一分钟，ratio<60 * 60>代表一个小时，ratio<60 * 60 * 24>代表一天。而ratio<1, 1000>代表的则是1/1000秒即一毫秒，ratio<1, 1000000>代表一微秒，ratio<1, 1000000000>代表一纳秒。\n\n标准库为了方便使用，就定义了一些常用的时间间隔，如时、分、秒、毫秒、微秒和纳秒，在chrono命名空间下，它们的定义如下：\n\n```c++\ntypedef duration <Rep, ratio<3600,1>> hours;\n\ntypedef duration <Rep, ratio<60,1>> minutes;\n\ntypedef duration <Rep, ratio<1,1>> seconds;\n\ntypedef duration <Rep, ratio<1,1000>> milliseconds;\n\ntypedef duration <Rep, ratio<1,1000000>> microseconds;\n\ntypedef duration <Rep, ratio<1,1000000000>> nanoseconds;\n```\n\n```c++\n#include <chrono>\n#include <iostream>\nusing namespace std;\nint main()\n{\n    chrono::hours h(1); // 一小时\n    chrono::milliseconds ms{ 3 }; // 3 毫秒\n    chrono::duration<int, ratio<1000>> ks(3); // 3000 秒\n\n    // chrono::duration<int, ratio<1000>> d3(3.5); // error\n    chrono::duration<double> dd(6.6); // 6.6 秒\n\n    // 使用小数表示时钟周期的次数\n    chrono::duration<double, std::ratio<1, 30>> hz(3.5);\n    return 0;\n}\n\n/*********************************************************************\nh(1) 时钟周期为 1 小时，共有 1 个时钟周期，所以 h 表示的时间间隔为 1 小时\nms(3) 时钟周期为 1 毫秒，共有 3 个时钟周期，所以 ms 表示的时间间隔为 3 毫秒\nks(3) 时钟周期为 1000 秒，一共有三个时钟周期，所以 ks 表示的时间间隔为 3000 秒\nd3(3.5) 时钟周期为 1000 秒，时钟周期数量只能用整形来表示，但是此处指定的是浮点数，因此语法错误\ndd(6.6) 时钟周期为默认的 1 秒，共有 6.6 个时钟周期，所以 dd 表示的时间间隔为 6.6 秒\nhz(3.5) 时钟周期为 1/30 秒，共有 3.5 个时钟周期，所以 hz 表示的时间间隔为 1/30*3.5 秒\nchrono 库中根据 duration 类封装了不同长度的时钟周期（也可以自定义），基于这个时钟周期再进行周期次数的设置就可以得到总的时间间隔了（时钟周期 * 周期次数 = 总的时间间隔）。\n*************************************************************************/\n```\n\nchrono还提供了获取时间间隔的时钟周期个数的方法count()，它的基本用法：\n\n```c++\n#include <chrono>\n#include <iostream>\nint main()\n{\n    std::chrono::milliseconds ms{ 3 }; // 3 毫秒\n    std::chrono::microseconds us = 2 * ms; // 6000 微秒\n    // 时间间隔周期为 1/30 秒\n    std::chrono::duration<double, std::ratio<1, 30>> hz(3.5);\n\n    std::cout << \"3 ms duration has \" << ms.count() << \" ticks\\n\"\n        << \"6000 us duration has \" << us.count() << \" ticks\\n\"\n        << \"3.5 hz duration has \" << hz.count() << \" ticks\\n\";\n    return 0;\n}\n```\n\n```c++\n3 ms duration has 3 ticks\n6000 us duration has 6000 ticks\n3.5 hz duration has 3.5 ticks\n\nms 时间单位为毫秒，初始化操作 ms{3} 表示时间间隔为 3 毫秒，一共有 3 个时间周期，每个周期为 1 毫秒\nus 时间单位为微秒，初始化操作 2*ms 表示时间间隔为 6000 微秒，一共有 6000 个时间周期，每个周期为 1 微秒\nhz 时间单位为秒，初始化操作 hz(3.5) 表示时间间隔为 1/30*3.5 秒，一共有 3.5 个时间周期，每个周期为 1/30 秒\n```\n\n通过定义这些常用的时间间隔类型，我们能方便的使用它们，比如线程的休眠:\n\n```c++\nstd::this_thread::sleep_for(std::chrono::seconds(3)); //休眠三秒\n\nstd::this_thread::sleep_for(std::chrono:: milliseconds (100)); //休眠100毫秒\n```\n\n由于在 duration 类内部做了操作符重载，因此时间间隔之间可以直接进行算术运算，比如我们要计算两个时间间隔的差值，就可以在代码中做如下处理：\n\n```c++\n#include <iostream>\n#include <chrono>\nusing namespace boost;\n\nint main()\n{\n    chrono::minutes t1(10);\n    chrono::seconds t2(60);\n    chrono::seconds t3 = t1 - t2;\n    cout << t3.count() << \" second\" << endl;\n    return 0;\n}\n```\n\n```c++\n540 second\n```\n\n在上面的测试程序中，t1 代表 10 分钟，t2 代表 60 秒，t3 是 t1 减去 t2，也就是 60*10-60=540，这个 540 表示的时钟周期，每个时钟周期是 1 秒，因此两个时间间隔之间的差值为 540 秒。\n\n注意事项：duration 的加减运算有一定的规则，当两个 duration 时钟周期不相同的时候，会先统一成一种时钟，然后再进行算术运算.\n\n因为类型表示的维度不一，粗粒度的时长肯定能用细粒度的类型表示，反之则可能丢失精度，所以需要使用`chrono::duration_cast()`函数做显式的转换。将当前的时钟周期转换为其它的时钟周期，比如我可以把秒的时钟周期转换为分钟的时钟周期，然后通过count来获取转换后的分钟时间间隔：\n\n```c++\ncout << chrono::duration_cast<chrono::minutes>( t3 ).count() <<” minutes”<< endl;\n\n将会输出:\n9 minutes\n```\n\n## **Time point**\n\ntime_point表示一个时间点，用来获取1970.1.1以来的秒数和当前的时间, 可以做一些时间的比较和算术运算，可以和ctime库结合起来显示时间。time_point必须要clock来计时，\n\ntime_point有一个函数`time_from_eproch()`用来获得1970年1月1日到time_point时间经过的duration。\n\n有一个`chrono::time_point_cast`转换函数，可以显式从高粒度向低粒度对time_point进行转换。\n\n下面的例子计算当前时间距离1970年1月1日有多少天：\n\n```c++\n#include <iostream>\n#include <ratio>\n#include <chrono>\n\nint main ()\n{\n  using namespace std::chrono;\n  typedef duration<int,std::ratio<60*60*24>> days_type;\n  time_point<system_clock,days_type> today = time_point_cast<days_type>(system_clock::now());\n  std::cout << today.time_since_epoch().count() << \" days since epoch\" << std::endl;\n\n  return 0;\n}\n```\n\ntime_point还支持一些算术元算，比如两个time_point的差值时钟周期数，还可以和duration相加减。下面的例子输出前一天和后一天的日期：\n\n```c++\n#include <iostream>\n#include <iomanip>\n#include <ctime>\n#include <chrono>\n\nint main()\n{\n    using namespace std::chrono;\n    system_clock::time_point now = system_clock::now();\n    std::time_t last = system_clock::to_time_t(now - std::chrono::hours(24));\n\n　　std::time_t next= system_clock::to_time_t(now - std::chrono::hours(24));\n\n    std::cout << \"One day ago, the time was \"<< std::put_time(std::localtime(&last), \"%F %T\") << '\\n';\n\n　　std::cout << \"Next day, the time was \"<< std::put_time(std::localtime(&next), \"%F %T\") << '\\n';\n\n}\n\n输出：\nOne day ago, the time was 2014-3-2622:38:27\nNext day, the time was 2014-3-2822:38:27\n```\n\n## **Clocks**\n\nclock是Chrono中的重要概念，而且这些clock都包含一个`now()`的成员函数，用于返回当前的time_point。Boost.Chrono包含的clock类型有：\n\n　　(1) `chrono::system_clock` 代表系统时间，比如电脑上显示的当前时间，其特点是这个时间可以被用户手动设置更新，所以这个时钟是可以和外部时钟源同步的。\n\n　　(2) `chrono::steady_clock` 其特点是时间是单调增长的，后一个时刻访问得到的时间点肯定比之前时刻得到的时间点要晚，即使我们手动将系统时间向前调整了也不会改变这个时钟稳步向前推行累计，其也被称为monotonic time，该时钟是均匀增长且不能被调整，其特性对于很多不允许时间错乱的系统是十分重要的。`chrono::steady_clock`通常是基于系统启动时间来计时的，而且常常用来进行耗时、等待等工作使用。**steady_clock可以获取稳定可靠的时间间隔，后一次调用now()的值和前一次的差值是不因为修改了系统时间而改变，它保证了稳定的时间间隔。它的用法和system用法一样。**\n\n　　(3) `chrono::high_resolution_clock `依赖于系统实现，通常是上面两种时钟的某个宏定义，取决于哪个时钟源更为的精确，所以其输出也决定于取决于上面哪个clock来实现的。\n\n　　(4) `chrono::process_real_cpu_clock `表示自进程启动以来使用的CPU时间，而这个数据也可以通过使用std::clock()来获得。`chrono::process_user_cpu_clock`、`boost::chrono::process_system_cpu_clock`表示自进程启动以来，在用户态、内核态所花费的时间，而所有的这些事件可以通过`chrono::process_cpu_clock`来获得，他返回上面所有时间组成的一个tuple结构。\n\n　　(5) `chrono::thread_clock` 返回基于线程统计的花费时间，而且不区分用户态、内核态的时间。\n\n在这些时钟类的内部有 time_point、duration、Rep、Period 等信息，基于这些信息来获取当前时间。\n\n可以通过now()来获取当前时间点：\n\n```c++\n#include <iostream>\n#include <chrono>\n\nint main()\n{\nstd::chrono::steady_clock::time_point t1 = std::chrono::system_clock::now();\n\nstd::cout << \"Hello World\\n\";\nstd::chrono::steady_clock::time_point t2 = std::chrono:: system_clock::now();\n\nstd::cout << (t2-t1).count()<<” tick count”<<endl;\n}\n\n输出：\nHello World\n20801tick count\n```\n\n通过时钟获取两个时间点之相差多少个时钟周期，我们可以通过duration_cast将其转换为其它时钟周期的duration：\n\n```c++\ncout << std::chrono::duration_cast<std::chrono::microseconds>( t2-t1 ).count() <<” microseconds”<< endl;\n\n输出：\n20 microseconds\n```\n\n还可以实现 `time_t` 和 `time_point` 之间的相互转换。\n\n```c++\n//system_clock的to_time_t方法可以将一个time_point转换为ctime：\nstd::time_t now_c = std::chrono::system_clock::to_time_t(time_point);\n//而from_time_t方法则是相反的，它将ctime转换为time_point。\n```\n\n```c++\n#include <chrono>\n#include <iostream>\nusing namespace std;\nusing namespace std::chrono;\nint main()\n{\n    // 新纪元1970.1.1时间\n    system_clock::time_point epoch;\n\n    duration<int, ratio<60 * 60 * 24>> day(1);\n    // 新纪元1970.1.1时间 + 1天\n    system_clock::time_point ppt(day);\n\n    using dday = duration<int, ratio<60 * 60 * 24>>;\n    // 新纪元1970.1.1时间 + 10天\n    time_point<system_clock, dday> t(dday(10));\n\n    // 系统当前时间\n    system_clock::time_point today = system_clock::now();\n\n    // 转换为time_t时间类型\n    time_t tm = system_clock::to_time_t(today);\n    cout << \"今天的日期是: \" << ctime(&tm);\n\n    time_t tm1 = system_clock::to_time_t(today + day);\n    cout << \"明天的日期是: \" << ctime(&tm1);\n\n    time_t tm2 = system_clock::to_time_t(epoch);\n    cout << \"新纪元时间: \" << ctime(&tm2);\n\n    time_t tm3 = system_clock::to_time_t(ppt);\n    cout << \"新纪元时间+1天: \" << ctime(&tm3);\n\n    time_t tm4 = system_clock::to_time_t(t);\n    cout << \"新纪元时间+10天: \" << ctime(&tm4);\n    return 0;\n}\n```\n\n```c++\n今天的日期是: Thu Apr 8 11:09:49 2021\n明天的日期是: Fri Apr 9 11:09:49 2021\n新纪元时间: Thu Jan 1 08:00:00 1970\n新纪元时间+1天: Fri Jan 2 08:00:00 1970\n新纪元时间+10天: Sun Jan 11 08:00:00 1970\n```\n\n### 参考链接\n\nhttps://blog.csdn.net/weixin_42907473/article/details/90278426\n\nhttps://www.cnblogs.com/Galesaur-wcy/p/15380832.html\n\nhttps://www.jb51.net/article/122979.htm","source":"_posts/C++/C++11chrono库.md","raw":"---\ntitle: C++11:chrono库 (日期和时间库)\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n---\n\n# C++11:chrono库 (日期和时间库)\n\n> ​\tC++11标准已经支持std::chrono了，但是为了兼容老编译系统现在很多C++库和程序都使用boost::chrono作为时间类库(还有的原因就std::chrono没有收录boost::chrono的所有功能，比如统计CPU使用时间、自定义时间输出格式等)，Boost::Chrono的时间类型分为duration和time_point，也就是时长和时刻两类，很多概念和接口都是围绕这两个维度去定义和实现的。\n\nchrono库主要包含了三种类型:\n时间间隔Duration\n时钟Clocks\n时间点Time point\n\n## **Duration**\n\nduration表示一段时间间隔，用来记录时间长度，可以表示几秒钟、几分钟或者几个小时的时间间隔。\n\n其原型:\n\n```c++\ntemplate<class Rep,class Period = std::ration<1>> class duration;\n```\n\n第一个模板参数Rep是一个数值类型，表明存储所用的数据类型(int、long、double等)；第二个模板参数是一个默认模板参数std::ratio，它的原型是：\n\n```c++\ntemplate<std::intmax_t Num, std::intmax_t Denom = 1> class ratio;\n```\n\n第一个模板参数Rep是一个数值类型，表明存储所用的数据类型(int、long、double等)；第二个模板参数是一个默认模板参数std::ratio，它的原型是：\n\n它表示每个时钟周期的秒数，其中第一个模板参数Num代表分子，Denom代表分母，分母默认为1，ratio代表的是一个分子除以分母的分数值，比如ratio<2>代表一个时钟周期是两秒，ratio<60>代表了一分钟，ratio<60 * 60>代表一个小时，ratio<60 * 60 * 24>代表一天。而ratio<1, 1000>代表的则是1/1000秒即一毫秒，ratio<1, 1000000>代表一微秒，ratio<1, 1000000000>代表一纳秒。\n\n标准库为了方便使用，就定义了一些常用的时间间隔，如时、分、秒、毫秒、微秒和纳秒，在chrono命名空间下，它们的定义如下：\n\n```c++\ntypedef duration <Rep, ratio<3600,1>> hours;\n\ntypedef duration <Rep, ratio<60,1>> minutes;\n\ntypedef duration <Rep, ratio<1,1>> seconds;\n\ntypedef duration <Rep, ratio<1,1000>> milliseconds;\n\ntypedef duration <Rep, ratio<1,1000000>> microseconds;\n\ntypedef duration <Rep, ratio<1,1000000000>> nanoseconds;\n```\n\n```c++\n#include <chrono>\n#include <iostream>\nusing namespace std;\nint main()\n{\n    chrono::hours h(1); // 一小时\n    chrono::milliseconds ms{ 3 }; // 3 毫秒\n    chrono::duration<int, ratio<1000>> ks(3); // 3000 秒\n\n    // chrono::duration<int, ratio<1000>> d3(3.5); // error\n    chrono::duration<double> dd(6.6); // 6.6 秒\n\n    // 使用小数表示时钟周期的次数\n    chrono::duration<double, std::ratio<1, 30>> hz(3.5);\n    return 0;\n}\n\n/*********************************************************************\nh(1) 时钟周期为 1 小时，共有 1 个时钟周期，所以 h 表示的时间间隔为 1 小时\nms(3) 时钟周期为 1 毫秒，共有 3 个时钟周期，所以 ms 表示的时间间隔为 3 毫秒\nks(3) 时钟周期为 1000 秒，一共有三个时钟周期，所以 ks 表示的时间间隔为 3000 秒\nd3(3.5) 时钟周期为 1000 秒，时钟周期数量只能用整形来表示，但是此处指定的是浮点数，因此语法错误\ndd(6.6) 时钟周期为默认的 1 秒，共有 6.6 个时钟周期，所以 dd 表示的时间间隔为 6.6 秒\nhz(3.5) 时钟周期为 1/30 秒，共有 3.5 个时钟周期，所以 hz 表示的时间间隔为 1/30*3.5 秒\nchrono 库中根据 duration 类封装了不同长度的时钟周期（也可以自定义），基于这个时钟周期再进行周期次数的设置就可以得到总的时间间隔了（时钟周期 * 周期次数 = 总的时间间隔）。\n*************************************************************************/\n```\n\nchrono还提供了获取时间间隔的时钟周期个数的方法count()，它的基本用法：\n\n```c++\n#include <chrono>\n#include <iostream>\nint main()\n{\n    std::chrono::milliseconds ms{ 3 }; // 3 毫秒\n    std::chrono::microseconds us = 2 * ms; // 6000 微秒\n    // 时间间隔周期为 1/30 秒\n    std::chrono::duration<double, std::ratio<1, 30>> hz(3.5);\n\n    std::cout << \"3 ms duration has \" << ms.count() << \" ticks\\n\"\n        << \"6000 us duration has \" << us.count() << \" ticks\\n\"\n        << \"3.5 hz duration has \" << hz.count() << \" ticks\\n\";\n    return 0;\n}\n```\n\n```c++\n3 ms duration has 3 ticks\n6000 us duration has 6000 ticks\n3.5 hz duration has 3.5 ticks\n\nms 时间单位为毫秒，初始化操作 ms{3} 表示时间间隔为 3 毫秒，一共有 3 个时间周期，每个周期为 1 毫秒\nus 时间单位为微秒，初始化操作 2*ms 表示时间间隔为 6000 微秒，一共有 6000 个时间周期，每个周期为 1 微秒\nhz 时间单位为秒，初始化操作 hz(3.5) 表示时间间隔为 1/30*3.5 秒，一共有 3.5 个时间周期，每个周期为 1/30 秒\n```\n\n通过定义这些常用的时间间隔类型，我们能方便的使用它们，比如线程的休眠:\n\n```c++\nstd::this_thread::sleep_for(std::chrono::seconds(3)); //休眠三秒\n\nstd::this_thread::sleep_for(std::chrono:: milliseconds (100)); //休眠100毫秒\n```\n\n由于在 duration 类内部做了操作符重载，因此时间间隔之间可以直接进行算术运算，比如我们要计算两个时间间隔的差值，就可以在代码中做如下处理：\n\n```c++\n#include <iostream>\n#include <chrono>\nusing namespace boost;\n\nint main()\n{\n    chrono::minutes t1(10);\n    chrono::seconds t2(60);\n    chrono::seconds t3 = t1 - t2;\n    cout << t3.count() << \" second\" << endl;\n    return 0;\n}\n```\n\n```c++\n540 second\n```\n\n在上面的测试程序中，t1 代表 10 分钟，t2 代表 60 秒，t3 是 t1 减去 t2，也就是 60*10-60=540，这个 540 表示的时钟周期，每个时钟周期是 1 秒，因此两个时间间隔之间的差值为 540 秒。\n\n注意事项：duration 的加减运算有一定的规则，当两个 duration 时钟周期不相同的时候，会先统一成一种时钟，然后再进行算术运算.\n\n因为类型表示的维度不一，粗粒度的时长肯定能用细粒度的类型表示，反之则可能丢失精度，所以需要使用`chrono::duration_cast()`函数做显式的转换。将当前的时钟周期转换为其它的时钟周期，比如我可以把秒的时钟周期转换为分钟的时钟周期，然后通过count来获取转换后的分钟时间间隔：\n\n```c++\ncout << chrono::duration_cast<chrono::minutes>( t3 ).count() <<” minutes”<< endl;\n\n将会输出:\n9 minutes\n```\n\n## **Time point**\n\ntime_point表示一个时间点，用来获取1970.1.1以来的秒数和当前的时间, 可以做一些时间的比较和算术运算，可以和ctime库结合起来显示时间。time_point必须要clock来计时，\n\ntime_point有一个函数`time_from_eproch()`用来获得1970年1月1日到time_point时间经过的duration。\n\n有一个`chrono::time_point_cast`转换函数，可以显式从高粒度向低粒度对time_point进行转换。\n\n下面的例子计算当前时间距离1970年1月1日有多少天：\n\n```c++\n#include <iostream>\n#include <ratio>\n#include <chrono>\n\nint main ()\n{\n  using namespace std::chrono;\n  typedef duration<int,std::ratio<60*60*24>> days_type;\n  time_point<system_clock,days_type> today = time_point_cast<days_type>(system_clock::now());\n  std::cout << today.time_since_epoch().count() << \" days since epoch\" << std::endl;\n\n  return 0;\n}\n```\n\ntime_point还支持一些算术元算，比如两个time_point的差值时钟周期数，还可以和duration相加减。下面的例子输出前一天和后一天的日期：\n\n```c++\n#include <iostream>\n#include <iomanip>\n#include <ctime>\n#include <chrono>\n\nint main()\n{\n    using namespace std::chrono;\n    system_clock::time_point now = system_clock::now();\n    std::time_t last = system_clock::to_time_t(now - std::chrono::hours(24));\n\n　　std::time_t next= system_clock::to_time_t(now - std::chrono::hours(24));\n\n    std::cout << \"One day ago, the time was \"<< std::put_time(std::localtime(&last), \"%F %T\") << '\\n';\n\n　　std::cout << \"Next day, the time was \"<< std::put_time(std::localtime(&next), \"%F %T\") << '\\n';\n\n}\n\n输出：\nOne day ago, the time was 2014-3-2622:38:27\nNext day, the time was 2014-3-2822:38:27\n```\n\n## **Clocks**\n\nclock是Chrono中的重要概念，而且这些clock都包含一个`now()`的成员函数，用于返回当前的time_point。Boost.Chrono包含的clock类型有：\n\n　　(1) `chrono::system_clock` 代表系统时间，比如电脑上显示的当前时间，其特点是这个时间可以被用户手动设置更新，所以这个时钟是可以和外部时钟源同步的。\n\n　　(2) `chrono::steady_clock` 其特点是时间是单调增长的，后一个时刻访问得到的时间点肯定比之前时刻得到的时间点要晚，即使我们手动将系统时间向前调整了也不会改变这个时钟稳步向前推行累计，其也被称为monotonic time，该时钟是均匀增长且不能被调整，其特性对于很多不允许时间错乱的系统是十分重要的。`chrono::steady_clock`通常是基于系统启动时间来计时的，而且常常用来进行耗时、等待等工作使用。**steady_clock可以获取稳定可靠的时间间隔，后一次调用now()的值和前一次的差值是不因为修改了系统时间而改变，它保证了稳定的时间间隔。它的用法和system用法一样。**\n\n　　(3) `chrono::high_resolution_clock `依赖于系统实现，通常是上面两种时钟的某个宏定义，取决于哪个时钟源更为的精确，所以其输出也决定于取决于上面哪个clock来实现的。\n\n　　(4) `chrono::process_real_cpu_clock `表示自进程启动以来使用的CPU时间，而这个数据也可以通过使用std::clock()来获得。`chrono::process_user_cpu_clock`、`boost::chrono::process_system_cpu_clock`表示自进程启动以来，在用户态、内核态所花费的时间，而所有的这些事件可以通过`chrono::process_cpu_clock`来获得，他返回上面所有时间组成的一个tuple结构。\n\n　　(5) `chrono::thread_clock` 返回基于线程统计的花费时间，而且不区分用户态、内核态的时间。\n\n在这些时钟类的内部有 time_point、duration、Rep、Period 等信息，基于这些信息来获取当前时间。\n\n可以通过now()来获取当前时间点：\n\n```c++\n#include <iostream>\n#include <chrono>\n\nint main()\n{\nstd::chrono::steady_clock::time_point t1 = std::chrono::system_clock::now();\n\nstd::cout << \"Hello World\\n\";\nstd::chrono::steady_clock::time_point t2 = std::chrono:: system_clock::now();\n\nstd::cout << (t2-t1).count()<<” tick count”<<endl;\n}\n\n输出：\nHello World\n20801tick count\n```\n\n通过时钟获取两个时间点之相差多少个时钟周期，我们可以通过duration_cast将其转换为其它时钟周期的duration：\n\n```c++\ncout << std::chrono::duration_cast<std::chrono::microseconds>( t2-t1 ).count() <<” microseconds”<< endl;\n\n输出：\n20 microseconds\n```\n\n还可以实现 `time_t` 和 `time_point` 之间的相互转换。\n\n```c++\n//system_clock的to_time_t方法可以将一个time_point转换为ctime：\nstd::time_t now_c = std::chrono::system_clock::to_time_t(time_point);\n//而from_time_t方法则是相反的，它将ctime转换为time_point。\n```\n\n```c++\n#include <chrono>\n#include <iostream>\nusing namespace std;\nusing namespace std::chrono;\nint main()\n{\n    // 新纪元1970.1.1时间\n    system_clock::time_point epoch;\n\n    duration<int, ratio<60 * 60 * 24>> day(1);\n    // 新纪元1970.1.1时间 + 1天\n    system_clock::time_point ppt(day);\n\n    using dday = duration<int, ratio<60 * 60 * 24>>;\n    // 新纪元1970.1.1时间 + 10天\n    time_point<system_clock, dday> t(dday(10));\n\n    // 系统当前时间\n    system_clock::time_point today = system_clock::now();\n\n    // 转换为time_t时间类型\n    time_t tm = system_clock::to_time_t(today);\n    cout << \"今天的日期是: \" << ctime(&tm);\n\n    time_t tm1 = system_clock::to_time_t(today + day);\n    cout << \"明天的日期是: \" << ctime(&tm1);\n\n    time_t tm2 = system_clock::to_time_t(epoch);\n    cout << \"新纪元时间: \" << ctime(&tm2);\n\n    time_t tm3 = system_clock::to_time_t(ppt);\n    cout << \"新纪元时间+1天: \" << ctime(&tm3);\n\n    time_t tm4 = system_clock::to_time_t(t);\n    cout << \"新纪元时间+10天: \" << ctime(&tm4);\n    return 0;\n}\n```\n\n```c++\n今天的日期是: Thu Apr 8 11:09:49 2021\n明天的日期是: Fri Apr 9 11:09:49 2021\n新纪元时间: Thu Jan 1 08:00:00 1970\n新纪元时间+1天: Fri Jan 2 08:00:00 1970\n新纪元时间+10天: Sun Jan 11 08:00:00 1970\n```\n\n### 参考链接\n\nhttps://blog.csdn.net/weixin_42907473/article/details/90278426\n\nhttps://www.cnblogs.com/Galesaur-wcy/p/15380832.html\n\nhttps://www.jb51.net/article/122979.htm","slug":"C++/C++11chrono库","published":1,"updated":"2023-08-24T15:44:37.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66r000bgcr79q9qe1te","content":"<h1 id=\"C-11-chrono库-日期和时间库\"><a href=\"#C-11-chrono库-日期和时间库\" class=\"headerlink\" title=\"C++11:chrono库 (日期和时间库)\"></a>C++11:chrono库 (日期和时间库)</h1><blockquote>\n<p>​\tC++11标准已经支持std::chrono了，但是为了兼容老编译系统现在很多C++库和程序都使用boost::chrono作为时间类库(还有的原因就std::chrono没有收录boost::chrono的所有功能，比如统计CPU使用时间、自定义时间输出格式等)，Boost::Chrono的时间类型分为duration和time_point，也就是时长和时刻两类，很多概念和接口都是围绕这两个维度去定义和实现的。</p>\n</blockquote>\n<p>chrono库主要包含了三种类型:<br>时间间隔Duration<br>时钟Clocks<br>时间点Time point</p>\n<h2 id=\"Duration\"><a href=\"#Duration\" class=\"headerlink\" title=\"Duration\"></a><strong>Duration</strong></h2><p>duration表示一段时间间隔，用来记录时间长度，可以表示几秒钟、几分钟或者几个小时的时间间隔。</p>\n<p>其原型:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">Rep</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">Period</span> = std::ration&lt;<span class=\"number\">1</span>&gt;&gt; <span class=\"keyword\">class</span> duration;</span><br></pre></td></tr></table></figure>\n\n<p>第一个模板参数Rep是一个数值类型，表明存储所用的数据类型(int、long、double等)；第二个模板参数是一个默认模板参数std::ratio，它的原型是：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;std::<span class=\"type\">intmax_t</span> Num, std::<span class=\"type\">intmax_t</span> Denom = <span class=\"number\">1</span>&gt; <span class=\"keyword\">class</span> ratio;</span><br></pre></td></tr></table></figure>\n\n<p>第一个模板参数Rep是一个数值类型，表明存储所用的数据类型(int、long、double等)；第二个模板参数是一个默认模板参数std::ratio，它的原型是：</p>\n<p>它表示每个时钟周期的秒数，其中第一个模板参数Num代表分子，Denom代表分母，分母默认为1，ratio代表的是一个分子除以分母的分数值，比如ratio&lt;2&gt;代表一个时钟周期是两秒，ratio&lt;60&gt;代表了一分钟，ratio&lt;60 * 60&gt;代表一个小时，ratio&lt;60 * 60 * 24&gt;代表一天。而ratio&lt;1, 1000&gt;代表的则是1&#x2F;1000秒即一毫秒，ratio&lt;1, 1000000&gt;代表一微秒，ratio&lt;1, 1000000000&gt;代表一纳秒。</p>\n<p>标准库为了方便使用，就定义了一些常用的时间间隔，如时、分、秒、毫秒、微秒和纳秒，在chrono命名空间下，它们的定义如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">3600</span>,<span class=\"number\">1</span>&gt;&gt; hours;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">60</span>,<span class=\"number\">1</span>&gt;&gt; minutes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">1</span>,<span class=\"number\">1</span>&gt;&gt; seconds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">1</span>,<span class=\"number\">1000</span>&gt;&gt; milliseconds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">1</span>,<span class=\"number\">1000000</span>&gt;&gt; microseconds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">1</span>,<span class=\"number\">1000000000</span>&gt;&gt; nanoseconds;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">chrono::hours <span class=\"title\">h</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>; <span class=\"comment\">// 一小时</span></span><br><span class=\"line\">    chrono::milliseconds ms&#123; <span class=\"number\">3</span> &#125;; <span class=\"comment\">// 3 毫秒</span></span><br><span class=\"line\">    chrono::duration&lt;<span class=\"type\">int</span>, ratio&lt;<span class=\"number\">1000</span>&gt;&gt; <span class=\"built_in\">ks</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 3000 秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// chrono::duration&lt;int, ratio&lt;1000&gt;&gt; d3(3.5); // error</span></span><br><span class=\"line\">    <span class=\"function\">chrono::duration&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">dd</span><span class=\"params\">(<span class=\"number\">6.6</span>)</span></span>; <span class=\"comment\">// 6.6 秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用小数表示时钟周期的次数</span></span><br><span class=\"line\">    chrono::duration&lt;<span class=\"type\">double</span>, std::ratio&lt;<span class=\"number\">1</span>, <span class=\"number\">30</span>&gt;&gt; <span class=\"built_in\">hz</span>(<span class=\"number\">3.5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">h(1) 时钟周期为 1 小时，共有 1 个时钟周期，所以 h 表示的时间间隔为 1 小时</span></span><br><span class=\"line\"><span class=\"comment\">ms(3) 时钟周期为 1 毫秒，共有 3 个时钟周期，所以 ms 表示的时间间隔为 3 毫秒</span></span><br><span class=\"line\"><span class=\"comment\">ks(3) 时钟周期为 1000 秒，一共有三个时钟周期，所以 ks 表示的时间间隔为 3000 秒</span></span><br><span class=\"line\"><span class=\"comment\">d3(3.5) 时钟周期为 1000 秒，时钟周期数量只能用整形来表示，但是此处指定的是浮点数，因此语法错误</span></span><br><span class=\"line\"><span class=\"comment\">dd(6.6) 时钟周期为默认的 1 秒，共有 6.6 个时钟周期，所以 dd 表示的时间间隔为 6.6 秒</span></span><br><span class=\"line\"><span class=\"comment\">hz(3.5) 时钟周期为 1/30 秒，共有 3.5 个时钟周期，所以 hz 表示的时间间隔为 1/30*3.5 秒</span></span><br><span class=\"line\"><span class=\"comment\">chrono 库中根据 duration 类封装了不同长度的时钟周期（也可以自定义），基于这个时钟周期再进行周期次数的设置就可以得到总的时间间隔了（时钟周期 * 周期次数 = 总的时间间隔）。</span></span><br><span class=\"line\"><span class=\"comment\">*************************************************************************/</span></span><br></pre></td></tr></table></figure>\n\n<p>chrono还提供了获取时间间隔的时钟周期个数的方法count()，它的基本用法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::chrono::milliseconds ms&#123; <span class=\"number\">3</span> &#125;; <span class=\"comment\">// 3 毫秒</span></span><br><span class=\"line\">    std::chrono::microseconds us = <span class=\"number\">2</span> * ms; <span class=\"comment\">// 6000 微秒</span></span><br><span class=\"line\">    <span class=\"comment\">// 时间间隔周期为 1/30 秒</span></span><br><span class=\"line\">    std::chrono::duration&lt;<span class=\"type\">double</span>, std::ratio&lt;<span class=\"number\">1</span>, <span class=\"number\">30</span>&gt;&gt; <span class=\"built_in\">hz</span>(<span class=\"number\">3.5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;3 ms duration has &quot;</span> &lt;&lt; ms.<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; ticks\\n&quot;</span></span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">&quot;6000 us duration has &quot;</span> &lt;&lt; us.<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; ticks\\n&quot;</span></span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">&quot;3.5 hz duration has &quot;</span> &lt;&lt; hz.<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; ticks\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> ms duration has <span class=\"number\">3</span> ticks</span><br><span class=\"line\"><span class=\"number\">6000</span> us duration has <span class=\"number\">6000</span> ticks</span><br><span class=\"line\"><span class=\"number\">3.5</span> hz duration has <span class=\"number\">3.5</span> ticks</span><br><span class=\"line\"></span><br><span class=\"line\">ms 时间单位为毫秒，初始化操作 ms&#123;<span class=\"number\">3</span>&#125; 表示时间间隔为 <span class=\"number\">3</span> 毫秒，一共有 <span class=\"number\">3</span> 个时间周期，每个周期为 <span class=\"number\">1</span> 毫秒</span><br><span class=\"line\">us 时间单位为微秒，初始化操作 <span class=\"number\">2</span>*ms 表示时间间隔为 <span class=\"number\">6000</span> 微秒，一共有 <span class=\"number\">6000</span> 个时间周期，每个周期为 <span class=\"number\">1</span> 微秒</span><br><span class=\"line\">hz 时间单位为秒，初始化操作 <span class=\"built_in\">hz</span>(<span class=\"number\">3.5</span>) 表示时间间隔为 <span class=\"number\">1</span>/<span class=\"number\">30</span>*<span class=\"number\">3.5</span> 秒，一共有 <span class=\"number\">3.5</span> 个时间周期，每个周期为 <span class=\"number\">1</span>/<span class=\"number\">30</span> 秒</span><br></pre></td></tr></table></figure>\n\n<p>通过定义这些常用的时间间隔类型，我们能方便的使用它们，比如线程的休眠:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">3</span>)); <span class=\"comment\">//休眠三秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono:: <span class=\"built_in\">milliseconds</span> (<span class=\"number\">100</span>)); <span class=\"comment\">//休眠100毫秒</span></span><br></pre></td></tr></table></figure>\n\n<p>由于在 duration 类内部做了操作符重载，因此时间间隔之间可以直接进行算术运算，比如我们要计算两个时间间隔的差值，就可以在代码中做如下处理：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">chrono::minutes <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">chrono::seconds <span class=\"title\">t2</span><span class=\"params\">(<span class=\"number\">60</span>)</span></span>;</span><br><span class=\"line\">    chrono::seconds t3 = t1 - t2;</span><br><span class=\"line\">    cout &lt;&lt; t3.<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; second&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">540</span> second</span><br></pre></td></tr></table></figure>\n\n<p>在上面的测试程序中，t1 代表 10 分钟，t2 代表 60 秒，t3 是 t1 减去 t2，也就是 60*10-60&#x3D;540，这个 540 表示的时钟周期，每个时钟周期是 1 秒，因此两个时间间隔之间的差值为 540 秒。</p>\n<p>注意事项：duration 的加减运算有一定的规则，当两个 duration 时钟周期不相同的时候，会先统一成一种时钟，然后再进行算术运算.</p>\n<p>因为类型表示的维度不一，粗粒度的时长肯定能用细粒度的类型表示，反之则可能丢失精度，所以需要使用<code>chrono::duration_cast()</code>函数做显式的转换。将当前的时钟周期转换为其它的时钟周期，比如我可以把秒的时钟周期转换为分钟的时钟周期，然后通过count来获取转换后的分钟时间间隔：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; chrono::<span class=\"built_in\">duration_cast</span>&lt;chrono::minutes&gt;( t3 ).<span class=\"built_in\">count</span>() &lt;&lt;” minutes”&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">将会输出:</span><br><span class=\"line\"><span class=\"number\">9</span> minutes</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Time-point\"><a href=\"#Time-point\" class=\"headerlink\" title=\"Time point\"></a><strong>Time point</strong></h2><p>time_point表示一个时间点，用来获取1970.1.1以来的秒数和当前的时间, 可以做一些时间的比较和算术运算，可以和ctime库结合起来显示时间。time_point必须要clock来计时，</p>\n<p>time_point有一个函数<code>time_from_eproch()</code>用来获得1970年1月1日到time_point时间经过的duration。</p>\n<p>有一个<code>chrono::time_point_cast</code>转换函数，可以显式从高粒度向低粒度对time_point进行转换。</p>\n<p>下面的例子计算当前时间距离1970年1月1日有多少天：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ratio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std::chrono;</span><br><span class=\"line\">  <span class=\"keyword\">typedef</span> duration&lt;<span class=\"type\">int</span>,std::ratio&lt;<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">24</span>&gt;&gt; days_type;</span><br><span class=\"line\">  time_point&lt;system_clock,days_type&gt; today = <span class=\"built_in\">time_point_cast</span>&lt;days_type&gt;(system_clock::<span class=\"built_in\">now</span>());</span><br><span class=\"line\">  std::cout &lt;&lt; today.<span class=\"built_in\">time_since_epoch</span>().<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; days since epoch&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>time_point还支持一些算术元算，比如两个time_point的差值时钟周期数，还可以和duration相加减。下面的例子输出前一天和后一天的日期：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std::chrono;</span><br><span class=\"line\">    system_clock::time_point now = system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\">    std::<span class=\"type\">time_t</span> last = system_clock::<span class=\"built_in\">to_time_t</span>(now - std::chrono::<span class=\"built_in\">hours</span>(<span class=\"number\">24</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">　　std::<span class=\"type\">time_t</span> next= system_clock::<span class=\"built_in\">to_time_t</span>(now - std::chrono::<span class=\"built_in\">hours</span>(<span class=\"number\">24</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;One day ago, the time was &quot;</span>&lt;&lt; std::<span class=\"built_in\">put_time</span>(std::<span class=\"built_in\">localtime</span>(&amp;last), <span class=\"string\">&quot;%F %T&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">　　std::cout &lt;&lt; <span class=\"string\">&quot;Next day, the time was &quot;</span>&lt;&lt; std::<span class=\"built_in\">put_time</span>(std::<span class=\"built_in\">localtime</span>(&amp;next), <span class=\"string\">&quot;%F %T&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">One day ago, the time was <span class=\"number\">2014</span><span class=\"number\">-3</span><span class=\"number\">-2622</span>:<span class=\"number\">38</span>:<span class=\"number\">27</span></span><br><span class=\"line\">Next day, the time was <span class=\"number\">2014</span><span class=\"number\">-3</span><span class=\"number\">-2822</span>:<span class=\"number\">38</span>:<span class=\"number\">27</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Clocks\"><a href=\"#Clocks\" class=\"headerlink\" title=\"Clocks\"></a><strong>Clocks</strong></h2><p>clock是Chrono中的重要概念，而且这些clock都包含一个<code>now()</code>的成员函数，用于返回当前的time_point。Boost.Chrono包含的clock类型有：</p>\n<p>　　(1) <code>chrono::system_clock</code> 代表系统时间，比如电脑上显示的当前时间，其特点是这个时间可以被用户手动设置更新，所以这个时钟是可以和外部时钟源同步的。</p>\n<p>　　(2) <code>chrono::steady_clock</code> 其特点是时间是单调增长的，后一个时刻访问得到的时间点肯定比之前时刻得到的时间点要晚，即使我们手动将系统时间向前调整了也不会改变这个时钟稳步向前推行累计，其也被称为monotonic time，该时钟是均匀增长且不能被调整，其特性对于很多不允许时间错乱的系统是十分重要的。<code>chrono::steady_clock</code>通常是基于系统启动时间来计时的，而且常常用来进行耗时、等待等工作使用。<strong>steady_clock可以获取稳定可靠的时间间隔，后一次调用now()的值和前一次的差值是不因为修改了系统时间而改变，它保证了稳定的时间间隔。它的用法和system用法一样。</strong></p>\n<p>　　(3) <code>chrono::high_resolution_clock </code>依赖于系统实现，通常是上面两种时钟的某个宏定义，取决于哪个时钟源更为的精确，所以其输出也决定于取决于上面哪个clock来实现的。</p>\n<p>　　(4) <code>chrono::process_real_cpu_clock </code>表示自进程启动以来使用的CPU时间，而这个数据也可以通过使用std::clock()来获得。<code>chrono::process_user_cpu_clock</code>、<code>boost::chrono::process_system_cpu_clock</code>表示自进程启动以来，在用户态、内核态所花费的时间，而所有的这些事件可以通过<code>chrono::process_cpu_clock</code>来获得，他返回上面所有时间组成的一个tuple结构。</p>\n<p>　　(5) <code>chrono::thread_clock</code> 返回基于线程统计的花费时间，而且不区分用户态、内核态的时间。</p>\n<p>在这些时钟类的内部有 time_point、duration、Rep、Period 等信息，基于这些信息来获取当前时间。</p>\n<p>可以通过now()来获取当前时间点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">std::chrono::steady_clock::time_point t1 = std::chrono::system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Hello World\\n&quot;</span>;</span><br><span class=\"line\">std::chrono::steady_clock::time_point t2 = std::chrono:: system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">std::cout &lt;&lt; (t2-t1).<span class=\"built_in\">count</span>()&lt;&lt;” tick count”&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">Hello World</span><br><span class=\"line\"><span class=\"number\">20801</span>tick count</span><br></pre></td></tr></table></figure>\n\n<p>通过时钟获取两个时间点之相差多少个时钟周期，我们可以通过duration_cast将其转换为其它时钟周期的duration：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; std::chrono::<span class=\"built_in\">duration_cast</span>&lt;std::chrono::microseconds&gt;( t2-t1 ).<span class=\"built_in\">count</span>() &lt;&lt;” microseconds”&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">20</span> microseconds</span><br></pre></td></tr></table></figure>\n\n<p>还可以实现 <code>time_t</code> 和 <code>time_point</code> 之间的相互转换。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//system_clock的to_time_t方法可以将一个time_point转换为ctime：</span></span><br><span class=\"line\">std::<span class=\"type\">time_t</span> now_c = std::chrono::system_clock::<span class=\"built_in\">to_time_t</span>(time_point);</span><br><span class=\"line\"><span class=\"comment\">//而from_time_t方法则是相反的，它将ctime转换为time_point。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std::chrono;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新纪元1970.1.1时间</span></span><br><span class=\"line\">    system_clock::time_point epoch;</span><br><span class=\"line\"></span><br><span class=\"line\">    duration&lt;<span class=\"type\">int</span>, ratio&lt;<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>&gt;&gt; <span class=\"built_in\">day</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 新纪元1970.1.1时间 + 1天</span></span><br><span class=\"line\">    <span class=\"function\">system_clock::time_point <span class=\"title\">ppt</span><span class=\"params\">(day)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> dday = duration&lt;<span class=\"type\">int</span>, ratio&lt;<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>&gt;&gt;;</span><br><span class=\"line\">    <span class=\"comment\">// 新纪元1970.1.1时间 + 10天</span></span><br><span class=\"line\">    <span class=\"function\">time_point&lt;system_clock, dday&gt; <span class=\"title\">t</span><span class=\"params\">(dday(<span class=\"number\">10</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 系统当前时间</span></span><br><span class=\"line\">    system_clock::time_point today = system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 转换为time_t时间类型</span></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm = system_clock::<span class=\"built_in\">to_time_t</span>(today);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;今天的日期是: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm1 = system_clock::<span class=\"built_in\">to_time_t</span>(today + day);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;明天的日期是: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm2 = system_clock::<span class=\"built_in\">to_time_t</span>(epoch);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;新纪元时间: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm3 = system_clock::<span class=\"built_in\">to_time_t</span>(ppt);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;新纪元时间+1天: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm4 = system_clock::<span class=\"built_in\">to_time_t</span>(t);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;新纪元时间+10天: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm4);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">今天的日期是: Thu Apr <span class=\"number\">8</span> <span class=\"number\">11</span>:<span class=\"number\">09</span>:<span class=\"number\">49</span> <span class=\"number\">2021</span></span><br><span class=\"line\">明天的日期是: Fri Apr <span class=\"number\">9</span> <span class=\"number\">11</span>:<span class=\"number\">09</span>:<span class=\"number\">49</span> <span class=\"number\">2021</span></span><br><span class=\"line\">新纪元时间: Thu Jan <span class=\"number\">1</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">1970</span></span><br><span class=\"line\">新纪元时间+<span class=\"number\">1</span>天: Fri Jan <span class=\"number\">2</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">1970</span></span><br><span class=\"line\">新纪元时间+<span class=\"number\">10</span>天: Sun Jan <span class=\"number\">11</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">1970</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://blog.csdn.net/weixin_42907473/article/details/90278426\">https://blog.csdn.net/weixin_42907473/article/details/90278426</a></p>\n<p><a href=\"https://www.cnblogs.com/Galesaur-wcy/p/15380832.html\">https://www.cnblogs.com/Galesaur-wcy/p/15380832.html</a></p>\n<p><a href=\"https://www.jb51.net/article/122979.htm\">https://www.jb51.net/article/122979.htm</a></p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":"<h1 id=\"C-11-chrono库-日期和时间库\"><a href=\"#C-11-chrono库-日期和时间库\" class=\"headerlink\" title=\"C++11:chrono库 (日期和时间库)\"></a>C++11:chrono库 (日期和时间库)</h1><blockquote>\n<p>​\tC++11标准已经支持std::chrono了，但是为了兼容老编译系统现在很多C++库和程序都使用boost::chrono作为时间类库(还有的原因就std::chrono没有收录boost::chrono的所有功能，比如统计CPU使用时间、自定义时间输出格式等)，Boost::Chrono的时间类型分为duration和time_point，也就是时长和时刻两类，很多概念和接口都是围绕这两个维度去定义和实现的。</p>\n</blockquote>\n<p>chrono库主要包含了三种类型:<br>时间间隔Duration<br>时钟Clocks<br>时间点Time point</p>\n<h2 id=\"Duration\"><a href=\"#Duration\" class=\"headerlink\" title=\"Duration\"></a><strong>Duration</strong></h2><p>duration表示一段时间间隔，用来记录时间长度，可以表示几秒钟、几分钟或者几个小时的时间间隔。</p>\n<p>其原型:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> <span class=\"title class_\">Rep</span>,<span class=\"keyword\">class</span> <span class=\"title class_\">Period</span> = std::ration&lt;<span class=\"number\">1</span>&gt;&gt; <span class=\"keyword\">class</span> duration;</span><br></pre></td></tr></table></figure>\n\n<p>第一个模板参数Rep是一个数值类型，表明存储所用的数据类型(int、long、double等)；第二个模板参数是一个默认模板参数std::ratio，它的原型是：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;std::<span class=\"type\">intmax_t</span> Num, std::<span class=\"type\">intmax_t</span> Denom = <span class=\"number\">1</span>&gt; <span class=\"keyword\">class</span> ratio;</span><br></pre></td></tr></table></figure>\n\n<p>第一个模板参数Rep是一个数值类型，表明存储所用的数据类型(int、long、double等)；第二个模板参数是一个默认模板参数std::ratio，它的原型是：</p>\n<p>它表示每个时钟周期的秒数，其中第一个模板参数Num代表分子，Denom代表分母，分母默认为1，ratio代表的是一个分子除以分母的分数值，比如ratio&lt;2&gt;代表一个时钟周期是两秒，ratio&lt;60&gt;代表了一分钟，ratio&lt;60 * 60&gt;代表一个小时，ratio&lt;60 * 60 * 24&gt;代表一天。而ratio&lt;1, 1000&gt;代表的则是1&#x2F;1000秒即一毫秒，ratio&lt;1, 1000000&gt;代表一微秒，ratio&lt;1, 1000000000&gt;代表一纳秒。</p>\n<p>标准库为了方便使用，就定义了一些常用的时间间隔，如时、分、秒、毫秒、微秒和纳秒，在chrono命名空间下，它们的定义如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">3600</span>,<span class=\"number\">1</span>&gt;&gt; hours;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">60</span>,<span class=\"number\">1</span>&gt;&gt; minutes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">1</span>,<span class=\"number\">1</span>&gt;&gt; seconds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">1</span>,<span class=\"number\">1000</span>&gt;&gt; milliseconds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">1</span>,<span class=\"number\">1000000</span>&gt;&gt; microseconds;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> duration &lt;Rep, ratio&lt;<span class=\"number\">1</span>,<span class=\"number\">1000000000</span>&gt;&gt; nanoseconds;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">chrono::hours <span class=\"title\">h</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>; <span class=\"comment\">// 一小时</span></span><br><span class=\"line\">    chrono::milliseconds ms&#123; <span class=\"number\">3</span> &#125;; <span class=\"comment\">// 3 毫秒</span></span><br><span class=\"line\">    chrono::duration&lt;<span class=\"type\">int</span>, ratio&lt;<span class=\"number\">1000</span>&gt;&gt; <span class=\"built_in\">ks</span>(<span class=\"number\">3</span>); <span class=\"comment\">// 3000 秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// chrono::duration&lt;int, ratio&lt;1000&gt;&gt; d3(3.5); // error</span></span><br><span class=\"line\">    <span class=\"function\">chrono::duration&lt;<span class=\"type\">double</span>&gt; <span class=\"title\">dd</span><span class=\"params\">(<span class=\"number\">6.6</span>)</span></span>; <span class=\"comment\">// 6.6 秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用小数表示时钟周期的次数</span></span><br><span class=\"line\">    chrono::duration&lt;<span class=\"type\">double</span>, std::ratio&lt;<span class=\"number\">1</span>, <span class=\"number\">30</span>&gt;&gt; <span class=\"built_in\">hz</span>(<span class=\"number\">3.5</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*********************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">h(1) 时钟周期为 1 小时，共有 1 个时钟周期，所以 h 表示的时间间隔为 1 小时</span></span><br><span class=\"line\"><span class=\"comment\">ms(3) 时钟周期为 1 毫秒，共有 3 个时钟周期，所以 ms 表示的时间间隔为 3 毫秒</span></span><br><span class=\"line\"><span class=\"comment\">ks(3) 时钟周期为 1000 秒，一共有三个时钟周期，所以 ks 表示的时间间隔为 3000 秒</span></span><br><span class=\"line\"><span class=\"comment\">d3(3.5) 时钟周期为 1000 秒，时钟周期数量只能用整形来表示，但是此处指定的是浮点数，因此语法错误</span></span><br><span class=\"line\"><span class=\"comment\">dd(6.6) 时钟周期为默认的 1 秒，共有 6.6 个时钟周期，所以 dd 表示的时间间隔为 6.6 秒</span></span><br><span class=\"line\"><span class=\"comment\">hz(3.5) 时钟周期为 1/30 秒，共有 3.5 个时钟周期，所以 hz 表示的时间间隔为 1/30*3.5 秒</span></span><br><span class=\"line\"><span class=\"comment\">chrono 库中根据 duration 类封装了不同长度的时钟周期（也可以自定义），基于这个时钟周期再进行周期次数的设置就可以得到总的时间间隔了（时钟周期 * 周期次数 = 总的时间间隔）。</span></span><br><span class=\"line\"><span class=\"comment\">*************************************************************************/</span></span><br></pre></td></tr></table></figure>\n\n<p>chrono还提供了获取时间间隔的时钟周期个数的方法count()，它的基本用法：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::chrono::milliseconds ms&#123; <span class=\"number\">3</span> &#125;; <span class=\"comment\">// 3 毫秒</span></span><br><span class=\"line\">    std::chrono::microseconds us = <span class=\"number\">2</span> * ms; <span class=\"comment\">// 6000 微秒</span></span><br><span class=\"line\">    <span class=\"comment\">// 时间间隔周期为 1/30 秒</span></span><br><span class=\"line\">    std::chrono::duration&lt;<span class=\"type\">double</span>, std::ratio&lt;<span class=\"number\">1</span>, <span class=\"number\">30</span>&gt;&gt; <span class=\"built_in\">hz</span>(<span class=\"number\">3.5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;3 ms duration has &quot;</span> &lt;&lt; ms.<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; ticks\\n&quot;</span></span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">&quot;6000 us duration has &quot;</span> &lt;&lt; us.<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; ticks\\n&quot;</span></span><br><span class=\"line\">        &lt;&lt; <span class=\"string\">&quot;3.5 hz duration has &quot;</span> &lt;&lt; hz.<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; ticks\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span> ms duration has <span class=\"number\">3</span> ticks</span><br><span class=\"line\"><span class=\"number\">6000</span> us duration has <span class=\"number\">6000</span> ticks</span><br><span class=\"line\"><span class=\"number\">3.5</span> hz duration has <span class=\"number\">3.5</span> ticks</span><br><span class=\"line\"></span><br><span class=\"line\">ms 时间单位为毫秒，初始化操作 ms&#123;<span class=\"number\">3</span>&#125; 表示时间间隔为 <span class=\"number\">3</span> 毫秒，一共有 <span class=\"number\">3</span> 个时间周期，每个周期为 <span class=\"number\">1</span> 毫秒</span><br><span class=\"line\">us 时间单位为微秒，初始化操作 <span class=\"number\">2</span>*ms 表示时间间隔为 <span class=\"number\">6000</span> 微秒，一共有 <span class=\"number\">6000</span> 个时间周期，每个周期为 <span class=\"number\">1</span> 微秒</span><br><span class=\"line\">hz 时间单位为秒，初始化操作 <span class=\"built_in\">hz</span>(<span class=\"number\">3.5</span>) 表示时间间隔为 <span class=\"number\">1</span>/<span class=\"number\">30</span>*<span class=\"number\">3.5</span> 秒，一共有 <span class=\"number\">3.5</span> 个时间周期，每个周期为 <span class=\"number\">1</span>/<span class=\"number\">30</span> 秒</span><br></pre></td></tr></table></figure>\n\n<p>通过定义这些常用的时间间隔类型，我们能方便的使用它们，比如线程的休眠:</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono::<span class=\"built_in\">seconds</span>(<span class=\"number\">3</span>)); <span class=\"comment\">//休眠三秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">std::this_thread::<span class=\"built_in\">sleep_for</span>(std::chrono:: <span class=\"built_in\">milliseconds</span> (<span class=\"number\">100</span>)); <span class=\"comment\">//休眠100毫秒</span></span><br></pre></td></tr></table></figure>\n\n<p>由于在 duration 类内部做了操作符重载，因此时间间隔之间可以直接进行算术运算，比如我们要计算两个时间间隔的差值，就可以在代码中做如下处理：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> boost;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\">chrono::minutes <span class=\"title\">t1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">chrono::seconds <span class=\"title\">t2</span><span class=\"params\">(<span class=\"number\">60</span>)</span></span>;</span><br><span class=\"line\">    chrono::seconds t3 = t1 - t2;</span><br><span class=\"line\">    cout &lt;&lt; t3.<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; second&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">540</span> second</span><br></pre></td></tr></table></figure>\n\n<p>在上面的测试程序中，t1 代表 10 分钟，t2 代表 60 秒，t3 是 t1 减去 t2，也就是 60*10-60&#x3D;540，这个 540 表示的时钟周期，每个时钟周期是 1 秒，因此两个时间间隔之间的差值为 540 秒。</p>\n<p>注意事项：duration 的加减运算有一定的规则，当两个 duration 时钟周期不相同的时候，会先统一成一种时钟，然后再进行算术运算.</p>\n<p>因为类型表示的维度不一，粗粒度的时长肯定能用细粒度的类型表示，反之则可能丢失精度，所以需要使用<code>chrono::duration_cast()</code>函数做显式的转换。将当前的时钟周期转换为其它的时钟周期，比如我可以把秒的时钟周期转换为分钟的时钟周期，然后通过count来获取转换后的分钟时间间隔：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; chrono::<span class=\"built_in\">duration_cast</span>&lt;chrono::minutes&gt;( t3 ).<span class=\"built_in\">count</span>() &lt;&lt;” minutes”&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">将会输出:</span><br><span class=\"line\"><span class=\"number\">9</span> minutes</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Time-point\"><a href=\"#Time-point\" class=\"headerlink\" title=\"Time point\"></a><strong>Time point</strong></h2><p>time_point表示一个时间点，用来获取1970.1.1以来的秒数和当前的时间, 可以做一些时间的比较和算术运算，可以和ctime库结合起来显示时间。time_point必须要clock来计时，</p>\n<p>time_point有一个函数<code>time_from_eproch()</code>用来获得1970年1月1日到time_point时间经过的duration。</p>\n<p>有一个<code>chrono::time_point_cast</code>转换函数，可以显式从高粒度向低粒度对time_point进行转换。</p>\n<p>下面的例子计算当前时间距离1970年1月1日有多少天：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ratio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std::chrono;</span><br><span class=\"line\">  <span class=\"keyword\">typedef</span> duration&lt;<span class=\"type\">int</span>,std::ratio&lt;<span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">24</span>&gt;&gt; days_type;</span><br><span class=\"line\">  time_point&lt;system_clock,days_type&gt; today = <span class=\"built_in\">time_point_cast</span>&lt;days_type&gt;(system_clock::<span class=\"built_in\">now</span>());</span><br><span class=\"line\">  std::cout &lt;&lt; today.<span class=\"built_in\">time_since_epoch</span>().<span class=\"built_in\">count</span>() &lt;&lt; <span class=\"string\">&quot; days since epoch&quot;</span> &lt;&lt; std::endl;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>time_point还支持一些算术元算，比如两个time_point的差值时钟周期数，还可以和duration相加减。下面的例子输出前一天和后一天的日期：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std::chrono;</span><br><span class=\"line\">    system_clock::time_point now = system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\">    std::<span class=\"type\">time_t</span> last = system_clock::<span class=\"built_in\">to_time_t</span>(now - std::chrono::<span class=\"built_in\">hours</span>(<span class=\"number\">24</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">　　std::<span class=\"type\">time_t</span> next= system_clock::<span class=\"built_in\">to_time_t</span>(now - std::chrono::<span class=\"built_in\">hours</span>(<span class=\"number\">24</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;One day ago, the time was &quot;</span>&lt;&lt; std::<span class=\"built_in\">put_time</span>(std::<span class=\"built_in\">localtime</span>(&amp;last), <span class=\"string\">&quot;%F %T&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">　　std::cout &lt;&lt; <span class=\"string\">&quot;Next day, the time was &quot;</span>&lt;&lt; std::<span class=\"built_in\">put_time</span>(std::<span class=\"built_in\">localtime</span>(&amp;next), <span class=\"string\">&quot;%F %T&quot;</span>) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">One day ago, the time was <span class=\"number\">2014</span><span class=\"number\">-3</span><span class=\"number\">-2622</span>:<span class=\"number\">38</span>:<span class=\"number\">27</span></span><br><span class=\"line\">Next day, the time was <span class=\"number\">2014</span><span class=\"number\">-3</span><span class=\"number\">-2822</span>:<span class=\"number\">38</span>:<span class=\"number\">27</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Clocks\"><a href=\"#Clocks\" class=\"headerlink\" title=\"Clocks\"></a><strong>Clocks</strong></h2><p>clock是Chrono中的重要概念，而且这些clock都包含一个<code>now()</code>的成员函数，用于返回当前的time_point。Boost.Chrono包含的clock类型有：</p>\n<p>　　(1) <code>chrono::system_clock</code> 代表系统时间，比如电脑上显示的当前时间，其特点是这个时间可以被用户手动设置更新，所以这个时钟是可以和外部时钟源同步的。</p>\n<p>　　(2) <code>chrono::steady_clock</code> 其特点是时间是单调增长的，后一个时刻访问得到的时间点肯定比之前时刻得到的时间点要晚，即使我们手动将系统时间向前调整了也不会改变这个时钟稳步向前推行累计，其也被称为monotonic time，该时钟是均匀增长且不能被调整，其特性对于很多不允许时间错乱的系统是十分重要的。<code>chrono::steady_clock</code>通常是基于系统启动时间来计时的，而且常常用来进行耗时、等待等工作使用。<strong>steady_clock可以获取稳定可靠的时间间隔，后一次调用now()的值和前一次的差值是不因为修改了系统时间而改变，它保证了稳定的时间间隔。它的用法和system用法一样。</strong></p>\n<p>　　(3) <code>chrono::high_resolution_clock </code>依赖于系统实现，通常是上面两种时钟的某个宏定义，取决于哪个时钟源更为的精确，所以其输出也决定于取决于上面哪个clock来实现的。</p>\n<p>　　(4) <code>chrono::process_real_cpu_clock </code>表示自进程启动以来使用的CPU时间，而这个数据也可以通过使用std::clock()来获得。<code>chrono::process_user_cpu_clock</code>、<code>boost::chrono::process_system_cpu_clock</code>表示自进程启动以来，在用户态、内核态所花费的时间，而所有的这些事件可以通过<code>chrono::process_cpu_clock</code>来获得，他返回上面所有时间组成的一个tuple结构。</p>\n<p>　　(5) <code>chrono::thread_clock</code> 返回基于线程统计的花费时间，而且不区分用户态、内核态的时间。</p>\n<p>在这些时钟类的内部有 time_point、duration、Rep、Period 等信息，基于这些信息来获取当前时间。</p>\n<p>可以通过now()来获取当前时间点：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">std::chrono::steady_clock::time_point t1 = std::chrono::system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">std::cout &lt;&lt; <span class=\"string\">&quot;Hello World\\n&quot;</span>;</span><br><span class=\"line\">std::chrono::steady_clock::time_point t2 = std::chrono:: system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">std::cout &lt;&lt; (t2-t1).<span class=\"built_in\">count</span>()&lt;&lt;” tick count”&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\">Hello World</span><br><span class=\"line\"><span class=\"number\">20801</span>tick count</span><br></pre></td></tr></table></figure>\n\n<p>通过时钟获取两个时间点之相差多少个时钟周期，我们可以通过duration_cast将其转换为其它时钟周期的duration：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; std::chrono::<span class=\"built_in\">duration_cast</span>&lt;std::chrono::microseconds&gt;( t2-t1 ).<span class=\"built_in\">count</span>() &lt;&lt;” microseconds”&lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">输出：</span><br><span class=\"line\"><span class=\"number\">20</span> microseconds</span><br></pre></td></tr></table></figure>\n\n<p>还可以实现 <code>time_t</code> 和 <code>time_point</code> 之间的相互转换。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//system_clock的to_time_t方法可以将一个time_point转换为ctime：</span></span><br><span class=\"line\">std::<span class=\"type\">time_t</span> now_c = std::chrono::system_clock::<span class=\"built_in\">to_time_t</span>(time_point);</span><br><span class=\"line\"><span class=\"comment\">//而from_time_t方法则是相反的，它将ctime转换为time_point。</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std::chrono;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新纪元1970.1.1时间</span></span><br><span class=\"line\">    system_clock::time_point epoch;</span><br><span class=\"line\"></span><br><span class=\"line\">    duration&lt;<span class=\"type\">int</span>, ratio&lt;<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>&gt;&gt; <span class=\"built_in\">day</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 新纪元1970.1.1时间 + 1天</span></span><br><span class=\"line\">    <span class=\"function\">system_clock::time_point <span class=\"title\">ppt</span><span class=\"params\">(day)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> dday = duration&lt;<span class=\"type\">int</span>, ratio&lt;<span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>&gt;&gt;;</span><br><span class=\"line\">    <span class=\"comment\">// 新纪元1970.1.1时间 + 10天</span></span><br><span class=\"line\">    <span class=\"function\">time_point&lt;system_clock, dday&gt; <span class=\"title\">t</span><span class=\"params\">(dday(<span class=\"number\">10</span>))</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 系统当前时间</span></span><br><span class=\"line\">    system_clock::time_point today = system_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 转换为time_t时间类型</span></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm = system_clock::<span class=\"built_in\">to_time_t</span>(today);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;今天的日期是: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm1 = system_clock::<span class=\"built_in\">to_time_t</span>(today + day);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;明天的日期是: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm2 = system_clock::<span class=\"built_in\">to_time_t</span>(epoch);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;新纪元时间: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm3 = system_clock::<span class=\"built_in\">to_time_t</span>(ppt);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;新纪元时间+1天: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">time_t</span> tm4 = system_clock::<span class=\"built_in\">to_time_t</span>(t);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;新纪元时间+10天: &quot;</span> &lt;&lt; <span class=\"built_in\">ctime</span>(&amp;tm4);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">今天的日期是: Thu Apr <span class=\"number\">8</span> <span class=\"number\">11</span>:<span class=\"number\">09</span>:<span class=\"number\">49</span> <span class=\"number\">2021</span></span><br><span class=\"line\">明天的日期是: Fri Apr <span class=\"number\">9</span> <span class=\"number\">11</span>:<span class=\"number\">09</span>:<span class=\"number\">49</span> <span class=\"number\">2021</span></span><br><span class=\"line\">新纪元时间: Thu Jan <span class=\"number\">1</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">1970</span></span><br><span class=\"line\">新纪元时间+<span class=\"number\">1</span>天: Fri Jan <span class=\"number\">2</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">1970</span></span><br><span class=\"line\">新纪元时间+<span class=\"number\">10</span>天: Sun Jan <span class=\"number\">11</span> <span class=\"number\">08</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">1970</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://blog.csdn.net/weixin_42907473/article/details/90278426\">https://blog.csdn.net/weixin_42907473/article/details/90278426</a></p>\n<p><a href=\"https://www.cnblogs.com/Galesaur-wcy/p/15380832.html\">https://www.cnblogs.com/Galesaur-wcy/p/15380832.html</a></p>\n<p><a href=\"https://www.jb51.net/article/122979.htm\">https://www.jb51.net/article/122979.htm</a></p>\n"},{"title":"EigenGeometry","date":"2023-08-24T14:38:18.618Z","description":null,"top_img":false,"_content":"\n# EigenGeometry \n\n```c++\n#include<iostream> \n#include<cmath> \n\nusing namespace std; \n\n#include<Eigen/Core> \n#include<Eigen/Geometry> \n\nusing namespace Eigen; \n\n//本程序演示了Eigen几何模块的使用方法 \nint main(intargc,char**argv){ \n    //Eigen/Geometry模块提供了各种旋转和平移的表示 \n    //3D旋转矩阵直接使用Matrix3d或Matrix3f \n    Matrix3drotation_matrix=Matrix3d::Identity();//单位矩阵 \n\n    //旋转向量使用AngleAxis,它底层不直接是Matrix，但运算可以当作矩阵（因为重载了运算符） \n    AngleAxisdrotation_vector(M_PI/4,Vector3d(0,0,1));//沿Z轴旋转45度 \n\n    cout.precision(3); \n    cout<<\"rotationmatrix=\\n\"<<rotation_vector.matrix()<<endl;//用matrix()转换成矩阵 \n\n    //也可以直接赋值 \n    rotation_matrix=rotation_vector.toRotationMatrix(); \n\n    //用AngleAxis可以进行坐标变换 \n    Vector3dv(1,0,0); \n    Vector3dv_rotated=rotation_vector*v; \n    cout<<\"(1,0,0)afterrotation(byangleaxis)=\"<<v_rotated.transpose()<<endl; \n\n    //或者用旋转矩阵 \n    v_rotated=rotation_matrix*v; \n    cout<<\"(1,0,0)afterrotation(bymatrix)=\"<<v_rotated.transpose()<<endl; \n\n    //欧拉角:可以将旋转矩阵直接转换成欧拉角 \n    Vector3deuler_angles=rotation_matrix.eulerAngles(2,1,0);//ZYX顺序，即yaw-pitch-roll顺序 \n    cout<<\"yawpitchroll=\"<<euler_angles.transpose()<<endl; \n    \n    //欧氏变换矩阵使用Eigen::Isometry \n    Isometry3dT=Isometry3d::Identity();//虽然称为3d，实质上是4＊4的矩阵 \n    T.rotate(rotation_vector);//按照rotation_vector进行旋转 \n    T.pretranslate(Vector3d(1,3,4));//把平移向量设成(1,3,4) \n    cout<<\"Transformmatrix=\\n\"<<T.matrix()<<endl; \n\n    //用变换矩阵进行坐标变换 \n    Vector3dv_transformed=T*v;//相当于R*v+t \n    cout<<\"vtranformed=\"<<v_transformed.transpose()<<endl; \n\n    //对于仿射和射影变换，使用Eigen::Affine3d和Eigen::Projective3d即可，略 \n    ##都是调用了有参构造函数 \n    //四元数 \n    //可以直接把AngleAxis赋值给四元数，反之亦然 \n    Quaterniondq=Quaterniond(rotation_vector); \n    cout<<\"quaternionfromrotationvector=\"<<q.coeffs().transpose()<<endl;//请注意coeffs的顺序是(x,y,z,w),w为实部，前三者为虚部 \n\n    //也可以把旋转矩阵赋给它 \n    q=Quaterniond(rotation_matrix); \n    cout<<\"quaternionfromrotationmatrix=\"<<q.coeffs().transpose()<<endl; \n\n    //使用四元数旋转一个向量，使用重载的乘法即可 \n    v_rotated=q*v;//注意数学上是qvq^{-1} \n    cout<<\"(1,0,0)afterrotation=\"<<v_rotated.transpose()<<endl; \n\n    //用常规向量乘法表示，则应该如下计算 \n    cout<<\"shouldbeequalto\"<<(q*Quaterniond(0,1,0,0)*q.inverse()).coeffs().transpose()<<endl; \n\n    return0; \n\n} \n```\n\n","source":"_posts/C++/EigenGeometry.md","raw":"---\ntitle: EigenGeometry\ndate:\ntags: \n- C++\n- Eigen\ncategories:\n- C++\ndescription:\ntop_img: false\n---\n\n# EigenGeometry \n\n```c++\n#include<iostream> \n#include<cmath> \n\nusing namespace std; \n\n#include<Eigen/Core> \n#include<Eigen/Geometry> \n\nusing namespace Eigen; \n\n//本程序演示了Eigen几何模块的使用方法 \nint main(intargc,char**argv){ \n    //Eigen/Geometry模块提供了各种旋转和平移的表示 \n    //3D旋转矩阵直接使用Matrix3d或Matrix3f \n    Matrix3drotation_matrix=Matrix3d::Identity();//单位矩阵 \n\n    //旋转向量使用AngleAxis,它底层不直接是Matrix，但运算可以当作矩阵（因为重载了运算符） \n    AngleAxisdrotation_vector(M_PI/4,Vector3d(0,0,1));//沿Z轴旋转45度 \n\n    cout.precision(3); \n    cout<<\"rotationmatrix=\\n\"<<rotation_vector.matrix()<<endl;//用matrix()转换成矩阵 \n\n    //也可以直接赋值 \n    rotation_matrix=rotation_vector.toRotationMatrix(); \n\n    //用AngleAxis可以进行坐标变换 \n    Vector3dv(1,0,0); \n    Vector3dv_rotated=rotation_vector*v; \n    cout<<\"(1,0,0)afterrotation(byangleaxis)=\"<<v_rotated.transpose()<<endl; \n\n    //或者用旋转矩阵 \n    v_rotated=rotation_matrix*v; \n    cout<<\"(1,0,0)afterrotation(bymatrix)=\"<<v_rotated.transpose()<<endl; \n\n    //欧拉角:可以将旋转矩阵直接转换成欧拉角 \n    Vector3deuler_angles=rotation_matrix.eulerAngles(2,1,0);//ZYX顺序，即yaw-pitch-roll顺序 \n    cout<<\"yawpitchroll=\"<<euler_angles.transpose()<<endl; \n    \n    //欧氏变换矩阵使用Eigen::Isometry \n    Isometry3dT=Isometry3d::Identity();//虽然称为3d，实质上是4＊4的矩阵 \n    T.rotate(rotation_vector);//按照rotation_vector进行旋转 \n    T.pretranslate(Vector3d(1,3,4));//把平移向量设成(1,3,4) \n    cout<<\"Transformmatrix=\\n\"<<T.matrix()<<endl; \n\n    //用变换矩阵进行坐标变换 \n    Vector3dv_transformed=T*v;//相当于R*v+t \n    cout<<\"vtranformed=\"<<v_transformed.transpose()<<endl; \n\n    //对于仿射和射影变换，使用Eigen::Affine3d和Eigen::Projective3d即可，略 \n    ##都是调用了有参构造函数 \n    //四元数 \n    //可以直接把AngleAxis赋值给四元数，反之亦然 \n    Quaterniondq=Quaterniond(rotation_vector); \n    cout<<\"quaternionfromrotationvector=\"<<q.coeffs().transpose()<<endl;//请注意coeffs的顺序是(x,y,z,w),w为实部，前三者为虚部 \n\n    //也可以把旋转矩阵赋给它 \n    q=Quaterniond(rotation_matrix); \n    cout<<\"quaternionfromrotationmatrix=\"<<q.coeffs().transpose()<<endl; \n\n    //使用四元数旋转一个向量，使用重载的乘法即可 \n    v_rotated=q*v;//注意数学上是qvq^{-1} \n    cout<<\"(1,0,0)afterrotation=\"<<v_rotated.transpose()<<endl; \n\n    //用常规向量乘法表示，则应该如下计算 \n    cout<<\"shouldbeequalto\"<<(q*Quaterniond(0,1,0,0)*q.inverse()).coeffs().transpose()<<endl; \n\n    return0; \n\n} \n```\n\n","slug":"C++/EigenGeometry","published":1,"updated":"2023-08-25T08:41:29.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66r000dgcr78ndd9vhn","content":"<h1 id=\"EigenGeometry\"><a href=\"#EigenGeometry\" class=\"headerlink\" title=\"EigenGeometry\"></a>EigenGeometry</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Eigen/Core&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Eigen/Geometry&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本程序演示了Eigen几何模块的使用方法 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(intargc,<span class=\"type\">char</span>**argv)</span></span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//Eigen/Geometry模块提供了各种旋转和平移的表示 </span></span><br><span class=\"line\">    <span class=\"comment\">//3D旋转矩阵直接使用Matrix3d或Matrix3f </span></span><br><span class=\"line\">    Matrix3drotation_matrix=Matrix3d::<span class=\"built_in\">Identity</span>();<span class=\"comment\">//单位矩阵 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//旋转向量使用AngleAxis,它底层不直接是Matrix，但运算可以当作矩阵（因为重载了运算符） </span></span><br><span class=\"line\">    <span class=\"built_in\">AngleAxisdrotation_vector</span>(M_PI/<span class=\"number\">4</span>,<span class=\"built_in\">Vector3d</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>));<span class=\"comment\">//沿Z轴旋转45度 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout.<span class=\"built_in\">precision</span>(<span class=\"number\">3</span>); </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;rotationmatrix=\\n&quot;</span>&lt;&lt;rotation_vector.<span class=\"built_in\">matrix</span>()&lt;&lt;endl;<span class=\"comment\">//用matrix()转换成矩阵 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//也可以直接赋值 </span></span><br><span class=\"line\">    rotation_matrix=rotation_vector.<span class=\"built_in\">toRotationMatrix</span>(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用AngleAxis可以进行坐标变换 </span></span><br><span class=\"line\">    <span class=\"built_in\">Vector3dv</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>); </span><br><span class=\"line\">    Vector3dv_rotated=rotation_vector*v; </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;(1,0,0)afterrotation(byangleaxis)=&quot;</span>&lt;&lt;v_rotated.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//或者用旋转矩阵 </span></span><br><span class=\"line\">    v_rotated=rotation_matrix*v; </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;(1,0,0)afterrotation(bymatrix)=&quot;</span>&lt;&lt;v_rotated.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//欧拉角:可以将旋转矩阵直接转换成欧拉角 </span></span><br><span class=\"line\">    Vector3deuler_angles=rotation_matrix.<span class=\"built_in\">eulerAngles</span>(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);<span class=\"comment\">//ZYX顺序，即yaw-pitch-roll顺序 </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;yawpitchroll=&quot;</span>&lt;&lt;euler_angles.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//欧氏变换矩阵使用Eigen::Isometry </span></span><br><span class=\"line\">    Isometry3dT=Isometry3d::<span class=\"built_in\">Identity</span>();<span class=\"comment\">//虽然称为3d，实质上是4＊4的矩阵 </span></span><br><span class=\"line\">    T.<span class=\"built_in\">rotate</span>(rotation_vector);<span class=\"comment\">//按照rotation_vector进行旋转 </span></span><br><span class=\"line\">    T.<span class=\"built_in\">pretranslate</span>(<span class=\"built_in\">Vector3d</span>(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>));<span class=\"comment\">//把平移向量设成(1,3,4) </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;Transformmatrix=\\n&quot;</span>&lt;&lt;T.<span class=\"built_in\">matrix</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用变换矩阵进行坐标变换 </span></span><br><span class=\"line\">    Vector3dv_transformed=T*v;<span class=\"comment\">//相当于R*v+t </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;vtranformed=&quot;</span>&lt;&lt;v_transformed.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对于仿射和射影变换，使用Eigen::Affine3d和Eigen::Projective3d即可，略 </span></span><br><span class=\"line\">    ##都是调用了有参构造函数 </span><br><span class=\"line\">    <span class=\"comment\">//四元数 </span></span><br><span class=\"line\">    <span class=\"comment\">//可以直接把AngleAxis赋值给四元数，反之亦然 </span></span><br><span class=\"line\">    Quaterniondq=<span class=\"built_in\">Quaterniond</span>(rotation_vector); </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;quaternionfromrotationvector=&quot;</span>&lt;&lt;q.<span class=\"built_in\">coeffs</span>().<span class=\"built_in\">transpose</span>()&lt;&lt;endl;<span class=\"comment\">//请注意coeffs的顺序是(x,y,z,w),w为实部，前三者为虚部 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//也可以把旋转矩阵赋给它 </span></span><br><span class=\"line\">    q=<span class=\"built_in\">Quaterniond</span>(rotation_matrix); </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;quaternionfromrotationmatrix=&quot;</span>&lt;&lt;q.<span class=\"built_in\">coeffs</span>().<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用四元数旋转一个向量，使用重载的乘法即可 </span></span><br><span class=\"line\">    v_rotated=q*v;<span class=\"comment\">//注意数学上是qvq^&#123;-1&#125; </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;(1,0,0)afterrotation=&quot;</span>&lt;&lt;v_rotated.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用常规向量乘法表示，则应该如下计算 </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;shouldbeequalto&quot;</span>&lt;&lt;(q*<span class=\"built_in\">Quaterniond</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)*q.<span class=\"built_in\">inverse</span>()).<span class=\"built_in\">coeffs</span>().<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    return0; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-7.png","cover_type":"img","excerpt":"","more":"<h1 id=\"EigenGeometry\"><a href=\"#EigenGeometry\" class=\"headerlink\" title=\"EigenGeometry\"></a>EigenGeometry</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cmath&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Eigen/Core&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;Eigen/Geometry&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> Eigen; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本程序演示了Eigen几何模块的使用方法 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(intargc,<span class=\"type\">char</span>**argv)</span></span>&#123; </span><br><span class=\"line\">    <span class=\"comment\">//Eigen/Geometry模块提供了各种旋转和平移的表示 </span></span><br><span class=\"line\">    <span class=\"comment\">//3D旋转矩阵直接使用Matrix3d或Matrix3f </span></span><br><span class=\"line\">    Matrix3drotation_matrix=Matrix3d::<span class=\"built_in\">Identity</span>();<span class=\"comment\">//单位矩阵 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//旋转向量使用AngleAxis,它底层不直接是Matrix，但运算可以当作矩阵（因为重载了运算符） </span></span><br><span class=\"line\">    <span class=\"built_in\">AngleAxisdrotation_vector</span>(M_PI/<span class=\"number\">4</span>,<span class=\"built_in\">Vector3d</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>));<span class=\"comment\">//沿Z轴旋转45度 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    cout.<span class=\"built_in\">precision</span>(<span class=\"number\">3</span>); </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;rotationmatrix=\\n&quot;</span>&lt;&lt;rotation_vector.<span class=\"built_in\">matrix</span>()&lt;&lt;endl;<span class=\"comment\">//用matrix()转换成矩阵 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//也可以直接赋值 </span></span><br><span class=\"line\">    rotation_matrix=rotation_vector.<span class=\"built_in\">toRotationMatrix</span>(); </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用AngleAxis可以进行坐标变换 </span></span><br><span class=\"line\">    <span class=\"built_in\">Vector3dv</span>(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>); </span><br><span class=\"line\">    Vector3dv_rotated=rotation_vector*v; </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;(1,0,0)afterrotation(byangleaxis)=&quot;</span>&lt;&lt;v_rotated.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//或者用旋转矩阵 </span></span><br><span class=\"line\">    v_rotated=rotation_matrix*v; </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;(1,0,0)afterrotation(bymatrix)=&quot;</span>&lt;&lt;v_rotated.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//欧拉角:可以将旋转矩阵直接转换成欧拉角 </span></span><br><span class=\"line\">    Vector3deuler_angles=rotation_matrix.<span class=\"built_in\">eulerAngles</span>(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);<span class=\"comment\">//ZYX顺序，即yaw-pitch-roll顺序 </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;yawpitchroll=&quot;</span>&lt;&lt;euler_angles.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//欧氏变换矩阵使用Eigen::Isometry </span></span><br><span class=\"line\">    Isometry3dT=Isometry3d::<span class=\"built_in\">Identity</span>();<span class=\"comment\">//虽然称为3d，实质上是4＊4的矩阵 </span></span><br><span class=\"line\">    T.<span class=\"built_in\">rotate</span>(rotation_vector);<span class=\"comment\">//按照rotation_vector进行旋转 </span></span><br><span class=\"line\">    T.<span class=\"built_in\">pretranslate</span>(<span class=\"built_in\">Vector3d</span>(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>));<span class=\"comment\">//把平移向量设成(1,3,4) </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;Transformmatrix=\\n&quot;</span>&lt;&lt;T.<span class=\"built_in\">matrix</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用变换矩阵进行坐标变换 </span></span><br><span class=\"line\">    Vector3dv_transformed=T*v;<span class=\"comment\">//相当于R*v+t </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;vtranformed=&quot;</span>&lt;&lt;v_transformed.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对于仿射和射影变换，使用Eigen::Affine3d和Eigen::Projective3d即可，略 </span></span><br><span class=\"line\">    ##都是调用了有参构造函数 </span><br><span class=\"line\">    <span class=\"comment\">//四元数 </span></span><br><span class=\"line\">    <span class=\"comment\">//可以直接把AngleAxis赋值给四元数，反之亦然 </span></span><br><span class=\"line\">    Quaterniondq=<span class=\"built_in\">Quaterniond</span>(rotation_vector); </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;quaternionfromrotationvector=&quot;</span>&lt;&lt;q.<span class=\"built_in\">coeffs</span>().<span class=\"built_in\">transpose</span>()&lt;&lt;endl;<span class=\"comment\">//请注意coeffs的顺序是(x,y,z,w),w为实部，前三者为虚部 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//也可以把旋转矩阵赋给它 </span></span><br><span class=\"line\">    q=<span class=\"built_in\">Quaterniond</span>(rotation_matrix); </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;quaternionfromrotationmatrix=&quot;</span>&lt;&lt;q.<span class=\"built_in\">coeffs</span>().<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用四元数旋转一个向量，使用重载的乘法即可 </span></span><br><span class=\"line\">    v_rotated=q*v;<span class=\"comment\">//注意数学上是qvq^&#123;-1&#125; </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;(1,0,0)afterrotation=&quot;</span>&lt;&lt;v_rotated.<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用常规向量乘法表示，则应该如下计算 </span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;shouldbeequalto&quot;</span>&lt;&lt;(q*<span class=\"built_in\">Quaterniond</span>(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)*q.<span class=\"built_in\">inverse</span>()).<span class=\"built_in\">coeffs</span>().<span class=\"built_in\">transpose</span>()&lt;&lt;endl; </span><br><span class=\"line\"></span><br><span class=\"line\">    return0; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n"},{"title":"Eigen几何模块的引入","date":"2023-08-24T14:38:18.620Z","description":null,"top_img":false,"_content":"\n# Eigen几何模块的引入 \n\n## 1、在CMakeLists文件中添加 \n\n```\ninclude_directories(\"/usr/include/eigen3\") \n```\n\n## 2、在main.cpp中添加 \n\n```\n#include <cmath>             //c++的标准数学函数库，不是Eigen中的，但一般要用到 \n#include <Eigen/Core> \n#include <Eigen/Geometry> \nusing namespace Eigen; \n```\n\n## 二、Eigen几何模块的使用 \n\n### 1、定义 \n\n#### 1）三维空间坐标定义 \n\n```\nVector3d v(1,0,0); \n//使用三维纵向量Vector3d定义 \n```\n\n#### 2）旋转矩阵定义 \n\n```\nMatrix3d rotation_matrix = Matrix3d::Identity(); \n//使用Matrix3d或者Matrix3f定义，Matrix3d::Identity()是三阶单位阵\n```\n\n#### 3）旋转向量定义 \n\n```\nAngleAxisd rotation_vector(M_PI / 4,Vector3d(0,0,1)); \n//沿Z轴旋转45度 \n//使用AngleAxisd定义，AngleAxisd（旋转角度，旋转轴单位向量Vector3d） \n//AngleAxisd的底层不直接是Matrix，但由于重载了运算符，因此仍可以当做矩阵运算\n```\n\n注意：AngleAxisd不能用cout输出，以该定义为例，要用rotation_vector.matrix()转换成矩阵形式才能输出，但转换后不再是旋转向量形式，而是3x3的旋转矩阵形式。 \n\n**注意：使用AngleAxisd定义旋转向量时候，C++中M_PI的精度是二十位，并不是真正数学意义上的π \\piπ,因此在计算过程中会引入误差。例子如下：** \n\n```\nAngleAxisd angle_vector = AngleAxisd(M_PI/2,Vector3d(0, 0, 1)); \ncout << angle_vector.matrix() << endl; \n```\n\n数学理论上所出来的angle_vector对应的矩阵应该为： \n\n[0 -1 0] \n\n[1 0 0] \n\n[0 0 1] \n\n但程序输出为： \n\n6.12323e-17 -1 0 \n\n1 6.12323e-17 0 \n\n0 0 1 \n\n将程序中精度由d改成f后，程序输出为： \n\n-4.37114e-08 -1 0 \n\n1 -4.37114e-08 0 \n\n0 0 1 \n\n其中，本应该矩阵中应该为0的元素出现了一个极小值，而且该极小值会随着精度的变化而变化，不过目前发现的影响只有对0元素的影响，这个极小值可以看成0. \n\n#### 4）欧拉角定义 \n\n```\nVector3d eulerangles(0,0,0); \n//使用三维纵向量Vector3d定义\n```\n\n#### 5）欧氏变换矩阵定义 \n\n```\nIsometry3d T = Isometry3d::Identity(); \n//使用Isometry3d定义，虽然叫3d，但实际上是4x4矩阵 \n//Isometry3d::Identity()是将欧氏矩阵初始化为单位矩阵 \nIsometry3d T(q); \n//使用四元数初始化欧氏变换矩阵 \n```\n\n注意：欧氏变换矩阵不能直接用cout输出，以该定义为例，要使用 \n\nT.matrix()转换为矩阵形式输出，转换后仍为4x4的欧氏变换矩阵 \n\n#### 6）四元数定义 \n\n```\nQuaterniond q(Vector4d(1,2,3,4)); \n//使用Vector4d定义，定义格式为（x,y,z,w) \nQuaterniond q((1,2,3,4)); \n//直接赋值，定义格式为(w,x,y,z) \n```\n\n注意：该定义方法下，Vector中四个元素对应关系为（x,y,z,w)，即最后以为才是四元数的实部 \n\n注意：四元数不能直接用cout输出，以该定义为例，输出格式为 \n\n```\ncout << q.coeffs() << endl;  //输出格式为（x,y,z,w)\n```\n\n注意：四元数在使用前要进行归一化，这样由四元数转化出来的旋转矩阵才满足正交性。归一化方法为： \n\n```\nq.normalize(); \n```\n\n### 2、各种变换表达形式之间的转换 \n\n#### 1）旋转向量与旋转矩阵之间的变换 \n\n显示转换 \n\n```\nrotation_matrix = rotation_vector.toRotationMatrix(); \n或 \nrotation_matrix = rotation_vector.matrix(); \n```\n\n注意：此处也存在M_PI引入的误差问题，详讲1-3）旋转向量定义。 \n\n隐式转换（直接赋值） \n\n```\nrotation_matrix = rotation_vector; \nrotation_vector = rotation_matrix; \n```\n\n#### 2）旋转矩阵与欧拉角的变换 \n\n```\neulerangles = rotation_matrix.eulerAngles(2,1,0); \n//参数（2.1.0）表示这是ZYX顺序，即roll pitch yaw \n```\n\n#### 3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转 \n\n```\nT.rotate(rotation_matrix);   //在原来T的基础上按照旋转矩阵进行旋转，然后返回T。就是讲旋转矩阵的变换整合到T中 \nT.rotate(rotation_vector);   //按照旋转向量进行旋转\n```\n\n#### 4）欧氏变换矩阵平移 \n\n```\nT.pretranslate(Vector3d(1,3,4));   //按照向量Vector3d(1,3,4)平移\n```\n\n#### 5）四元数与旋转向量旋转矩阵之间的转换 \n\n显式转换 \n\n```\n q = Quaterniond(rotation_vector)\n q = Quaterniond(rotation_matrix)\n```\n\n隐式转换 \n\n```\nrotation_vector = q\nrotation_matrix = q\nq = rotation_matrix\nq = rotation_vector\n```\n\n### 3、坐标变换 \n\n```\nVector3d v(1,0,0); //定义初始坐标v \nVector3d v_rotated； //定义坐标转换后坐标v_rotated\n```\n\n#### 1）使用旋转矩阵 \n\n```\nv_rotated = rotation_matrix * v \n```\n\n#### 2）使用旋转向量 \n\n```\nv_rotated = rotation_vector * v \n```\n\n#### 3）使用变换矩阵 \n\n```\nVector3d v_tranformed = T * v\n```\n\n#### 4）使用四元数 \n\n```\nv_rotated = q*v\n```\n\n","source":"_posts/C++/Eigen几何模块的引入.md","raw":"---\ntitle: Eigen几何模块的引入 \ndate:\ntags: \n- C++\n- Eigen\ncategories:\n- C++\ndescription:\ntop_img: false\n---\n\n# Eigen几何模块的引入 \n\n## 1、在CMakeLists文件中添加 \n\n```\ninclude_directories(\"/usr/include/eigen3\") \n```\n\n## 2、在main.cpp中添加 \n\n```\n#include <cmath>             //c++的标准数学函数库，不是Eigen中的，但一般要用到 \n#include <Eigen/Core> \n#include <Eigen/Geometry> \nusing namespace Eigen; \n```\n\n## 二、Eigen几何模块的使用 \n\n### 1、定义 \n\n#### 1）三维空间坐标定义 \n\n```\nVector3d v(1,0,0); \n//使用三维纵向量Vector3d定义 \n```\n\n#### 2）旋转矩阵定义 \n\n```\nMatrix3d rotation_matrix = Matrix3d::Identity(); \n//使用Matrix3d或者Matrix3f定义，Matrix3d::Identity()是三阶单位阵\n```\n\n#### 3）旋转向量定义 \n\n```\nAngleAxisd rotation_vector(M_PI / 4,Vector3d(0,0,1)); \n//沿Z轴旋转45度 \n//使用AngleAxisd定义，AngleAxisd（旋转角度，旋转轴单位向量Vector3d） \n//AngleAxisd的底层不直接是Matrix，但由于重载了运算符，因此仍可以当做矩阵运算\n```\n\n注意：AngleAxisd不能用cout输出，以该定义为例，要用rotation_vector.matrix()转换成矩阵形式才能输出，但转换后不再是旋转向量形式，而是3x3的旋转矩阵形式。 \n\n**注意：使用AngleAxisd定义旋转向量时候，C++中M_PI的精度是二十位，并不是真正数学意义上的π \\piπ,因此在计算过程中会引入误差。例子如下：** \n\n```\nAngleAxisd angle_vector = AngleAxisd(M_PI/2,Vector3d(0, 0, 1)); \ncout << angle_vector.matrix() << endl; \n```\n\n数学理论上所出来的angle_vector对应的矩阵应该为： \n\n[0 -1 0] \n\n[1 0 0] \n\n[0 0 1] \n\n但程序输出为： \n\n6.12323e-17 -1 0 \n\n1 6.12323e-17 0 \n\n0 0 1 \n\n将程序中精度由d改成f后，程序输出为： \n\n-4.37114e-08 -1 0 \n\n1 -4.37114e-08 0 \n\n0 0 1 \n\n其中，本应该矩阵中应该为0的元素出现了一个极小值，而且该极小值会随着精度的变化而变化，不过目前发现的影响只有对0元素的影响，这个极小值可以看成0. \n\n#### 4）欧拉角定义 \n\n```\nVector3d eulerangles(0,0,0); \n//使用三维纵向量Vector3d定义\n```\n\n#### 5）欧氏变换矩阵定义 \n\n```\nIsometry3d T = Isometry3d::Identity(); \n//使用Isometry3d定义，虽然叫3d，但实际上是4x4矩阵 \n//Isometry3d::Identity()是将欧氏矩阵初始化为单位矩阵 \nIsometry3d T(q); \n//使用四元数初始化欧氏变换矩阵 \n```\n\n注意：欧氏变换矩阵不能直接用cout输出，以该定义为例，要使用 \n\nT.matrix()转换为矩阵形式输出，转换后仍为4x4的欧氏变换矩阵 \n\n#### 6）四元数定义 \n\n```\nQuaterniond q(Vector4d(1,2,3,4)); \n//使用Vector4d定义，定义格式为（x,y,z,w) \nQuaterniond q((1,2,3,4)); \n//直接赋值，定义格式为(w,x,y,z) \n```\n\n注意：该定义方法下，Vector中四个元素对应关系为（x,y,z,w)，即最后以为才是四元数的实部 \n\n注意：四元数不能直接用cout输出，以该定义为例，输出格式为 \n\n```\ncout << q.coeffs() << endl;  //输出格式为（x,y,z,w)\n```\n\n注意：四元数在使用前要进行归一化，这样由四元数转化出来的旋转矩阵才满足正交性。归一化方法为： \n\n```\nq.normalize(); \n```\n\n### 2、各种变换表达形式之间的转换 \n\n#### 1）旋转向量与旋转矩阵之间的变换 \n\n显示转换 \n\n```\nrotation_matrix = rotation_vector.toRotationMatrix(); \n或 \nrotation_matrix = rotation_vector.matrix(); \n```\n\n注意：此处也存在M_PI引入的误差问题，详讲1-3）旋转向量定义。 \n\n隐式转换（直接赋值） \n\n```\nrotation_matrix = rotation_vector; \nrotation_vector = rotation_matrix; \n```\n\n#### 2）旋转矩阵与欧拉角的变换 \n\n```\neulerangles = rotation_matrix.eulerAngles(2,1,0); \n//参数（2.1.0）表示这是ZYX顺序，即roll pitch yaw \n```\n\n#### 3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转 \n\n```\nT.rotate(rotation_matrix);   //在原来T的基础上按照旋转矩阵进行旋转，然后返回T。就是讲旋转矩阵的变换整合到T中 \nT.rotate(rotation_vector);   //按照旋转向量进行旋转\n```\n\n#### 4）欧氏变换矩阵平移 \n\n```\nT.pretranslate(Vector3d(1,3,4));   //按照向量Vector3d(1,3,4)平移\n```\n\n#### 5）四元数与旋转向量旋转矩阵之间的转换 \n\n显式转换 \n\n```\n q = Quaterniond(rotation_vector)\n q = Quaterniond(rotation_matrix)\n```\n\n隐式转换 \n\n```\nrotation_vector = q\nrotation_matrix = q\nq = rotation_matrix\nq = rotation_vector\n```\n\n### 3、坐标变换 \n\n```\nVector3d v(1,0,0); //定义初始坐标v \nVector3d v_rotated； //定义坐标转换后坐标v_rotated\n```\n\n#### 1）使用旋转矩阵 \n\n```\nv_rotated = rotation_matrix * v \n```\n\n#### 2）使用旋转向量 \n\n```\nv_rotated = rotation_vector * v \n```\n\n#### 3）使用变换矩阵 \n\n```\nVector3d v_tranformed = T * v\n```\n\n#### 4）使用四元数 \n\n```\nv_rotated = q*v\n```\n\n","slug":"C++/Eigen几何模块的引入","published":1,"updated":"2023-08-25T08:41:48.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66t000hgcr7g0crgcb2","content":"<h1 id=\"Eigen几何模块的引入\"><a href=\"#Eigen几何模块的引入\" class=\"headerlink\" title=\"Eigen几何模块的引入\"></a>Eigen几何模块的引入</h1><h2 id=\"1、在CMakeLists文件中添加\"><a href=\"#1、在CMakeLists文件中添加\" class=\"headerlink\" title=\"1、在CMakeLists文件中添加\"></a>1、在CMakeLists文件中添加</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include_directories(&quot;/usr/include/eigen3&quot;) </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、在main-cpp中添加\"><a href=\"#2、在main-cpp中添加\" class=\"headerlink\" title=\"2、在main.cpp中添加\"></a>2、在main.cpp中添加</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;cmath&gt;             //c++的标准数学函数库，不是Eigen中的，但一般要用到 </span><br><span class=\"line\">#include &lt;Eigen/Core&gt; </span><br><span class=\"line\">#include &lt;Eigen/Geometry&gt; </span><br><span class=\"line\">using namespace Eigen; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、Eigen几何模块的使用\"><a href=\"#二、Eigen几何模块的使用\" class=\"headerlink\" title=\"二、Eigen几何模块的使用\"></a>二、Eigen几何模块的使用</h2><h3 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h3><h4 id=\"1）三维空间坐标定义\"><a href=\"#1）三维空间坐标定义\" class=\"headerlink\" title=\"1）三维空间坐标定义\"></a>1）三维空间坐标定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector3d v(1,0,0); </span><br><span class=\"line\">//使用三维纵向量Vector3d定义 </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）旋转矩阵定义\"><a href=\"#2）旋转矩阵定义\" class=\"headerlink\" title=\"2）旋转矩阵定义\"></a>2）旋转矩阵定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix3d rotation_matrix = Matrix3d::Identity(); </span><br><span class=\"line\">//使用Matrix3d或者Matrix3f定义，Matrix3d::Identity()是三阶单位阵</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）旋转向量定义\"><a href=\"#3）旋转向量定义\" class=\"headerlink\" title=\"3）旋转向量定义\"></a>3）旋转向量定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AngleAxisd rotation_vector(M_PI / 4,Vector3d(0,0,1)); </span><br><span class=\"line\">//沿Z轴旋转45度 </span><br><span class=\"line\">//使用AngleAxisd定义，AngleAxisd（旋转角度，旋转轴单位向量Vector3d） </span><br><span class=\"line\">//AngleAxisd的底层不直接是Matrix，但由于重载了运算符，因此仍可以当做矩阵运算</span><br></pre></td></tr></table></figure>\n\n<p>注意：AngleAxisd不能用cout输出，以该定义为例，要用rotation_vector.matrix()转换成矩阵形式才能输出，但转换后不再是旋转向量形式，而是3x3的旋转矩阵形式。 </p>\n<p><strong>注意：使用AngleAxisd定义旋转向量时候，C++中M_PI的精度是二十位，并不是真正数学意义上的π \\piπ,因此在计算过程中会引入误差。例子如下：</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AngleAxisd angle_vector = AngleAxisd(M_PI/2,Vector3d(0, 0, 1)); </span><br><span class=\"line\">cout &lt;&lt; angle_vector.matrix() &lt;&lt; endl; </span><br></pre></td></tr></table></figure>\n\n<p>数学理论上所出来的angle_vector对应的矩阵应该为： </p>\n<p>[0 -1 0] </p>\n<p>[1 0 0] </p>\n<p>[0 0 1] </p>\n<p>但程序输出为： </p>\n<p>6.12323e-17 -1 0 </p>\n<p>1 6.12323e-17 0 </p>\n<p>0 0 1 </p>\n<p>将程序中精度由d改成f后，程序输出为： </p>\n<p>-4.37114e-08 -1 0 </p>\n<p>1 -4.37114e-08 0 </p>\n<p>0 0 1 </p>\n<p>其中，本应该矩阵中应该为0的元素出现了一个极小值，而且该极小值会随着精度的变化而变化，不过目前发现的影响只有对0元素的影响，这个极小值可以看成0. </p>\n<h4 id=\"4）欧拉角定义\"><a href=\"#4）欧拉角定义\" class=\"headerlink\" title=\"4）欧拉角定义\"></a>4）欧拉角定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector3d eulerangles(0,0,0); </span><br><span class=\"line\">//使用三维纵向量Vector3d定义</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5）欧氏变换矩阵定义\"><a href=\"#5）欧氏变换矩阵定义\" class=\"headerlink\" title=\"5）欧氏变换矩阵定义\"></a>5）欧氏变换矩阵定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Isometry3d T = Isometry3d::Identity(); </span><br><span class=\"line\">//使用Isometry3d定义，虽然叫3d，但实际上是4x4矩阵 </span><br><span class=\"line\">//Isometry3d::Identity()是将欧氏矩阵初始化为单位矩阵 </span><br><span class=\"line\">Isometry3d T(q); </span><br><span class=\"line\">//使用四元数初始化欧氏变换矩阵 </span><br></pre></td></tr></table></figure>\n\n<p>注意：欧氏变换矩阵不能直接用cout输出，以该定义为例，要使用 </p>\n<p>T.matrix()转换为矩阵形式输出，转换后仍为4x4的欧氏变换矩阵 </p>\n<h4 id=\"6）四元数定义\"><a href=\"#6）四元数定义\" class=\"headerlink\" title=\"6）四元数定义\"></a>6）四元数定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Quaterniond q(Vector4d(1,2,3,4)); </span><br><span class=\"line\">//使用Vector4d定义，定义格式为（x,y,z,w) </span><br><span class=\"line\">Quaterniond q((1,2,3,4)); </span><br><span class=\"line\">//直接赋值，定义格式为(w,x,y,z) </span><br></pre></td></tr></table></figure>\n\n<p>注意：该定义方法下，Vector中四个元素对应关系为（x,y,z,w)，即最后以为才是四元数的实部 </p>\n<p>注意：四元数不能直接用cout输出，以该定义为例，输出格式为 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; q.coeffs() &lt;&lt; endl;  //输出格式为（x,y,z,w)</span><br></pre></td></tr></table></figure>\n\n<p>注意：四元数在使用前要进行归一化，这样由四元数转化出来的旋转矩阵才满足正交性。归一化方法为： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q.normalize(); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、各种变换表达形式之间的转换\"><a href=\"#2、各种变换表达形式之间的转换\" class=\"headerlink\" title=\"2、各种变换表达形式之间的转换\"></a>2、各种变换表达形式之间的转换</h3><h4 id=\"1）旋转向量与旋转矩阵之间的变换\"><a href=\"#1）旋转向量与旋转矩阵之间的变换\" class=\"headerlink\" title=\"1）旋转向量与旋转矩阵之间的变换\"></a>1）旋转向量与旋转矩阵之间的变换</h4><p>显示转换 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rotation_matrix = rotation_vector.toRotationMatrix(); </span><br><span class=\"line\">或 </span><br><span class=\"line\">rotation_matrix = rotation_vector.matrix(); </span><br></pre></td></tr></table></figure>\n\n<p>注意：此处也存在M_PI引入的误差问题，详讲1-3）旋转向量定义。 </p>\n<p>隐式转换（直接赋值） </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rotation_matrix = rotation_vector; </span><br><span class=\"line\">rotation_vector = rotation_matrix; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）旋转矩阵与欧拉角的变换\"><a href=\"#2）旋转矩阵与欧拉角的变换\" class=\"headerlink\" title=\"2）旋转矩阵与欧拉角的变换\"></a>2）旋转矩阵与欧拉角的变换</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eulerangles = rotation_matrix.eulerAngles(2,1,0); </span><br><span class=\"line\">//参数（2.1.0）表示这是ZYX顺序，即roll pitch yaw </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转\"><a href=\"#3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转\" class=\"headerlink\" title=\"3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转\"></a>3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T.rotate(rotation_matrix);   //在原来T的基础上按照旋转矩阵进行旋转，然后返回T。就是讲旋转矩阵的变换整合到T中 </span><br><span class=\"line\">T.rotate(rotation_vector);   //按照旋转向量进行旋转</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）欧氏变换矩阵平移\"><a href=\"#4）欧氏变换矩阵平移\" class=\"headerlink\" title=\"4）欧氏变换矩阵平移\"></a>4）欧氏变换矩阵平移</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T.pretranslate(Vector3d(1,3,4));   //按照向量Vector3d(1,3,4)平移</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5）四元数与旋转向量旋转矩阵之间的转换\"><a href=\"#5）四元数与旋转向量旋转矩阵之间的转换\" class=\"headerlink\" title=\"5）四元数与旋转向量旋转矩阵之间的转换\"></a>5）四元数与旋转向量旋转矩阵之间的转换</h4><p>显式转换 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q = Quaterniond(rotation_vector)</span><br><span class=\"line\">q = Quaterniond(rotation_matrix)</span><br></pre></td></tr></table></figure>\n\n<p>隐式转换 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rotation_vector = q</span><br><span class=\"line\">rotation_matrix = q</span><br><span class=\"line\">q = rotation_matrix</span><br><span class=\"line\">q = rotation_vector</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、坐标变换\"><a href=\"#3、坐标变换\" class=\"headerlink\" title=\"3、坐标变换\"></a>3、坐标变换</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector3d v(1,0,0); //定义初始坐标v </span><br><span class=\"line\">Vector3d v_rotated； //定义坐标转换后坐标v_rotated</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1）使用旋转矩阵\"><a href=\"#1）使用旋转矩阵\" class=\"headerlink\" title=\"1）使用旋转矩阵\"></a>1）使用旋转矩阵</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v_rotated = rotation_matrix * v </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）使用旋转向量\"><a href=\"#2）使用旋转向量\" class=\"headerlink\" title=\"2）使用旋转向量\"></a>2）使用旋转向量</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v_rotated = rotation_vector * v </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）使用变换矩阵\"><a href=\"#3）使用变换矩阵\" class=\"headerlink\" title=\"3）使用变换矩阵\"></a>3）使用变换矩阵</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector3d v_tranformed = T * v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）使用四元数\"><a href=\"#4）使用四元数\" class=\"headerlink\" title=\"4）使用四元数\"></a>4）使用四元数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v_rotated = q*v</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-3.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Eigen几何模块的引入\"><a href=\"#Eigen几何模块的引入\" class=\"headerlink\" title=\"Eigen几何模块的引入\"></a>Eigen几何模块的引入</h1><h2 id=\"1、在CMakeLists文件中添加\"><a href=\"#1、在CMakeLists文件中添加\" class=\"headerlink\" title=\"1、在CMakeLists文件中添加\"></a>1、在CMakeLists文件中添加</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include_directories(&quot;/usr/include/eigen3&quot;) </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、在main-cpp中添加\"><a href=\"#2、在main-cpp中添加\" class=\"headerlink\" title=\"2、在main.cpp中添加\"></a>2、在main.cpp中添加</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;cmath&gt;             //c++的标准数学函数库，不是Eigen中的，但一般要用到 </span><br><span class=\"line\">#include &lt;Eigen/Core&gt; </span><br><span class=\"line\">#include &lt;Eigen/Geometry&gt; </span><br><span class=\"line\">using namespace Eigen; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、Eigen几何模块的使用\"><a href=\"#二、Eigen几何模块的使用\" class=\"headerlink\" title=\"二、Eigen几何模块的使用\"></a>二、Eigen几何模块的使用</h2><h3 id=\"1、定义\"><a href=\"#1、定义\" class=\"headerlink\" title=\"1、定义\"></a>1、定义</h3><h4 id=\"1）三维空间坐标定义\"><a href=\"#1）三维空间坐标定义\" class=\"headerlink\" title=\"1）三维空间坐标定义\"></a>1）三维空间坐标定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector3d v(1,0,0); </span><br><span class=\"line\">//使用三维纵向量Vector3d定义 </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）旋转矩阵定义\"><a href=\"#2）旋转矩阵定义\" class=\"headerlink\" title=\"2）旋转矩阵定义\"></a>2）旋转矩阵定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix3d rotation_matrix = Matrix3d::Identity(); </span><br><span class=\"line\">//使用Matrix3d或者Matrix3f定义，Matrix3d::Identity()是三阶单位阵</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）旋转向量定义\"><a href=\"#3）旋转向量定义\" class=\"headerlink\" title=\"3）旋转向量定义\"></a>3）旋转向量定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AngleAxisd rotation_vector(M_PI / 4,Vector3d(0,0,1)); </span><br><span class=\"line\">//沿Z轴旋转45度 </span><br><span class=\"line\">//使用AngleAxisd定义，AngleAxisd（旋转角度，旋转轴单位向量Vector3d） </span><br><span class=\"line\">//AngleAxisd的底层不直接是Matrix，但由于重载了运算符，因此仍可以当做矩阵运算</span><br></pre></td></tr></table></figure>\n\n<p>注意：AngleAxisd不能用cout输出，以该定义为例，要用rotation_vector.matrix()转换成矩阵形式才能输出，但转换后不再是旋转向量形式，而是3x3的旋转矩阵形式。 </p>\n<p><strong>注意：使用AngleAxisd定义旋转向量时候，C++中M_PI的精度是二十位，并不是真正数学意义上的π \\piπ,因此在计算过程中会引入误差。例子如下：</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AngleAxisd angle_vector = AngleAxisd(M_PI/2,Vector3d(0, 0, 1)); </span><br><span class=\"line\">cout &lt;&lt; angle_vector.matrix() &lt;&lt; endl; </span><br></pre></td></tr></table></figure>\n\n<p>数学理论上所出来的angle_vector对应的矩阵应该为： </p>\n<p>[0 -1 0] </p>\n<p>[1 0 0] </p>\n<p>[0 0 1] </p>\n<p>但程序输出为： </p>\n<p>6.12323e-17 -1 0 </p>\n<p>1 6.12323e-17 0 </p>\n<p>0 0 1 </p>\n<p>将程序中精度由d改成f后，程序输出为： </p>\n<p>-4.37114e-08 -1 0 </p>\n<p>1 -4.37114e-08 0 </p>\n<p>0 0 1 </p>\n<p>其中，本应该矩阵中应该为0的元素出现了一个极小值，而且该极小值会随着精度的变化而变化，不过目前发现的影响只有对0元素的影响，这个极小值可以看成0. </p>\n<h4 id=\"4）欧拉角定义\"><a href=\"#4）欧拉角定义\" class=\"headerlink\" title=\"4）欧拉角定义\"></a>4）欧拉角定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector3d eulerangles(0,0,0); </span><br><span class=\"line\">//使用三维纵向量Vector3d定义</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5）欧氏变换矩阵定义\"><a href=\"#5）欧氏变换矩阵定义\" class=\"headerlink\" title=\"5）欧氏变换矩阵定义\"></a>5）欧氏变换矩阵定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Isometry3d T = Isometry3d::Identity(); </span><br><span class=\"line\">//使用Isometry3d定义，虽然叫3d，但实际上是4x4矩阵 </span><br><span class=\"line\">//Isometry3d::Identity()是将欧氏矩阵初始化为单位矩阵 </span><br><span class=\"line\">Isometry3d T(q); </span><br><span class=\"line\">//使用四元数初始化欧氏变换矩阵 </span><br></pre></td></tr></table></figure>\n\n<p>注意：欧氏变换矩阵不能直接用cout输出，以该定义为例，要使用 </p>\n<p>T.matrix()转换为矩阵形式输出，转换后仍为4x4的欧氏变换矩阵 </p>\n<h4 id=\"6）四元数定义\"><a href=\"#6）四元数定义\" class=\"headerlink\" title=\"6）四元数定义\"></a>6）四元数定义</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Quaterniond q(Vector4d(1,2,3,4)); </span><br><span class=\"line\">//使用Vector4d定义，定义格式为（x,y,z,w) </span><br><span class=\"line\">Quaterniond q((1,2,3,4)); </span><br><span class=\"line\">//直接赋值，定义格式为(w,x,y,z) </span><br></pre></td></tr></table></figure>\n\n<p>注意：该定义方法下，Vector中四个元素对应关系为（x,y,z,w)，即最后以为才是四元数的实部 </p>\n<p>注意：四元数不能直接用cout输出，以该定义为例，输出格式为 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cout &lt;&lt; q.coeffs() &lt;&lt; endl;  //输出格式为（x,y,z,w)</span><br></pre></td></tr></table></figure>\n\n<p>注意：四元数在使用前要进行归一化，这样由四元数转化出来的旋转矩阵才满足正交性。归一化方法为： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q.normalize(); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、各种变换表达形式之间的转换\"><a href=\"#2、各种变换表达形式之间的转换\" class=\"headerlink\" title=\"2、各种变换表达形式之间的转换\"></a>2、各种变换表达形式之间的转换</h3><h4 id=\"1）旋转向量与旋转矩阵之间的变换\"><a href=\"#1）旋转向量与旋转矩阵之间的变换\" class=\"headerlink\" title=\"1）旋转向量与旋转矩阵之间的变换\"></a>1）旋转向量与旋转矩阵之间的变换</h4><p>显示转换 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rotation_matrix = rotation_vector.toRotationMatrix(); </span><br><span class=\"line\">或 </span><br><span class=\"line\">rotation_matrix = rotation_vector.matrix(); </span><br></pre></td></tr></table></figure>\n\n<p>注意：此处也存在M_PI引入的误差问题，详讲1-3）旋转向量定义。 </p>\n<p>隐式转换（直接赋值） </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rotation_matrix = rotation_vector; </span><br><span class=\"line\">rotation_vector = rotation_matrix; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）旋转矩阵与欧拉角的变换\"><a href=\"#2）旋转矩阵与欧拉角的变换\" class=\"headerlink\" title=\"2）旋转矩阵与欧拉角的变换\"></a>2）旋转矩阵与欧拉角的变换</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eulerangles = rotation_matrix.eulerAngles(2,1,0); </span><br><span class=\"line\">//参数（2.1.0）表示这是ZYX顺序，即roll pitch yaw </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转\"><a href=\"#3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转\" class=\"headerlink\" title=\"3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转\"></a>3）欧氏变换矩阵按照旋转向量或旋转矩阵旋转</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T.rotate(rotation_matrix);   //在原来T的基础上按照旋转矩阵进行旋转，然后返回T。就是讲旋转矩阵的变换整合到T中 </span><br><span class=\"line\">T.rotate(rotation_vector);   //按照旋转向量进行旋转</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）欧氏变换矩阵平移\"><a href=\"#4）欧氏变换矩阵平移\" class=\"headerlink\" title=\"4）欧氏变换矩阵平移\"></a>4）欧氏变换矩阵平移</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T.pretranslate(Vector3d(1,3,4));   //按照向量Vector3d(1,3,4)平移</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5）四元数与旋转向量旋转矩阵之间的转换\"><a href=\"#5）四元数与旋转向量旋转矩阵之间的转换\" class=\"headerlink\" title=\"5）四元数与旋转向量旋转矩阵之间的转换\"></a>5）四元数与旋转向量旋转矩阵之间的转换</h4><p>显式转换 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q = Quaterniond(rotation_vector)</span><br><span class=\"line\">q = Quaterniond(rotation_matrix)</span><br></pre></td></tr></table></figure>\n\n<p>隐式转换 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rotation_vector = q</span><br><span class=\"line\">rotation_matrix = q</span><br><span class=\"line\">q = rotation_matrix</span><br><span class=\"line\">q = rotation_vector</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、坐标变换\"><a href=\"#3、坐标变换\" class=\"headerlink\" title=\"3、坐标变换\"></a>3、坐标变换</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector3d v(1,0,0); //定义初始坐标v </span><br><span class=\"line\">Vector3d v_rotated； //定义坐标转换后坐标v_rotated</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1）使用旋转矩阵\"><a href=\"#1）使用旋转矩阵\" class=\"headerlink\" title=\"1）使用旋转矩阵\"></a>1）使用旋转矩阵</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v_rotated = rotation_matrix * v </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2）使用旋转向量\"><a href=\"#2）使用旋转向量\" class=\"headerlink\" title=\"2）使用旋转向量\"></a>2）使用旋转向量</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v_rotated = rotation_vector * v </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3）使用变换矩阵\"><a href=\"#3）使用变换矩阵\" class=\"headerlink\" title=\"3）使用变换矩阵\"></a>3）使用变换矩阵</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector3d v_tranformed = T * v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4）使用四元数\"><a href=\"#4）使用四元数\" class=\"headerlink\" title=\"4）使用四元数\"></a>4）使用四元数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v_rotated = q*v</span><br></pre></td></tr></table></figure>\n\n"},{"title":"GoogleTest","date":"2023-08-24T14:38:18.628Z","description":null,"top_img":false,"_content":"\n# GoogleTest\n\n## GoogleTest运行特定的测试用例\n\n通常GoogleTest的单元测试，直接执行，就全跑一遍，很耗时，有时候需要只测试某个case。\n\n先列出所有case：\n\n```\nD:\\my_workspace\\build\\Debug>hello_test.exe --gtest_list_tests\nRunning main() from D:\\my_workspace\\build\\_deps\\googletest-src\\googletest\\src\\gtest_main.cc\nHelloTest.\n  MyTest\n  MyTest2\nFactorialTest.\n  Negative\n  Zero\n  Positive\nIsPrimeTest.\n  Negative\n  Trivial\n```\n\n然后执行特定case：\n\n```\nhello_test.exe --gtest_filter=\"HelloTest*\"\n```\n\n或者：\n\n```\nhello_test.exe --gtest_filter=\"HelloTest.MyTest2\"\n```\n\n如果你的测试程序加这些后缀无效，可能是你的main函数写错了，把main函数删除，GoogleTest默认有main函数的，可以编译过。","source":"_posts/C++/GoogleTest.md","raw":"---\ntitle: GoogleTest\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# GoogleTest\n\n## GoogleTest运行特定的测试用例\n\n通常GoogleTest的单元测试，直接执行，就全跑一遍，很耗时，有时候需要只测试某个case。\n\n先列出所有case：\n\n```\nD:\\my_workspace\\build\\Debug>hello_test.exe --gtest_list_tests\nRunning main() from D:\\my_workspace\\build\\_deps\\googletest-src\\googletest\\src\\gtest_main.cc\nHelloTest.\n  MyTest\n  MyTest2\nFactorialTest.\n  Negative\n  Zero\n  Positive\nIsPrimeTest.\n  Negative\n  Trivial\n```\n\n然后执行特定case：\n\n```\nhello_test.exe --gtest_filter=\"HelloTest*\"\n```\n\n或者：\n\n```\nhello_test.exe --gtest_filter=\"HelloTest.MyTest2\"\n```\n\n如果你的测试程序加这些后缀无效，可能是你的main函数写错了，把main函数删除，GoogleTest默认有main函数的，可以编译过。","slug":"C++/GoogleTest","published":1,"updated":"2023-08-25T08:44:50.905Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66u000jgcr72klmd2m2","content":"<h1 id=\"GoogleTest\"><a href=\"#GoogleTest\" class=\"headerlink\" title=\"GoogleTest\"></a>GoogleTest</h1><h2 id=\"GoogleTest运行特定的测试用例\"><a href=\"#GoogleTest运行特定的测试用例\" class=\"headerlink\" title=\"GoogleTest运行特定的测试用例\"></a>GoogleTest运行特定的测试用例</h2><p>通常GoogleTest的单元测试，直接执行，就全跑一遍，很耗时，有时候需要只测试某个case。</p>\n<p>先列出所有case：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\my_workspace\\build\\Debug&gt;hello_test.exe --gtest_list_tests</span><br><span class=\"line\">Running main() from D:\\my_workspace\\build\\_deps\\googletest-src\\googletest\\src\\gtest_main.cc</span><br><span class=\"line\">HelloTest.</span><br><span class=\"line\">  MyTest</span><br><span class=\"line\">  MyTest2</span><br><span class=\"line\">FactorialTest.</span><br><span class=\"line\">  Negative</span><br><span class=\"line\">  Zero</span><br><span class=\"line\">  Positive</span><br><span class=\"line\">IsPrimeTest.</span><br><span class=\"line\">  Negative</span><br><span class=\"line\">  Trivial</span><br></pre></td></tr></table></figure>\n\n<p>然后执行特定case：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello_test.exe --gtest_filter=&quot;HelloTest*&quot;</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello_test.exe --gtest_filter=&quot;HelloTest.MyTest2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果你的测试程序加这些后缀无效，可能是你的main函数写错了，把main函数删除，GoogleTest默认有main函数的，可以编译过。</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-6.png","cover_type":"img","excerpt":"","more":"<h1 id=\"GoogleTest\"><a href=\"#GoogleTest\" class=\"headerlink\" title=\"GoogleTest\"></a>GoogleTest</h1><h2 id=\"GoogleTest运行特定的测试用例\"><a href=\"#GoogleTest运行特定的测试用例\" class=\"headerlink\" title=\"GoogleTest运行特定的测试用例\"></a>GoogleTest运行特定的测试用例</h2><p>通常GoogleTest的单元测试，直接执行，就全跑一遍，很耗时，有时候需要只测试某个case。</p>\n<p>先列出所有case：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\my_workspace\\build\\Debug&gt;hello_test.exe --gtest_list_tests</span><br><span class=\"line\">Running main() from D:\\my_workspace\\build\\_deps\\googletest-src\\googletest\\src\\gtest_main.cc</span><br><span class=\"line\">HelloTest.</span><br><span class=\"line\">  MyTest</span><br><span class=\"line\">  MyTest2</span><br><span class=\"line\">FactorialTest.</span><br><span class=\"line\">  Negative</span><br><span class=\"line\">  Zero</span><br><span class=\"line\">  Positive</span><br><span class=\"line\">IsPrimeTest.</span><br><span class=\"line\">  Negative</span><br><span class=\"line\">  Trivial</span><br></pre></td></tr></table></figure>\n\n<p>然后执行特定case：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello_test.exe --gtest_filter=&quot;HelloTest*&quot;</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello_test.exe --gtest_filter=&quot;HelloTest.MyTest2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果你的测试程序加这些后缀无效，可能是你的main函数写错了，把main函数删除，GoogleTest默认有main函数的，可以编译过。</p>\n"},{"title":"Find_package","date":"2023-08-24T14:38:18.623Z","description":null,"top_img":false,"_content":"\n# Find_package \n\n## **1、find_packakge命令基本介绍** \n\n> ​\t\t在我们实际开发过程中，经常不可避免会使用到第三方开源库，这些开源库可能是通过apt-get install命令自动安装到系统目录中，也可能是由我们自己下载库的源码然后通过编译安装到指令目录下的。\n>\n> ​\t\t不管哪种方式安装的库文件，如果我们需要自己的项目中使用这些库，首先面临的第一个问题就是如何找到这些库。所谓“找到”这些库，其实是根据我们的需要找到指定版本的库头文件包含路径、链接库路径等，从而能够满足我们开发项目的编译链接需要。\n>\n> ​\t\t在没有CMake的时代，这种库查找链接的工作都需要借助MakeFile中的各种命令来完成，非常的繁琐，而且不方便移植，到了CMake时代，CMake给我们提供了find_package()命令用来查找依赖包，理想情况下，一句find_package()命令就能把一整个依赖包的头文件包含路径、库路径、库名字、版本号等情况都获取到，后续只管用就好了。但实际使用过程可能会出现这样那样的问题，因此需要我们对find_package这个强大的命令有个大概的理解。 \n\n## **2、一个使用find_package命令的例子** \n\n为了能够帮助大家理解find_package命令的用法，此处首先用OpenCV库举例子，示范如何通过find_pakcage命令找到OpenCV库并配置，从而能够在我们自己的项目中调用OpenCV库，实现特定的功能。 \n\n**opencv_test.cpp:** \n\n```\n#include <cstdio> \n#include <iostream> \n#include <opencv2/opencv.hpp> \n\nusing namespace cv; \n\nint main() { \n  Mat image; \n  image = imread(\"../opencv_test.jpg\"); \n \n  if (!image.data) { \n    printf(\"No image data\\n\"); \n    return -1; \n  } \n\n  namedWindow(\"Display Image\", CV_WINDOW_AUTOSIZE); \n  imshow(\"Display Image\", image); \n  waitKey(0); \n  return 0; \n} \n```\n\n**CMakeLists.txt:** \n\n```\ncmake_minimum_required(VERSION 2.8) \nproject(find_package_learning) \nfind_package(OpenCV 3 REQUIRED) \n\n \nmessage(STATUS \"OpenCV_DIR = ${OpenCV_DIR}\") \nmessage(STATUS \"OpenCV_INCLUDE_DIRS = ${OpenCV_INCLUDE_DIRS}\") \nmessage(STATUS \"OpenCV_LIBS = ${OpenCV_LIBS}\") \n\n \ninclude_directories(${OPENCV_INCLUDE_DIRS})   \nadd_executable(opencv_test opencv_test.cpp)   \ntarget_link_libraries(opencv_test ${OpenCV_LIBS}) \n```\n\n### **2.1**编译输出与分析\n\n```\n-- The C compiler identification is GNU 7.5.0 \n-- The CXX compiler identification is GNU 7.5.0 \n-- Check for working C compiler: /usr/bin/cc \n-- Check for working C compiler: /usr/bin/cc -- works \n-- Detecting C compiler ABI info \n-- Detecting C compiler ABI info - done \n-- Detecting C compile features \n-- Detecting C compile features - done \n-- Check for working CXX compiler: /usr/bin/c++ \n-- Check for working CXX compiler: /usr/bin/c++ -- works \n-- Detecting CXX compiler ABI info \n-- Detecting CXX compiler ABI info - done \n-- Detecting CXX compile features \n-- Detecting CXX compile features - done \n-- Found OpenCV: /usr/local (found suitable version \"3.4.4\", minimum required is \"3\")  \n-- OpenCV_DIR = /usr/local/share/OpenCV \n-- OpenCV_INCLUDE_DIRS = /usr/local/include;/usr/local/include/opencv \n-- OpenCV_LIBS = opencv_calib3d;opencv_core;opencv_dnn;opencv_features2d;opencv_flann;opencv_highgui;opencv_imgcodecs;opencv_imgproc;opencv_ml;opencv_objdetect;opencv_photo;opencv_shape;opencv_stitching;opencv_superres;opencv_video;opencv_videoio;opencv_videostab;opencv_viz;opencv_aruco;opencv_bgsegm;opencv_bioinspired;opencv_ccalib;opencv_cvv;opencv_datasets;opencv_dnn_objdetect;opencv_dpm;opencv_face;opencv_freetype;opencv_fuzzy;opencv_hdf;opencv_hfs;opencv_img_hash;opencv_line_descriptor;opencv_optflow;opencv_phase_unwrapping;opencv_plot;opencv_reg;opencv_rgbd;opencv_saliency;opencv_stereo;opencv_structured_light;opencv_surface_matching;opencv_text;opencv_tracking;opencv_xfeatures2d;opencv_ximgproc;opencv_xobjdetect;opencv_xphoto \n-- Configuring done \n-- Generating done \n-- Build files have been written to: /home/zhanghm/Programming/programming-learning-examples/cmake_learning/learn_cmake_easily/find_package_learning/build \n```\n\n重点看下其中OpenCV_DIR、OpenCV_INCLUDE_DIRS和OpenCV_LIBS打印的结果，这是我在CMakeLists.txt中用message命令输出这三个变量的值的结果。 \n\n可以看到在执行find_package(OpenCV 3 REQUIRED)命令后，CMake找到了我们安装的位于/usr/local下的OpenCV库，并设置了CMake变量OpenCV_DIR为OpenCV库的配置文件所在路径，正是通过载入这个路径下的OpenCVConfig.cmake配置文件才能配置好OpenCV库，然后在OpenCVConfig.cmake配置文件中定义了变量OpenCV_INCLUDE_DIRS为OpenCV库头文件包含路径，这样我们才能才在代码中使用#include <opencv2/opencv.hpp>而不会出现编译错误，同时定义了变量OpenCV_LIBS为OpenCV链接库路径，这样我们才能正确链接到OpenCV中的库文件，而不会出现类似未定义的引用这样的链接错误。 \n\n![](media/GetImage.png)\n\n通过这个例子就可以看出find_package本质上就是一个搜包的命令，通过一些特定的规则找到<package_name>Config.cmake包配置文件，通过执行该配置文件，从而定义了一系列的变量，通过这些变量就可以准确定位到OpenCV库的头文件和库文件，完成编译。 \n\n那么关键的问题来了，find_package命令是怎么能够定位并载入指定库的配置文件的呢？这就需要梳理一下find_package命令的搜包过程。 \n\n## **3、find_package命令搜包过程** \n\n首先我们需要明确一点，CMake本身不提供任何搜索库的便捷方法，所有搜索库并给变量赋值的操作必须由CMake代码完成，也就是上述中的XXXConfig.cmake以及下面将要提到的FindXXX.cmake配置文件。只不过，库的作者通常会提供这两个文件，以方便使用者调用。\n\n### **3.1 find_package工作模式** \n\nfind_package命令有两种工作模式，这两种工作模式的不同决定了其搜包路径的不同： \n\n`Module模式` \n\nfind_package命令基础工作模式(Basic Signature)，也是默认工作模式。 \n\n`Config模式` \n\nfind_package命令高级工作模式(Full Signature)。 只有在find_package()中指定CONFIG、NO_MODULE等关键字，或者Module模式查找失败后才会进入到Config模式。 \n\n因此find_package工作模式流程图为： \n\n![](media/GetImage(1).png)\n\n### **3.2 Module模式用法** \n\n**Module**模式的参数为：\n\n```\nfind_package(<package> [version] [EXACT] [QUIET] [MODULE] \n             [REQUIRED] [[COMPONENTS] [components...]] \n             [OPTIONAL_COMPONENTS components...] \n             [NO_POLICY_SCOPE]) \n```\n\n参数解释： \n\n`package`：必填参数。需要查找的包名，注意大小写。 \n\n`version`和`EXACT`：可选参数，version指定的是版本，如果指定就必须检查找到的包的版本是否和version兼容。如果指定EXACT则表示必须完全匹配的版本而不是兼容版本就可以。 \n\n`QUIET`：可选参数，表示如果查找失败，不会在屏幕进行输出（但是如果指定了REQUIRED字段，则QUIET无效，仍然会输出查找失败提示语）。 \n\n`MODULE`：可选字段。前面提到说“如果Module模式查找失败则回退到Config模式进行查找”，但是假如加入了MODULE选项，那么就只在Module模式查找，如果Module模式下查找失败并不切换到Config模式查找。 \n\n`REQUIRED`：可选字段。表示一定要找到包，找不到的话就立即停掉整个CMake。而如果不指定REQUIRED则CMake会继续执行。 \n\n`COMPONENTS`，components：可选字段，表示查找的包中必须要找到的组件(components），如果有任何一个找不到就算失败，类似于REQUIRED，导致CMake停止执行。 \n\n**Module模式查找顺序** \n\nModule模式下是要查找到名为Find<PackageName>.cmake的配置文件。 \n\nModule模式只有两个查找路径：`CMAKE_MODULE_PATH`和`CMake安装路径下的Modules目录`， \n\n搜包路径依次为： \n\n```\nCMAKE_MODULE_PATH \nCMAKE_ROOT\n```\n\n先在CMAKE_MODULE_PATH变量对应的路径中查找。如果路径为空，或者路径中查找失败，则在CMake安装目录（即CMAKE_ROOT变量）下的Modules目录下（通常为/usr/share/cmake-3.10/Modules，3.10是我的CMake版本）查找。这两个变量可以在CMakeLists.txt文件中打印查看具体内容： \n\n```\nmessage(STATUS \"CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}\") \nmessage(STATUS \"CMAKE_ROOT = ${CMAKE_ROOT}\") \n```\n\n其中**CMAKE_MODULE_PATH**默认为空，可以利用set命令赋值。 \n\n在安装CMake时，CMake为我们提供了很多开发库的FindXXX.cmake模块文件，可以通过命令查询： \n\n```\ncmake --help-module-list | grep -E ^Find \n```\n\n### 3.3 Config模式用法 \n\nConfig模式的完整命令参数为： \n\n```\nfind_package(<package> [version] [EXACT] [QUIET] \n             [REQUIRED] [[COMPONENTS] [components...]] \n             [CONFIG|NO_MODULE] \n             [NO_POLICY_SCOPE] \n             [NAMES name1 [name2 ...]] \n             [CONFIGS config1 [config2 ...]] \n             [HINTS path1 [path2 ... ]] \n             [PATHS path1 [path2 ... ]] \n             [PATH_SUFFIXES suffix1 [suffix2 ...]] \n             [NO_DEFAULT_PATH] \n             [NO_CMAKE_ENVIRONMENT_PATH] \n             [NO_CMAKE_PATH] \n             [NO_SYSTEM_ENVIRONMENT_PATH] \n             [NO_CMAKE_PACKAGE_REGISTRY] \n             [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing. \n             [NO_CMAKE_SYSTEM_PATH] \n             [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY] \n             [CMAKE_FIND_ROOT_PATH_BOTH | \n              ONLY_CMAKE_FIND_ROOT_PATH | \n              NO_CMAKE_FIND_ROOT_PATH]) \n```\n\n相比于Module模式，Config模式的参数更多，也更复杂，但实际在使用过程中我们并不会用到所有参数，大部分参数都是可选的，我们只需要掌握基本的参数用法即可。 \n\n其中具体查找库并给XXX_INCLUDE_DIRS和XXX_LIBRARIES两个变量赋值的操作由XXXConfig.cmake模块完成。 \n\n两种模式看起来似乎差不多，不过CMake默认采取Module模式，如果Module模式未找到库，才会采取Config模式。如果XXX_DIR路径下找不到XXXConfig.cmake文件，则会找/usr/local/lib/cmake/XXX/中的XXXConfig.cmake文件。总之，Config模式是一个备选策略。通常，库安装时会拷贝一份XXXConfig.cmake到系统目录中，因此在没有显式指定搜索路径时也可以顺利找到。 \n\n#### Config模式查找顺序 \n\nConfig模式下是要查找名为<PackageName>Config.cmake或<lower-case-package-name>-config.cmake的模块文件。  \n\n搜包路径依次为： \n\n与Module模式不同，Config模式需要查找的路径非常多，也要匹配很多的可能性，因此有些路径是首先作为根目录，然后进行子目录的匹配，我会进行说明。  \n\n具体查找顺序为： \n\n1、名为<PackageName>_DIR的CMake变量或环境变量路径 \n\n默认为空。 \n\n这个路径是非根目录路径，需要指定到<PackageName>Config.cmake或<lower-case-package-name>-config.cmake文件所在目录才能找到。 \n\n2、名为CMAKE_PREFIX_PATH、CMAKE_FRAMEWORK_PATH、CMAKE_APPBUNDLE_PATH的CMake变量或环境变量路径 \n\n根目录，默认都为空。 \n\n注意如果你电脑中安装了ROS并配置好之后，你在终端执行echo $CMAKE_PREFIX_PATH会发现ROS会将CMAKE_PREFIX_PATH这个变量设置为ROS中的库的路径，意思是会首先查找ROS安装的库，如果恰好你在ROS中安装了OpenCV库，就会发现首先找到的是ROS中的OpenCV，而不是你自己安装到系统中的OpenCV。 \n\n3、PATH环境变量路径 \n\n根目录，默认为系统环境PATH环境变量值。 \n\n其实这个路径才是Config模式大部分情况下能够查找到安装到系统中各种库的原因。 \n\n这个路径的查找规则为： \n\n遍历PATH环境变量中的各路径，如果该路径如果以bin或sbin结尾，则自动回退到上一级目录得到根目录。例如我的PATH路径包括： \n\n```\n$ echo $PATH \n/home/zhanghm/.local/bin:/usr/local/cuda-10.1/bin:/opt/ros/melodic/bin:/home/zhanghm/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n在上述指明的是根目录路径时，CMake会首先检查这些根目录路径下是否有名为<PackageName>Config.cmake或<lower-case-package-name>-config.cmake的模块文件，如果没有，CMake会继续检查或匹配这些根目录下的以下路径（<PackageName>_DIR路径不是根目录路径）： \n\n```\n<prefix>/(lib/<arch>|lib|share)/cmake/<name>*/ \n<prefix>/(lib/<arch>|lib|share)/<name>*/  \n<prefix>/(lib/<arch>|lib|share)/<name>*/(cmake|CMake)/\n```\n\n其中为系统架构名，如Ubuntu下一般为：/usr/lib/x86_64-linux-gnu，整个(lib/<arch>|lib|share)为可选路径，例如OpenCV库而言会检查或匹配<prefix>/OpenCV/、<prefix>/lib/x86_64-linux-gnu/OpenCV/、<prefix>/lib/share/OpenCV/、<prefix>/share/OpenCV/等路径；name为包名，不区分大小写<name>*意思是包名后接一些版本后等字符也是合法的，如pcl-1.9也会被找到。\n\n### **3.4 查找指定包建议** \n\n上面的查找规则整体看起来好像很复杂，但其实我们在安装库的时候都会自动配置安装到对的位置，一般都不会出现问题。如果我们需要指定特定的库，我们也只需要设置优先级最高的几个变量名即可。包括下面两种情况： \n\n1、如果你明确知道想要查找的库<PackageName>Config.cmake或<lower-case-package-name>-config.cmake文件所在路径，为了能够准确定位到这个包，可以直接设置变量<PackageName>_DIR为具体路径，如： \n\n```\nset(OpenCV_DIR \"/home/zhanghm/Softwares/enviroment_config/opencv3_4_4/opencv/build\") \n```\n\n就可以明确需要查找的OpenCV包的路径了。 \n\n2、如果你有多个包的配置文件需要查找，可以将这些配置文件都统一放在一个命名为cmake的文件夹下，然后设置变量CMAKE_PREFIX_PATH变量指向这个cmake文件夹路径，需要注意根据上述的匹配规则，此时每个包的配置文件需要单独放置在命名为包名的文件夹下（文件夹名不区分大小写），否则会提示找不到。 \n\n## **4、总结** \n\n通过前面的描述，我相信大家已经能够基本掌握find_package命令的各种用法了，也能够在出现各种问题时自己进行问题定位。但还有一个我们需要注意的点是我们能够在自己的项目中使用find_package命令便捷进行依赖包配置的前提是这个包的开发者也是用CMake配置好了这个包，并提供了<PackageName>Config.cmake或Find<PackageName>.cmake的配置文件。 \n\n## **参考** \n\nhttps://blog.csdn.net/zhanghm1995/article/details/105466372 \n\nhttps://cmake.org/cmake/help/v3.5/command/find_package.html （官网介绍） \n\nhttps://zhuanlan.zhihu.com/p/50829542 \n\nhttps://seanzhengw.github.io/blog/cmake/2018/04/23/cmake-find-package.html \n\nhttps://blog.csdn.net/bytxl/article/details/50637277 ","source":"_posts/C++/Find_package.md","raw":"---\ntitle: Find_package\ndate:\ntags: \n- C++\n- CMakelists\ncategories:\n- [C++, CMakelists]\ndescription:\ntop_img: false\n---\n\n# Find_package \n\n## **1、find_packakge命令基本介绍** \n\n> ​\t\t在我们实际开发过程中，经常不可避免会使用到第三方开源库，这些开源库可能是通过apt-get install命令自动安装到系统目录中，也可能是由我们自己下载库的源码然后通过编译安装到指令目录下的。\n>\n> ​\t\t不管哪种方式安装的库文件，如果我们需要自己的项目中使用这些库，首先面临的第一个问题就是如何找到这些库。所谓“找到”这些库，其实是根据我们的需要找到指定版本的库头文件包含路径、链接库路径等，从而能够满足我们开发项目的编译链接需要。\n>\n> ​\t\t在没有CMake的时代，这种库查找链接的工作都需要借助MakeFile中的各种命令来完成，非常的繁琐，而且不方便移植，到了CMake时代，CMake给我们提供了find_package()命令用来查找依赖包，理想情况下，一句find_package()命令就能把一整个依赖包的头文件包含路径、库路径、库名字、版本号等情况都获取到，后续只管用就好了。但实际使用过程可能会出现这样那样的问题，因此需要我们对find_package这个强大的命令有个大概的理解。 \n\n## **2、一个使用find_package命令的例子** \n\n为了能够帮助大家理解find_package命令的用法，此处首先用OpenCV库举例子，示范如何通过find_pakcage命令找到OpenCV库并配置，从而能够在我们自己的项目中调用OpenCV库，实现特定的功能。 \n\n**opencv_test.cpp:** \n\n```\n#include <cstdio> \n#include <iostream> \n#include <opencv2/opencv.hpp> \n\nusing namespace cv; \n\nint main() { \n  Mat image; \n  image = imread(\"../opencv_test.jpg\"); \n \n  if (!image.data) { \n    printf(\"No image data\\n\"); \n    return -1; \n  } \n\n  namedWindow(\"Display Image\", CV_WINDOW_AUTOSIZE); \n  imshow(\"Display Image\", image); \n  waitKey(0); \n  return 0; \n} \n```\n\n**CMakeLists.txt:** \n\n```\ncmake_minimum_required(VERSION 2.8) \nproject(find_package_learning) \nfind_package(OpenCV 3 REQUIRED) \n\n \nmessage(STATUS \"OpenCV_DIR = ${OpenCV_DIR}\") \nmessage(STATUS \"OpenCV_INCLUDE_DIRS = ${OpenCV_INCLUDE_DIRS}\") \nmessage(STATUS \"OpenCV_LIBS = ${OpenCV_LIBS}\") \n\n \ninclude_directories(${OPENCV_INCLUDE_DIRS})   \nadd_executable(opencv_test opencv_test.cpp)   \ntarget_link_libraries(opencv_test ${OpenCV_LIBS}) \n```\n\n### **2.1**编译输出与分析\n\n```\n-- The C compiler identification is GNU 7.5.0 \n-- The CXX compiler identification is GNU 7.5.0 \n-- Check for working C compiler: /usr/bin/cc \n-- Check for working C compiler: /usr/bin/cc -- works \n-- Detecting C compiler ABI info \n-- Detecting C compiler ABI info - done \n-- Detecting C compile features \n-- Detecting C compile features - done \n-- Check for working CXX compiler: /usr/bin/c++ \n-- Check for working CXX compiler: /usr/bin/c++ -- works \n-- Detecting CXX compiler ABI info \n-- Detecting CXX compiler ABI info - done \n-- Detecting CXX compile features \n-- Detecting CXX compile features - done \n-- Found OpenCV: /usr/local (found suitable version \"3.4.4\", minimum required is \"3\")  \n-- OpenCV_DIR = /usr/local/share/OpenCV \n-- OpenCV_INCLUDE_DIRS = /usr/local/include;/usr/local/include/opencv \n-- OpenCV_LIBS = opencv_calib3d;opencv_core;opencv_dnn;opencv_features2d;opencv_flann;opencv_highgui;opencv_imgcodecs;opencv_imgproc;opencv_ml;opencv_objdetect;opencv_photo;opencv_shape;opencv_stitching;opencv_superres;opencv_video;opencv_videoio;opencv_videostab;opencv_viz;opencv_aruco;opencv_bgsegm;opencv_bioinspired;opencv_ccalib;opencv_cvv;opencv_datasets;opencv_dnn_objdetect;opencv_dpm;opencv_face;opencv_freetype;opencv_fuzzy;opencv_hdf;opencv_hfs;opencv_img_hash;opencv_line_descriptor;opencv_optflow;opencv_phase_unwrapping;opencv_plot;opencv_reg;opencv_rgbd;opencv_saliency;opencv_stereo;opencv_structured_light;opencv_surface_matching;opencv_text;opencv_tracking;opencv_xfeatures2d;opencv_ximgproc;opencv_xobjdetect;opencv_xphoto \n-- Configuring done \n-- Generating done \n-- Build files have been written to: /home/zhanghm/Programming/programming-learning-examples/cmake_learning/learn_cmake_easily/find_package_learning/build \n```\n\n重点看下其中OpenCV_DIR、OpenCV_INCLUDE_DIRS和OpenCV_LIBS打印的结果，这是我在CMakeLists.txt中用message命令输出这三个变量的值的结果。 \n\n可以看到在执行find_package(OpenCV 3 REQUIRED)命令后，CMake找到了我们安装的位于/usr/local下的OpenCV库，并设置了CMake变量OpenCV_DIR为OpenCV库的配置文件所在路径，正是通过载入这个路径下的OpenCVConfig.cmake配置文件才能配置好OpenCV库，然后在OpenCVConfig.cmake配置文件中定义了变量OpenCV_INCLUDE_DIRS为OpenCV库头文件包含路径，这样我们才能才在代码中使用#include <opencv2/opencv.hpp>而不会出现编译错误，同时定义了变量OpenCV_LIBS为OpenCV链接库路径，这样我们才能正确链接到OpenCV中的库文件，而不会出现类似未定义的引用这样的链接错误。 \n\n![](media/GetImage.png)\n\n通过这个例子就可以看出find_package本质上就是一个搜包的命令，通过一些特定的规则找到<package_name>Config.cmake包配置文件，通过执行该配置文件，从而定义了一系列的变量，通过这些变量就可以准确定位到OpenCV库的头文件和库文件，完成编译。 \n\n那么关键的问题来了，find_package命令是怎么能够定位并载入指定库的配置文件的呢？这就需要梳理一下find_package命令的搜包过程。 \n\n## **3、find_package命令搜包过程** \n\n首先我们需要明确一点，CMake本身不提供任何搜索库的便捷方法，所有搜索库并给变量赋值的操作必须由CMake代码完成，也就是上述中的XXXConfig.cmake以及下面将要提到的FindXXX.cmake配置文件。只不过，库的作者通常会提供这两个文件，以方便使用者调用。\n\n### **3.1 find_package工作模式** \n\nfind_package命令有两种工作模式，这两种工作模式的不同决定了其搜包路径的不同： \n\n`Module模式` \n\nfind_package命令基础工作模式(Basic Signature)，也是默认工作模式。 \n\n`Config模式` \n\nfind_package命令高级工作模式(Full Signature)。 只有在find_package()中指定CONFIG、NO_MODULE等关键字，或者Module模式查找失败后才会进入到Config模式。 \n\n因此find_package工作模式流程图为： \n\n![](media/GetImage(1).png)\n\n### **3.2 Module模式用法** \n\n**Module**模式的参数为：\n\n```\nfind_package(<package> [version] [EXACT] [QUIET] [MODULE] \n             [REQUIRED] [[COMPONENTS] [components...]] \n             [OPTIONAL_COMPONENTS components...] \n             [NO_POLICY_SCOPE]) \n```\n\n参数解释： \n\n`package`：必填参数。需要查找的包名，注意大小写。 \n\n`version`和`EXACT`：可选参数，version指定的是版本，如果指定就必须检查找到的包的版本是否和version兼容。如果指定EXACT则表示必须完全匹配的版本而不是兼容版本就可以。 \n\n`QUIET`：可选参数，表示如果查找失败，不会在屏幕进行输出（但是如果指定了REQUIRED字段，则QUIET无效，仍然会输出查找失败提示语）。 \n\n`MODULE`：可选字段。前面提到说“如果Module模式查找失败则回退到Config模式进行查找”，但是假如加入了MODULE选项，那么就只在Module模式查找，如果Module模式下查找失败并不切换到Config模式查找。 \n\n`REQUIRED`：可选字段。表示一定要找到包，找不到的话就立即停掉整个CMake。而如果不指定REQUIRED则CMake会继续执行。 \n\n`COMPONENTS`，components：可选字段，表示查找的包中必须要找到的组件(components），如果有任何一个找不到就算失败，类似于REQUIRED，导致CMake停止执行。 \n\n**Module模式查找顺序** \n\nModule模式下是要查找到名为Find<PackageName>.cmake的配置文件。 \n\nModule模式只有两个查找路径：`CMAKE_MODULE_PATH`和`CMake安装路径下的Modules目录`， \n\n搜包路径依次为： \n\n```\nCMAKE_MODULE_PATH \nCMAKE_ROOT\n```\n\n先在CMAKE_MODULE_PATH变量对应的路径中查找。如果路径为空，或者路径中查找失败，则在CMake安装目录（即CMAKE_ROOT变量）下的Modules目录下（通常为/usr/share/cmake-3.10/Modules，3.10是我的CMake版本）查找。这两个变量可以在CMakeLists.txt文件中打印查看具体内容： \n\n```\nmessage(STATUS \"CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}\") \nmessage(STATUS \"CMAKE_ROOT = ${CMAKE_ROOT}\") \n```\n\n其中**CMAKE_MODULE_PATH**默认为空，可以利用set命令赋值。 \n\n在安装CMake时，CMake为我们提供了很多开发库的FindXXX.cmake模块文件，可以通过命令查询： \n\n```\ncmake --help-module-list | grep -E ^Find \n```\n\n### 3.3 Config模式用法 \n\nConfig模式的完整命令参数为： \n\n```\nfind_package(<package> [version] [EXACT] [QUIET] \n             [REQUIRED] [[COMPONENTS] [components...]] \n             [CONFIG|NO_MODULE] \n             [NO_POLICY_SCOPE] \n             [NAMES name1 [name2 ...]] \n             [CONFIGS config1 [config2 ...]] \n             [HINTS path1 [path2 ... ]] \n             [PATHS path1 [path2 ... ]] \n             [PATH_SUFFIXES suffix1 [suffix2 ...]] \n             [NO_DEFAULT_PATH] \n             [NO_CMAKE_ENVIRONMENT_PATH] \n             [NO_CMAKE_PATH] \n             [NO_SYSTEM_ENVIRONMENT_PATH] \n             [NO_CMAKE_PACKAGE_REGISTRY] \n             [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing. \n             [NO_CMAKE_SYSTEM_PATH] \n             [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY] \n             [CMAKE_FIND_ROOT_PATH_BOTH | \n              ONLY_CMAKE_FIND_ROOT_PATH | \n              NO_CMAKE_FIND_ROOT_PATH]) \n```\n\n相比于Module模式，Config模式的参数更多，也更复杂，但实际在使用过程中我们并不会用到所有参数，大部分参数都是可选的，我们只需要掌握基本的参数用法即可。 \n\n其中具体查找库并给XXX_INCLUDE_DIRS和XXX_LIBRARIES两个变量赋值的操作由XXXConfig.cmake模块完成。 \n\n两种模式看起来似乎差不多，不过CMake默认采取Module模式，如果Module模式未找到库，才会采取Config模式。如果XXX_DIR路径下找不到XXXConfig.cmake文件，则会找/usr/local/lib/cmake/XXX/中的XXXConfig.cmake文件。总之，Config模式是一个备选策略。通常，库安装时会拷贝一份XXXConfig.cmake到系统目录中，因此在没有显式指定搜索路径时也可以顺利找到。 \n\n#### Config模式查找顺序 \n\nConfig模式下是要查找名为<PackageName>Config.cmake或<lower-case-package-name>-config.cmake的模块文件。  \n\n搜包路径依次为： \n\n与Module模式不同，Config模式需要查找的路径非常多，也要匹配很多的可能性，因此有些路径是首先作为根目录，然后进行子目录的匹配，我会进行说明。  \n\n具体查找顺序为： \n\n1、名为<PackageName>_DIR的CMake变量或环境变量路径 \n\n默认为空。 \n\n这个路径是非根目录路径，需要指定到<PackageName>Config.cmake或<lower-case-package-name>-config.cmake文件所在目录才能找到。 \n\n2、名为CMAKE_PREFIX_PATH、CMAKE_FRAMEWORK_PATH、CMAKE_APPBUNDLE_PATH的CMake变量或环境变量路径 \n\n根目录，默认都为空。 \n\n注意如果你电脑中安装了ROS并配置好之后，你在终端执行echo $CMAKE_PREFIX_PATH会发现ROS会将CMAKE_PREFIX_PATH这个变量设置为ROS中的库的路径，意思是会首先查找ROS安装的库，如果恰好你在ROS中安装了OpenCV库，就会发现首先找到的是ROS中的OpenCV，而不是你自己安装到系统中的OpenCV。 \n\n3、PATH环境变量路径 \n\n根目录，默认为系统环境PATH环境变量值。 \n\n其实这个路径才是Config模式大部分情况下能够查找到安装到系统中各种库的原因。 \n\n这个路径的查找规则为： \n\n遍历PATH环境变量中的各路径，如果该路径如果以bin或sbin结尾，则自动回退到上一级目录得到根目录。例如我的PATH路径包括： \n\n```\n$ echo $PATH \n/home/zhanghm/.local/bin:/usr/local/cuda-10.1/bin:/opt/ros/melodic/bin:/home/zhanghm/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\n```\n\n在上述指明的是根目录路径时，CMake会首先检查这些根目录路径下是否有名为<PackageName>Config.cmake或<lower-case-package-name>-config.cmake的模块文件，如果没有，CMake会继续检查或匹配这些根目录下的以下路径（<PackageName>_DIR路径不是根目录路径）： \n\n```\n<prefix>/(lib/<arch>|lib|share)/cmake/<name>*/ \n<prefix>/(lib/<arch>|lib|share)/<name>*/  \n<prefix>/(lib/<arch>|lib|share)/<name>*/(cmake|CMake)/\n```\n\n其中为系统架构名，如Ubuntu下一般为：/usr/lib/x86_64-linux-gnu，整个(lib/<arch>|lib|share)为可选路径，例如OpenCV库而言会检查或匹配<prefix>/OpenCV/、<prefix>/lib/x86_64-linux-gnu/OpenCV/、<prefix>/lib/share/OpenCV/、<prefix>/share/OpenCV/等路径；name为包名，不区分大小写<name>*意思是包名后接一些版本后等字符也是合法的，如pcl-1.9也会被找到。\n\n### **3.4 查找指定包建议** \n\n上面的查找规则整体看起来好像很复杂，但其实我们在安装库的时候都会自动配置安装到对的位置，一般都不会出现问题。如果我们需要指定特定的库，我们也只需要设置优先级最高的几个变量名即可。包括下面两种情况： \n\n1、如果你明确知道想要查找的库<PackageName>Config.cmake或<lower-case-package-name>-config.cmake文件所在路径，为了能够准确定位到这个包，可以直接设置变量<PackageName>_DIR为具体路径，如： \n\n```\nset(OpenCV_DIR \"/home/zhanghm/Softwares/enviroment_config/opencv3_4_4/opencv/build\") \n```\n\n就可以明确需要查找的OpenCV包的路径了。 \n\n2、如果你有多个包的配置文件需要查找，可以将这些配置文件都统一放在一个命名为cmake的文件夹下，然后设置变量CMAKE_PREFIX_PATH变量指向这个cmake文件夹路径，需要注意根据上述的匹配规则，此时每个包的配置文件需要单独放置在命名为包名的文件夹下（文件夹名不区分大小写），否则会提示找不到。 \n\n## **4、总结** \n\n通过前面的描述，我相信大家已经能够基本掌握find_package命令的各种用法了，也能够在出现各种问题时自己进行问题定位。但还有一个我们需要注意的点是我们能够在自己的项目中使用find_package命令便捷进行依赖包配置的前提是这个包的开发者也是用CMake配置好了这个包，并提供了<PackageName>Config.cmake或Find<PackageName>.cmake的配置文件。 \n\n## **参考** \n\nhttps://blog.csdn.net/zhanghm1995/article/details/105466372 \n\nhttps://cmake.org/cmake/help/v3.5/command/find_package.html （官网介绍） \n\nhttps://zhuanlan.zhihu.com/p/50829542 \n\nhttps://seanzhengw.github.io/blog/cmake/2018/04/23/cmake-find-package.html \n\nhttps://blog.csdn.net/bytxl/article/details/50637277 ","slug":"C++/Find_package","published":1,"updated":"2023-08-25T08:42:24.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66v000ngcr728sdettz","content":"<h1 id=\"Find-package\"><a href=\"#Find-package\" class=\"headerlink\" title=\"Find_package\"></a>Find_package</h1><h2 id=\"1、find-packakge命令基本介绍\"><a href=\"#1、find-packakge命令基本介绍\" class=\"headerlink\" title=\"1、find_packakge命令基本介绍\"></a><strong>1、find_packakge命令基本介绍</strong></h2><blockquote>\n<p>​\t\t在我们实际开发过程中，经常不可避免会使用到第三方开源库，这些开源库可能是通过apt-get install命令自动安装到系统目录中，也可能是由我们自己下载库的源码然后通过编译安装到指令目录下的。</p>\n<p>​\t\t不管哪种方式安装的库文件，如果我们需要自己的项目中使用这些库，首先面临的第一个问题就是如何找到这些库。所谓“找到”这些库，其实是根据我们的需要找到指定版本的库头文件包含路径、链接库路径等，从而能够满足我们开发项目的编译链接需要。</p>\n<p>​\t\t在没有CMake的时代，这种库查找链接的工作都需要借助MakeFile中的各种命令来完成，非常的繁琐，而且不方便移植，到了CMake时代，CMake给我们提供了find_package()命令用来查找依赖包，理想情况下，一句find_package()命令就能把一整个依赖包的头文件包含路径、库路径、库名字、版本号等情况都获取到，后续只管用就好了。但实际使用过程可能会出现这样那样的问题，因此需要我们对find_package这个强大的命令有个大概的理解。 </p>\n</blockquote>\n<h2 id=\"2、一个使用find-package命令的例子\"><a href=\"#2、一个使用find-package命令的例子\" class=\"headerlink\" title=\"2、一个使用find_package命令的例子\"></a><strong>2、一个使用find_package命令的例子</strong></h2><p>为了能够帮助大家理解find_package命令的用法，此处首先用OpenCV库举例子，示范如何通过find_pakcage命令找到OpenCV库并配置，从而能够在我们自己的项目中调用OpenCV库，实现特定的功能。 </p>\n<p><strong>opencv_test.cpp:</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;cstdio&gt; </span><br><span class=\"line\">#include &lt;iostream&gt; </span><br><span class=\"line\">#include &lt;opencv2/opencv.hpp&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">using namespace cv; </span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123; </span><br><span class=\"line\">  Mat image; </span><br><span class=\"line\">  image = imread(&quot;../opencv_test.jpg&quot;); </span><br><span class=\"line\"> </span><br><span class=\"line\">  if (!image.data) &#123; </span><br><span class=\"line\">    printf(&quot;No image data\\n&quot;); </span><br><span class=\"line\">    return -1; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">  namedWindow(&quot;Display Image&quot;, CV_WINDOW_AUTOSIZE); </span><br><span class=\"line\">  imshow(&quot;Display Image&quot;, image); </span><br><span class=\"line\">  waitKey(0); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>CMakeLists.txt:</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION 2.8) </span><br><span class=\"line\">project(find_package_learning) </span><br><span class=\"line\">find_package(OpenCV 3 REQUIRED) </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">message(STATUS &quot;OpenCV_DIR = $&#123;OpenCV_DIR&#125;&quot;) </span><br><span class=\"line\">message(STATUS &quot;OpenCV_INCLUDE_DIRS = $&#123;OpenCV_INCLUDE_DIRS&#125;&quot;) </span><br><span class=\"line\">message(STATUS &quot;OpenCV_LIBS = $&#123;OpenCV_LIBS&#125;&quot;) </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">include_directories($&#123;OPENCV_INCLUDE_DIRS&#125;)   </span><br><span class=\"line\">add_executable(opencv_test opencv_test.cpp)   </span><br><span class=\"line\">target_link_libraries(opencv_test $&#123;OpenCV_LIBS&#125;) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1编译输出与分析\"><a href=\"#2-1编译输出与分析\" class=\"headerlink\" title=\"2.1编译输出与分析\"></a><strong>2.1</strong>编译输出与分析</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- The C compiler identification is GNU 7.5.0 </span><br><span class=\"line\">-- The CXX compiler identification is GNU 7.5.0 </span><br><span class=\"line\">-- Check for working C compiler: /usr/bin/cc </span><br><span class=\"line\">-- Check for working C compiler: /usr/bin/cc -- works </span><br><span class=\"line\">-- Detecting C compiler ABI info </span><br><span class=\"line\">-- Detecting C compiler ABI info - done </span><br><span class=\"line\">-- Detecting C compile features </span><br><span class=\"line\">-- Detecting C compile features - done </span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++ </span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++ -- works </span><br><span class=\"line\">-- Detecting CXX compiler ABI info </span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done </span><br><span class=\"line\">-- Detecting CXX compile features </span><br><span class=\"line\">-- Detecting CXX compile features - done </span><br><span class=\"line\">-- Found OpenCV: /usr/local (found suitable version &quot;3.4.4&quot;, minimum required is &quot;3&quot;)  </span><br><span class=\"line\">-- OpenCV_DIR = /usr/local/share/OpenCV </span><br><span class=\"line\">-- OpenCV_INCLUDE_DIRS = /usr/local/include;/usr/local/include/opencv </span><br><span class=\"line\">-- OpenCV_LIBS = opencv_calib3d;opencv_core;opencv_dnn;opencv_features2d;opencv_flann;opencv_highgui;opencv_imgcodecs;opencv_imgproc;opencv_ml;opencv_objdetect;opencv_photo;opencv_shape;opencv_stitching;opencv_superres;opencv_video;opencv_videoio;opencv_videostab;opencv_viz;opencv_aruco;opencv_bgsegm;opencv_bioinspired;opencv_ccalib;opencv_cvv;opencv_datasets;opencv_dnn_objdetect;opencv_dpm;opencv_face;opencv_freetype;opencv_fuzzy;opencv_hdf;opencv_hfs;opencv_img_hash;opencv_line_descriptor;opencv_optflow;opencv_phase_unwrapping;opencv_plot;opencv_reg;opencv_rgbd;opencv_saliency;opencv_stereo;opencv_structured_light;opencv_surface_matching;opencv_text;opencv_tracking;opencv_xfeatures2d;opencv_ximgproc;opencv_xobjdetect;opencv_xphoto </span><br><span class=\"line\">-- Configuring done </span><br><span class=\"line\">-- Generating done </span><br><span class=\"line\">-- Build files have been written to: /home/zhanghm/Programming/programming-learning-examples/cmake_learning/learn_cmake_easily/find_package_learning/build </span><br></pre></td></tr></table></figure>\n\n<p>重点看下其中OpenCV_DIR、OpenCV_INCLUDE_DIRS和OpenCV_LIBS打印的结果，这是我在CMakeLists.txt中用message命令输出这三个变量的值的结果。 </p>\n<p>可以看到在执行find_package(OpenCV 3 REQUIRED)命令后，CMake找到了我们安装的位于&#x2F;usr&#x2F;local下的OpenCV库，并设置了CMake变量OpenCV_DIR为OpenCV库的配置文件所在路径，正是通过载入这个路径下的OpenCVConfig.cmake配置文件才能配置好OpenCV库，然后在OpenCVConfig.cmake配置文件中定义了变量OpenCV_INCLUDE_DIRS为OpenCV库头文件包含路径，这样我们才能才在代码中使用#include &lt;opencv2&#x2F;opencv.hpp&gt;而不会出现编译错误，同时定义了变量OpenCV_LIBS为OpenCV链接库路径，这样我们才能正确链接到OpenCV中的库文件，而不会出现类似未定义的引用这样的链接错误。 </p>\n<p><img src=\"/media/GetImage.png\"></p>\n<p>通过这个例子就可以看出find_package本质上就是一个搜包的命令，通过一些特定的规则找到<package_name>Config.cmake包配置文件，通过执行该配置文件，从而定义了一系列的变量，通过这些变量就可以准确定位到OpenCV库的头文件和库文件，完成编译。 </p>\n<p>那么关键的问题来了，find_package命令是怎么能够定位并载入指定库的配置文件的呢？这就需要梳理一下find_package命令的搜包过程。 </p>\n<h2 id=\"3、find-package命令搜包过程\"><a href=\"#3、find-package命令搜包过程\" class=\"headerlink\" title=\"3、find_package命令搜包过程\"></a><strong>3、find_package命令搜包过程</strong></h2><p>首先我们需要明确一点，CMake本身不提供任何搜索库的便捷方法，所有搜索库并给变量赋值的操作必须由CMake代码完成，也就是上述中的XXXConfig.cmake以及下面将要提到的FindXXX.cmake配置文件。只不过，库的作者通常会提供这两个文件，以方便使用者调用。</p>\n<h3 id=\"3-1-find-package工作模式\"><a href=\"#3-1-find-package工作模式\" class=\"headerlink\" title=\"3.1 find_package工作模式\"></a><strong>3.1 find_package工作模式</strong></h3><p>find_package命令有两种工作模式，这两种工作模式的不同决定了其搜包路径的不同： </p>\n<p><code>Module模式</code> </p>\n<p>find_package命令基础工作模式(Basic Signature)，也是默认工作模式。 </p>\n<p><code>Config模式</code> </p>\n<p>find_package命令高级工作模式(Full Signature)。 只有在find_package()中指定CONFIG、NO_MODULE等关键字，或者Module模式查找失败后才会进入到Config模式。 </p>\n<p>因此find_package工作模式流程图为： </p>\n<p><img src=\"/media/GetImage(1).png\"></p>\n<h3 id=\"3-2-Module模式用法\"><a href=\"#3-2-Module模式用法\" class=\"headerlink\" title=\"3.2 Module模式用法\"></a><strong>3.2 Module模式用法</strong></h3><p><strong>Module</strong>模式的参数为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_package(&lt;package&gt; [version] [EXACT] [QUIET] [MODULE] </span><br><span class=\"line\">             [REQUIRED] [[COMPONENTS] [components...]] </span><br><span class=\"line\">             [OPTIONAL_COMPONENTS components...] </span><br><span class=\"line\">             [NO_POLICY_SCOPE]) </span><br></pre></td></tr></table></figure>\n\n<p>参数解释： </p>\n<p><code>package</code>：必填参数。需要查找的包名，注意大小写。 </p>\n<p><code>version</code>和<code>EXACT</code>：可选参数，version指定的是版本，如果指定就必须检查找到的包的版本是否和version兼容。如果指定EXACT则表示必须完全匹配的版本而不是兼容版本就可以。 </p>\n<p><code>QUIET</code>：可选参数，表示如果查找失败，不会在屏幕进行输出（但是如果指定了REQUIRED字段，则QUIET无效，仍然会输出查找失败提示语）。 </p>\n<p><code>MODULE</code>：可选字段。前面提到说“如果Module模式查找失败则回退到Config模式进行查找”，但是假如加入了MODULE选项，那么就只在Module模式查找，如果Module模式下查找失败并不切换到Config模式查找。 </p>\n<p><code>REQUIRED</code>：可选字段。表示一定要找到包，找不到的话就立即停掉整个CMake。而如果不指定REQUIRED则CMake会继续执行。 </p>\n<p><code>COMPONENTS</code>，components：可选字段，表示查找的包中必须要找到的组件(components），如果有任何一个找不到就算失败，类似于REQUIRED，导致CMake停止执行。 </p>\n<p><strong>Module模式查找顺序</strong> </p>\n<p>Module模式下是要查找到名为Find<PackageName>.cmake的配置文件。 </p>\n<p>Module模式只有两个查找路径：<code>CMAKE_MODULE_PATH</code>和<code>CMake安装路径下的Modules目录</code>， </p>\n<p>搜包路径依次为： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMAKE_MODULE_PATH </span><br><span class=\"line\">CMAKE_ROOT</span><br></pre></td></tr></table></figure>\n\n<p>先在CMAKE_MODULE_PATH变量对应的路径中查找。如果路径为空，或者路径中查找失败，则在CMake安装目录（即CMAKE_ROOT变量）下的Modules目录下（通常为&#x2F;usr&#x2F;share&#x2F;cmake-3.10&#x2F;Modules，3.10是我的CMake版本）查找。这两个变量可以在CMakeLists.txt文件中打印查看具体内容： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message(STATUS &quot;CMAKE_MODULE_PATH = $&#123;CMAKE_MODULE_PATH&#125;&quot;) </span><br><span class=\"line\">message(STATUS &quot;CMAKE_ROOT = $&#123;CMAKE_ROOT&#125;&quot;) </span><br></pre></td></tr></table></figure>\n\n<p>其中<strong>CMAKE_MODULE_PATH</strong>默认为空，可以利用set命令赋值。 </p>\n<p>在安装CMake时，CMake为我们提供了很多开发库的FindXXX.cmake模块文件，可以通过命令查询： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --help-module-list | grep -E ^Find </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-Config模式用法\"><a href=\"#3-3-Config模式用法\" class=\"headerlink\" title=\"3.3 Config模式用法\"></a>3.3 Config模式用法</h3><p>Config模式的完整命令参数为： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_package(&lt;package&gt; [version] [EXACT] [QUIET] </span><br><span class=\"line\">             [REQUIRED] [[COMPONENTS] [components...]] </span><br><span class=\"line\">             [CONFIG|NO_MODULE] </span><br><span class=\"line\">             [NO_POLICY_SCOPE] </span><br><span class=\"line\">             [NAMES name1 [name2 ...]] </span><br><span class=\"line\">             [CONFIGS config1 [config2 ...]] </span><br><span class=\"line\">             [HINTS path1 [path2 ... ]] </span><br><span class=\"line\">             [PATHS path1 [path2 ... ]] </span><br><span class=\"line\">             [PATH_SUFFIXES suffix1 [suffix2 ...]] </span><br><span class=\"line\">             [NO_DEFAULT_PATH] </span><br><span class=\"line\">             [NO_CMAKE_ENVIRONMENT_PATH] </span><br><span class=\"line\">             [NO_CMAKE_PATH] </span><br><span class=\"line\">             [NO_SYSTEM_ENVIRONMENT_PATH] </span><br><span class=\"line\">             [NO_CMAKE_PACKAGE_REGISTRY] </span><br><span class=\"line\">             [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing. </span><br><span class=\"line\">             [NO_CMAKE_SYSTEM_PATH] </span><br><span class=\"line\">             [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY] </span><br><span class=\"line\">             [CMAKE_FIND_ROOT_PATH_BOTH | </span><br><span class=\"line\">              ONLY_CMAKE_FIND_ROOT_PATH | </span><br><span class=\"line\">              NO_CMAKE_FIND_ROOT_PATH]) </span><br></pre></td></tr></table></figure>\n\n<p>相比于Module模式，Config模式的参数更多，也更复杂，但实际在使用过程中我们并不会用到所有参数，大部分参数都是可选的，我们只需要掌握基本的参数用法即可。 </p>\n<p>其中具体查找库并给XXX_INCLUDE_DIRS和XXX_LIBRARIES两个变量赋值的操作由XXXConfig.cmake模块完成。 </p>\n<p>两种模式看起来似乎差不多，不过CMake默认采取Module模式，如果Module模式未找到库，才会采取Config模式。如果XXX_DIR路径下找不到XXXConfig.cmake文件，则会找&#x2F;usr&#x2F;local&#x2F;lib&#x2F;cmake&#x2F;XXX&#x2F;中的XXXConfig.cmake文件。总之，Config模式是一个备选策略。通常，库安装时会拷贝一份XXXConfig.cmake到系统目录中，因此在没有显式指定搜索路径时也可以顺利找到。 </p>\n<h4 id=\"Config模式查找顺序\"><a href=\"#Config模式查找顺序\" class=\"headerlink\" title=\"Config模式查找顺序\"></a>Config模式查找顺序</h4><p>Config模式下是要查找名为<PackageName>Config.cmake或<lower-case-package-name>-config.cmake的模块文件。  </p>\n<p>搜包路径依次为： </p>\n<p>与Module模式不同，Config模式需要查找的路径非常多，也要匹配很多的可能性，因此有些路径是首先作为根目录，然后进行子目录的匹配，我会进行说明。  </p>\n<p>具体查找顺序为： </p>\n<p>1、名为<PackageName>_DIR的CMake变量或环境变量路径 </p>\n<p>默认为空。 </p>\n<p>这个路径是非根目录路径，需要指定到<PackageName>Config.cmake或<lower-case-package-name>-config.cmake文件所在目录才能找到。 </p>\n<p>2、名为CMAKE_PREFIX_PATH、CMAKE_FRAMEWORK_PATH、CMAKE_APPBUNDLE_PATH的CMake变量或环境变量路径 </p>\n<p>根目录，默认都为空。 </p>\n<p>注意如果你电脑中安装了ROS并配置好之后，你在终端执行echo $CMAKE_PREFIX_PATH会发现ROS会将CMAKE_PREFIX_PATH这个变量设置为ROS中的库的路径，意思是会首先查找ROS安装的库，如果恰好你在ROS中安装了OpenCV库，就会发现首先找到的是ROS中的OpenCV，而不是你自己安装到系统中的OpenCV。 </p>\n<p>3、PATH环境变量路径 </p>\n<p>根目录，默认为系统环境PATH环境变量值。 </p>\n<p>其实这个路径才是Config模式大部分情况下能够查找到安装到系统中各种库的原因。 </p>\n<p>这个路径的查找规则为： </p>\n<p>遍历PATH环境变量中的各路径，如果该路径如果以bin或sbin结尾，则自动回退到上一级目录得到根目录。例如我的PATH路径包括： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $PATH </span><br><span class=\"line\">/home/zhanghm/.local/bin:/usr/local/cuda-10.1/bin:/opt/ros/melodic/bin:/home/zhanghm/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<p>在上述指明的是根目录路径时，CMake会首先检查这些根目录路径下是否有名为<PackageName>Config.cmake或<lower-case-package-name>-config.cmake的模块文件，如果没有，CMake会继续检查或匹配这些根目录下的以下路径（<PackageName>_DIR路径不是根目录路径）： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;prefix&gt;/(lib/&lt;arch&gt;|lib|share)/cmake/&lt;name&gt;*/ </span><br><span class=\"line\">&lt;prefix&gt;/(lib/&lt;arch&gt;|lib|share)/&lt;name&gt;*/  </span><br><span class=\"line\">&lt;prefix&gt;/(lib/&lt;arch&gt;|lib|share)/&lt;name&gt;*/(cmake|CMake)/</span><br></pre></td></tr></table></figure>\n\n<p>其中为系统架构名，如Ubuntu下一般为：&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu，整个(lib&#x2F;<arch>|lib|share)为可选路径，例如OpenCV库而言会检查或匹配<prefix>&#x2F;OpenCV&#x2F;、<prefix>&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;OpenCV&#x2F;、<prefix>&#x2F;lib&#x2F;share&#x2F;OpenCV&#x2F;、<prefix>&#x2F;share&#x2F;OpenCV&#x2F;等路径；name为包名，不区分大小写<name>*意思是包名后接一些版本后等字符也是合法的，如pcl-1.9也会被找到。</p>\n<h3 id=\"3-4-查找指定包建议\"><a href=\"#3-4-查找指定包建议\" class=\"headerlink\" title=\"3.4 查找指定包建议\"></a><strong>3.4 查找指定包建议</strong></h3><p>上面的查找规则整体看起来好像很复杂，但其实我们在安装库的时候都会自动配置安装到对的位置，一般都不会出现问题。如果我们需要指定特定的库，我们也只需要设置优先级最高的几个变量名即可。包括下面两种情况： </p>\n<p>1、如果你明确知道想要查找的库<PackageName>Config.cmake或<lower-case-package-name>-config.cmake文件所在路径，为了能够准确定位到这个包，可以直接设置变量<PackageName>_DIR为具体路径，如： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set(OpenCV_DIR &quot;/home/zhanghm/Softwares/enviroment_config/opencv3_4_4/opencv/build&quot;) </span><br></pre></td></tr></table></figure>\n\n<p>就可以明确需要查找的OpenCV包的路径了。 </p>\n<p>2、如果你有多个包的配置文件需要查找，可以将这些配置文件都统一放在一个命名为cmake的文件夹下，然后设置变量CMAKE_PREFIX_PATH变量指向这个cmake文件夹路径，需要注意根据上述的匹配规则，此时每个包的配置文件需要单独放置在命名为包名的文件夹下（文件夹名不区分大小写），否则会提示找不到。 </p>\n<h2 id=\"4、总结\"><a href=\"#4、总结\" class=\"headerlink\" title=\"4、总结\"></a><strong>4、总结</strong></h2><p>通过前面的描述，我相信大家已经能够基本掌握find_package命令的各种用法了，也能够在出现各种问题时自己进行问题定位。但还有一个我们需要注意的点是我们能够在自己的项目中使用find_package命令便捷进行依赖包配置的前提是这个包的开发者也是用CMake配置好了这个包，并提供了<PackageName>Config.cmake或Find<PackageName>.cmake的配置文件。 </p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a><strong>参考</strong></h2><p><a href=\"https://blog.csdn.net/zhanghm1995/article/details/105466372\">https://blog.csdn.net/zhanghm1995/article/details/105466372</a> </p>\n<p><a href=\"https://cmake.org/cmake/help/v3.5/command/find_package.html\">https://cmake.org/cmake/help/v3.5/command/find_package.html</a> （官网介绍） </p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/50829542\">https://zhuanlan.zhihu.com/p/50829542</a> </p>\n<p><a href=\"https://seanzhengw.github.io/blog/cmake/2018/04/23/cmake-find-package.html\">https://seanzhengw.github.io/blog/cmake/2018/04/23/cmake-find-package.html</a> </p>\n<p><a href=\"https://blog.csdn.net/bytxl/article/details/50637277\">https://blog.csdn.net/bytxl/article/details/50637277</a> </p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-5.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Find-package\"><a href=\"#Find-package\" class=\"headerlink\" title=\"Find_package\"></a>Find_package</h1><h2 id=\"1、find-packakge命令基本介绍\"><a href=\"#1、find-packakge命令基本介绍\" class=\"headerlink\" title=\"1、find_packakge命令基本介绍\"></a><strong>1、find_packakge命令基本介绍</strong></h2><blockquote>\n<p>​\t\t在我们实际开发过程中，经常不可避免会使用到第三方开源库，这些开源库可能是通过apt-get install命令自动安装到系统目录中，也可能是由我们自己下载库的源码然后通过编译安装到指令目录下的。</p>\n<p>​\t\t不管哪种方式安装的库文件，如果我们需要自己的项目中使用这些库，首先面临的第一个问题就是如何找到这些库。所谓“找到”这些库，其实是根据我们的需要找到指定版本的库头文件包含路径、链接库路径等，从而能够满足我们开发项目的编译链接需要。</p>\n<p>​\t\t在没有CMake的时代，这种库查找链接的工作都需要借助MakeFile中的各种命令来完成，非常的繁琐，而且不方便移植，到了CMake时代，CMake给我们提供了find_package()命令用来查找依赖包，理想情况下，一句find_package()命令就能把一整个依赖包的头文件包含路径、库路径、库名字、版本号等情况都获取到，后续只管用就好了。但实际使用过程可能会出现这样那样的问题，因此需要我们对find_package这个强大的命令有个大概的理解。 </p>\n</blockquote>\n<h2 id=\"2、一个使用find-package命令的例子\"><a href=\"#2、一个使用find-package命令的例子\" class=\"headerlink\" title=\"2、一个使用find_package命令的例子\"></a><strong>2、一个使用find_package命令的例子</strong></h2><p>为了能够帮助大家理解find_package命令的用法，此处首先用OpenCV库举例子，示范如何通过find_pakcage命令找到OpenCV库并配置，从而能够在我们自己的项目中调用OpenCV库，实现特定的功能。 </p>\n<p><strong>opencv_test.cpp:</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;cstdio&gt; </span><br><span class=\"line\">#include &lt;iostream&gt; </span><br><span class=\"line\">#include &lt;opencv2/opencv.hpp&gt; </span><br><span class=\"line\"></span><br><span class=\"line\">using namespace cv; </span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123; </span><br><span class=\"line\">  Mat image; </span><br><span class=\"line\">  image = imread(&quot;../opencv_test.jpg&quot;); </span><br><span class=\"line\"> </span><br><span class=\"line\">  if (!image.data) &#123; </span><br><span class=\"line\">    printf(&quot;No image data\\n&quot;); </span><br><span class=\"line\">    return -1; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">  namedWindow(&quot;Display Image&quot;, CV_WINDOW_AUTOSIZE); </span><br><span class=\"line\">  imshow(&quot;Display Image&quot;, image); </span><br><span class=\"line\">  waitKey(0); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><strong>CMakeLists.txt:</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake_minimum_required(VERSION 2.8) </span><br><span class=\"line\">project(find_package_learning) </span><br><span class=\"line\">find_package(OpenCV 3 REQUIRED) </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">message(STATUS &quot;OpenCV_DIR = $&#123;OpenCV_DIR&#125;&quot;) </span><br><span class=\"line\">message(STATUS &quot;OpenCV_INCLUDE_DIRS = $&#123;OpenCV_INCLUDE_DIRS&#125;&quot;) </span><br><span class=\"line\">message(STATUS &quot;OpenCV_LIBS = $&#123;OpenCV_LIBS&#125;&quot;) </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">include_directories($&#123;OPENCV_INCLUDE_DIRS&#125;)   </span><br><span class=\"line\">add_executable(opencv_test opencv_test.cpp)   </span><br><span class=\"line\">target_link_libraries(opencv_test $&#123;OpenCV_LIBS&#125;) </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1编译输出与分析\"><a href=\"#2-1编译输出与分析\" class=\"headerlink\" title=\"2.1编译输出与分析\"></a><strong>2.1</strong>编译输出与分析</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- The C compiler identification is GNU 7.5.0 </span><br><span class=\"line\">-- The CXX compiler identification is GNU 7.5.0 </span><br><span class=\"line\">-- Check for working C compiler: /usr/bin/cc </span><br><span class=\"line\">-- Check for working C compiler: /usr/bin/cc -- works </span><br><span class=\"line\">-- Detecting C compiler ABI info </span><br><span class=\"line\">-- Detecting C compiler ABI info - done </span><br><span class=\"line\">-- Detecting C compile features </span><br><span class=\"line\">-- Detecting C compile features - done </span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++ </span><br><span class=\"line\">-- Check for working CXX compiler: /usr/bin/c++ -- works </span><br><span class=\"line\">-- Detecting CXX compiler ABI info </span><br><span class=\"line\">-- Detecting CXX compiler ABI info - done </span><br><span class=\"line\">-- Detecting CXX compile features </span><br><span class=\"line\">-- Detecting CXX compile features - done </span><br><span class=\"line\">-- Found OpenCV: /usr/local (found suitable version &quot;3.4.4&quot;, minimum required is &quot;3&quot;)  </span><br><span class=\"line\">-- OpenCV_DIR = /usr/local/share/OpenCV </span><br><span class=\"line\">-- OpenCV_INCLUDE_DIRS = /usr/local/include;/usr/local/include/opencv </span><br><span class=\"line\">-- OpenCV_LIBS = opencv_calib3d;opencv_core;opencv_dnn;opencv_features2d;opencv_flann;opencv_highgui;opencv_imgcodecs;opencv_imgproc;opencv_ml;opencv_objdetect;opencv_photo;opencv_shape;opencv_stitching;opencv_superres;opencv_video;opencv_videoio;opencv_videostab;opencv_viz;opencv_aruco;opencv_bgsegm;opencv_bioinspired;opencv_ccalib;opencv_cvv;opencv_datasets;opencv_dnn_objdetect;opencv_dpm;opencv_face;opencv_freetype;opencv_fuzzy;opencv_hdf;opencv_hfs;opencv_img_hash;opencv_line_descriptor;opencv_optflow;opencv_phase_unwrapping;opencv_plot;opencv_reg;opencv_rgbd;opencv_saliency;opencv_stereo;opencv_structured_light;opencv_surface_matching;opencv_text;opencv_tracking;opencv_xfeatures2d;opencv_ximgproc;opencv_xobjdetect;opencv_xphoto </span><br><span class=\"line\">-- Configuring done </span><br><span class=\"line\">-- Generating done </span><br><span class=\"line\">-- Build files have been written to: /home/zhanghm/Programming/programming-learning-examples/cmake_learning/learn_cmake_easily/find_package_learning/build </span><br></pre></td></tr></table></figure>\n\n<p>重点看下其中OpenCV_DIR、OpenCV_INCLUDE_DIRS和OpenCV_LIBS打印的结果，这是我在CMakeLists.txt中用message命令输出这三个变量的值的结果。 </p>\n<p>可以看到在执行find_package(OpenCV 3 REQUIRED)命令后，CMake找到了我们安装的位于&#x2F;usr&#x2F;local下的OpenCV库，并设置了CMake变量OpenCV_DIR为OpenCV库的配置文件所在路径，正是通过载入这个路径下的OpenCVConfig.cmake配置文件才能配置好OpenCV库，然后在OpenCVConfig.cmake配置文件中定义了变量OpenCV_INCLUDE_DIRS为OpenCV库头文件包含路径，这样我们才能才在代码中使用#include &lt;opencv2&#x2F;opencv.hpp&gt;而不会出现编译错误，同时定义了变量OpenCV_LIBS为OpenCV链接库路径，这样我们才能正确链接到OpenCV中的库文件，而不会出现类似未定义的引用这样的链接错误。 </p>\n<p><img src=\"/media/GetImage.png\"></p>\n<p>通过这个例子就可以看出find_package本质上就是一个搜包的命令，通过一些特定的规则找到<package_name>Config.cmake包配置文件，通过执行该配置文件，从而定义了一系列的变量，通过这些变量就可以准确定位到OpenCV库的头文件和库文件，完成编译。 </p>\n<p>那么关键的问题来了，find_package命令是怎么能够定位并载入指定库的配置文件的呢？这就需要梳理一下find_package命令的搜包过程。 </p>\n<h2 id=\"3、find-package命令搜包过程\"><a href=\"#3、find-package命令搜包过程\" class=\"headerlink\" title=\"3、find_package命令搜包过程\"></a><strong>3、find_package命令搜包过程</strong></h2><p>首先我们需要明确一点，CMake本身不提供任何搜索库的便捷方法，所有搜索库并给变量赋值的操作必须由CMake代码完成，也就是上述中的XXXConfig.cmake以及下面将要提到的FindXXX.cmake配置文件。只不过，库的作者通常会提供这两个文件，以方便使用者调用。</p>\n<h3 id=\"3-1-find-package工作模式\"><a href=\"#3-1-find-package工作模式\" class=\"headerlink\" title=\"3.1 find_package工作模式\"></a><strong>3.1 find_package工作模式</strong></h3><p>find_package命令有两种工作模式，这两种工作模式的不同决定了其搜包路径的不同： </p>\n<p><code>Module模式</code> </p>\n<p>find_package命令基础工作模式(Basic Signature)，也是默认工作模式。 </p>\n<p><code>Config模式</code> </p>\n<p>find_package命令高级工作模式(Full Signature)。 只有在find_package()中指定CONFIG、NO_MODULE等关键字，或者Module模式查找失败后才会进入到Config模式。 </p>\n<p>因此find_package工作模式流程图为： </p>\n<p><img src=\"/media/GetImage(1).png\"></p>\n<h3 id=\"3-2-Module模式用法\"><a href=\"#3-2-Module模式用法\" class=\"headerlink\" title=\"3.2 Module模式用法\"></a><strong>3.2 Module模式用法</strong></h3><p><strong>Module</strong>模式的参数为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_package(&lt;package&gt; [version] [EXACT] [QUIET] [MODULE] </span><br><span class=\"line\">             [REQUIRED] [[COMPONENTS] [components...]] </span><br><span class=\"line\">             [OPTIONAL_COMPONENTS components...] </span><br><span class=\"line\">             [NO_POLICY_SCOPE]) </span><br></pre></td></tr></table></figure>\n\n<p>参数解释： </p>\n<p><code>package</code>：必填参数。需要查找的包名，注意大小写。 </p>\n<p><code>version</code>和<code>EXACT</code>：可选参数，version指定的是版本，如果指定就必须检查找到的包的版本是否和version兼容。如果指定EXACT则表示必须完全匹配的版本而不是兼容版本就可以。 </p>\n<p><code>QUIET</code>：可选参数，表示如果查找失败，不会在屏幕进行输出（但是如果指定了REQUIRED字段，则QUIET无效，仍然会输出查找失败提示语）。 </p>\n<p><code>MODULE</code>：可选字段。前面提到说“如果Module模式查找失败则回退到Config模式进行查找”，但是假如加入了MODULE选项，那么就只在Module模式查找，如果Module模式下查找失败并不切换到Config模式查找。 </p>\n<p><code>REQUIRED</code>：可选字段。表示一定要找到包，找不到的话就立即停掉整个CMake。而如果不指定REQUIRED则CMake会继续执行。 </p>\n<p><code>COMPONENTS</code>，components：可选字段，表示查找的包中必须要找到的组件(components），如果有任何一个找不到就算失败，类似于REQUIRED，导致CMake停止执行。 </p>\n<p><strong>Module模式查找顺序</strong> </p>\n<p>Module模式下是要查找到名为Find<PackageName>.cmake的配置文件。 </p>\n<p>Module模式只有两个查找路径：<code>CMAKE_MODULE_PATH</code>和<code>CMake安装路径下的Modules目录</code>， </p>\n<p>搜包路径依次为： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMAKE_MODULE_PATH </span><br><span class=\"line\">CMAKE_ROOT</span><br></pre></td></tr></table></figure>\n\n<p>先在CMAKE_MODULE_PATH变量对应的路径中查找。如果路径为空，或者路径中查找失败，则在CMake安装目录（即CMAKE_ROOT变量）下的Modules目录下（通常为&#x2F;usr&#x2F;share&#x2F;cmake-3.10&#x2F;Modules，3.10是我的CMake版本）查找。这两个变量可以在CMakeLists.txt文件中打印查看具体内容： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message(STATUS &quot;CMAKE_MODULE_PATH = $&#123;CMAKE_MODULE_PATH&#125;&quot;) </span><br><span class=\"line\">message(STATUS &quot;CMAKE_ROOT = $&#123;CMAKE_ROOT&#125;&quot;) </span><br></pre></td></tr></table></figure>\n\n<p>其中<strong>CMAKE_MODULE_PATH</strong>默认为空，可以利用set命令赋值。 </p>\n<p>在安装CMake时，CMake为我们提供了很多开发库的FindXXX.cmake模块文件，可以通过命令查询： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --help-module-list | grep -E ^Find </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-Config模式用法\"><a href=\"#3-3-Config模式用法\" class=\"headerlink\" title=\"3.3 Config模式用法\"></a>3.3 Config模式用法</h3><p>Config模式的完整命令参数为： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_package(&lt;package&gt; [version] [EXACT] [QUIET] </span><br><span class=\"line\">             [REQUIRED] [[COMPONENTS] [components...]] </span><br><span class=\"line\">             [CONFIG|NO_MODULE] </span><br><span class=\"line\">             [NO_POLICY_SCOPE] </span><br><span class=\"line\">             [NAMES name1 [name2 ...]] </span><br><span class=\"line\">             [CONFIGS config1 [config2 ...]] </span><br><span class=\"line\">             [HINTS path1 [path2 ... ]] </span><br><span class=\"line\">             [PATHS path1 [path2 ... ]] </span><br><span class=\"line\">             [PATH_SUFFIXES suffix1 [suffix2 ...]] </span><br><span class=\"line\">             [NO_DEFAULT_PATH] </span><br><span class=\"line\">             [NO_CMAKE_ENVIRONMENT_PATH] </span><br><span class=\"line\">             [NO_CMAKE_PATH] </span><br><span class=\"line\">             [NO_SYSTEM_ENVIRONMENT_PATH] </span><br><span class=\"line\">             [NO_CMAKE_PACKAGE_REGISTRY] </span><br><span class=\"line\">             [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing. </span><br><span class=\"line\">             [NO_CMAKE_SYSTEM_PATH] </span><br><span class=\"line\">             [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY] </span><br><span class=\"line\">             [CMAKE_FIND_ROOT_PATH_BOTH | </span><br><span class=\"line\">              ONLY_CMAKE_FIND_ROOT_PATH | </span><br><span class=\"line\">              NO_CMAKE_FIND_ROOT_PATH]) </span><br></pre></td></tr></table></figure>\n\n<p>相比于Module模式，Config模式的参数更多，也更复杂，但实际在使用过程中我们并不会用到所有参数，大部分参数都是可选的，我们只需要掌握基本的参数用法即可。 </p>\n<p>其中具体查找库并给XXX_INCLUDE_DIRS和XXX_LIBRARIES两个变量赋值的操作由XXXConfig.cmake模块完成。 </p>\n<p>两种模式看起来似乎差不多，不过CMake默认采取Module模式，如果Module模式未找到库，才会采取Config模式。如果XXX_DIR路径下找不到XXXConfig.cmake文件，则会找&#x2F;usr&#x2F;local&#x2F;lib&#x2F;cmake&#x2F;XXX&#x2F;中的XXXConfig.cmake文件。总之，Config模式是一个备选策略。通常，库安装时会拷贝一份XXXConfig.cmake到系统目录中，因此在没有显式指定搜索路径时也可以顺利找到。 </p>\n<h4 id=\"Config模式查找顺序\"><a href=\"#Config模式查找顺序\" class=\"headerlink\" title=\"Config模式查找顺序\"></a>Config模式查找顺序</h4><p>Config模式下是要查找名为<PackageName>Config.cmake或<lower-case-package-name>-config.cmake的模块文件。  </p>\n<p>搜包路径依次为： </p>\n<p>与Module模式不同，Config模式需要查找的路径非常多，也要匹配很多的可能性，因此有些路径是首先作为根目录，然后进行子目录的匹配，我会进行说明。  </p>\n<p>具体查找顺序为： </p>\n<p>1、名为<PackageName>_DIR的CMake变量或环境变量路径 </p>\n<p>默认为空。 </p>\n<p>这个路径是非根目录路径，需要指定到<PackageName>Config.cmake或<lower-case-package-name>-config.cmake文件所在目录才能找到。 </p>\n<p>2、名为CMAKE_PREFIX_PATH、CMAKE_FRAMEWORK_PATH、CMAKE_APPBUNDLE_PATH的CMake变量或环境变量路径 </p>\n<p>根目录，默认都为空。 </p>\n<p>注意如果你电脑中安装了ROS并配置好之后，你在终端执行echo $CMAKE_PREFIX_PATH会发现ROS会将CMAKE_PREFIX_PATH这个变量设置为ROS中的库的路径，意思是会首先查找ROS安装的库，如果恰好你在ROS中安装了OpenCV库，就会发现首先找到的是ROS中的OpenCV，而不是你自己安装到系统中的OpenCV。 </p>\n<p>3、PATH环境变量路径 </p>\n<p>根目录，默认为系统环境PATH环境变量值。 </p>\n<p>其实这个路径才是Config模式大部分情况下能够查找到安装到系统中各种库的原因。 </p>\n<p>这个路径的查找规则为： </p>\n<p>遍历PATH环境变量中的各路径，如果该路径如果以bin或sbin结尾，则自动回退到上一级目录得到根目录。例如我的PATH路径包括： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo $PATH </span><br><span class=\"line\">/home/zhanghm/.local/bin:/usr/local/cuda-10.1/bin:/opt/ros/melodic/bin:/home/zhanghm/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>\n\n<p>在上述指明的是根目录路径时，CMake会首先检查这些根目录路径下是否有名为<PackageName>Config.cmake或<lower-case-package-name>-config.cmake的模块文件，如果没有，CMake会继续检查或匹配这些根目录下的以下路径（<PackageName>_DIR路径不是根目录路径）： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;prefix&gt;/(lib/&lt;arch&gt;|lib|share)/cmake/&lt;name&gt;*/ </span><br><span class=\"line\">&lt;prefix&gt;/(lib/&lt;arch&gt;|lib|share)/&lt;name&gt;*/  </span><br><span class=\"line\">&lt;prefix&gt;/(lib/&lt;arch&gt;|lib|share)/&lt;name&gt;*/(cmake|CMake)/</span><br></pre></td></tr></table></figure>\n\n<p>其中为系统架构名，如Ubuntu下一般为：&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu，整个(lib&#x2F;<arch>|lib|share)为可选路径，例如OpenCV库而言会检查或匹配<prefix>&#x2F;OpenCV&#x2F;、<prefix>&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;OpenCV&#x2F;、<prefix>&#x2F;lib&#x2F;share&#x2F;OpenCV&#x2F;、<prefix>&#x2F;share&#x2F;OpenCV&#x2F;等路径；name为包名，不区分大小写<name>*意思是包名后接一些版本后等字符也是合法的，如pcl-1.9也会被找到。</p>\n<h3 id=\"3-4-查找指定包建议\"><a href=\"#3-4-查找指定包建议\" class=\"headerlink\" title=\"3.4 查找指定包建议\"></a><strong>3.4 查找指定包建议</strong></h3><p>上面的查找规则整体看起来好像很复杂，但其实我们在安装库的时候都会自动配置安装到对的位置，一般都不会出现问题。如果我们需要指定特定的库，我们也只需要设置优先级最高的几个变量名即可。包括下面两种情况： </p>\n<p>1、如果你明确知道想要查找的库<PackageName>Config.cmake或<lower-case-package-name>-config.cmake文件所在路径，为了能够准确定位到这个包，可以直接设置变量<PackageName>_DIR为具体路径，如： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set(OpenCV_DIR &quot;/home/zhanghm/Softwares/enviroment_config/opencv3_4_4/opencv/build&quot;) </span><br></pre></td></tr></table></figure>\n\n<p>就可以明确需要查找的OpenCV包的路径了。 </p>\n<p>2、如果你有多个包的配置文件需要查找，可以将这些配置文件都统一放在一个命名为cmake的文件夹下，然后设置变量CMAKE_PREFIX_PATH变量指向这个cmake文件夹路径，需要注意根据上述的匹配规则，此时每个包的配置文件需要单独放置在命名为包名的文件夹下（文件夹名不区分大小写），否则会提示找不到。 </p>\n<h2 id=\"4、总结\"><a href=\"#4、总结\" class=\"headerlink\" title=\"4、总结\"></a><strong>4、总结</strong></h2><p>通过前面的描述，我相信大家已经能够基本掌握find_package命令的各种用法了，也能够在出现各种问题时自己进行问题定位。但还有一个我们需要注意的点是我们能够在自己的项目中使用find_package命令便捷进行依赖包配置的前提是这个包的开发者也是用CMake配置好了这个包，并提供了<PackageName>Config.cmake或Find<PackageName>.cmake的配置文件。 </p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a><strong>参考</strong></h2><p><a href=\"https://blog.csdn.net/zhanghm1995/article/details/105466372\">https://blog.csdn.net/zhanghm1995/article/details/105466372</a> </p>\n<p><a href=\"https://cmake.org/cmake/help/v3.5/command/find_package.html\">https://cmake.org/cmake/help/v3.5/command/find_package.html</a> （官网介绍） </p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/50829542\">https://zhuanlan.zhihu.com/p/50829542</a> </p>\n<p><a href=\"https://seanzhengw.github.io/blog/cmake/2018/04/23/cmake-find-package.html\">https://seanzhengw.github.io/blog/cmake/2018/04/23/cmake-find-package.html</a> </p>\n<p><a href=\"https://blog.csdn.net/bytxl/article/details/50637277\">https://blog.csdn.net/bytxl/article/details/50637277</a> </p>\n"},{"title":"STL容器使用时机","date":"2023-08-24T14:38:18.636Z","description":null,"top_img":false,"_content":"\n# STL容器使用时机\n\n|              | vector   | deque    | list     | set    | multiset | map             | multimap      |\n|--------------|----------|----------|----------|--------|----------|-----------------|---------------|\n| 典型内存结构 | 单端数组 | 双端数组 | 双向链表 | 二叉树 | 二叉树   | 二叉树          | 二叉树        |\n| 可随机存取   | 是       | 是       | 否       | 否     | 否       | 对key而言：不是 | 否            |\n| 元素搜寻速度 | 慢       | 慢       | 非常慢   | 快     | 快       | 对key而言：快   | 对key而言：快 |\n| 元素安插移除 | 尾端     | 头尾两端 | 任何位置 | -      | -        | -               | -             |\n\n## vector的使用场景：\n\n比如软件历史操作记录的存储，我们经常要查看历史记录，比如上一次的记录，上上次的记录，但却不会去删除记录，因为记录是事实的描述。\n\n\n\n## deque的使用场景：\n\n比如排队购票系统，对排队者的存储可以采用deque，支持头端的快速移除，尾端的快速添加。如果采用vector，则头端移除时，会移动大量的数据，速度慢。\n\n\n\n## vector与deque的比较：\n\n1. vector.at()比deque.at()效率高，比如vector.at(0)是固定的，deque的开始位置 却是不固定的。\n2. 如果有大量释放操作的话，vector花的时间更少，这跟二者的内部实现有关。\n3. deque支持头部的快速插入与快速移除，这是deque的优点。\n\n\n\n## list的使用场景：\n\n比如公交车乘客的存储，随时可能有乘客下车，支持频繁的不确实位置元素的移除插入。\n\n\n\n## set的使用场景：\n\n比如对手机游戏的个人得分记录的存储，存储要求从高分到低分的顺序排列。\n\n\n\n## map的使用场景：\n\n比如按ID号存储十万个用户，想要快速要通过ID查找对应的用户。二叉树的查找效率，这时就体现出来了。如果是vector容器，最坏的情况下可能要遍历完整个容器才能找到该用户。","source":"_posts/C++/STL容器使用时机.md","raw":"---\ntitle: STL容器使用时机\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# STL容器使用时机\n\n|              | vector   | deque    | list     | set    | multiset | map             | multimap      |\n|--------------|----------|----------|----------|--------|----------|-----------------|---------------|\n| 典型内存结构 | 单端数组 | 双端数组 | 双向链表 | 二叉树 | 二叉树   | 二叉树          | 二叉树        |\n| 可随机存取   | 是       | 是       | 否       | 否     | 否       | 对key而言：不是 | 否            |\n| 元素搜寻速度 | 慢       | 慢       | 非常慢   | 快     | 快       | 对key而言：快   | 对key而言：快 |\n| 元素安插移除 | 尾端     | 头尾两端 | 任何位置 | -      | -        | -               | -             |\n\n## vector的使用场景：\n\n比如软件历史操作记录的存储，我们经常要查看历史记录，比如上一次的记录，上上次的记录，但却不会去删除记录，因为记录是事实的描述。\n\n\n\n## deque的使用场景：\n\n比如排队购票系统，对排队者的存储可以采用deque，支持头端的快速移除，尾端的快速添加。如果采用vector，则头端移除时，会移动大量的数据，速度慢。\n\n\n\n## vector与deque的比较：\n\n1. vector.at()比deque.at()效率高，比如vector.at(0)是固定的，deque的开始位置 却是不固定的。\n2. 如果有大量释放操作的话，vector花的时间更少，这跟二者的内部实现有关。\n3. deque支持头部的快速插入与快速移除，这是deque的优点。\n\n\n\n## list的使用场景：\n\n比如公交车乘客的存储，随时可能有乘客下车，支持频繁的不确实位置元素的移除插入。\n\n\n\n## set的使用场景：\n\n比如对手机游戏的个人得分记录的存储，存储要求从高分到低分的顺序排列。\n\n\n\n## map的使用场景：\n\n比如按ID号存储十万个用户，想要快速要通过ID查找对应的用户。二叉树的查找效率，这时就体现出来了。如果是vector容器，最坏的情况下可能要遍历完整个容器才能找到该用户。","slug":"C++/STL容器使用时机","published":1,"updated":"2023-08-25T08:46:08.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66v000qgcr7egzlgyki","content":"<h1 id=\"STL容器使用时机\"><a href=\"#STL容器使用时机\" class=\"headerlink\" title=\"STL容器使用时机\"></a>STL容器使用时机</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>vector</th>\n<th>deque</th>\n<th>list</th>\n<th>set</th>\n<th>multiset</th>\n<th>map</th>\n<th>multimap</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>典型内存结构</td>\n<td>单端数组</td>\n<td>双端数组</td>\n<td>双向链表</td>\n<td>二叉树</td>\n<td>二叉树</td>\n<td>二叉树</td>\n<td>二叉树</td>\n</tr>\n<tr>\n<td>可随机存取</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>对key而言：不是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>元素搜寻速度</td>\n<td>慢</td>\n<td>慢</td>\n<td>非常慢</td>\n<td>快</td>\n<td>快</td>\n<td>对key而言：快</td>\n<td>对key而言：快</td>\n</tr>\n<tr>\n<td>元素安插移除</td>\n<td>尾端</td>\n<td>头尾两端</td>\n<td>任何位置</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h2 id=\"vector的使用场景：\"><a href=\"#vector的使用场景：\" class=\"headerlink\" title=\"vector的使用场景：\"></a>vector的使用场景：</h2><p>比如软件历史操作记录的存储，我们经常要查看历史记录，比如上一次的记录，上上次的记录，但却不会去删除记录，因为记录是事实的描述。</p>\n<h2 id=\"deque的使用场景：\"><a href=\"#deque的使用场景：\" class=\"headerlink\" title=\"deque的使用场景：\"></a>deque的使用场景：</h2><p>比如排队购票系统，对排队者的存储可以采用deque，支持头端的快速移除，尾端的快速添加。如果采用vector，则头端移除时，会移动大量的数据，速度慢。</p>\n<h2 id=\"vector与deque的比较：\"><a href=\"#vector与deque的比较：\" class=\"headerlink\" title=\"vector与deque的比较：\"></a>vector与deque的比较：</h2><ol>\n<li>vector.at()比deque.at()效率高，比如vector.at(0)是固定的，deque的开始位置 却是不固定的。</li>\n<li>如果有大量释放操作的话，vector花的时间更少，这跟二者的内部实现有关。</li>\n<li>deque支持头部的快速插入与快速移除，这是deque的优点。</li>\n</ol>\n<h2 id=\"list的使用场景：\"><a href=\"#list的使用场景：\" class=\"headerlink\" title=\"list的使用场景：\"></a>list的使用场景：</h2><p>比如公交车乘客的存储，随时可能有乘客下车，支持频繁的不确实位置元素的移除插入。</p>\n<h2 id=\"set的使用场景：\"><a href=\"#set的使用场景：\" class=\"headerlink\" title=\"set的使用场景：\"></a>set的使用场景：</h2><p>比如对手机游戏的个人得分记录的存储，存储要求从高分到低分的顺序排列。</p>\n<h2 id=\"map的使用场景：\"><a href=\"#map的使用场景：\" class=\"headerlink\" title=\"map的使用场景：\"></a>map的使用场景：</h2><p>比如按ID号存储十万个用户，想要快速要通过ID查找对应的用户。二叉树的查找效率，这时就体现出来了。如果是vector容器，最坏的情况下可能要遍历完整个容器才能找到该用户。</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"STL容器使用时机\"><a href=\"#STL容器使用时机\" class=\"headerlink\" title=\"STL容器使用时机\"></a>STL容器使用时机</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>vector</th>\n<th>deque</th>\n<th>list</th>\n<th>set</th>\n<th>multiset</th>\n<th>map</th>\n<th>multimap</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>典型内存结构</td>\n<td>单端数组</td>\n<td>双端数组</td>\n<td>双向链表</td>\n<td>二叉树</td>\n<td>二叉树</td>\n<td>二叉树</td>\n<td>二叉树</td>\n</tr>\n<tr>\n<td>可随机存取</td>\n<td>是</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n<td>否</td>\n<td>对key而言：不是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>元素搜寻速度</td>\n<td>慢</td>\n<td>慢</td>\n<td>非常慢</td>\n<td>快</td>\n<td>快</td>\n<td>对key而言：快</td>\n<td>对key而言：快</td>\n</tr>\n<tr>\n<td>元素安插移除</td>\n<td>尾端</td>\n<td>头尾两端</td>\n<td>任何位置</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h2 id=\"vector的使用场景：\"><a href=\"#vector的使用场景：\" class=\"headerlink\" title=\"vector的使用场景：\"></a>vector的使用场景：</h2><p>比如软件历史操作记录的存储，我们经常要查看历史记录，比如上一次的记录，上上次的记录，但却不会去删除记录，因为记录是事实的描述。</p>\n<h2 id=\"deque的使用场景：\"><a href=\"#deque的使用场景：\" class=\"headerlink\" title=\"deque的使用场景：\"></a>deque的使用场景：</h2><p>比如排队购票系统，对排队者的存储可以采用deque，支持头端的快速移除，尾端的快速添加。如果采用vector，则头端移除时，会移动大量的数据，速度慢。</p>\n<h2 id=\"vector与deque的比较：\"><a href=\"#vector与deque的比较：\" class=\"headerlink\" title=\"vector与deque的比较：\"></a>vector与deque的比较：</h2><ol>\n<li>vector.at()比deque.at()效率高，比如vector.at(0)是固定的，deque的开始位置 却是不固定的。</li>\n<li>如果有大量释放操作的话，vector花的时间更少，这跟二者的内部实现有关。</li>\n<li>deque支持头部的快速插入与快速移除，这是deque的优点。</li>\n</ol>\n<h2 id=\"list的使用场景：\"><a href=\"#list的使用场景：\" class=\"headerlink\" title=\"list的使用场景：\"></a>list的使用场景：</h2><p>比如公交车乘客的存储，随时可能有乘客下车，支持频繁的不确实位置元素的移除插入。</p>\n<h2 id=\"set的使用场景：\"><a href=\"#set的使用场景：\" class=\"headerlink\" title=\"set的使用场景：\"></a>set的使用场景：</h2><p>比如对手机游戏的个人得分记录的存储，存储要求从高分到低分的顺序排列。</p>\n<h2 id=\"map的使用场景：\"><a href=\"#map的使用场景：\" class=\"headerlink\" title=\"map的使用场景：\"></a>map的使用场景：</h2><p>比如按ID号存储十万个用户，想要快速要通过ID查找对应的用户。二叉树的查找效率，这时就体现出来了。如果是vector容器，最坏的情况下可能要遍历完整个容器才能找到该用户。</p>\n"},{"title":"Opencv Mat","date":"2023-08-24T14:38:18.629Z","description":null,"top_img":false,"_content":"\n# Opencv Mat\n\n\n\n## **Mat_\\<\\>()**\n\n```\nMat k = (Mat_<double>(3,3) << 1, 2, 3, 4, 5, 6, 7, 8, 9);\n```\n\n\n\n## **Mat.at\\<\\>()**\n\n```\nk.at<double>(0,0) = 1;\n```\n\n\n\n## **Mat::eye**\n\n返回一个恒等指定大小和类型矩阵。\n\n```\nC++: static MatExpr Mat::eye(int rows, int cols, inttype)\n\nC++: static MatExpr Mat::eye(Size size, int type)\n```\n\n**参数**\n\n**rows** –的行数。\n\n**cols**– 的列数。\n\n**size** –替代矩阵大小规格Size(cols, rows)的方法。\n\n**type** – 创建的矩阵的类型。\n\n该方法返回 Matlab 式恒等矩阵初始值设定项，类似 Mat::zeros()和 Mat::ones()，你可以用缩放操作高效地创建缩放的恒等矩阵：\n\n/ / 创建4 x 4 的对角矩阵并在对角线上以0.1的比率缩小。\n\n```\nMat A = Mat::eye(4, 4, CV_32F) * 0.1;\n```\n\n\n\n## **Mat::create**\n\n分配新的阵列数据 （如果需要）。\n\n```\nC++: void Mat::create(int rows, int cols, int type)\n\nC++: void Mat::create(Size size, int type)\n\nC++: void Mat::create(int ndims, const int\\* sizes, inttype)\n```\n\n**参数**\n\n**ndims** – 新数组的维数。\n\n**rows** –新的行数。\n\n**cols** – 新的列数。\n\n**size** – 替代新矩阵大小规格：Size(cols, rows)。\n\n**sizes** – 指定一个新的阵列形状的整数数组。\n\n**type** – 新矩阵的类型。\n\n这是关键的Mat方法之一。大多数新样式 OpenCV 函数和产生阵列的方法每个输出数组都调用这个方法。此方法使用如下算法：\n\n1.如果当前数组形状和类型匹配新的请立即返回。否则，通过调用 Mat::release()取消引用以前的数据。\n\n2.初始化新矩阵头。\n\n3.分配新的 total()\\*elemSize() 个字节的数据空间。\n\n4.分配新的关联数据的引用计数并将其设置为 1。\n","source":"_posts/C++/Opencv_Mat.md","raw":"---\ntitle: Opencv Mat\ndate:\ntags: \n- C++\n- Opencv\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# Opencv Mat\n\n\n\n## **Mat_\\<\\>()**\n\n```\nMat k = (Mat_<double>(3,3) << 1, 2, 3, 4, 5, 6, 7, 8, 9);\n```\n\n\n\n## **Mat.at\\<\\>()**\n\n```\nk.at<double>(0,0) = 1;\n```\n\n\n\n## **Mat::eye**\n\n返回一个恒等指定大小和类型矩阵。\n\n```\nC++: static MatExpr Mat::eye(int rows, int cols, inttype)\n\nC++: static MatExpr Mat::eye(Size size, int type)\n```\n\n**参数**\n\n**rows** –的行数。\n\n**cols**– 的列数。\n\n**size** –替代矩阵大小规格Size(cols, rows)的方法。\n\n**type** – 创建的矩阵的类型。\n\n该方法返回 Matlab 式恒等矩阵初始值设定项，类似 Mat::zeros()和 Mat::ones()，你可以用缩放操作高效地创建缩放的恒等矩阵：\n\n/ / 创建4 x 4 的对角矩阵并在对角线上以0.1的比率缩小。\n\n```\nMat A = Mat::eye(4, 4, CV_32F) * 0.1;\n```\n\n\n\n## **Mat::create**\n\n分配新的阵列数据 （如果需要）。\n\n```\nC++: void Mat::create(int rows, int cols, int type)\n\nC++: void Mat::create(Size size, int type)\n\nC++: void Mat::create(int ndims, const int\\* sizes, inttype)\n```\n\n**参数**\n\n**ndims** – 新数组的维数。\n\n**rows** –新的行数。\n\n**cols** – 新的列数。\n\n**size** – 替代新矩阵大小规格：Size(cols, rows)。\n\n**sizes** – 指定一个新的阵列形状的整数数组。\n\n**type** – 新矩阵的类型。\n\n这是关键的Mat方法之一。大多数新样式 OpenCV 函数和产生阵列的方法每个输出数组都调用这个方法。此方法使用如下算法：\n\n1.如果当前数组形状和类型匹配新的请立即返回。否则，通过调用 Mat::release()取消引用以前的数据。\n\n2.初始化新矩阵头。\n\n3.分配新的 total()\\*elemSize() 个字节的数据空间。\n\n4.分配新的关联数据的引用计数并将其设置为 1。\n","slug":"C++/Opencv_Mat","published":1,"updated":"2023-08-25T08:45:08.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66w000vgcr72wtr5n5z","content":"<h1 id=\"Opencv-Mat\"><a href=\"#Opencv-Mat\" class=\"headerlink\" title=\"Opencv Mat\"></a>Opencv Mat</h1><h2 id=\"Mat\"><a href=\"#Mat\" class=\"headerlink\" title=\"Mat_&lt;&gt;()\"></a><strong>Mat_&lt;&gt;()</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mat k = (Mat_&lt;double&gt;(3,3) &lt;&lt; 1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Mat-at\"><a href=\"#Mat-at\" class=\"headerlink\" title=\"Mat.at&lt;&gt;()\"></a><strong>Mat.at&lt;&gt;()</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k.at&lt;double&gt;(0,0) = 1;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Mat-eye\"><a href=\"#Mat-eye\" class=\"headerlink\" title=\"Mat::eye\"></a><strong>Mat::eye</strong></h2><p>返回一个恒等指定大小和类型矩阵。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C++: static MatExpr Mat::eye(int rows, int cols, inttype)</span><br><span class=\"line\"></span><br><span class=\"line\">C++: static MatExpr Mat::eye(Size size, int type)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数</strong></p>\n<p><strong>rows</strong> –的行数。</p>\n<p><strong>cols</strong>– 的列数。</p>\n<p><strong>size</strong> –替代矩阵大小规格Size(cols, rows)的方法。</p>\n<p><strong>type</strong> – 创建的矩阵的类型。</p>\n<p>该方法返回 Matlab 式恒等矩阵初始值设定项，类似 Mat::zeros()和 Mat::ones()，你可以用缩放操作高效地创建缩放的恒等矩阵：</p>\n<p>&#x2F; &#x2F; 创建4 x 4 的对角矩阵并在对角线上以0.1的比率缩小。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mat A = Mat::eye(4, 4, CV_32F) * 0.1;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Mat-create\"><a href=\"#Mat-create\" class=\"headerlink\" title=\"Mat::create\"></a><strong>Mat::create</strong></h2><p>分配新的阵列数据 （如果需要）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C++: void Mat::create(int rows, int cols, int type)</span><br><span class=\"line\"></span><br><span class=\"line\">C++: void Mat::create(Size size, int type)</span><br><span class=\"line\"></span><br><span class=\"line\">C++: void Mat::create(int ndims, const int\\* sizes, inttype)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数</strong></p>\n<p><strong>ndims</strong> – 新数组的维数。</p>\n<p><strong>rows</strong> –新的行数。</p>\n<p><strong>cols</strong> – 新的列数。</p>\n<p><strong>size</strong> – 替代新矩阵大小规格：Size(cols, rows)。</p>\n<p><strong>sizes</strong> – 指定一个新的阵列形状的整数数组。</p>\n<p><strong>type</strong> – 新矩阵的类型。</p>\n<p>这是关键的Mat方法之一。大多数新样式 OpenCV 函数和产生阵列的方法每个输出数组都调用这个方法。此方法使用如下算法：</p>\n<p>1.如果当前数组形状和类型匹配新的请立即返回。否则，通过调用 Mat::release()取消引用以前的数据。</p>\n<p>2.初始化新矩阵头。</p>\n<p>3.分配新的 total()*elemSize() 个字节的数据空间。</p>\n<p>4.分配新的关联数据的引用计数并将其设置为 1。</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Opencv-Mat\"><a href=\"#Opencv-Mat\" class=\"headerlink\" title=\"Opencv Mat\"></a>Opencv Mat</h1><h2 id=\"Mat\"><a href=\"#Mat\" class=\"headerlink\" title=\"Mat_&lt;&gt;()\"></a><strong>Mat_&lt;&gt;()</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mat k = (Mat_&lt;double&gt;(3,3) &lt;&lt; 1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Mat-at\"><a href=\"#Mat-at\" class=\"headerlink\" title=\"Mat.at&lt;&gt;()\"></a><strong>Mat.at&lt;&gt;()</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">k.at&lt;double&gt;(0,0) = 1;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Mat-eye\"><a href=\"#Mat-eye\" class=\"headerlink\" title=\"Mat::eye\"></a><strong>Mat::eye</strong></h2><p>返回一个恒等指定大小和类型矩阵。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C++: static MatExpr Mat::eye(int rows, int cols, inttype)</span><br><span class=\"line\"></span><br><span class=\"line\">C++: static MatExpr Mat::eye(Size size, int type)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数</strong></p>\n<p><strong>rows</strong> –的行数。</p>\n<p><strong>cols</strong>– 的列数。</p>\n<p><strong>size</strong> –替代矩阵大小规格Size(cols, rows)的方法。</p>\n<p><strong>type</strong> – 创建的矩阵的类型。</p>\n<p>该方法返回 Matlab 式恒等矩阵初始值设定项，类似 Mat::zeros()和 Mat::ones()，你可以用缩放操作高效地创建缩放的恒等矩阵：</p>\n<p>&#x2F; &#x2F; 创建4 x 4 的对角矩阵并在对角线上以0.1的比率缩小。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mat A = Mat::eye(4, 4, CV_32F) * 0.1;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Mat-create\"><a href=\"#Mat-create\" class=\"headerlink\" title=\"Mat::create\"></a><strong>Mat::create</strong></h2><p>分配新的阵列数据 （如果需要）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C++: void Mat::create(int rows, int cols, int type)</span><br><span class=\"line\"></span><br><span class=\"line\">C++: void Mat::create(Size size, int type)</span><br><span class=\"line\"></span><br><span class=\"line\">C++: void Mat::create(int ndims, const int\\* sizes, inttype)</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数</strong></p>\n<p><strong>ndims</strong> – 新数组的维数。</p>\n<p><strong>rows</strong> –新的行数。</p>\n<p><strong>cols</strong> – 新的列数。</p>\n<p><strong>size</strong> – 替代新矩阵大小规格：Size(cols, rows)。</p>\n<p><strong>sizes</strong> – 指定一个新的阵列形状的整数数组。</p>\n<p><strong>type</strong> – 新矩阵的类型。</p>\n<p>这是关键的Mat方法之一。大多数新样式 OpenCV 函数和产生阵列的方法每个输出数组都调用这个方法。此方法使用如下算法：</p>\n<p>1.如果当前数组形状和类型匹配新的请立即返回。否则，通过调用 Mat::release()取消引用以前的数据。</p>\n<p>2.初始化新矩阵头。</p>\n<p>3.分配新的 total()*elemSize() 个字节的数据空间。</p>\n<p>4.分配新的关联数据的引用计数并将其设置为 1。</p>\n"},{"title":"c++并发与多线程","date":"2023-08-24T14:38:18.609Z","description":null,"top_img":false,"_content":"\n# c++并发与多线程\n\n显示转换在主线程中构造，没有问题，隐式转换在子线程中构造，会出现问题\n\n![/ / 二 ： 互 斥 量 的 用 氵 去  / / （ 2 ． 1) lock() ， unlock()  / / 步 驶 ： 先 1 。 ck() ， 操 作 共 享 据 ， unlock() ：  / 过 。 ck() 和 un ck() 要 成 对 使 用 ， 有 1 。 ck() 必 然 要 有 unl 。 Ck ， 每 调 用 一 次 1 。 ck() ， 必 然 应 该 调 用 一 次 unl 。 Ck 的  ： / 环 应 该 也 不 允 许 调 用 1 次 1 。 ck() 去 卩 调 用 了 2 次 unl 。 Ck 的 也 不 允 许 调 用 2 次 c 轻 卩 调 用 眩 unl 。 ck(), 这 些 菲 对 称 却 量 调 月  / / 有 1 。 Ck ， 忘 记 unl 。 Ck 的 问 题 ， 非 常 睢 排 查 3  / / 为 了 防 止 大 家 忘 记 unl 。 Ck 的 引 入 了 一 个 叫 std ： nock-guard 的 类模栀 ： 你 忘 记 。 Ck 不 要 我 苗 你 unl 。 ck() ，  / / 学 习 过 智 能 指 针 (unique-ptr\\<\\>) ： 你 忘 记 霹 放 内 存 不 要 我 给 你 释 放 3 保 姆 3 ](media/4c410326f68b9c901ae092e6d1bee594.png)\n\n\n\n## std::lock_guard（）\n\nstd::lock_guard\\<std::mutex\\> sbguard(my_mutex);\n\n自动帮你进行lock and unlock\n\n\n\n## std::lock()\n\nstd::lock(my_mutex1,my_mutex2)            #手动unlock\n\n一次性锁住两个或者两个以上的互斥量，至少两个。如果互斥量中有一个没锁住，它就在那里等着，等所有互斥量都锁住，他才能往下走；要么互斥量都锁住，要么两个互斥量都没有锁住。\n\n![std: : lock (my_mutexl, my_mutex2) : lock ( ) :  std: : sbguardl (my_mutexl, std: : adopt_lock) :  std: : :mutex\\> sbguard2 (my_mutex2, std: : adopt \\_ lock) ](media/7186eb58ef60fc61dc55f573da016c01.png)\n\n![4) std: : lock_guardfistd: : adopt \\_  // std: : adopt\\_  std: : lock ard\\<std:  mutex.@i  T ock ](media/b80e022befbbb1f86356f354c265237d.png)\n\n这样也不需要手动unlock（）\n\n\n\n## unique_lock()\n\n![： unique—lockÅR 代 lock—guard  / / un 三 que 一 1 。 Ck 罡 个 类 栀 ， 工 作 中 ， \\*lock-guard （ 推 荐 使 用 ） lock—guard4R 代 了 mutex 的 lock() 和 unlock() ：  //unique-lock 比 lock-guard\\*\\$äffl\\$ 效 粼 上 差 一 点 ， 内 存 占 用 多 一 点 。  ： unique—lockfi% 二 个  / 过 。 Ck 一 guard 可 以 带 第 二 个 孬 数 ： ](media/c48e58454fc351e9fe69d2891a001cae.png)\n\n![彐  //adopt-lock 标 记 作 用 3  /std: :lock_guard\\<std: :mutex 〉 sbguardl (my_mutexl ， std: :adopt_lock):  / / （ 2 ． 0 std: •.adopt-lock ： 表 示 这 个 互 斥 量 已 经 裰 Ck 了 （ 你 必 须 要 把 互 斥 量 提 前 1 。 Ck 了 ， 否 则 会 报 异 常 ）  //std: ： ad 。 pt 过 ock 标 记 的 效 果 就 罡 “ 假 调 用 方 线 程 已 经 拥 有 了 互 斥 的 所 有 椤 （ 已 经 ck() 成 功 了 ）  / / 通 知 1 。 Ck 一 guar 环 需 要 在 构 造 函 中 1 。 Ck 这 个 互 斥 量 了  //unique-lock 也 可 以 ästd: :adopt-lock 标 记 ， 含 义 相 同 ， 就 罡 不 希 望 再 unique 过 。 ck() 的 构 造 函 中 1 。 Ck 这 个 。  / / 用 这 个 ad 。 pt 一 1 。 Ck 前 提 罡 ， 你 需 要 自 己 先 把 “ 先 1 。 Ck 上 3  / / （ 2 ． 2 ） std: :try_to_lock  / / 我 们 会 雲 试 用 的 1 。 ck() 去 锁 定 这 个 ， 但 如 果 没 有 锁 定 成 功 ， 我 也 会 立 即 返 回 ， 不 会 咀 塞 在 那 里  / / 用 这 个 try 一 t 。 一 1 。 Ck 的 前 提 罡 你 自 己 不 能 先 去 1 。 Ck 。  / / （ 2 ． 3 ） std: :defer_lock  / / 用 这 个 defer 一 1 。 Ck 的 前 提 罡 你 不 能 自 己 先 Ck ， 否 则 会 报 异 常 。  //defer-lock 的 意思 就 是 没 有 给 皿 ut 加 锁 ： 初 始 化 了 一 个 没 有 加 锁 的 ex 。  defer lock 、  —unique lock ](media/e3b2ae52a820296728e9a11336313dcd.png)\n\n![： unique-lock 的 成员函颛  / / （ 3 ． 0 lock(), 加 锁  / / （ 3 ． 2 冫 unlock() ， 解 锁 ；  / / （ 3 ． 3 ） try_lock() ， 當 试 结 互 斥 量 加 锁 ， 如 果 蓽 不 到 锁 ， 则 返 回 fa 这 e ， 如 果 蓽 到 了 锁 ， 返 回 true ， 这 个 函 不 咀 塞 的 3  / / （ 3 ， 4 ） release(), 返 回 它 所 管 理 的 对 源 指 针 ， 放 所 有 权 也 就 罡 说 ， 这 个 不 再 有 关 孚 。  / 俨 格 区 分 。 ck() 和 release() 的 区 别 ， 不 要 后 。  / / 如 果 ， 原 来 匚 对 象 处 于 加 锁 状 态 ， 你 有 责 任 接 管 过 来 员 责 解 锁 。 ()e leaseifi 回 的 是 ， 原 始 mute 黑 t 的 指 针 ）  / / 为 什 之 有 时 候 需 要 unlock() ： 因 为 你 1 。 Ck 锁 住 的 代 码 越 少 ， 执 行 越 快 ， 整 个 程 序 运 行 效 率 越 高  07 有 人 也 把 锁 头 锁 住 的 代 码 多 少 称 为 锁 的 粒 廛 ， 粒 廛 一 船 用 粗 細 来 描 述  / / a ） 锁 住 的 代 码 少 ， 这 个 粒 度 叫 细 。 执 行 、 率 高  / / b ） 锁 住 的 代 码 多 ， 粒 度 叫 粗 ， 那 执 行 0 就 低  / / 要 学 会 尽 量 选 择 合 适 粒 度 的 代 码 进 行 保 护 ， 粒 度 太 细 ， 可 能 漏 掉 共 享 据 的 保 护 0 立 廛 太 粗 ， 影 响 效 率 。  / / 选 擇 合 适 的 粒 度 ， 罡 高 程 序 员 的 能 力 和 实 力 的 忭 现 3 ](media/f1a009c02af2e121f29b74a8c7899747.png)\n\n\n","source":"_posts/C++/c++并发与多线程.md","raw":"---\ntitle: c++并发与多线程\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n---\n\n# c++并发与多线程\n\n显示转换在主线程中构造，没有问题，隐式转换在子线程中构造，会出现问题\n\n![/ / 二 ： 互 斥 量 的 用 氵 去  / / （ 2 ． 1) lock() ， unlock()  / / 步 驶 ： 先 1 。 ck() ， 操 作 共 享 据 ， unlock() ：  / 过 。 ck() 和 un ck() 要 成 对 使 用 ， 有 1 。 ck() 必 然 要 有 unl 。 Ck ， 每 调 用 一 次 1 。 ck() ， 必 然 应 该 调 用 一 次 unl 。 Ck 的  ： / 环 应 该 也 不 允 许 调 用 1 次 1 。 ck() 去 卩 调 用 了 2 次 unl 。 Ck 的 也 不 允 许 调 用 2 次 c 轻 卩 调 用 眩 unl 。 ck(), 这 些 菲 对 称 却 量 调 月  / / 有 1 。 Ck ， 忘 记 unl 。 Ck 的 问 题 ， 非 常 睢 排 查 3  / / 为 了 防 止 大 家 忘 记 unl 。 Ck 的 引 入 了 一 个 叫 std ： nock-guard 的 类模栀 ： 你 忘 记 。 Ck 不 要 我 苗 你 unl 。 ck() ，  / / 学 习 过 智 能 指 针 (unique-ptr\\<\\>) ： 你 忘 记 霹 放 内 存 不 要 我 给 你 释 放 3 保 姆 3 ](media/4c410326f68b9c901ae092e6d1bee594.png)\n\n\n\n## std::lock_guard（）\n\nstd::lock_guard\\<std::mutex\\> sbguard(my_mutex);\n\n自动帮你进行lock and unlock\n\n\n\n## std::lock()\n\nstd::lock(my_mutex1,my_mutex2)            #手动unlock\n\n一次性锁住两个或者两个以上的互斥量，至少两个。如果互斥量中有一个没锁住，它就在那里等着，等所有互斥量都锁住，他才能往下走；要么互斥量都锁住，要么两个互斥量都没有锁住。\n\n![std: : lock (my_mutexl, my_mutex2) : lock ( ) :  std: : sbguardl (my_mutexl, std: : adopt_lock) :  std: : :mutex\\> sbguard2 (my_mutex2, std: : adopt \\_ lock) ](media/7186eb58ef60fc61dc55f573da016c01.png)\n\n![4) std: : lock_guardfistd: : adopt \\_  // std: : adopt\\_  std: : lock ard\\<std:  mutex.@i  T ock ](media/b80e022befbbb1f86356f354c265237d.png)\n\n这样也不需要手动unlock（）\n\n\n\n## unique_lock()\n\n![： unique—lockÅR 代 lock—guard  / / un 三 que 一 1 。 Ck 罡 个 类 栀 ， 工 作 中 ， \\*lock-guard （ 推 荐 使 用 ） lock—guard4R 代 了 mutex 的 lock() 和 unlock() ：  //unique-lock 比 lock-guard\\*\\$äffl\\$ 效 粼 上 差 一 点 ， 内 存 占 用 多 一 点 。  ： unique—lockfi% 二 个  / 过 。 Ck 一 guard 可 以 带 第 二 个 孬 数 ： ](media/c48e58454fc351e9fe69d2891a001cae.png)\n\n![彐  //adopt-lock 标 记 作 用 3  /std: :lock_guard\\<std: :mutex 〉 sbguardl (my_mutexl ， std: :adopt_lock):  / / （ 2 ． 0 std: •.adopt-lock ： 表 示 这 个 互 斥 量 已 经 裰 Ck 了 （ 你 必 须 要 把 互 斥 量 提 前 1 。 Ck 了 ， 否 则 会 报 异 常 ）  //std: ： ad 。 pt 过 ock 标 记 的 效 果 就 罡 “ 假 调 用 方 线 程 已 经 拥 有 了 互 斥 的 所 有 椤 （ 已 经 ck() 成 功 了 ）  / / 通 知 1 。 Ck 一 guar 环 需 要 在 构 造 函 中 1 。 Ck 这 个 互 斥 量 了  //unique-lock 也 可 以 ästd: :adopt-lock 标 记 ， 含 义 相 同 ， 就 罡 不 希 望 再 unique 过 。 ck() 的 构 造 函 中 1 。 Ck 这 个 。  / / 用 这 个 ad 。 pt 一 1 。 Ck 前 提 罡 ， 你 需 要 自 己 先 把 “ 先 1 。 Ck 上 3  / / （ 2 ． 2 ） std: :try_to_lock  / / 我 们 会 雲 试 用 的 1 。 ck() 去 锁 定 这 个 ， 但 如 果 没 有 锁 定 成 功 ， 我 也 会 立 即 返 回 ， 不 会 咀 塞 在 那 里  / / 用 这 个 try 一 t 。 一 1 。 Ck 的 前 提 罡 你 自 己 不 能 先 去 1 。 Ck 。  / / （ 2 ． 3 ） std: :defer_lock  / / 用 这 个 defer 一 1 。 Ck 的 前 提 罡 你 不 能 自 己 先 Ck ， 否 则 会 报 异 常 。  //defer-lock 的 意思 就 是 没 有 给 皿 ut 加 锁 ： 初 始 化 了 一 个 没 有 加 锁 的 ex 。  defer lock 、  —unique lock ](media/e3b2ae52a820296728e9a11336313dcd.png)\n\n![： unique-lock 的 成员函颛  / / （ 3 ． 0 lock(), 加 锁  / / （ 3 ． 2 冫 unlock() ， 解 锁 ；  / / （ 3 ． 3 ） try_lock() ， 當 试 结 互 斥 量 加 锁 ， 如 果 蓽 不 到 锁 ， 则 返 回 fa 这 e ， 如 果 蓽 到 了 锁 ， 返 回 true ， 这 个 函 不 咀 塞 的 3  / / （ 3 ， 4 ） release(), 返 回 它 所 管 理 的 对 源 指 针 ， 放 所 有 权 也 就 罡 说 ， 这 个 不 再 有 关 孚 。  / 俨 格 区 分 。 ck() 和 release() 的 区 别 ， 不 要 后 。  / / 如 果 ， 原 来 匚 对 象 处 于 加 锁 状 态 ， 你 有 责 任 接 管 过 来 员 责 解 锁 。 ()e leaseifi 回 的 是 ， 原 始 mute 黑 t 的 指 针 ）  / / 为 什 之 有 时 候 需 要 unlock() ： 因 为 你 1 。 Ck 锁 住 的 代 码 越 少 ， 执 行 越 快 ， 整 个 程 序 运 行 效 率 越 高  07 有 人 也 把 锁 头 锁 住 的 代 码 多 少 称 为 锁 的 粒 廛 ， 粒 廛 一 船 用 粗 細 来 描 述  / / a ） 锁 住 的 代 码 少 ， 这 个 粒 度 叫 细 。 执 行 、 率 高  / / b ） 锁 住 的 代 码 多 ， 粒 度 叫 粗 ， 那 执 行 0 就 低  / / 要 学 会 尽 量 选 择 合 适 粒 度 的 代 码 进 行 保 护 ， 粒 度 太 细 ， 可 能 漏 掉 共 享 据 的 保 护 0 立 廛 太 粗 ， 影 响 效 率 。  / / 选 擇 合 适 的 粒 度 ， 罡 高 程 序 员 的 能 力 和 实 力 的 忭 现 3 ](media/f1a009c02af2e121f29b74a8c7899747.png)\n\n\n","slug":"C++/c++并发与多线程","published":1,"updated":"2023-08-25T08:29:26.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66w000ygcr7hapvetcd","content":"<h1 id=\"c-并发与多线程\"><a href=\"#c-并发与多线程\" class=\"headerlink\" title=\"c++并发与多线程\"></a>c++并发与多线程</h1><p>显示转换在主线程中构造，没有问题，隐式转换在子线程中构造，会出现问题</p>\n<p><img src=\"/media/4c410326f68b9c901ae092e6d1bee594.png\" alt=\"/ / 二 ： 互 斥 量 的 用 氵 去  / / （ 2 ． 1) lock() ， unlock()  / / 步 驶 ： 先 1 。 ck() ， 操 作 共 享 据 ， unlock() ：  / 过 。 ck() 和 un ck() 要 成 对 使 用 ， 有 1 。 ck() 必 然 要 有 unl 。 Ck ， 每 调 用 一 次 1 。 ck() ， 必 然 应 该 调 用 一 次 unl 。 Ck 的  ： / 环 应 该 也 不 允 许 调 用 1 次 1 。 ck() 去 卩 调 用 了 2 次 unl 。 Ck 的 也 不 允 许 调 用 2 次 c 轻 卩 调 用 眩 unl 。 ck(), 这 些 菲 对 称 却 量 调 月  / / 有 1 。 Ck ， 忘 记 unl 。 Ck 的 问 题 ， 非 常 睢 排 查 3  / / 为 了 防 止 大 家 忘 记 unl 。 Ck 的 引 入 了 一 个 叫 std ： nock-guard 的 类模栀 ： 你 忘 记 。 Ck 不 要 我 苗 你 unl 。 ck() ，  / / 学 习 过 智 能 指 针 (unique-ptr\\&lt;\\&gt;) ： 你 忘 记 霹 放 内 存 不 要 我 给 你 释 放 3 保 姆 3 \"></p>\n<h2 id=\"std-lock-guard（）\"><a href=\"#std-lock-guard（）\" class=\"headerlink\" title=\"std::lock_guard（）\"></a>std::lock_guard（）</h2><p>std::lock_guard&lt;std::mutex&gt; sbguard(my_mutex);</p>\n<p>自动帮你进行lock and unlock</p>\n<h2 id=\"std-lock\"><a href=\"#std-lock\" class=\"headerlink\" title=\"std::lock()\"></a>std::lock()</h2><p>std::lock(my_mutex1,my_mutex2)            #手动unlock</p>\n<p>一次性锁住两个或者两个以上的互斥量，至少两个。如果互斥量中有一个没锁住，它就在那里等着，等所有互斥量都锁住，他才能往下走；要么互斥量都锁住，要么两个互斥量都没有锁住。</p>\n<p><img src=\"/media/7186eb58ef60fc61dc55f573da016c01.png\" alt=\"std: : lock (my_mutexl, my_mutex2) : lock ( ) :  std: : sbguardl (my_mutexl, std: : adopt_lock) :  std: : :mutex\\&gt; sbguard2 (my_mutex2, std: : adopt \\_ lock) \"></p>\n<p><img src=\"/media/b80e022befbbb1f86356f354c265237d.png\" alt=\"4) std: : lock_guardfistd: : adopt \\_  // std: : adopt\\_  std: : lock ard\\&lt;std:  mutex.@i  T ock \"></p>\n<p>这样也不需要手动unlock（）</p>\n<h2 id=\"unique-lock\"><a href=\"#unique-lock\" class=\"headerlink\" title=\"unique_lock()\"></a>unique_lock()</h2><p><img src=\"/media/c48e58454fc351e9fe69d2891a001cae.png\" alt=\"： unique—lockÅR 代 lock—guard  / / un 三 que 一 1 。 Ck 罡 个 类 栀 ， 工 作 中 ， \\*lock-guard （ 推 荐 使 用 ） lock—guard4R 代 了 mutex 的 lock() 和 unlock() ：  //unique-lock 比 lock-guard\\*\\$äffl\\$ 效 粼 上 差 一 点 ， 内 存 占 用 多 一 点 。  ： unique—lockfi% 二 个  / 过 。 Ck 一 guard 可 以 带 第 二 个 孬 数 ： \"></p>\n<p><img src=\"/media/e3b2ae52a820296728e9a11336313dcd.png\" alt=\"彐  //adopt-lock 标 记 作 用 3  /std: :lock_guard\\&lt;std: :mutex 〉 sbguardl (my_mutexl ， std: :adopt_lock):  / / （ 2 ． 0 std: •.adopt-lock ： 表 示 这 个 互 斥 量 已 经 裰 Ck 了 （ 你 必 须 要 把 互 斥 量 提 前 1 。 Ck 了 ， 否 则 会 报 异 常 ）  //std: ： ad 。 pt 过 ock 标 记 的 效 果 就 罡 “ 假 调 用 方 线 程 已 经 拥 有 了 互 斥 的 所 有 椤 （ 已 经 ck() 成 功 了 ）  / / 通 知 1 。 Ck 一 guar 环 需 要 在 构 造 函 中 1 。 Ck 这 个 互 斥 量 了  //unique-lock 也 可 以 ästd: :adopt-lock 标 记 ， 含 义 相 同 ， 就 罡 不 希 望 再 unique 过 。 ck() 的 构 造 函 中 1 。 Ck 这 个 。  / / 用 这 个 ad 。 pt 一 1 。 Ck 前 提 罡 ， 你 需 要 自 己 先 把 “ 先 1 。 Ck 上 3  / / （ 2 ． 2 ） std: :try_to_lock  / / 我 们 会 雲 试 用 的 1 。 ck() 去 锁 定 这 个 ， 但 如 果 没 有 锁 定 成 功 ， 我 也 会 立 即 返 回 ， 不 会 咀 塞 在 那 里  / / 用 这 个 try 一 t 。 一 1 。 Ck 的 前 提 罡 你 自 己 不 能 先 去 1 。 Ck 。  / / （ 2 ． 3 ） std: :defer_lock  / / 用 这 个 defer 一 1 。 Ck 的 前 提 罡 你 不 能 自 己 先 Ck ， 否 则 会 报 异 常 。  //defer-lock 的 意思 就 是 没 有 给 皿 ut 加 锁 ： 初 始 化 了 一 个 没 有 加 锁 的 ex 。  defer lock 、  —unique lock \"></p>\n<p><img src=\"/media/f1a009c02af2e121f29b74a8c7899747.png\" alt=\"： unique-lock 的 成员函颛  / / （ 3 ． 0 lock(), 加 锁  / / （ 3 ． 2 冫 unlock() ， 解 锁 ；  / / （ 3 ． 3 ） try_lock() ， 當 试 结 互 斥 量 加 锁 ， 如 果 蓽 不 到 锁 ， 则 返 回 fa 这 e ， 如 果 蓽 到 了 锁 ， 返 回 true ， 这 个 函 不 咀 塞 的 3  / / （ 3 ， 4 ） release(), 返 回 它 所 管 理 的 对 源 指 针 ， 放 所 有 权 也 就 罡 说 ， 这 个 不 再 有 关 孚 。  / 俨 格 区 分 。 ck() 和 release() 的 区 别 ， 不 要 后 。  / / 如 果 ， 原 来 匚 对 象 处 于 加 锁 状 态 ， 你 有 责 任 接 管 过 来 员 责 解 锁 。 ()e leaseifi 回 的 是 ， 原 始 mute 黑 t 的 指 针 ）  / / 为 什 之 有 时 候 需 要 unlock() ： 因 为 你 1 。 Ck 锁 住 的 代 码 越 少 ， 执 行 越 快 ， 整 个 程 序 运 行 效 率 越 高  07 有 人 也 把 锁 头 锁 住 的 代 码 多 少 称 为 锁 的 粒 廛 ， 粒 廛 一 船 用 粗 細 来 描 述  / / a ） 锁 住 的 代 码 少 ， 这 个 粒 度 叫 细 。 执 行 、 率 高  / / b ） 锁 住 的 代 码 多 ， 粒 度 叫 粗 ， 那 执 行 0 就 低  / / 要 学 会 尽 量 选 择 合 适 粒 度 的 代 码 进 行 保 护 ， 粒 度 太 细 ， 可 能 漏 掉 共 享 据 的 保 护 0 立 廛 太 粗 ， 影 响 效 率 。  / / 选 擇 合 适 的 粒 度 ， 罡 高 程 序 员 的 能 力 和 实 力 的 忭 现 3 \"></p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-3.png","cover_type":"img","excerpt":"","more":"<h1 id=\"c-并发与多线程\"><a href=\"#c-并发与多线程\" class=\"headerlink\" title=\"c++并发与多线程\"></a>c++并发与多线程</h1><p>显示转换在主线程中构造，没有问题，隐式转换在子线程中构造，会出现问题</p>\n<p><img src=\"/media/4c410326f68b9c901ae092e6d1bee594.png\" alt=\"/ / 二 ： 互 斥 量 的 用 氵 去  / / （ 2 ． 1) lock() ， unlock()  / / 步 驶 ： 先 1 。 ck() ， 操 作 共 享 据 ， unlock() ：  / 过 。 ck() 和 un ck() 要 成 对 使 用 ， 有 1 。 ck() 必 然 要 有 unl 。 Ck ， 每 调 用 一 次 1 。 ck() ， 必 然 应 该 调 用 一 次 unl 。 Ck 的  ： / 环 应 该 也 不 允 许 调 用 1 次 1 。 ck() 去 卩 调 用 了 2 次 unl 。 Ck 的 也 不 允 许 调 用 2 次 c 轻 卩 调 用 眩 unl 。 ck(), 这 些 菲 对 称 却 量 调 月  / / 有 1 。 Ck ， 忘 记 unl 。 Ck 的 问 题 ， 非 常 睢 排 查 3  / / 为 了 防 止 大 家 忘 记 unl 。 Ck 的 引 入 了 一 个 叫 std ： nock-guard 的 类模栀 ： 你 忘 记 。 Ck 不 要 我 苗 你 unl 。 ck() ，  / / 学 习 过 智 能 指 针 (unique-ptr\\&lt;\\&gt;) ： 你 忘 记 霹 放 内 存 不 要 我 给 你 释 放 3 保 姆 3 \"></p>\n<h2 id=\"std-lock-guard（）\"><a href=\"#std-lock-guard（）\" class=\"headerlink\" title=\"std::lock_guard（）\"></a>std::lock_guard（）</h2><p>std::lock_guard&lt;std::mutex&gt; sbguard(my_mutex);</p>\n<p>自动帮你进行lock and unlock</p>\n<h2 id=\"std-lock\"><a href=\"#std-lock\" class=\"headerlink\" title=\"std::lock()\"></a>std::lock()</h2><p>std::lock(my_mutex1,my_mutex2)            #手动unlock</p>\n<p>一次性锁住两个或者两个以上的互斥量，至少两个。如果互斥量中有一个没锁住，它就在那里等着，等所有互斥量都锁住，他才能往下走；要么互斥量都锁住，要么两个互斥量都没有锁住。</p>\n<p><img src=\"/media/7186eb58ef60fc61dc55f573da016c01.png\" alt=\"std: : lock (my_mutexl, my_mutex2) : lock ( ) :  std: : sbguardl (my_mutexl, std: : adopt_lock) :  std: : :mutex\\&gt; sbguard2 (my_mutex2, std: : adopt \\_ lock) \"></p>\n<p><img src=\"/media/b80e022befbbb1f86356f354c265237d.png\" alt=\"4) std: : lock_guardfistd: : adopt \\_  // std: : adopt\\_  std: : lock ard\\&lt;std:  mutex.@i  T ock \"></p>\n<p>这样也不需要手动unlock（）</p>\n<h2 id=\"unique-lock\"><a href=\"#unique-lock\" class=\"headerlink\" title=\"unique_lock()\"></a>unique_lock()</h2><p><img src=\"/media/c48e58454fc351e9fe69d2891a001cae.png\" alt=\"： unique—lockÅR 代 lock—guard  / / un 三 que 一 1 。 Ck 罡 个 类 栀 ， 工 作 中 ， \\*lock-guard （ 推 荐 使 用 ） lock—guard4R 代 了 mutex 的 lock() 和 unlock() ：  //unique-lock 比 lock-guard\\*\\$äffl\\$ 效 粼 上 差 一 点 ， 内 存 占 用 多 一 点 。  ： unique—lockfi% 二 个  / 过 。 Ck 一 guard 可 以 带 第 二 个 孬 数 ： \"></p>\n<p><img src=\"/media/e3b2ae52a820296728e9a11336313dcd.png\" alt=\"彐  //adopt-lock 标 记 作 用 3  /std: :lock_guard\\&lt;std: :mutex 〉 sbguardl (my_mutexl ， std: :adopt_lock):  / / （ 2 ． 0 std: •.adopt-lock ： 表 示 这 个 互 斥 量 已 经 裰 Ck 了 （ 你 必 须 要 把 互 斥 量 提 前 1 。 Ck 了 ， 否 则 会 报 异 常 ）  //std: ： ad 。 pt 过 ock 标 记 的 效 果 就 罡 “ 假 调 用 方 线 程 已 经 拥 有 了 互 斥 的 所 有 椤 （ 已 经 ck() 成 功 了 ）  / / 通 知 1 。 Ck 一 guar 环 需 要 在 构 造 函 中 1 。 Ck 这 个 互 斥 量 了  //unique-lock 也 可 以 ästd: :adopt-lock 标 记 ， 含 义 相 同 ， 就 罡 不 希 望 再 unique 过 。 ck() 的 构 造 函 中 1 。 Ck 这 个 。  / / 用 这 个 ad 。 pt 一 1 。 Ck 前 提 罡 ， 你 需 要 自 己 先 把 “ 先 1 。 Ck 上 3  / / （ 2 ． 2 ） std: :try_to_lock  / / 我 们 会 雲 试 用 的 1 。 ck() 去 锁 定 这 个 ， 但 如 果 没 有 锁 定 成 功 ， 我 也 会 立 即 返 回 ， 不 会 咀 塞 在 那 里  / / 用 这 个 try 一 t 。 一 1 。 Ck 的 前 提 罡 你 自 己 不 能 先 去 1 。 Ck 。  / / （ 2 ． 3 ） std: :defer_lock  / / 用 这 个 defer 一 1 。 Ck 的 前 提 罡 你 不 能 自 己 先 Ck ， 否 则 会 报 异 常 。  //defer-lock 的 意思 就 是 没 有 给 皿 ut 加 锁 ： 初 始 化 了 一 个 没 有 加 锁 的 ex 。  defer lock 、  —unique lock \"></p>\n<p><img src=\"/media/f1a009c02af2e121f29b74a8c7899747.png\" alt=\"： unique-lock 的 成员函颛  / / （ 3 ． 0 lock(), 加 锁  / / （ 3 ． 2 冫 unlock() ， 解 锁 ；  / / （ 3 ． 3 ） try_lock() ， 當 试 结 互 斥 量 加 锁 ， 如 果 蓽 不 到 锁 ， 则 返 回 fa 这 e ， 如 果 蓽 到 了 锁 ， 返 回 true ， 这 个 函 不 咀 塞 的 3  / / （ 3 ， 4 ） release(), 返 回 它 所 管 理 的 对 源 指 针 ， 放 所 有 权 也 就 罡 说 ， 这 个 不 再 有 关 孚 。  / 俨 格 区 分 。 ck() 和 release() 的 区 别 ， 不 要 后 。  / / 如 果 ， 原 来 匚 对 象 处 于 加 锁 状 态 ， 你 有 责 任 接 管 过 来 员 责 解 锁 。 ()e leaseifi 回 的 是 ， 原 始 mute 黑 t 的 指 针 ）  / / 为 什 之 有 时 候 需 要 unlock() ： 因 为 你 1 。 Ck 锁 住 的 代 码 越 少 ， 执 行 越 快 ， 整 个 程 序 运 行 效 率 越 高  07 有 人 也 把 锁 头 锁 住 的 代 码 多 少 称 为 锁 的 粒 廛 ， 粒 廛 一 船 用 粗 細 来 描 述  / / a ） 锁 住 的 代 码 少 ， 这 个 粒 度 叫 细 。 执 行 、 率 高  / / b ） 锁 住 的 代 码 多 ， 粒 度 叫 粗 ， 那 执 行 0 就 低  / / 要 学 会 尽 量 选 择 合 适 粒 度 的 代 码 进 行 保 护 ， 粒 度 太 细 ， 可 能 漏 掉 共 享 据 的 保 护 0 立 廛 太 粗 ， 影 响 效 率 。  / / 选 擇 合 适 的 粒 度 ， 罡 高 程 序 员 的 能 力 和 实 力 的 忭 现 3 \"></p>\n"},{"title":"Protocol Buffers基本使用","date":"2023-08-24T14:38:18.633Z","description":null,"top_img":false,"_content":"\n# Protocol Buffers基本使用\n\n> - Protocol Buffer 和 XML、JSON一样都是结构数据序列化的工具，但它们的数据格式有比较大的区别：\n>   - 首先，Protocol Buffer 序列化之后得到的数据不是可读的字符串，而是二进制流\n>   - 其次，XML 和 JSON 格式的数据信息都包含在了序列化之后的数据中，不需要任何其它信息就能还原序列化之后的数据；但使用 Protocol Buffer 需要事先定义数据的格式(.proto 协议文件)，还原一个序列化之后的数据需要使用到这个定义好的数据格式\n>   - 最后，在传输数据量较大的需求场景下，Protocol Buffer 比 XML、JSON 更小（3到10倍）、更快（20到100倍）、使用 & 维护更简单；而且 Protocol Buffer 可以跨平台、跨语音使用\n> - Protobuf 安装：\n>   - 安装 protobuf： apt-get install protobuf-compiler\n>   - 安装 protobuf 的 python 模块：pip3 install protobuf==3.13.0\n>   - 源码方式安装：可参考 Protobuf 安装及使用 && https://github.com/protocolbuffers/protobuf/blob/main/src/README.md\n> - Protobuf 版本查看：\n>   - protoc --version\n>   - import google.protobuf as gp, gp.__version__\n\n## Protocol Buffer 的作用\n\n- 通过将结构化的数据（拥有多种属性）进行序列化，从而实现（内存与硬盘之间）数据存储和交换的功能\n  - 序列化： 按照 `.proto` 协议文件将`数据结构或对象`转换成`二进制流`的过程\n  - 反序列化：将在序列化过程中所生成的`二进制流`转换成`数据结构或对象`的过程\n\n![Protocol Buffer 特点](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1hOWIzZmMyZWQxNmY2MWU1LnBuZw)\n\n## Protocol Buffer 语法\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS01NjYzNTk5ZTg0MzNmNWI4LnBuZw.png)\n\n### 关注1：包名\n\n```protobuf\npackage protocobuff_Demo;\n// 关注1：包名\n```\n\n- 作用：防止不同 .proto 项目间命名 发生冲突\n\n- Protocol buffer包的解析过程如下：\n\n  1. Protocol buffer 的类型名称解析与 C++ 一致：从 最内部 开始查找，依次向外进行每个包会被看作是其父类包的内部类\n  2. Protocol buffer 编译器会解析 .proto文件中定义的所有类型名\n  3. 生成器会根据 不同语言 生成 对应语言 的代码文件\n\n  > a. 即对 不同语言 使用了 不同的规则 进行处理\n  >\n  > b. Protoco Buffer提供 C++、Java、Python 三种语言的 API\n\n### 关注2：Option选项\n\n```protobuf\noption java_package = \"com.carson.proto\";\noption java_outer_classname = \"Demo\";\n// 关注2：option选项\n```\n\n- 作用：影响 特定环境下 的处理方式\n\n- 常用Option选项如下：\n\n  ```protobuf\n  option java_package = \"com.carson.proto\";\n  // 定义：Java包名\n  // 作用：指定生成的类应该放在什么Java包名下\n  // 注：如不显式指定，默认包名为：按照应用名称倒序方式进行排序\n  \n  option java_outer_classname = \"Demo\";\n  // 定义：类名\n  // 作用：生成对应.java 文件的类名（不能跟下面message的类名相同）\n  // 注：如不显式指定，则默认为把.proto文件名转换为首字母大写来生成\n  // 如.proto文件名=\"my_proto.proto\"，默认情况下，将使用 \"MyProto\" 做为类名\n  \n  option optimize_for = ***;\n  // 作用：影响 C++  & java 代码的生成\n  // ***参数如下：\n  // 1. SPEED (默认):：protocol buffer编译器将通过在消息类型上执行序列化、语法分析及其他通用的操作。（最优方式）\n  // 2. CODE_SIZE:：编译器将会产生最少量的类，通过共享或基于反射的代码来实现序列化、语法分析及各种其它操作。\n    // 特点：采用该方式产生的代码将比SPEED要少很多， 但是效率较低；\n    // 使用场景：常用在 包含大量.proto文件 但 不追求效率 的应用中。\n  //3.  LITE_RUNTIME:：编译器依赖于运行时 核心类库 来生成代码（即采用libprotobuf-lite 替代libprotobuf）。\n    // 特点：这种核心类库要比全类库小得多（忽略了 一些描述符及反射 ）；编译器采用该模式产生的方法实现与SPEED模式不相上下，产生的类通过实现 MessageLite接口，但它仅仅是Messager接口的一个子集。\n    // 应用场景：移动手机平台应用\n  \n  option cc_generic_services = false;\n  option java_generic_services = false;\n  option py_generic_services = false;\n  // 作用：定义在C++、java、python中，protocol buffer编译器是否应该 基于服务定义 产生 抽象服务代码（2.3.0版本前该值默认 = true）\n  // 自2.3.0版本以来，官方认为通过提供 代码生成器插件 来对 RPC实现 更可取，而不是依赖于“抽象”服务\n  \n  optional repeated int32 samples = 4 [packed=true];\n  // 如果该选项在一个整型基本类型上被设置为真，则采用更紧凑的编码方式（不会对数值造成损失）\n  // 在2.3.0版本前，解析器将会忽略 非期望的包装值。因此，它不可能在 不破坏现有框架的兼容性上 而 改变压缩格式。\n  // 在2.3.0之后，这种改变将是安全的，解析器能够接受上述两种格式。\n  \n  optional int32 old_field = 6 [deprecated=true];\n  // 作用：判断该字段是否已经被弃用\n  // 作用同 在java中的注解@Deprecated\n  ```\n\n### 关注3：消息模型\n\n- 作用：真正用于描述 数据结构\n\n```protobuf\n// 消息对象用message修饰\nmessage Person {\n\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    optional PhoneType type = 2 [default = HOME];\n  }\n\n  repeated PhoneNumber phone = 4;\n}\n\nmessage AddressBook {\n  repeated Person person = 1;\n}\n```\n\n- 组成：在ProtocolBuffers中：\n  1. 一个 `.proto` 消息模型 = 一个 `.proto`文件 = 消息对象 + 字段\n  2. 一个消息对象（`Message`） = 一个 结构化数据\n  3. 消息对象（`Message`）里的 字段 = 结构化数据 里的成员变量\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png)\n\n下面会详细介绍 `.proto` 消息模型里的 消息对象 & 字段\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGJhY2Q4N2Y0NDlkYmI4LnBuZw.png)\n\n#### 1. 消息对象\n\n在 `ProtocolBuffers` 中：\n\n- 一个消息对象（`Message`） = 一个 结构化数据\n- 消息对象用 修饰符 `message` 修饰\n- 消息对象 含有 字段：消息对象（`Message`）里的 字段 = 结构化数据 里的成员变量\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png)\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iNDg4YzYyMDk0NTE2ZTBjLnBuZw.png)\n\n##### a. 添加：在一个 .proto文件 中可定义多个 消息对象\n\n- 应用场景：尽可能将与 某一消息类型 对应的响应消息格式 定义到相同的 `.proto`文件 中\n- 实例：\n\n```protobuf\nmessage SearchRequest {\n\n  required string query = 1;\n  optional int32 page_number = 2;\n  optional int32 result_per_page = 3;\n\n}\n\n// 与SearchRequest消息类型 对应的 响应消息类型SearchResponse\nmessage SearchResponse {\n …\n}\n```\n\n##### b. 一个消息对象 里 可以定义 另外一个消息对象（即嵌套）\n\n```\nmessage Person {\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n\n// 该消息类型 定义在 Person消息类型的内部\n// 即Person消息类型 是 PhoneNumber消息类型的父消息类型\n  message PhoneNumber {\n    required string number = 1;\n  }\n}\n\n<-- 多重嵌套 -->\nmessage Outer {   // Level 0\n  message MiddleAA {  // Level 1\n    message Inner {   // Level 2\n      required int64 ival = 1;\n      optional bool  booly = 2;\n    }\n  }\n}\n```\n\n#### 2. 字段\n\n- 消息对象的字段 组成主要是：**字段 = 字段修饰符 + 字段类型 +字段名 +标识号**\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGI3ZTczMjExYjRjODliLnBuZw.png)\n\n##### **a. 字段修饰符**\n\n- 作用：设置该字段解析时的规则\n\n- 具体类型如下：\n\n  ![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iZjE3MjU0NTIwOWI4N2UxLnBuZw.png)\n\n**b. 字段类型**\n字段类型主要有 三 类：\n\n- 基本数据 类型\n- 枚举 类型\n- 消息对象 类型\n\n```protobuf\nmessage Person {\n\n  // 基本数据类型 字段\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    optional PhoneType type = 2 [default = HOME];\n    // 枚举类型 字段\n  }\n\n  repeated PhoneNumber phone = 4;\n  // 消息类型 字段\n}\n```\n\n###### 1.基本数据类型\n\n| .proto中的类型 | 注意                                                         | C++中类型 | java中类型 |\n| -------------- | ------------------------------------------------------------ | --------- | ---------- |\n| double         |                                                              | double    | double     |\n| float          |                                                              | float     | float      |\n| int32          | 自动调整编码长度，如果需要保存负数，请使用sint32             | int32     | int        |\n| int64          | 自动调整编码长度，如果需要保存负数，请使用sint64             | int64     | long       |\n| uint32         | 自动调整编码长度                                             | uint32    | int        |\n| uint64         | 自动调整编码长度                                             | uint64    | long       |\n| sint32         | 自动调整编码长度，表示有符号数，负数的编码效率高于int32      | int32     | int        |\n| sint64         | 自动调整编码长度，表示有符号数，负数的编码效率高于int64      | int64     | long       |\n| fixed32        | 固定使用4bytes编码，在编码大数(228228)的时候比uint32更有效率 | int32     | int        |\n| fixed32        | 固定使用8bytes编码，在编码大数(256256)的时候比uint64更有效率 | int42     | long       |\n| sfixed32       | 固定使用4bytes编码                                           | int32     | int        |\n| sfixed64       | 固定使用8bytes编码                                           | int64     | long       |\n| bool           |                                                              | bool      | boolean    |\n| string         | string只能包含UTF-8和7-bit ASCII文本                         | string    | String     |\n| bytes          | 包含任意长度的bytes                                          | string    | ByteString |\n\n###### 2. 枚举类型\n\n- 作用：为字段指定一个 可能取值的字段集合\n\n> 该字段只能从 该指定的字段集合里 取值\n\n- 说明：如下面例子，电话号码 可能是手机号、家庭电话号或工作电话号的其中一个，那么就将`PhoneType`定义为枚举类型，并将加入电话的集合（ `MOBILE`、 `HOME`、`WORK`）\n\n```protobuf\n// 枚举类型需要先定义才能进行使用\n\n// 枚举类型 定义\n enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n// 电话类型字段 只能从 这个集合里 取值\n  }\n\n// 特别注意：\n// 1. 枚举类型的定义可在一个消息对象的内部或外部\n// 2. 都可以在 同一.proto文件 中的任何消息对象里使用\n// 3. 当枚举类型是在一消息内部定义，希望在 另一个消息中 使用时，需要采用MessageType.EnumType的语法格式\n\n  message PhoneNumber {\n    required string number = 1;\n    optional PhoneType type = 2 [default = HOME];\n    // 使用枚举类型的字段（设置了默认值）\n  }\n\n// 特别注意：\n// 1.  枚举常量必须在32位整型值的范围内\n// 2. 不推荐在enum中使用负数：因为enum值是使用可变编码方式的，对负数不够高\n```\n\n###### 3. 消息对象 类型\n\n一个消息对象 可以将 其他消息对象类型 用作字段类型，情况如下：\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS04Nzc5YmMwOWE1M2ViNDBjLnBuZw.png)\n\n- **使用 内部消息类型**\n\n  - 先在 消息类型 中定义 其他消息类型 ，然后再使用\n\n  ```protobuf\n  message Person {\n    required string name = 1;\n    required int32 id = 2;\n    optional string email = 3;\n  \n  // 该消息类型 定义在 Person消息类型的内部\n  // 即Person消息类型 是 PhoneNumber消息类型的父消息类型\n    message PhoneNumber {\n      required string number = 1;\n    }\n  \n    repeated PhoneNumber phone = 4;\n    // 直接使用内部消息类型\n  }\n  ```\n\n- **使用** **外部消息类型**\n\n  - 即外部重用，需要 用作字段类型的消息类型 定义在 该消息类型外部\n\n  ```protobuf\n  message Person {\n    required string name = 1;\n    required int32 id = 2;\n    optional string email = 3;\n  }\n  \n  message AddressBook {\n    repeated Person person = 1;\n    // 直接使用了 Person消息类型作为消息字段\n  }\n  ```\n\n- **使用** **外部消息的内部消息类型**\n\n  ```protobuf\n  message Person {\n    required string name = 1;\n    required int32 id = 2;\n    optional string email = 3;\n  \n  // PhoneNumber消息类型 是 Person消息类型的内部消息类型\n    message PhoneNumber {\n      required string number = 1;\n      optional PhoneType type = 2 [default = HOME];\n    }\n  }\n  \n  // 若父消息类型外部的消息类型需要重用该内部消息类型\n  // 需要以 Parent.Type 的形式去使用\n  // Parent = 需要使用消息类型的父消息类型，Type = 需要使用的消息类型\n  \n  // PhoneNumber父消息类型Person 的外部 OtherMessage消息类型 需要使用 PhoneNumber消息类型\n  message OtherMessage {\n    optional Person.PhoneNumber phonenumber = 1;\n  // 以 Parent.Type = Person.PhoneNumber  的形式去使用\n  \n  }\n  ```\n\n- **使用不同** .**proto** **文件里的消息类型**\n\n  - 目的：需要在 `A.proto`文件 使用 `B.proto`文件里的消息类型\n\n  - 解决方案：在 `A.proto`文件 通过导入（ `import`） `B.proto`文件中来使用 `B.proto`文件 里的消息类型\n\n    ```protobuf\n    import \"myproject/other_protos.proto\"\n    // 在A.proto 文件中添加 B.proto文件路径的导入声明\n    // ProtocolBuffer编译器 会在 该目录中 查找需要被导入的 .proto文件\n    // 如果不提供参数，编译器就在 其调用的目录下 查找\n    ```\n\n    ","source":"_posts/C++/Protocol_Buffers基本使用.md","raw":"---\ntitle: Protocol Buffers基本使用\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# Protocol Buffers基本使用\n\n> - Protocol Buffer 和 XML、JSON一样都是结构数据序列化的工具，但它们的数据格式有比较大的区别：\n>   - 首先，Protocol Buffer 序列化之后得到的数据不是可读的字符串，而是二进制流\n>   - 其次，XML 和 JSON 格式的数据信息都包含在了序列化之后的数据中，不需要任何其它信息就能还原序列化之后的数据；但使用 Protocol Buffer 需要事先定义数据的格式(.proto 协议文件)，还原一个序列化之后的数据需要使用到这个定义好的数据格式\n>   - 最后，在传输数据量较大的需求场景下，Protocol Buffer 比 XML、JSON 更小（3到10倍）、更快（20到100倍）、使用 & 维护更简单；而且 Protocol Buffer 可以跨平台、跨语音使用\n> - Protobuf 安装：\n>   - 安装 protobuf： apt-get install protobuf-compiler\n>   - 安装 protobuf 的 python 模块：pip3 install protobuf==3.13.0\n>   - 源码方式安装：可参考 Protobuf 安装及使用 && https://github.com/protocolbuffers/protobuf/blob/main/src/README.md\n> - Protobuf 版本查看：\n>   - protoc --version\n>   - import google.protobuf as gp, gp.__version__\n\n## Protocol Buffer 的作用\n\n- 通过将结构化的数据（拥有多种属性）进行序列化，从而实现（内存与硬盘之间）数据存储和交换的功能\n  - 序列化： 按照 `.proto` 协议文件将`数据结构或对象`转换成`二进制流`的过程\n  - 反序列化：将在序列化过程中所生成的`二进制流`转换成`数据结构或对象`的过程\n\n![Protocol Buffer 特点](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1hOWIzZmMyZWQxNmY2MWU1LnBuZw)\n\n## Protocol Buffer 语法\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS01NjYzNTk5ZTg0MzNmNWI4LnBuZw.png)\n\n### 关注1：包名\n\n```protobuf\npackage protocobuff_Demo;\n// 关注1：包名\n```\n\n- 作用：防止不同 .proto 项目间命名 发生冲突\n\n- Protocol buffer包的解析过程如下：\n\n  1. Protocol buffer 的类型名称解析与 C++ 一致：从 最内部 开始查找，依次向外进行每个包会被看作是其父类包的内部类\n  2. Protocol buffer 编译器会解析 .proto文件中定义的所有类型名\n  3. 生成器会根据 不同语言 生成 对应语言 的代码文件\n\n  > a. 即对 不同语言 使用了 不同的规则 进行处理\n  >\n  > b. Protoco Buffer提供 C++、Java、Python 三种语言的 API\n\n### 关注2：Option选项\n\n```protobuf\noption java_package = \"com.carson.proto\";\noption java_outer_classname = \"Demo\";\n// 关注2：option选项\n```\n\n- 作用：影响 特定环境下 的处理方式\n\n- 常用Option选项如下：\n\n  ```protobuf\n  option java_package = \"com.carson.proto\";\n  // 定义：Java包名\n  // 作用：指定生成的类应该放在什么Java包名下\n  // 注：如不显式指定，默认包名为：按照应用名称倒序方式进行排序\n  \n  option java_outer_classname = \"Demo\";\n  // 定义：类名\n  // 作用：生成对应.java 文件的类名（不能跟下面message的类名相同）\n  // 注：如不显式指定，则默认为把.proto文件名转换为首字母大写来生成\n  // 如.proto文件名=\"my_proto.proto\"，默认情况下，将使用 \"MyProto\" 做为类名\n  \n  option optimize_for = ***;\n  // 作用：影响 C++  & java 代码的生成\n  // ***参数如下：\n  // 1. SPEED (默认):：protocol buffer编译器将通过在消息类型上执行序列化、语法分析及其他通用的操作。（最优方式）\n  // 2. CODE_SIZE:：编译器将会产生最少量的类，通过共享或基于反射的代码来实现序列化、语法分析及各种其它操作。\n    // 特点：采用该方式产生的代码将比SPEED要少很多， 但是效率较低；\n    // 使用场景：常用在 包含大量.proto文件 但 不追求效率 的应用中。\n  //3.  LITE_RUNTIME:：编译器依赖于运行时 核心类库 来生成代码（即采用libprotobuf-lite 替代libprotobuf）。\n    // 特点：这种核心类库要比全类库小得多（忽略了 一些描述符及反射 ）；编译器采用该模式产生的方法实现与SPEED模式不相上下，产生的类通过实现 MessageLite接口，但它仅仅是Messager接口的一个子集。\n    // 应用场景：移动手机平台应用\n  \n  option cc_generic_services = false;\n  option java_generic_services = false;\n  option py_generic_services = false;\n  // 作用：定义在C++、java、python中，protocol buffer编译器是否应该 基于服务定义 产生 抽象服务代码（2.3.0版本前该值默认 = true）\n  // 自2.3.0版本以来，官方认为通过提供 代码生成器插件 来对 RPC实现 更可取，而不是依赖于“抽象”服务\n  \n  optional repeated int32 samples = 4 [packed=true];\n  // 如果该选项在一个整型基本类型上被设置为真，则采用更紧凑的编码方式（不会对数值造成损失）\n  // 在2.3.0版本前，解析器将会忽略 非期望的包装值。因此，它不可能在 不破坏现有框架的兼容性上 而 改变压缩格式。\n  // 在2.3.0之后，这种改变将是安全的，解析器能够接受上述两种格式。\n  \n  optional int32 old_field = 6 [deprecated=true];\n  // 作用：判断该字段是否已经被弃用\n  // 作用同 在java中的注解@Deprecated\n  ```\n\n### 关注3：消息模型\n\n- 作用：真正用于描述 数据结构\n\n```protobuf\n// 消息对象用message修饰\nmessage Person {\n\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    optional PhoneType type = 2 [default = HOME];\n  }\n\n  repeated PhoneNumber phone = 4;\n}\n\nmessage AddressBook {\n  repeated Person person = 1;\n}\n```\n\n- 组成：在ProtocolBuffers中：\n  1. 一个 `.proto` 消息模型 = 一个 `.proto`文件 = 消息对象 + 字段\n  2. 一个消息对象（`Message`） = 一个 结构化数据\n  3. 消息对象（`Message`）里的 字段 = 结构化数据 里的成员变量\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png)\n\n下面会详细介绍 `.proto` 消息模型里的 消息对象 & 字段\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGJhY2Q4N2Y0NDlkYmI4LnBuZw.png)\n\n#### 1. 消息对象\n\n在 `ProtocolBuffers` 中：\n\n- 一个消息对象（`Message`） = 一个 结构化数据\n- 消息对象用 修饰符 `message` 修饰\n- 消息对象 含有 字段：消息对象（`Message`）里的 字段 = 结构化数据 里的成员变量\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png)\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iNDg4YzYyMDk0NTE2ZTBjLnBuZw.png)\n\n##### a. 添加：在一个 .proto文件 中可定义多个 消息对象\n\n- 应用场景：尽可能将与 某一消息类型 对应的响应消息格式 定义到相同的 `.proto`文件 中\n- 实例：\n\n```protobuf\nmessage SearchRequest {\n\n  required string query = 1;\n  optional int32 page_number = 2;\n  optional int32 result_per_page = 3;\n\n}\n\n// 与SearchRequest消息类型 对应的 响应消息类型SearchResponse\nmessage SearchResponse {\n …\n}\n```\n\n##### b. 一个消息对象 里 可以定义 另外一个消息对象（即嵌套）\n\n```\nmessage Person {\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n\n// 该消息类型 定义在 Person消息类型的内部\n// 即Person消息类型 是 PhoneNumber消息类型的父消息类型\n  message PhoneNumber {\n    required string number = 1;\n  }\n}\n\n<-- 多重嵌套 -->\nmessage Outer {   // Level 0\n  message MiddleAA {  // Level 1\n    message Inner {   // Level 2\n      required int64 ival = 1;\n      optional bool  booly = 2;\n    }\n  }\n}\n```\n\n#### 2. 字段\n\n- 消息对象的字段 组成主要是：**字段 = 字段修饰符 + 字段类型 +字段名 +标识号**\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGI3ZTczMjExYjRjODliLnBuZw.png)\n\n##### **a. 字段修饰符**\n\n- 作用：设置该字段解析时的规则\n\n- 具体类型如下：\n\n  ![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iZjE3MjU0NTIwOWI4N2UxLnBuZw.png)\n\n**b. 字段类型**\n字段类型主要有 三 类：\n\n- 基本数据 类型\n- 枚举 类型\n- 消息对象 类型\n\n```protobuf\nmessage Person {\n\n  // 基本数据类型 字段\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    optional PhoneType type = 2 [default = HOME];\n    // 枚举类型 字段\n  }\n\n  repeated PhoneNumber phone = 4;\n  // 消息类型 字段\n}\n```\n\n###### 1.基本数据类型\n\n| .proto中的类型 | 注意                                                         | C++中类型 | java中类型 |\n| -------------- | ------------------------------------------------------------ | --------- | ---------- |\n| double         |                                                              | double    | double     |\n| float          |                                                              | float     | float      |\n| int32          | 自动调整编码长度，如果需要保存负数，请使用sint32             | int32     | int        |\n| int64          | 自动调整编码长度，如果需要保存负数，请使用sint64             | int64     | long       |\n| uint32         | 自动调整编码长度                                             | uint32    | int        |\n| uint64         | 自动调整编码长度                                             | uint64    | long       |\n| sint32         | 自动调整编码长度，表示有符号数，负数的编码效率高于int32      | int32     | int        |\n| sint64         | 自动调整编码长度，表示有符号数，负数的编码效率高于int64      | int64     | long       |\n| fixed32        | 固定使用4bytes编码，在编码大数(228228)的时候比uint32更有效率 | int32     | int        |\n| fixed32        | 固定使用8bytes编码，在编码大数(256256)的时候比uint64更有效率 | int42     | long       |\n| sfixed32       | 固定使用4bytes编码                                           | int32     | int        |\n| sfixed64       | 固定使用8bytes编码                                           | int64     | long       |\n| bool           |                                                              | bool      | boolean    |\n| string         | string只能包含UTF-8和7-bit ASCII文本                         | string    | String     |\n| bytes          | 包含任意长度的bytes                                          | string    | ByteString |\n\n###### 2. 枚举类型\n\n- 作用：为字段指定一个 可能取值的字段集合\n\n> 该字段只能从 该指定的字段集合里 取值\n\n- 说明：如下面例子，电话号码 可能是手机号、家庭电话号或工作电话号的其中一个，那么就将`PhoneType`定义为枚举类型，并将加入电话的集合（ `MOBILE`、 `HOME`、`WORK`）\n\n```protobuf\n// 枚举类型需要先定义才能进行使用\n\n// 枚举类型 定义\n enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n// 电话类型字段 只能从 这个集合里 取值\n  }\n\n// 特别注意：\n// 1. 枚举类型的定义可在一个消息对象的内部或外部\n// 2. 都可以在 同一.proto文件 中的任何消息对象里使用\n// 3. 当枚举类型是在一消息内部定义，希望在 另一个消息中 使用时，需要采用MessageType.EnumType的语法格式\n\n  message PhoneNumber {\n    required string number = 1;\n    optional PhoneType type = 2 [default = HOME];\n    // 使用枚举类型的字段（设置了默认值）\n  }\n\n// 特别注意：\n// 1.  枚举常量必须在32位整型值的范围内\n// 2. 不推荐在enum中使用负数：因为enum值是使用可变编码方式的，对负数不够高\n```\n\n###### 3. 消息对象 类型\n\n一个消息对象 可以将 其他消息对象类型 用作字段类型，情况如下：\n\n![](media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS04Nzc5YmMwOWE1M2ViNDBjLnBuZw.png)\n\n- **使用 内部消息类型**\n\n  - 先在 消息类型 中定义 其他消息类型 ，然后再使用\n\n  ```protobuf\n  message Person {\n    required string name = 1;\n    required int32 id = 2;\n    optional string email = 3;\n  \n  // 该消息类型 定义在 Person消息类型的内部\n  // 即Person消息类型 是 PhoneNumber消息类型的父消息类型\n    message PhoneNumber {\n      required string number = 1;\n    }\n  \n    repeated PhoneNumber phone = 4;\n    // 直接使用内部消息类型\n  }\n  ```\n\n- **使用** **外部消息类型**\n\n  - 即外部重用，需要 用作字段类型的消息类型 定义在 该消息类型外部\n\n  ```protobuf\n  message Person {\n    required string name = 1;\n    required int32 id = 2;\n    optional string email = 3;\n  }\n  \n  message AddressBook {\n    repeated Person person = 1;\n    // 直接使用了 Person消息类型作为消息字段\n  }\n  ```\n\n- **使用** **外部消息的内部消息类型**\n\n  ```protobuf\n  message Person {\n    required string name = 1;\n    required int32 id = 2;\n    optional string email = 3;\n  \n  // PhoneNumber消息类型 是 Person消息类型的内部消息类型\n    message PhoneNumber {\n      required string number = 1;\n      optional PhoneType type = 2 [default = HOME];\n    }\n  }\n  \n  // 若父消息类型外部的消息类型需要重用该内部消息类型\n  // 需要以 Parent.Type 的形式去使用\n  // Parent = 需要使用消息类型的父消息类型，Type = 需要使用的消息类型\n  \n  // PhoneNumber父消息类型Person 的外部 OtherMessage消息类型 需要使用 PhoneNumber消息类型\n  message OtherMessage {\n    optional Person.PhoneNumber phonenumber = 1;\n  // 以 Parent.Type = Person.PhoneNumber  的形式去使用\n  \n  }\n  ```\n\n- **使用不同** .**proto** **文件里的消息类型**\n\n  - 目的：需要在 `A.proto`文件 使用 `B.proto`文件里的消息类型\n\n  - 解决方案：在 `A.proto`文件 通过导入（ `import`） `B.proto`文件中来使用 `B.proto`文件 里的消息类型\n\n    ```protobuf\n    import \"myproject/other_protos.proto\"\n    // 在A.proto 文件中添加 B.proto文件路径的导入声明\n    // ProtocolBuffer编译器 会在 该目录中 查找需要被导入的 .proto文件\n    // 如果不提供参数，编译器就在 其调用的目录下 查找\n    ```\n\n    ","slug":"C++/Protocol_Buffers基本使用","published":1,"updated":"2023-08-25T08:45:40.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66x0012gcr7gyig5gb8","content":"<h1 id=\"Protocol-Buffers基本使用\"><a href=\"#Protocol-Buffers基本使用\" class=\"headerlink\" title=\"Protocol Buffers基本使用\"></a>Protocol Buffers基本使用</h1><blockquote>\n<ul>\n<li>Protocol Buffer 和 XML、JSON一样都是结构数据序列化的工具，但它们的数据格式有比较大的区别：<ul>\n<li>首先，Protocol Buffer 序列化之后得到的数据不是可读的字符串，而是二进制流</li>\n<li>其次，XML 和 JSON 格式的数据信息都包含在了序列化之后的数据中，不需要任何其它信息就能还原序列化之后的数据；但使用 Protocol Buffer 需要事先定义数据的格式(.proto 协议文件)，还原一个序列化之后的数据需要使用到这个定义好的数据格式</li>\n<li>最后，在传输数据量较大的需求场景下，Protocol Buffer 比 XML、JSON 更小（3到10倍）、更快（20到100倍）、使用 &amp; 维护更简单；而且 Protocol Buffer 可以跨平台、跨语音使用</li>\n</ul>\n</li>\n<li>Protobuf 安装：<ul>\n<li>安装 protobuf： apt-get install protobuf-compiler</li>\n<li>安装 protobuf 的 python 模块：pip3 install protobuf&#x3D;&#x3D;3.13.0</li>\n<li>源码方式安装：可参考 Protobuf 安装及使用 &amp;&amp; <a href=\"https://github.com/protocolbuffers/protobuf/blob/main/src/README.md\">https://github.com/protocolbuffers/protobuf/blob/main/src/README.md</a></li>\n</ul>\n</li>\n<li>Protobuf 版本查看：<ul>\n<li>protoc –version</li>\n<li>import google.protobuf as gp, gp.<strong>version</strong></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"Protocol-Buffer-的作用\"><a href=\"#Protocol-Buffer-的作用\" class=\"headerlink\" title=\"Protocol Buffer 的作用\"></a>Protocol Buffer 的作用</h2><ul>\n<li>通过将结构化的数据（拥有多种属性）进行序列化，从而实现（内存与硬盘之间）数据存储和交换的功能<ul>\n<li>序列化： 按照 <code>.proto</code> 协议文件将<code>数据结构或对象</code>转换成<code>二进制流</code>的过程</li>\n<li>反序列化：将在序列化过程中所生成的<code>二进制流</code>转换成<code>数据结构或对象</code>的过程</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1hOWIzZmMyZWQxNmY2MWU1LnBuZw\" alt=\"Protocol Buffer 特点\"></p>\n<h2 id=\"Protocol-Buffer-语法\"><a href=\"#Protocol-Buffer-语法\" class=\"headerlink\" title=\"Protocol Buffer 语法\"></a>Protocol Buffer 语法</h2><p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS01NjYzNTk5ZTg0MzNmNWI4LnBuZw.png\"></p>\n<h3 id=\"关注1：包名\"><a href=\"#关注1：包名\" class=\"headerlink\" title=\"关注1：包名\"></a>关注1：包名</h3><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> protocobuff_Demo;</span><br><span class=\"line\"><span class=\"comment\">// 关注1：包名</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>作用：防止不同 .proto 项目间命名 发生冲突</p>\n</li>\n<li><p>Protocol buffer包的解析过程如下：</p>\n<ol>\n<li>Protocol buffer 的类型名称解析与 C++ 一致：从 最内部 开始查找，依次向外进行每个包会被看作是其父类包的内部类</li>\n<li>Protocol buffer 编译器会解析 .proto文件中定义的所有类型名</li>\n<li>生成器会根据 不同语言 生成 对应语言 的代码文件</li>\n</ol>\n<blockquote>\n<p>a. 即对 不同语言 使用了 不同的规则 进行处理</p>\n<p>b. Protoco Buffer提供 C++、Java、Python 三种语言的 API</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"关注2：Option选项\"><a href=\"#关注2：Option选项\" class=\"headerlink\" title=\"关注2：Option选项\"></a>关注2：Option选项</h3><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">option</span> java_package = <span class=\"string\">&quot;com.carson.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">option</span> java_outer_classname = <span class=\"string\">&quot;Demo&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 关注2：option选项</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>作用：影响 特定环境下 的处理方式</p>\n</li>\n<li><p>常用Option选项如下：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">option</span> java_package = <span class=\"string\">&quot;com.carson.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义：Java包名</span></span><br><span class=\"line\"><span class=\"comment\">// 作用：指定生成的类应该放在什么Java包名下</span></span><br><span class=\"line\"><span class=\"comment\">// 注：如不显式指定，默认包名为：按照应用名称倒序方式进行排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> java_outer_classname = <span class=\"string\">&quot;Demo&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义：类名</span></span><br><span class=\"line\"><span class=\"comment\">// 作用：生成对应.java 文件的类名（不能跟下面message的类名相同）</span></span><br><span class=\"line\"><span class=\"comment\">// 注：如不显式指定，则默认为把.proto文件名转换为首字母大写来生成</span></span><br><span class=\"line\"><span class=\"comment\">// 如.proto文件名=&quot;my_proto.proto&quot;，默认情况下，将使用 &quot;MyProto&quot; 做为类名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> optimize_for = ***;</span><br><span class=\"line\"><span class=\"comment\">// 作用：影响 C++  &amp; java 代码的生成</span></span><br><span class=\"line\"><span class=\"comment\">// ***参数如下：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. SPEED (默认):：protocol buffer编译器将通过在消息类型上执行序列化、语法分析及其他通用的操作。（最优方式）</span></span><br><span class=\"line\"><span class=\"comment\">// 2. CODE_SIZE:：编译器将会产生最少量的类，通过共享或基于反射的代码来实现序列化、语法分析及各种其它操作。</span></span><br><span class=\"line\">  <span class=\"comment\">// 特点：采用该方式产生的代码将比SPEED要少很多， 但是效率较低；</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用场景：常用在 包含大量.proto文件 但 不追求效率 的应用中。</span></span><br><span class=\"line\"><span class=\"comment\">//3.  LITE_RUNTIME:：编译器依赖于运行时 核心类库 来生成代码（即采用libprotobuf-lite 替代libprotobuf）。</span></span><br><span class=\"line\">  <span class=\"comment\">// 特点：这种核心类库要比全类库小得多（忽略了 一些描述符及反射 ）；编译器采用该模式产生的方法实现与SPEED模式不相上下，产生的类通过实现 MessageLite接口，但它仅仅是Messager接口的一个子集。</span></span><br><span class=\"line\">  <span class=\"comment\">// 应用场景：移动手机平台应用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> cc_generic_services = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">option</span> java_generic_services = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">option</span> py_generic_services = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// 作用：定义在C++、java、python中，protocol buffer编译器是否应该 基于服务定义 产生 抽象服务代码（2.3.0版本前该值默认 = true）</span></span><br><span class=\"line\"><span class=\"comment\">// 自2.3.0版本以来，官方认为通过提供 代码生成器插件 来对 RPC实现 更可取，而不是依赖于“抽象”服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"keyword\">repeated</span> <span class=\"type\">int32</span> samples = <span class=\"number\">4</span> [packed=<span class=\"literal\">true</span>];</span><br><span class=\"line\"><span class=\"comment\">// 如果该选项在一个整型基本类型上被设置为真，则采用更紧凑的编码方式（不会对数值造成损失）</span></span><br><span class=\"line\"><span class=\"comment\">// 在2.3.0版本前，解析器将会忽略 非期望的包装值。因此，它不可能在 不破坏现有框架的兼容性上 而 改变压缩格式。</span></span><br><span class=\"line\"><span class=\"comment\">// 在2.3.0之后，这种改变将是安全的，解析器能够接受上述两种格式。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"type\">int32</span> old_field = <span class=\"number\">6</span> [deprecated=<span class=\"literal\">true</span>];</span><br><span class=\"line\"><span class=\"comment\">// 作用：判断该字段是否已经被弃用</span></span><br><span class=\"line\"><span class=\"comment\">// 作用同 在java中的注解@Deprecated</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"关注3：消息模型\"><a href=\"#关注3：消息模型\" class=\"headerlink\" title=\"关注3：消息模型\"></a>关注3：消息模型</h3><ul>\n<li>作用：真正用于描述 数据结构</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 消息对象用message修饰</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">    MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">    WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> PhoneType type = <span class=\"number\">2</span> [default = HOME];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> PhoneNumber phone = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">AddressBook</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Person person = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>组成：在ProtocolBuffers中：<ol>\n<li>一个 <code>.proto</code> 消息模型 &#x3D; 一个 <code>.proto</code>文件 &#x3D; 消息对象 + 字段</li>\n<li>一个消息对象（<code>Message</code>） &#x3D; 一个 结构化数据</li>\n<li>消息对象（<code>Message</code>）里的 字段 &#x3D; 结构化数据 里的成员变量</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png\"></p>\n<p>下面会详细介绍 <code>.proto</code> 消息模型里的 消息对象 &amp; 字段</p>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGJhY2Q4N2Y0NDlkYmI4LnBuZw.png\"></p>\n<h4 id=\"1-消息对象\"><a href=\"#1-消息对象\" class=\"headerlink\" title=\"1. 消息对象\"></a>1. 消息对象</h4><p>在 <code>ProtocolBuffers</code> 中：</p>\n<ul>\n<li>一个消息对象（<code>Message</code>） &#x3D; 一个 结构化数据</li>\n<li>消息对象用 修饰符 <code>message</code> 修饰</li>\n<li>消息对象 含有 字段：消息对象（<code>Message</code>）里的 字段 &#x3D; 结构化数据 里的成员变量</li>\n</ul>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png\"></p>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iNDg4YzYyMDk0NTE2ZTBjLnBuZw.png\"></p>\n<h5 id=\"a-添加：在一个-proto文件-中可定义多个-消息对象\"><a href=\"#a-添加：在一个-proto文件-中可定义多个-消息对象\" class=\"headerlink\" title=\"a. 添加：在一个 .proto文件 中可定义多个 消息对象\"></a>a. 添加：在一个 .proto文件 中可定义多个 消息对象</h5><ul>\n<li>应用场景：尽可能将与 某一消息类型 对应的响应消息格式 定义到相同的 <code>.proto</code>文件 中</li>\n<li>实例：</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchRequest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> query = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">int32</span> page_number = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">int32</span> result_per_page = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 与SearchRequest消息类型 对应的 响应消息类型SearchResponse</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchResponse</span> &#123;</span><br><span class=\"line\"> …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"b-一个消息对象-里-可以定义-另外一个消息对象（即嵌套）\"><a href=\"#b-一个消息对象-里-可以定义-另外一个消息对象（即嵌套）\" class=\"headerlink\" title=\"b. 一个消息对象 里 可以定义 另外一个消息对象（即嵌套）\"></a>b. 一个消息对象 里 可以定义 另外一个消息对象（即嵌套）</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message Person &#123;</span><br><span class=\"line\">  required string name = 1;</span><br><span class=\"line\">  required int32 id = 2;</span><br><span class=\"line\">  optional string email = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">// 该消息类型 定义在 Person消息类型的内部</span><br><span class=\"line\">// 即Person消息类型 是 PhoneNumber消息类型的父消息类型</span><br><span class=\"line\">  message PhoneNumber &#123;</span><br><span class=\"line\">    required string number = 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;-- 多重嵌套 --&gt;</span><br><span class=\"line\">message Outer &#123;   // Level 0</span><br><span class=\"line\">  message MiddleAA &#123;  // Level 1</span><br><span class=\"line\">    message Inner &#123;   // Level 2</span><br><span class=\"line\">      required int64 ival = 1;</span><br><span class=\"line\">      optional bool  booly = 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-字段\"><a href=\"#2-字段\" class=\"headerlink\" title=\"2. 字段\"></a>2. 字段</h4><ul>\n<li>消息对象的字段 组成主要是：<strong>字段 &#x3D; 字段修饰符 + 字段类型 +字段名 +标识号</strong></li>\n</ul>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGI3ZTczMjExYjRjODliLnBuZw.png\"></p>\n<h5 id=\"a-字段修饰符\"><a href=\"#a-字段修饰符\" class=\"headerlink\" title=\"a. 字段修饰符\"></a><strong>a. 字段修饰符</strong></h5><ul>\n<li><p>作用：设置该字段解析时的规则</p>\n</li>\n<li><p>具体类型如下：</p>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iZjE3MjU0NTIwOWI4N2UxLnBuZw.png\"></p>\n</li>\n</ul>\n<p><strong>b. 字段类型</strong><br>字段类型主要有 三 类：</p>\n<ul>\n<li>基本数据 类型</li>\n<li>枚举 类型</li>\n<li>消息对象 类型</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 基本数据类型 字段</span></span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">    MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">    WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> PhoneType type = <span class=\"number\">2</span> [default = HOME];</span><br><span class=\"line\">    <span class=\"comment\">// 枚举类型 字段</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> PhoneNumber phone = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 消息类型 字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1.基本数据类型\"></a>1.基本数据类型</h6><table>\n<thead>\n<tr>\n<th>.proto中的类型</th>\n<th>注意</th>\n<th>C++中类型</th>\n<th>java中类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>double</td>\n<td></td>\n<td>double</td>\n<td>double</td>\n</tr>\n<tr>\n<td>float</td>\n<td></td>\n<td>float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>自动调整编码长度，如果需要保存负数，请使用sint32</td>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>int64</td>\n<td>自动调整编码长度，如果需要保存负数，请使用sint64</td>\n<td>int64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>uint32</td>\n<td>自动调整编码长度</td>\n<td>uint32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>uint64</td>\n<td>自动调整编码长度</td>\n<td>uint64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>sint32</td>\n<td>自动调整编码长度，表示有符号数，负数的编码效率高于int32</td>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>sint64</td>\n<td>自动调整编码长度，表示有符号数，负数的编码效率高于int64</td>\n<td>int64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>fixed32</td>\n<td>固定使用4bytes编码，在编码大数(228228)的时候比uint32更有效率</td>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>fixed32</td>\n<td>固定使用8bytes编码，在编码大数(256256)的时候比uint64更有效率</td>\n<td>int42</td>\n<td>long</td>\n</tr>\n<tr>\n<td>sfixed32</td>\n<td>固定使用4bytes编码</td>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>sfixed64</td>\n<td>固定使用8bytes编码</td>\n<td>int64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>bool</td>\n<td></td>\n<td>bool</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>string</td>\n<td>string只能包含UTF-8和7-bit ASCII文本</td>\n<td>string</td>\n<td>String</td>\n</tr>\n<tr>\n<td>bytes</td>\n<td>包含任意长度的bytes</td>\n<td>string</td>\n<td>ByteString</td>\n</tr>\n</tbody></table>\n<h6 id=\"2-枚举类型\"><a href=\"#2-枚举类型\" class=\"headerlink\" title=\"2. 枚举类型\"></a>2. 枚举类型</h6><ul>\n<li>作用：为字段指定一个 可能取值的字段集合</li>\n</ul>\n<blockquote>\n<p>该字段只能从 该指定的字段集合里 取值</p>\n</blockquote>\n<ul>\n<li>说明：如下面例子，电话号码 可能是手机号、家庭电话号或工作电话号的其中一个，那么就将<code>PhoneType</code>定义为枚举类型，并将加入电话的集合（ <code>MOBILE</code>、 <code>HOME</code>、<code>WORK</code>）</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 枚举类型需要先定义才能进行使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举类型 定义</span></span><br><span class=\"line\"> <span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">    MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">    WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 电话类型字段 只能从 这个集合里 取值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 特别注意：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 枚举类型的定义可在一个消息对象的内部或外部</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 都可以在 同一.proto文件 中的任何消息对象里使用</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 当枚举类型是在一消息内部定义，希望在 另一个消息中 使用时，需要采用MessageType.EnumType的语法格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> PhoneType type = <span class=\"number\">2</span> [default = HOME];</span><br><span class=\"line\">    <span class=\"comment\">// 使用枚举类型的字段（设置了默认值）</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 特别注意：</span></span><br><span class=\"line\"><span class=\"comment\">// 1.  枚举常量必须在32位整型值的范围内</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 不推荐在enum中使用负数：因为enum值是使用可变编码方式的，对负数不够高</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-消息对象-类型\"><a href=\"#3-消息对象-类型\" class=\"headerlink\" title=\"3. 消息对象 类型\"></a>3. 消息对象 类型</h6><p>一个消息对象 可以将 其他消息对象类型 用作字段类型，情况如下：</p>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS04Nzc5YmMwOWE1M2ViNDBjLnBuZw.png\"></p>\n<ul>\n<li><p><strong>使用 内部消息类型</strong></p>\n<ul>\n<li>先在 消息类型 中定义 其他消息类型 ，然后再使用</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该消息类型 定义在 Person消息类型的内部</span></span><br><span class=\"line\"><span class=\"comment\">// 即Person消息类型 是 PhoneNumber消息类型的父消息类型</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> PhoneNumber phone = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 直接使用内部消息类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用</strong> <strong>外部消息类型</strong></p>\n<ul>\n<li>即外部重用，需要 用作字段类型的消息类型 定义在 该消息类型外部</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">AddressBook</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Person person = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 直接使用了 Person消息类型作为消息字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用</strong> <strong>外部消息的内部消息类型</strong></p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PhoneNumber消息类型 是 Person消息类型的内部消息类型</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> PhoneType type = <span class=\"number\">2</span> [default = HOME];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 若父消息类型外部的消息类型需要重用该内部消息类型</span></span><br><span class=\"line\"><span class=\"comment\">// 需要以 Parent.Type 的形式去使用</span></span><br><span class=\"line\"><span class=\"comment\">// Parent = 需要使用消息类型的父消息类型，Type = 需要使用的消息类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PhoneNumber父消息类型Person 的外部 OtherMessage消息类型 需要使用 PhoneNumber消息类型</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">OtherMessage</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> Person.PhoneNumber phonenumber = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 以 Parent.Type = Person.PhoneNumber  的形式去使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用不同</strong> .<strong>proto</strong> <strong>文件里的消息类型</strong></p>\n<ul>\n<li><p>目的：需要在 <code>A.proto</code>文件 使用 <code>B.proto</code>文件里的消息类型</p>\n</li>\n<li><p>解决方案：在 <code>A.proto</code>文件 通过导入（ <code>import</code>） <code>B.proto</code>文件中来使用 <code>B.proto</code>文件 里的消息类型</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;myproject/other_protos.proto&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 在A.proto 文件中添加 B.proto文件路径的导入声明</span></span><br><span class=\"line\"><span class=\"comment\">// ProtocolBuffer编译器 会在 该目录中 查找需要被导入的 .proto文件</span></span><br><span class=\"line\"><span class=\"comment\">// 如果不提供参数，编译器就在 其调用的目录下 查找</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Protocol-Buffers基本使用\"><a href=\"#Protocol-Buffers基本使用\" class=\"headerlink\" title=\"Protocol Buffers基本使用\"></a>Protocol Buffers基本使用</h1><blockquote>\n<ul>\n<li>Protocol Buffer 和 XML、JSON一样都是结构数据序列化的工具，但它们的数据格式有比较大的区别：<ul>\n<li>首先，Protocol Buffer 序列化之后得到的数据不是可读的字符串，而是二进制流</li>\n<li>其次，XML 和 JSON 格式的数据信息都包含在了序列化之后的数据中，不需要任何其它信息就能还原序列化之后的数据；但使用 Protocol Buffer 需要事先定义数据的格式(.proto 协议文件)，还原一个序列化之后的数据需要使用到这个定义好的数据格式</li>\n<li>最后，在传输数据量较大的需求场景下，Protocol Buffer 比 XML、JSON 更小（3到10倍）、更快（20到100倍）、使用 &amp; 维护更简单；而且 Protocol Buffer 可以跨平台、跨语音使用</li>\n</ul>\n</li>\n<li>Protobuf 安装：<ul>\n<li>安装 protobuf： apt-get install protobuf-compiler</li>\n<li>安装 protobuf 的 python 模块：pip3 install protobuf&#x3D;&#x3D;3.13.0</li>\n<li>源码方式安装：可参考 Protobuf 安装及使用 &amp;&amp; <a href=\"https://github.com/protocolbuffers/protobuf/blob/main/src/README.md\">https://github.com/protocolbuffers/protobuf/blob/main/src/README.md</a></li>\n</ul>\n</li>\n<li>Protobuf 版本查看：<ul>\n<li>protoc –version</li>\n<li>import google.protobuf as gp, gp.<strong>version</strong></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"Protocol-Buffer-的作用\"><a href=\"#Protocol-Buffer-的作用\" class=\"headerlink\" title=\"Protocol Buffer 的作用\"></a>Protocol Buffer 的作用</h2><ul>\n<li>通过将结构化的数据（拥有多种属性）进行序列化，从而实现（内存与硬盘之间）数据存储和交换的功能<ul>\n<li>序列化： 按照 <code>.proto</code> 协议文件将<code>数据结构或对象</code>转换成<code>二进制流</code>的过程</li>\n<li>反序列化：将在序列化过程中所生成的<code>二进制流</code>转换成<code>数据结构或对象</code>的过程</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1hOWIzZmMyZWQxNmY2MWU1LnBuZw\" alt=\"Protocol Buffer 特点\"></p>\n<h2 id=\"Protocol-Buffer-语法\"><a href=\"#Protocol-Buffer-语法\" class=\"headerlink\" title=\"Protocol Buffer 语法\"></a>Protocol Buffer 语法</h2><p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS01NjYzNTk5ZTg0MzNmNWI4LnBuZw.png\"></p>\n<h3 id=\"关注1：包名\"><a href=\"#关注1：包名\" class=\"headerlink\" title=\"关注1：包名\"></a>关注1：包名</h3><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> protocobuff_Demo;</span><br><span class=\"line\"><span class=\"comment\">// 关注1：包名</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>作用：防止不同 .proto 项目间命名 发生冲突</p>\n</li>\n<li><p>Protocol buffer包的解析过程如下：</p>\n<ol>\n<li>Protocol buffer 的类型名称解析与 C++ 一致：从 最内部 开始查找，依次向外进行每个包会被看作是其父类包的内部类</li>\n<li>Protocol buffer 编译器会解析 .proto文件中定义的所有类型名</li>\n<li>生成器会根据 不同语言 生成 对应语言 的代码文件</li>\n</ol>\n<blockquote>\n<p>a. 即对 不同语言 使用了 不同的规则 进行处理</p>\n<p>b. Protoco Buffer提供 C++、Java、Python 三种语言的 API</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"关注2：Option选项\"><a href=\"#关注2：Option选项\" class=\"headerlink\" title=\"关注2：Option选项\"></a>关注2：Option选项</h3><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">option</span> java_package = <span class=\"string\">&quot;com.carson.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">option</span> java_outer_classname = <span class=\"string\">&quot;Demo&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 关注2：option选项</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>作用：影响 特定环境下 的处理方式</p>\n</li>\n<li><p>常用Option选项如下：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">option</span> java_package = <span class=\"string\">&quot;com.carson.proto&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义：Java包名</span></span><br><span class=\"line\"><span class=\"comment\">// 作用：指定生成的类应该放在什么Java包名下</span></span><br><span class=\"line\"><span class=\"comment\">// 注：如不显式指定，默认包名为：按照应用名称倒序方式进行排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> java_outer_classname = <span class=\"string\">&quot;Demo&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义：类名</span></span><br><span class=\"line\"><span class=\"comment\">// 作用：生成对应.java 文件的类名（不能跟下面message的类名相同）</span></span><br><span class=\"line\"><span class=\"comment\">// 注：如不显式指定，则默认为把.proto文件名转换为首字母大写来生成</span></span><br><span class=\"line\"><span class=\"comment\">// 如.proto文件名=&quot;my_proto.proto&quot;，默认情况下，将使用 &quot;MyProto&quot; 做为类名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> optimize_for = ***;</span><br><span class=\"line\"><span class=\"comment\">// 作用：影响 C++  &amp; java 代码的生成</span></span><br><span class=\"line\"><span class=\"comment\">// ***参数如下：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. SPEED (默认):：protocol buffer编译器将通过在消息类型上执行序列化、语法分析及其他通用的操作。（最优方式）</span></span><br><span class=\"line\"><span class=\"comment\">// 2. CODE_SIZE:：编译器将会产生最少量的类，通过共享或基于反射的代码来实现序列化、语法分析及各种其它操作。</span></span><br><span class=\"line\">  <span class=\"comment\">// 特点：采用该方式产生的代码将比SPEED要少很多， 但是效率较低；</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用场景：常用在 包含大量.proto文件 但 不追求效率 的应用中。</span></span><br><span class=\"line\"><span class=\"comment\">//3.  LITE_RUNTIME:：编译器依赖于运行时 核心类库 来生成代码（即采用libprotobuf-lite 替代libprotobuf）。</span></span><br><span class=\"line\">  <span class=\"comment\">// 特点：这种核心类库要比全类库小得多（忽略了 一些描述符及反射 ）；编译器采用该模式产生的方法实现与SPEED模式不相上下，产生的类通过实现 MessageLite接口，但它仅仅是Messager接口的一个子集。</span></span><br><span class=\"line\">  <span class=\"comment\">// 应用场景：移动手机平台应用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">option</span> cc_generic_services = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">option</span> java_generic_services = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">option</span> py_generic_services = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// 作用：定义在C++、java、python中，protocol buffer编译器是否应该 基于服务定义 产生 抽象服务代码（2.3.0版本前该值默认 = true）</span></span><br><span class=\"line\"><span class=\"comment\">// 自2.3.0版本以来，官方认为通过提供 代码生成器插件 来对 RPC实现 更可取，而不是依赖于“抽象”服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"keyword\">repeated</span> <span class=\"type\">int32</span> samples = <span class=\"number\">4</span> [packed=<span class=\"literal\">true</span>];</span><br><span class=\"line\"><span class=\"comment\">// 如果该选项在一个整型基本类型上被设置为真，则采用更紧凑的编码方式（不会对数值造成损失）</span></span><br><span class=\"line\"><span class=\"comment\">// 在2.3.0版本前，解析器将会忽略 非期望的包装值。因此，它不可能在 不破坏现有框架的兼容性上 而 改变压缩格式。</span></span><br><span class=\"line\"><span class=\"comment\">// 在2.3.0之后，这种改变将是安全的，解析器能够接受上述两种格式。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">optional</span> <span class=\"type\">int32</span> old_field = <span class=\"number\">6</span> [deprecated=<span class=\"literal\">true</span>];</span><br><span class=\"line\"><span class=\"comment\">// 作用：判断该字段是否已经被弃用</span></span><br><span class=\"line\"><span class=\"comment\">// 作用同 在java中的注解@Deprecated</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"关注3：消息模型\"><a href=\"#关注3：消息模型\" class=\"headerlink\" title=\"关注3：消息模型\"></a>关注3：消息模型</h3><ul>\n<li>作用：真正用于描述 数据结构</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 消息对象用message修饰</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">    MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">    WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> PhoneType type = <span class=\"number\">2</span> [default = HOME];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> PhoneNumber phone = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">AddressBook</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Person person = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>组成：在ProtocolBuffers中：<ol>\n<li>一个 <code>.proto</code> 消息模型 &#x3D; 一个 <code>.proto</code>文件 &#x3D; 消息对象 + 字段</li>\n<li>一个消息对象（<code>Message</code>） &#x3D; 一个 结构化数据</li>\n<li>消息对象（<code>Message</code>）里的 字段 &#x3D; 结构化数据 里的成员变量</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png\"></p>\n<p>下面会详细介绍 <code>.proto</code> 消息模型里的 消息对象 &amp; 字段</p>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGJhY2Q4N2Y0NDlkYmI4LnBuZw.png\"></p>\n<h4 id=\"1-消息对象\"><a href=\"#1-消息对象\" class=\"headerlink\" title=\"1. 消息对象\"></a>1. 消息对象</h4><p>在 <code>ProtocolBuffers</code> 中：</p>\n<ul>\n<li>一个消息对象（<code>Message</code>） &#x3D; 一个 结构化数据</li>\n<li>消息对象用 修饰符 <code>message</code> 修饰</li>\n<li>消息对象 含有 字段：消息对象（<code>Message</code>）里的 字段 &#x3D; 结构化数据 里的成员变量</li>\n</ul>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS0wM2ViZDRkZjlkZTVkNTU1LnBuZw.png\"></p>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iNDg4YzYyMDk0NTE2ZTBjLnBuZw.png\"></p>\n<h5 id=\"a-添加：在一个-proto文件-中可定义多个-消息对象\"><a href=\"#a-添加：在一个-proto文件-中可定义多个-消息对象\" class=\"headerlink\" title=\"a. 添加：在一个 .proto文件 中可定义多个 消息对象\"></a>a. 添加：在一个 .proto文件 中可定义多个 消息对象</h5><ul>\n<li>应用场景：尽可能将与 某一消息类型 对应的响应消息格式 定义到相同的 <code>.proto</code>文件 中</li>\n<li>实例：</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchRequest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> query = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">int32</span> page_number = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">int32</span> result_per_page = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 与SearchRequest消息类型 对应的 响应消息类型SearchResponse</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">SearchResponse</span> &#123;</span><br><span class=\"line\"> …</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"b-一个消息对象-里-可以定义-另外一个消息对象（即嵌套）\"><a href=\"#b-一个消息对象-里-可以定义-另外一个消息对象（即嵌套）\" class=\"headerlink\" title=\"b. 一个消息对象 里 可以定义 另外一个消息对象（即嵌套）\"></a>b. 一个消息对象 里 可以定义 另外一个消息对象（即嵌套）</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message Person &#123;</span><br><span class=\"line\">  required string name = 1;</span><br><span class=\"line\">  required int32 id = 2;</span><br><span class=\"line\">  optional string email = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">// 该消息类型 定义在 Person消息类型的内部</span><br><span class=\"line\">// 即Person消息类型 是 PhoneNumber消息类型的父消息类型</span><br><span class=\"line\">  message PhoneNumber &#123;</span><br><span class=\"line\">    required string number = 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;-- 多重嵌套 --&gt;</span><br><span class=\"line\">message Outer &#123;   // Level 0</span><br><span class=\"line\">  message MiddleAA &#123;  // Level 1</span><br><span class=\"line\">    message Inner &#123;   // Level 2</span><br><span class=\"line\">      required int64 ival = 1;</span><br><span class=\"line\">      optional bool  booly = 2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-字段\"><a href=\"#2-字段\" class=\"headerlink\" title=\"2. 字段\"></a>2. 字段</h4><ul>\n<li>消息对象的字段 组成主要是：<strong>字段 &#x3D; 字段修饰符 + 字段类型 +字段名 +标识号</strong></li>\n</ul>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS03ZGI3ZTczMjExYjRjODliLnBuZw.png\"></p>\n<h5 id=\"a-字段修饰符\"><a href=\"#a-字段修饰符\" class=\"headerlink\" title=\"a. 字段修饰符\"></a><strong>a. 字段修饰符</strong></h5><ul>\n<li><p>作用：设置该字段解析时的规则</p>\n</li>\n<li><p>具体类型如下：</p>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS1iZjE3MjU0NTIwOWI4N2UxLnBuZw.png\"></p>\n</li>\n</ul>\n<p><strong>b. 字段类型</strong><br>字段类型主要有 三 类：</p>\n<ul>\n<li>基本数据 类型</li>\n<li>枚举 类型</li>\n<li>消息对象 类型</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 基本数据类型 字段</span></span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">    MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">    WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> PhoneType type = <span class=\"number\">2</span> [default = HOME];</span><br><span class=\"line\">    <span class=\"comment\">// 枚举类型 字段</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> PhoneNumber phone = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 消息类型 字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1.基本数据类型\"></a>1.基本数据类型</h6><table>\n<thead>\n<tr>\n<th>.proto中的类型</th>\n<th>注意</th>\n<th>C++中类型</th>\n<th>java中类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>double</td>\n<td></td>\n<td>double</td>\n<td>double</td>\n</tr>\n<tr>\n<td>float</td>\n<td></td>\n<td>float</td>\n<td>float</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>自动调整编码长度，如果需要保存负数，请使用sint32</td>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>int64</td>\n<td>自动调整编码长度，如果需要保存负数，请使用sint64</td>\n<td>int64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>uint32</td>\n<td>自动调整编码长度</td>\n<td>uint32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>uint64</td>\n<td>自动调整编码长度</td>\n<td>uint64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>sint32</td>\n<td>自动调整编码长度，表示有符号数，负数的编码效率高于int32</td>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>sint64</td>\n<td>自动调整编码长度，表示有符号数，负数的编码效率高于int64</td>\n<td>int64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>fixed32</td>\n<td>固定使用4bytes编码，在编码大数(228228)的时候比uint32更有效率</td>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>fixed32</td>\n<td>固定使用8bytes编码，在编码大数(256256)的时候比uint64更有效率</td>\n<td>int42</td>\n<td>long</td>\n</tr>\n<tr>\n<td>sfixed32</td>\n<td>固定使用4bytes编码</td>\n<td>int32</td>\n<td>int</td>\n</tr>\n<tr>\n<td>sfixed64</td>\n<td>固定使用8bytes编码</td>\n<td>int64</td>\n<td>long</td>\n</tr>\n<tr>\n<td>bool</td>\n<td></td>\n<td>bool</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>string</td>\n<td>string只能包含UTF-8和7-bit ASCII文本</td>\n<td>string</td>\n<td>String</td>\n</tr>\n<tr>\n<td>bytes</td>\n<td>包含任意长度的bytes</td>\n<td>string</td>\n<td>ByteString</td>\n</tr>\n</tbody></table>\n<h6 id=\"2-枚举类型\"><a href=\"#2-枚举类型\" class=\"headerlink\" title=\"2. 枚举类型\"></a>2. 枚举类型</h6><ul>\n<li>作用：为字段指定一个 可能取值的字段集合</li>\n</ul>\n<blockquote>\n<p>该字段只能从 该指定的字段集合里 取值</p>\n</blockquote>\n<ul>\n<li>说明：如下面例子，电话号码 可能是手机号、家庭电话号或工作电话号的其中一个，那么就将<code>PhoneType</code>定义为枚举类型，并将加入电话的集合（ <code>MOBILE</code>、 <code>HOME</code>、<code>WORK</code>）</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 枚举类型需要先定义才能进行使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 枚举类型 定义</span></span><br><span class=\"line\"> <span class=\"keyword\">enum </span><span class=\"title class_\">PhoneType</span> &#123;</span><br><span class=\"line\">    MOBILE = <span class=\"number\">0</span>;</span><br><span class=\"line\">    HOME = <span class=\"number\">1</span>;</span><br><span class=\"line\">    WORK = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 电话类型字段 只能从 这个集合里 取值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 特别注意：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 枚举类型的定义可在一个消息对象的内部或外部</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 都可以在 同一.proto文件 中的任何消息对象里使用</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 当枚举类型是在一消息内部定义，希望在 另一个消息中 使用时，需要采用MessageType.EnumType的语法格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> PhoneType type = <span class=\"number\">2</span> [default = HOME];</span><br><span class=\"line\">    <span class=\"comment\">// 使用枚举类型的字段（设置了默认值）</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 特别注意：</span></span><br><span class=\"line\"><span class=\"comment\">// 1.  枚举常量必须在32位整型值的范围内</span></span><br><span class=\"line\"><span class=\"comment\">// 2. 不推荐在enum中使用负数：因为enum值是使用可变编码方式的，对负数不够高</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"3-消息对象-类型\"><a href=\"#3-消息对象-类型\" class=\"headerlink\" title=\"3. 消息对象 类型\"></a>3. 消息对象 类型</h6><p>一个消息对象 可以将 其他消息对象类型 用作字段类型，情况如下：</p>\n<p><img src=\"/media/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzk0NDM2NS04Nzc5YmMwOWE1M2ViNDBjLnBuZw.png\"></p>\n<ul>\n<li><p><strong>使用 内部消息类型</strong></p>\n<ul>\n<li>先在 消息类型 中定义 其他消息类型 ，然后再使用</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该消息类型 定义在 Person消息类型的内部</span></span><br><span class=\"line\"><span class=\"comment\">// 即Person消息类型 是 PhoneNumber消息类型的父消息类型</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> PhoneNumber phone = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 直接使用内部消息类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用</strong> <strong>外部消息类型</strong></p>\n<ul>\n<li>即外部重用，需要 用作字段类型的消息类型 定义在 该消息类型外部</li>\n</ul>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">AddressBook</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repeated</span> Person person = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 直接使用了 Person消息类型作为消息字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用</strong> <strong>外部消息的内部消息类型</strong></p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">required</span> <span class=\"type\">int32</span> id = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> <span class=\"type\">string</span> email = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PhoneNumber消息类型 是 Person消息类型的内部消息类型</span></span><br><span class=\"line\">  <span class=\"keyword\">message </span><span class=\"title class_\">PhoneNumber</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">required</span> <span class=\"type\">string</span> number = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">optional</span> PhoneType type = <span class=\"number\">2</span> [default = HOME];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 若父消息类型外部的消息类型需要重用该内部消息类型</span></span><br><span class=\"line\"><span class=\"comment\">// 需要以 Parent.Type 的形式去使用</span></span><br><span class=\"line\"><span class=\"comment\">// Parent = 需要使用消息类型的父消息类型，Type = 需要使用的消息类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PhoneNumber父消息类型Person 的外部 OtherMessage消息类型 需要使用 PhoneNumber消息类型</span></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">OtherMessage</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">optional</span> Person.PhoneNumber phonenumber = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 以 Parent.Type = Person.PhoneNumber  的形式去使用</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>使用不同</strong> .<strong>proto</strong> <strong>文件里的消息类型</strong></p>\n<ul>\n<li><p>目的：需要在 <code>A.proto</code>文件 使用 <code>B.proto</code>文件里的消息类型</p>\n</li>\n<li><p>解决方案：在 <code>A.proto</code>文件 通过导入（ <code>import</code>） <code>B.proto</code>文件中来使用 <code>B.proto</code>文件 里的消息类型</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;myproject/other_protos.proto&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 在A.proto 文件中添加 B.proto文件路径的导入声明</span></span><br><span class=\"line\"><span class=\"comment\">// ProtocolBuffer编译器 会在 该目录中 查找需要被导入的 .proto文件</span></span><br><span class=\"line\"><span class=\"comment\">// 如果不提供参数，编译器就在 其调用的目录下 查找</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"},{"title":"gflags使用","date":"2023-08-24T14:38:18.625Z","description":null,"top_img":false,"_content":"\n# gflags使用\n\n## 简单用法\n\n### 1.加上 `gflags` 头文件\n\n```\n#include <gflags/gflags.h>\n```\n\n### 2.将需要命令行参数变量进行定义\n\n用法如下：\n\n```\nDEFINE_string(变量名，默认值，描述);\n```\n\n`DEFINE_string` 只是其中一种类型，其他类型还有：\n\n| gflags 定义类型 | 描述             |\n| --------------- | ---------------- |\n| DEFINE_bool     | 布尔类型         |\n| DEFINE_int32    | 32 位整数        |\n| EFINE_int64     | 64 位整数        |\n| DEFINE_uint64   | 无符号 64 位整数 |\n| EFINE_double    | 浮点类型 double  |\n| DEFINE_string   | C++ string 类型  |\n\n### 3.在main函数加入如下解析命令行参数，一般都放在 main 开始位置\n\n```\ngflags::ParseCommandLineFlags(&argc, &argv, true);\n```\n\n### 4.访问参数\n\n```\nstd::cout << \"MYSTR is: \" << FLAGS_mystr << endl;\n```\n\n**注意使用`FLAGS_` + `DEFINE_string` 中申明的变量名即可调用**\n\n### 5.使用\n\n```\ng++ gflags_test.cc -o gflags_test -lgflags -lpthread \t\t#-l 链接库进行编译\n./gflags_test -mystr=\"this is a value of gflags' member \"\t# 使用\nMYSTR is: this is a value of gflags' member  \t\t\t\t# 输出\n```\n\n\n每一种类型的定义和使用都跟上面我们的例子相似，有所不同的是 bool 参数，bool 参数在命令行可以不指定值也可以指定值，假如我们定义了一个 bool 参数 debug_bool，可以在命令行这样指定2：\n\n```\n./gflags_test -debug_bool \t\t# 这样就是 true\n./gflags_test -debug_bool=true\t# 这样也是 true\n./gflags_test -debug_bool=1 \t\t# 这样也是 true\n./gflags_test -debug_bool=false \t# 0是false\n```\n\n## 简单使用实例\n\n```\n#include <iostream>\n#include <gflags/gflags.h>\n\nDEFINE_string(name, \"zhang san\", \"your name\");\nDEFINE_int32(age, 18, \"your age\");\n\nint main(int argc, char** argv) {\n\tgflags::ParseCommandLineFlags(&argc, &argv, true);\n\tstd::cout << \"your name is : \" << FLAGS_name\n        << \", your age is: \" << FLAGS_name << std::endl;\n    return 0;\n}\n```\n\n## 进阶使用\n\n### 1.跨文件调用\n\n如果你想要访问在另一个文件定义的 gflags 变量呢？使用 DECLARE_，它的作用就相当于用 extern 声明变量。为了方便的管理变量，我们推荐在 .cc 或者 .cpp文件中DEFINE 变量，然后只在对应.h 中或者单元测试中 DECLARE 变量。\n\n例如，在foo.cc 定义了一个 gflags 变量 DEFINE_string(name, 'bob', '')，假如你需要在其他文件中使用该变量，那么在 foo.h 中声明 DECLARE_string(name)，然后在使用该变量的文件中 include \"foo.h\" 就可以。当然，这只是为了更好地管理文件关联，如果你不想遵循也是可以的。\n\n## 2.参数检查\n\n使用方法如下：\n\n#### 定义校验函数：\n\n```\nstatic bool ValidatePort(const char* flagname, int32 value) {\n\tif (value > 0 && value < 200)   \n     \treturn true;\n   \tprintf(\"Invalid value for --%s: %d\\n\", flagname, (int)value);\n   \treturn false;\n}\n```\n\n### 使用全局 static 变量来注册函数，static 变量会在 main 函数开始时就调用, 在DEFINE下定义\n\n```\nDEFINE_int32(age, 18, \"your age\");\nstatic const bool port_dummy = gflags::RegisterFlagValidator(&FLAGS_port, &ValidatePort);\n```\n\n### 在输入不合法是就会报错\n\n### 3.flagfile 使用配置文件\n\n在一个配置文件中写上，在此将其命名为 user.flags:\n\n```\n--name=\"zhangsan\"\n--age=18\n```\n\n使用\n\n```\n./gflags_test --flagfile  user.flags \n```\n\n","source":"_posts/C++/gflags使用.md","raw":"---\ntitle: gflags使用\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# gflags使用\n\n## 简单用法\n\n### 1.加上 `gflags` 头文件\n\n```\n#include <gflags/gflags.h>\n```\n\n### 2.将需要命令行参数变量进行定义\n\n用法如下：\n\n```\nDEFINE_string(变量名，默认值，描述);\n```\n\n`DEFINE_string` 只是其中一种类型，其他类型还有：\n\n| gflags 定义类型 | 描述             |\n| --------------- | ---------------- |\n| DEFINE_bool     | 布尔类型         |\n| DEFINE_int32    | 32 位整数        |\n| EFINE_int64     | 64 位整数        |\n| DEFINE_uint64   | 无符号 64 位整数 |\n| EFINE_double    | 浮点类型 double  |\n| DEFINE_string   | C++ string 类型  |\n\n### 3.在main函数加入如下解析命令行参数，一般都放在 main 开始位置\n\n```\ngflags::ParseCommandLineFlags(&argc, &argv, true);\n```\n\n### 4.访问参数\n\n```\nstd::cout << \"MYSTR is: \" << FLAGS_mystr << endl;\n```\n\n**注意使用`FLAGS_` + `DEFINE_string` 中申明的变量名即可调用**\n\n### 5.使用\n\n```\ng++ gflags_test.cc -o gflags_test -lgflags -lpthread \t\t#-l 链接库进行编译\n./gflags_test -mystr=\"this is a value of gflags' member \"\t# 使用\nMYSTR is: this is a value of gflags' member  \t\t\t\t# 输出\n```\n\n\n每一种类型的定义和使用都跟上面我们的例子相似，有所不同的是 bool 参数，bool 参数在命令行可以不指定值也可以指定值，假如我们定义了一个 bool 参数 debug_bool，可以在命令行这样指定2：\n\n```\n./gflags_test -debug_bool \t\t# 这样就是 true\n./gflags_test -debug_bool=true\t# 这样也是 true\n./gflags_test -debug_bool=1 \t\t# 这样也是 true\n./gflags_test -debug_bool=false \t# 0是false\n```\n\n## 简单使用实例\n\n```\n#include <iostream>\n#include <gflags/gflags.h>\n\nDEFINE_string(name, \"zhang san\", \"your name\");\nDEFINE_int32(age, 18, \"your age\");\n\nint main(int argc, char** argv) {\n\tgflags::ParseCommandLineFlags(&argc, &argv, true);\n\tstd::cout << \"your name is : \" << FLAGS_name\n        << \", your age is: \" << FLAGS_name << std::endl;\n    return 0;\n}\n```\n\n## 进阶使用\n\n### 1.跨文件调用\n\n如果你想要访问在另一个文件定义的 gflags 变量呢？使用 DECLARE_，它的作用就相当于用 extern 声明变量。为了方便的管理变量，我们推荐在 .cc 或者 .cpp文件中DEFINE 变量，然后只在对应.h 中或者单元测试中 DECLARE 变量。\n\n例如，在foo.cc 定义了一个 gflags 变量 DEFINE_string(name, 'bob', '')，假如你需要在其他文件中使用该变量，那么在 foo.h 中声明 DECLARE_string(name)，然后在使用该变量的文件中 include \"foo.h\" 就可以。当然，这只是为了更好地管理文件关联，如果你不想遵循也是可以的。\n\n## 2.参数检查\n\n使用方法如下：\n\n#### 定义校验函数：\n\n```\nstatic bool ValidatePort(const char* flagname, int32 value) {\n\tif (value > 0 && value < 200)   \n     \treturn true;\n   \tprintf(\"Invalid value for --%s: %d\\n\", flagname, (int)value);\n   \treturn false;\n}\n```\n\n### 使用全局 static 变量来注册函数，static 变量会在 main 函数开始时就调用, 在DEFINE下定义\n\n```\nDEFINE_int32(age, 18, \"your age\");\nstatic const bool port_dummy = gflags::RegisterFlagValidator(&FLAGS_port, &ValidatePort);\n```\n\n### 在输入不合法是就会报错\n\n### 3.flagfile 使用配置文件\n\n在一个配置文件中写上，在此将其命名为 user.flags:\n\n```\n--name=\"zhangsan\"\n--age=18\n```\n\n使用\n\n```\n./gflags_test --flagfile  user.flags \n```\n\n","slug":"C++/gflags使用","published":1,"updated":"2023-08-25T08:44:23.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66x0015gcr7hul26fi8","content":"<h1 id=\"gflags使用\"><a href=\"#gflags使用\" class=\"headerlink\" title=\"gflags使用\"></a>gflags使用</h1><h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><h3 id=\"1-加上-gflags-头文件\"><a href=\"#1-加上-gflags-头文件\" class=\"headerlink\" title=\"1.加上 gflags 头文件\"></a>1.加上 <code>gflags</code> 头文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;gflags/gflags.h&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-将需要命令行参数变量进行定义\"><a href=\"#2-将需要命令行参数变量进行定义\" class=\"headerlink\" title=\"2.将需要命令行参数变量进行定义\"></a>2.将需要命令行参数变量进行定义</h3><p>用法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEFINE_string(变量名，默认值，描述);</span><br></pre></td></tr></table></figure>\n\n<p><code>DEFINE_string</code> 只是其中一种类型，其他类型还有：</p>\n<table>\n<thead>\n<tr>\n<th>gflags 定义类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DEFINE_bool</td>\n<td>布尔类型</td>\n</tr>\n<tr>\n<td>DEFINE_int32</td>\n<td>32 位整数</td>\n</tr>\n<tr>\n<td>EFINE_int64</td>\n<td>64 位整数</td>\n</tr>\n<tr>\n<td>DEFINE_uint64</td>\n<td>无符号 64 位整数</td>\n</tr>\n<tr>\n<td>EFINE_double</td>\n<td>浮点类型 double</td>\n</tr>\n<tr>\n<td>DEFINE_string</td>\n<td>C++ string 类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-在main函数加入如下解析命令行参数，一般都放在-main-开始位置\"><a href=\"#3-在main函数加入如下解析命令行参数，一般都放在-main-开始位置\" class=\"headerlink\" title=\"3.在main函数加入如下解析命令行参数，一般都放在 main 开始位置\"></a>3.在main函数加入如下解析命令行参数，一般都放在 main 开始位置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gflags::ParseCommandLineFlags(&amp;argc, &amp;argv, true);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-访问参数\"><a href=\"#4-访问参数\" class=\"headerlink\" title=\"4.访问参数\"></a>4.访问参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::cout &lt;&lt; &quot;MYSTR is: &quot; &lt;&lt; FLAGS_mystr &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意使用<code>FLAGS_</code> + <code>DEFINE_string</code> 中申明的变量名即可调用</strong></p>\n<h3 id=\"5-使用\"><a href=\"#5-使用\" class=\"headerlink\" title=\"5.使用\"></a>5.使用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ gflags_test.cc -o gflags_test -lgflags -lpthread \t\t#-l 链接库进行编译</span><br><span class=\"line\">./gflags_test -mystr=&quot;this is a value of gflags&#x27; member &quot;\t# 使用</span><br><span class=\"line\">MYSTR is: this is a value of gflags&#x27; member  \t\t\t\t# 输出</span><br></pre></td></tr></table></figure>\n\n\n<p>每一种类型的定义和使用都跟上面我们的例子相似，有所不同的是 bool 参数，bool 参数在命令行可以不指定值也可以指定值，假如我们定义了一个 bool 参数 debug_bool，可以在命令行这样指定2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gflags_test -debug_bool \t\t# 这样就是 true</span><br><span class=\"line\">./gflags_test -debug_bool=true\t# 这样也是 true</span><br><span class=\"line\">./gflags_test -debug_bool=1 \t\t# 这样也是 true</span><br><span class=\"line\">./gflags_test -debug_bool=false \t# 0是false</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单使用实例\"><a href=\"#简单使用实例\" class=\"headerlink\" title=\"简单使用实例\"></a>简单使用实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;gflags/gflags.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">DEFINE_string(name, &quot;zhang san&quot;, &quot;your name&quot;);</span><br><span class=\"line\">DEFINE_int32(age, 18, &quot;your age&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char** argv) &#123;</span><br><span class=\"line\">\tgflags::ParseCommandLineFlags(&amp;argc, &amp;argv, true);</span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;your name is : &quot; &lt;&lt; FLAGS_name</span><br><span class=\"line\">        &lt;&lt; &quot;, your age is: &quot; &lt;&lt; FLAGS_name &lt;&lt; std::endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进阶使用\"><a href=\"#进阶使用\" class=\"headerlink\" title=\"进阶使用\"></a>进阶使用</h2><h3 id=\"1-跨文件调用\"><a href=\"#1-跨文件调用\" class=\"headerlink\" title=\"1.跨文件调用\"></a>1.跨文件调用</h3><p>如果你想要访问在另一个文件定义的 gflags 变量呢？使用 DECLARE_，它的作用就相当于用 extern 声明变量。为了方便的管理变量，我们推荐在 .cc 或者 .cpp文件中DEFINE 变量，然后只在对应.h 中或者单元测试中 DECLARE 变量。</p>\n<p>例如，在foo.cc 定义了一个 gflags 变量 DEFINE_string(name, ‘bob’, ‘’)，假如你需要在其他文件中使用该变量，那么在 foo.h 中声明 DECLARE_string(name)，然后在使用该变量的文件中 include “foo.h” 就可以。当然，这只是为了更好地管理文件关联，如果你不想遵循也是可以的。</p>\n<h2 id=\"2-参数检查\"><a href=\"#2-参数检查\" class=\"headerlink\" title=\"2.参数检查\"></a>2.参数检查</h2><p>使用方法如下：</p>\n<h4 id=\"定义校验函数：\"><a href=\"#定义校验函数：\" class=\"headerlink\" title=\"定义校验函数：\"></a>定义校验函数：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static bool ValidatePort(const char* flagname, int32 value) &#123;</span><br><span class=\"line\">\tif (value &gt; 0 &amp;&amp; value &lt; 200)   </span><br><span class=\"line\">     \treturn true;</span><br><span class=\"line\">   \tprintf(&quot;Invalid value for --%s: %d\\n&quot;, flagname, (int)value);</span><br><span class=\"line\">   \treturn false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用全局-static-变量来注册函数，static-变量会在-main-函数开始时就调用-在DEFINE下定义\"><a href=\"#使用全局-static-变量来注册函数，static-变量会在-main-函数开始时就调用-在DEFINE下定义\" class=\"headerlink\" title=\"使用全局 static 变量来注册函数，static 变量会在 main 函数开始时就调用, 在DEFINE下定义\"></a>使用全局 static 变量来注册函数，static 变量会在 main 函数开始时就调用, 在DEFINE下定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEFINE_int32(age, 18, &quot;your age&quot;);</span><br><span class=\"line\">static const bool port_dummy = gflags::RegisterFlagValidator(&amp;FLAGS_port, &amp;ValidatePort);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在输入不合法是就会报错\"><a href=\"#在输入不合法是就会报错\" class=\"headerlink\" title=\"在输入不合法是就会报错\"></a>在输入不合法是就会报错</h3><h3 id=\"3-flagfile-使用配置文件\"><a href=\"#3-flagfile-使用配置文件\" class=\"headerlink\" title=\"3.flagfile 使用配置文件\"></a>3.flagfile 使用配置文件</h3><p>在一个配置文件中写上，在此将其命名为 user.flags:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--name=&quot;zhangsan&quot;</span><br><span class=\"line\">--age=18</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gflags_test --flagfile  user.flags </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-8.png","cover_type":"img","excerpt":"","more":"<h1 id=\"gflags使用\"><a href=\"#gflags使用\" class=\"headerlink\" title=\"gflags使用\"></a>gflags使用</h1><h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><h3 id=\"1-加上-gflags-头文件\"><a href=\"#1-加上-gflags-头文件\" class=\"headerlink\" title=\"1.加上 gflags 头文件\"></a>1.加上 <code>gflags</code> 头文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;gflags/gflags.h&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-将需要命令行参数变量进行定义\"><a href=\"#2-将需要命令行参数变量进行定义\" class=\"headerlink\" title=\"2.将需要命令行参数变量进行定义\"></a>2.将需要命令行参数变量进行定义</h3><p>用法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEFINE_string(变量名，默认值，描述);</span><br></pre></td></tr></table></figure>\n\n<p><code>DEFINE_string</code> 只是其中一种类型，其他类型还有：</p>\n<table>\n<thead>\n<tr>\n<th>gflags 定义类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DEFINE_bool</td>\n<td>布尔类型</td>\n</tr>\n<tr>\n<td>DEFINE_int32</td>\n<td>32 位整数</td>\n</tr>\n<tr>\n<td>EFINE_int64</td>\n<td>64 位整数</td>\n</tr>\n<tr>\n<td>DEFINE_uint64</td>\n<td>无符号 64 位整数</td>\n</tr>\n<tr>\n<td>EFINE_double</td>\n<td>浮点类型 double</td>\n</tr>\n<tr>\n<td>DEFINE_string</td>\n<td>C++ string 类型</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-在main函数加入如下解析命令行参数，一般都放在-main-开始位置\"><a href=\"#3-在main函数加入如下解析命令行参数，一般都放在-main-开始位置\" class=\"headerlink\" title=\"3.在main函数加入如下解析命令行参数，一般都放在 main 开始位置\"></a>3.在main函数加入如下解析命令行参数，一般都放在 main 开始位置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gflags::ParseCommandLineFlags(&amp;argc, &amp;argv, true);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-访问参数\"><a href=\"#4-访问参数\" class=\"headerlink\" title=\"4.访问参数\"></a>4.访问参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::cout &lt;&lt; &quot;MYSTR is: &quot; &lt;&lt; FLAGS_mystr &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意使用<code>FLAGS_</code> + <code>DEFINE_string</code> 中申明的变量名即可调用</strong></p>\n<h3 id=\"5-使用\"><a href=\"#5-使用\" class=\"headerlink\" title=\"5.使用\"></a>5.使用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++ gflags_test.cc -o gflags_test -lgflags -lpthread \t\t#-l 链接库进行编译</span><br><span class=\"line\">./gflags_test -mystr=&quot;this is a value of gflags&#x27; member &quot;\t# 使用</span><br><span class=\"line\">MYSTR is: this is a value of gflags&#x27; member  \t\t\t\t# 输出</span><br></pre></td></tr></table></figure>\n\n\n<p>每一种类型的定义和使用都跟上面我们的例子相似，有所不同的是 bool 参数，bool 参数在命令行可以不指定值也可以指定值，假如我们定义了一个 bool 参数 debug_bool，可以在命令行这样指定2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gflags_test -debug_bool \t\t# 这样就是 true</span><br><span class=\"line\">./gflags_test -debug_bool=true\t# 这样也是 true</span><br><span class=\"line\">./gflags_test -debug_bool=1 \t\t# 这样也是 true</span><br><span class=\"line\">./gflags_test -debug_bool=false \t# 0是false</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"简单使用实例\"><a href=\"#简单使用实例\" class=\"headerlink\" title=\"简单使用实例\"></a>简单使用实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;gflags/gflags.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">DEFINE_string(name, &quot;zhang san&quot;, &quot;your name&quot;);</span><br><span class=\"line\">DEFINE_int32(age, 18, &quot;your age&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char** argv) &#123;</span><br><span class=\"line\">\tgflags::ParseCommandLineFlags(&amp;argc, &amp;argv, true);</span><br><span class=\"line\">\tstd::cout &lt;&lt; &quot;your name is : &quot; &lt;&lt; FLAGS_name</span><br><span class=\"line\">        &lt;&lt; &quot;, your age is: &quot; &lt;&lt; FLAGS_name &lt;&lt; std::endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"进阶使用\"><a href=\"#进阶使用\" class=\"headerlink\" title=\"进阶使用\"></a>进阶使用</h2><h3 id=\"1-跨文件调用\"><a href=\"#1-跨文件调用\" class=\"headerlink\" title=\"1.跨文件调用\"></a>1.跨文件调用</h3><p>如果你想要访问在另一个文件定义的 gflags 变量呢？使用 DECLARE_，它的作用就相当于用 extern 声明变量。为了方便的管理变量，我们推荐在 .cc 或者 .cpp文件中DEFINE 变量，然后只在对应.h 中或者单元测试中 DECLARE 变量。</p>\n<p>例如，在foo.cc 定义了一个 gflags 变量 DEFINE_string(name, ‘bob’, ‘’)，假如你需要在其他文件中使用该变量，那么在 foo.h 中声明 DECLARE_string(name)，然后在使用该变量的文件中 include “foo.h” 就可以。当然，这只是为了更好地管理文件关联，如果你不想遵循也是可以的。</p>\n<h2 id=\"2-参数检查\"><a href=\"#2-参数检查\" class=\"headerlink\" title=\"2.参数检查\"></a>2.参数检查</h2><p>使用方法如下：</p>\n<h4 id=\"定义校验函数：\"><a href=\"#定义校验函数：\" class=\"headerlink\" title=\"定义校验函数：\"></a>定义校验函数：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static bool ValidatePort(const char* flagname, int32 value) &#123;</span><br><span class=\"line\">\tif (value &gt; 0 &amp;&amp; value &lt; 200)   </span><br><span class=\"line\">     \treturn true;</span><br><span class=\"line\">   \tprintf(&quot;Invalid value for --%s: %d\\n&quot;, flagname, (int)value);</span><br><span class=\"line\">   \treturn false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用全局-static-变量来注册函数，static-变量会在-main-函数开始时就调用-在DEFINE下定义\"><a href=\"#使用全局-static-变量来注册函数，static-变量会在-main-函数开始时就调用-在DEFINE下定义\" class=\"headerlink\" title=\"使用全局 static 变量来注册函数，static 变量会在 main 函数开始时就调用, 在DEFINE下定义\"></a>使用全局 static 变量来注册函数，static 变量会在 main 函数开始时就调用, 在DEFINE下定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEFINE_int32(age, 18, &quot;your age&quot;);</span><br><span class=\"line\">static const bool port_dummy = gflags::RegisterFlagValidator(&amp;FLAGS_port, &amp;ValidatePort);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在输入不合法是就会报错\"><a href=\"#在输入不合法是就会报错\" class=\"headerlink\" title=\"在输入不合法是就会报错\"></a>在输入不合法是就会报错</h3><h3 id=\"3-flagfile-使用配置文件\"><a href=\"#3-flagfile-使用配置文件\" class=\"headerlink\" title=\"3.flagfile 使用配置文件\"></a>3.flagfile 使用配置文件</h3><p>在一个配置文件中写上，在此将其命名为 user.flags:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--name=&quot;zhangsan&quot;</span><br><span class=\"line\">--age=18</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./gflags_test --flagfile  user.flags </span><br></pre></td></tr></table></figure>\n\n"},{"title":"cin与get()getline()输入问题","date":"2023-08-24T14:38:18.611Z","description":null,"top_img":false,"_content":"\n# cin与get（）getline（）输入问题\n\n\n\ngetline和get这两个函数都读取一行输入直到到达换行符，然而不同的是getline丢弃换行符，而get将换行符保留在输入流中。\n\n```c++\n#include <string> \n#include <iostream>\nusing namespace std;\n \nint main() {\nchar a;\nint b;\nfloat c;\nstring str;\ncin>>a>>b>>c>>str;\ncout<<a<<\" \"<<b<<\" \"<<c<<\" \"<<str<<endl;\n \nstring test;\ngetline(cin,test);        //不阻塞\ncout<<\"test:\"<<test<<endl;\nreturn 0;\n}\n\n```\n\n输出：\n\n![这里写图片描述](media/1dc08fc545592a16bdd4e69456f7603f.png)\n\n\n\n输入：\n\n```c++\nString a;\ncin >> a;\ncout << a << endl;\nstring h;\ncin >> h;\ncout << h << endl;\n \nstring b;\nchar g;\ngetline(cin, b, ':');\ncout << b << endl;\n//cin.get();\ncin.get(g);\ncout << \"g=\" << g << endl;\n\n```\n\n输出：\n\n```\nasd zxc\nasd\nzxc\nasd:zxc\n \nasd\ng=z\n```\n\n当 cin\\>\\> 从缓冲区中读取数据时，若缓冲区中第一个字符是空格、tab或换行这些分隔符时，cin\\>\\> 会将其忽略并清除，继续读取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，字符后面的分隔符是残留在缓冲区的，cin\\>\\> 不做处理。\n\n从结果可以看出，cin\\>\\> 对缓冲区中的第一个换行符视而不见，采取的措施是忽略清除，继续阻塞等待缓冲区有效数据的到来。但是，getline() 读取数据时，并非像 cin\\>\\> 那样忽略第一个换行符，getline() 发现 cin 的缓冲区中有一个残留的换行符，不阻塞请求键盘输入，直接读取，送入目标字符串后，因为读取的内容为空，所以程序中的变量 test 为空串。\n\n当getline（）采用特定字符作为标识符时，标识符后面的回车和其他输入字符串会保留在输入流中。\n\n\n","source":"_posts/C++/cin与get()getline()输入问题.md","raw":"---\ntitle: cin与get()getline()输入问题\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n---\n\n# cin与get（）getline（）输入问题\n\n\n\ngetline和get这两个函数都读取一行输入直到到达换行符，然而不同的是getline丢弃换行符，而get将换行符保留在输入流中。\n\n```c++\n#include <string> \n#include <iostream>\nusing namespace std;\n \nint main() {\nchar a;\nint b;\nfloat c;\nstring str;\ncin>>a>>b>>c>>str;\ncout<<a<<\" \"<<b<<\" \"<<c<<\" \"<<str<<endl;\n \nstring test;\ngetline(cin,test);        //不阻塞\ncout<<\"test:\"<<test<<endl;\nreturn 0;\n}\n\n```\n\n输出：\n\n![这里写图片描述](media/1dc08fc545592a16bdd4e69456f7603f.png)\n\n\n\n输入：\n\n```c++\nString a;\ncin >> a;\ncout << a << endl;\nstring h;\ncin >> h;\ncout << h << endl;\n \nstring b;\nchar g;\ngetline(cin, b, ':');\ncout << b << endl;\n//cin.get();\ncin.get(g);\ncout << \"g=\" << g << endl;\n\n```\n\n输出：\n\n```\nasd zxc\nasd\nzxc\nasd:zxc\n \nasd\ng=z\n```\n\n当 cin\\>\\> 从缓冲区中读取数据时，若缓冲区中第一个字符是空格、tab或换行这些分隔符时，cin\\>\\> 会将其忽略并清除，继续读取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，字符后面的分隔符是残留在缓冲区的，cin\\>\\> 不做处理。\n\n从结果可以看出，cin\\>\\> 对缓冲区中的第一个换行符视而不见，采取的措施是忽略清除，继续阻塞等待缓冲区有效数据的到来。但是，getline() 读取数据时，并非像 cin\\>\\> 那样忽略第一个换行符，getline() 发现 cin 的缓冲区中有一个残留的换行符，不阻塞请求键盘输入，直接读取，送入目标字符串后，因为读取的内容为空，所以程序中的变量 test 为空串。\n\n当getline（）采用特定字符作为标识符时，标识符后面的回车和其他输入字符串会保留在输入流中。\n\n\n","slug":"C++/cin与get()getline()输入问题","published":1,"updated":"2023-08-25T08:34:03.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66y0019gcr7cujg7qsn","content":"<h1 id=\"cin与get（）getline（）输入问题\"><a href=\"#cin与get（）getline（）输入问题\" class=\"headerlink\" title=\"cin与get（）getline（）输入问题\"></a>cin与get（）getline（）输入问题</h1><p>getline和get这两个函数都读取一行输入直到到达换行符，然而不同的是getline丢弃换行符，而get将换行符保留在输入流中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"type\">char</span> a;</span><br><span class=\"line\"><span class=\"type\">int</span> b;</span><br><span class=\"line\"><span class=\"type\">float</span> c;</span><br><span class=\"line\">string str;</span><br><span class=\"line\">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;str;</span><br><span class=\"line\">cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;c&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">string test;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(cin,test);        <span class=\"comment\">//不阻塞</span></span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">&quot;test:&quot;</span>&lt;&lt;test&lt;&lt;endl;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><img src=\"/media/1dc08fc545592a16bdd4e69456f7603f.png\" alt=\"这里写图片描述\"></p>\n<p>输入：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a;</span><br><span class=\"line\">cin &gt;&gt; a;</span><br><span class=\"line\">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">string h;</span><br><span class=\"line\">cin &gt;&gt; h;</span><br><span class=\"line\">cout &lt;&lt; h &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">string b;</span><br><span class=\"line\"><span class=\"type\">char</span> g;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(cin, b, <span class=\"string\">&#x27;:&#x27;</span>);</span><br><span class=\"line\">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//cin.get();</span></span><br><span class=\"line\">cin.<span class=\"built_in\">get</span>(g);</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;g=&quot;</span> &lt;&lt; g &lt;&lt; endl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asd zxc</span><br><span class=\"line\">asd</span><br><span class=\"line\">zxc</span><br><span class=\"line\">asd:zxc</span><br><span class=\"line\"> </span><br><span class=\"line\">asd</span><br><span class=\"line\">g=z</span><br></pre></td></tr></table></figure>\n\n<p>当 cin&gt;&gt; 从缓冲区中读取数据时，若缓冲区中第一个字符是空格、tab或换行这些分隔符时，cin&gt;&gt; 会将其忽略并清除，继续读取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，字符后面的分隔符是残留在缓冲区的，cin&gt;&gt; 不做处理。</p>\n<p>从结果可以看出，cin&gt;&gt; 对缓冲区中的第一个换行符视而不见，采取的措施是忽略清除，继续阻塞等待缓冲区有效数据的到来。但是，getline() 读取数据时，并非像 cin&gt;&gt; 那样忽略第一个换行符，getline() 发现 cin 的缓冲区中有一个残留的换行符，不阻塞请求键盘输入，直接读取，送入目标字符串后，因为读取的内容为空，所以程序中的变量 test 为空串。</p>\n<p>当getline（）采用特定字符作为标识符时，标识符后面的回车和其他输入字符串会保留在输入流中。</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"cin与get（）getline（）输入问题\"><a href=\"#cin与get（）getline（）输入问题\" class=\"headerlink\" title=\"cin与get（）getline（）输入问题\"></a>cin与get（）getline（）输入问题</h1><p>getline和get这两个函数都读取一行输入直到到达换行符，然而不同的是getline丢弃换行符，而get将换行符保留在输入流中。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"type\">char</span> a;</span><br><span class=\"line\"><span class=\"type\">int</span> b;</span><br><span class=\"line\"><span class=\"type\">float</span> c;</span><br><span class=\"line\">string str;</span><br><span class=\"line\">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;str;</span><br><span class=\"line\">cout&lt;&lt;a&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;b&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;c&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;str&lt;&lt;endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">string test;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(cin,test);        <span class=\"comment\">//不阻塞</span></span><br><span class=\"line\">cout&lt;&lt;<span class=\"string\">&quot;test:&quot;</span>&lt;&lt;test&lt;&lt;endl;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<p><img src=\"/media/1dc08fc545592a16bdd4e69456f7603f.png\" alt=\"这里写图片描述\"></p>\n<p>输入：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String a;</span><br><span class=\"line\">cin &gt;&gt; a;</span><br><span class=\"line\">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">string h;</span><br><span class=\"line\">cin &gt;&gt; h;</span><br><span class=\"line\">cout &lt;&lt; h &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">string b;</span><br><span class=\"line\"><span class=\"type\">char</span> g;</span><br><span class=\"line\"><span class=\"built_in\">getline</span>(cin, b, <span class=\"string\">&#x27;:&#x27;</span>);</span><br><span class=\"line\">cout &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"comment\">//cin.get();</span></span><br><span class=\"line\">cin.<span class=\"built_in\">get</span>(g);</span><br><span class=\"line\">cout &lt;&lt; <span class=\"string\">&quot;g=&quot;</span> &lt;&lt; g &lt;&lt; endl;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asd zxc</span><br><span class=\"line\">asd</span><br><span class=\"line\">zxc</span><br><span class=\"line\">asd:zxc</span><br><span class=\"line\"> </span><br><span class=\"line\">asd</span><br><span class=\"line\">g=z</span><br></pre></td></tr></table></figure>\n\n<p>当 cin&gt;&gt; 从缓冲区中读取数据时，若缓冲区中第一个字符是空格、tab或换行这些分隔符时，cin&gt;&gt; 会将其忽略并清除，继续读取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，字符后面的分隔符是残留在缓冲区的，cin&gt;&gt; 不做处理。</p>\n<p>从结果可以看出，cin&gt;&gt; 对缓冲区中的第一个换行符视而不见，采取的措施是忽略清除，继续阻塞等待缓冲区有效数据的到来。但是，getline() 读取数据时，并非像 cin&gt;&gt; 那样忽略第一个换行符，getline() 发现 cin 的缓冲区中有一个残留的换行符，不阻塞请求键盘输入，直接读取，送入目标字符串后，因为读取的内容为空，所以程序中的变量 test 为空串。</p>\n<p>当getline（）采用特定字符作为标识符时，标识符后面的回车和其他输入字符串会保留在输入流中。</p>\n"},{"title":"const成员函数","date":"2023-08-24T14:38:18.616Z","description":null,"top_img":false,"_content":"\n# const成员函数\n\nconst成员函数，只要类方法不修改调用对象，就应该将其声明为const\n\n```\nvoid show（）const \n```\n\n\n","source":"_posts/C++/const成员函数.md","raw":"---\ntitle: const成员函数\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n---\n\n# const成员函数\n\nconst成员函数，只要类方法不修改调用对象，就应该将其声明为const\n\n```\nvoid show（）const \n```\n\n\n","slug":"C++/const成员函数","published":1,"updated":"2023-08-25T08:39:52.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66y001cgcr7eou99g4g","content":"<h1 id=\"const成员函数\"><a href=\"#const成员函数\" class=\"headerlink\" title=\"const成员函数\"></a>const成员函数</h1><p>const成员函数，只要类方法不修改调用对象，就应该将其声明为const</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void show（）const </span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-10.png","cover_type":"img","excerpt":"","more":"<h1 id=\"const成员函数\"><a href=\"#const成员函数\" class=\"headerlink\" title=\"const成员函数\"></a>const成员函数</h1><p>const成员函数，只要类方法不修改调用对象，就应该将其声明为const</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void show（）const </span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"string和cstring头文件的区别","date":"2023-08-24T14:38:18.637Z","description":null,"top_img":false,"_content":"\n# string和cstring头文件的区别\n\n\n\n-   \\<**string.h**\\> 是C语言标准库的头文件之一，包含了一些字符串/内存处理相关的函数（如 strcpy，memcpy 等）。\n-   **\\<cstring\\>** 是C++语言标准库的头文件之一，基本上就是 \\<string.h\\> 的C++版本，当编写C++程序时如果需要使用 \\<string.h\\>，则应当用 \\<cstring\\> 代替，并加上 std:: 前缀（如 std::strcpy，std::memcpy 等）。\n-   **\\<string\\>** 是C++语言标准库的头文件之一，主要包含了 std::basic_string 模板及其相关函数\n","source":"_posts/C++/string和cstring头文件的区别.md","raw":"---\ntitle: string和cstring头文件的区别\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# string和cstring头文件的区别\n\n\n\n-   \\<**string.h**\\> 是C语言标准库的头文件之一，包含了一些字符串/内存处理相关的函数（如 strcpy，memcpy 等）。\n-   **\\<cstring\\>** 是C++语言标准库的头文件之一，基本上就是 \\<string.h\\> 的C++版本，当编写C++程序时如果需要使用 \\<string.h\\>，则应当用 \\<cstring\\> 代替，并加上 std:: 前缀（如 std::strcpy，std::memcpy 等）。\n-   **\\<string\\>** 是C++语言标准库的头文件之一，主要包含了 std::basic_string 模板及其相关函数\n","slug":"C++/string和cstring头文件的区别","published":1,"updated":"2023-08-25T08:46:16.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66z001ggcr7gm28fysv","content":"<h1 id=\"string和cstring头文件的区别\"><a href=\"#string和cstring头文件的区别\" class=\"headerlink\" title=\"string和cstring头文件的区别\"></a>string和cstring头文件的区别</h1><ul>\n<li>&lt;**string.h**&gt; 是C语言标准库的头文件之一，包含了一些字符串&#x2F;内存处理相关的函数（如 strcpy，memcpy 等）。</li>\n<li><strong>&lt;cstring&gt;</strong> 是C++语言标准库的头文件之一，基本上就是 &lt;string.h&gt; 的C++版本，当编写C++程序时如果需要使用 &lt;string.h&gt;，则应当用 &lt;cstring&gt; 代替，并加上 std:: 前缀（如 std::strcpy，std::memcpy 等）。</li>\n<li><strong>&lt;string&gt;</strong> 是C++语言标准库的头文件之一，主要包含了 std::basic_string 模板及其相关函数</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-1.png","cover_type":"img","excerpt":"","more":"<h1 id=\"string和cstring头文件的区别\"><a href=\"#string和cstring头文件的区别\" class=\"headerlink\" title=\"string和cstring头文件的区别\"></a>string和cstring头文件的区别</h1><ul>\n<li>&lt;**string.h**&gt; 是C语言标准库的头文件之一，包含了一些字符串&#x2F;内存处理相关的函数（如 strcpy，memcpy 等）。</li>\n<li><strong>&lt;cstring&gt;</strong> 是C++语言标准库的头文件之一，基本上就是 &lt;string.h&gt; 的C++版本，当编写C++程序时如果需要使用 &lt;string.h&gt;，则应当用 &lt;cstring&gt; 代替，并加上 std:: 前缀（如 std::strcpy，std::memcpy 等）。</li>\n<li><strong>&lt;string&gt;</strong> 是C++语言标准库的头文件之一，主要包含了 std::basic_string 模板及其相关函数</li>\n</ul>\n"},{"title":"二叉树遍历","date":"2023-08-24T14:38:18.639Z","description":null,"top_img":false,"_content":"\n# 二叉树遍历\n\n2022年1月17日\n\n13:47\n\n![D  c  D  c  c  D  c  void recursion (BinaryNode \\* node)  if (node NULL)  return;  recursion (node-\\> IChi 1 d)  cout node-\\>data endl ,  recursion (node-\\>rChi 1 d)  DLR  (tR)BiBD  LDR  LRDe  DLR  LDR  LRD  — EJ\\*Ü, ](media/90765ad142ae9c04739fde85d776f281.png)\n","source":"_posts/C++/二叉树遍历.md","raw":"---\ntitle: 二叉树遍历\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 二叉树遍历\n\n2022年1月17日\n\n13:47\n\n![D  c  D  c  c  D  c  void recursion (BinaryNode \\* node)  if (node NULL)  return;  recursion (node-\\> IChi 1 d)  cout node-\\>data endl ,  recursion (node-\\>rChi 1 d)  DLR  (tR)BiBD  LDR  LRDe  DLR  LDR  LRD  — EJ\\*Ü, ](media/90765ad142ae9c04739fde85d776f281.png)\n","slug":"C++/二叉树遍历","published":1,"updated":"2023-08-25T08:46:51.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd66z001jgcr79vz9gxtl","content":"<h1 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h1><p>2022年1月17日</p>\n<p>13:47</p>\n<p><img src=\"/media/90765ad142ae9c04739fde85d776f281.png\" alt=\"D  c  D  c  c  D  c  void recursion (BinaryNode \\* node)  if (node NULL)  return;  recursion (node-\\&gt; IChi 1 d)  cout node-\\&gt;data endl ,  recursion (node-\\&gt;rChi 1 d)  DLR  (tR)BiBD  LDR  LRDe  DLR  LDR  LRD  — EJ\\*Ü, \"></p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-3.png","cover_type":"img","excerpt":"","more":"<h1 id=\"二叉树遍历\"><a href=\"#二叉树遍历\" class=\"headerlink\" title=\"二叉树遍历\"></a>二叉树遍历</h1><p>2022年1月17日</p>\n<p>13:47</p>\n<p><img src=\"/media/90765ad142ae9c04739fde85d776f281.png\" alt=\"D  c  D  c  c  D  c  void recursion (BinaryNode \\* node)  if (node NULL)  return;  recursion (node-\\&gt; IChi 1 d)  cout node-\\&gt;data endl ,  recursion (node-\\&gt;rChi 1 d)  DLR  (tR)BiBD  LDR  LRDe  DLR  LDR  LRD  — EJ\\*Ü, \"></p>\n"},{"title":"内联函数","date":"2023-08-24T14:38:18.640Z","description":null,"top_img":false,"_content":"\n# 内联函数\n\n\n\n**内联仅仅只是给编译器一个建议，编译器不一定会接受这种建议，如果你没有将函数声明为内联函数，那么编译器也可能将此函数做内联编译。一个好的编译器将会内联小的、简单的函数。**","source":"_posts/C++/内联函数.md","raw":"---\ntitle: 内联函数\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 内联函数\n\n\n\n**内联仅仅只是给编译器一个建议，编译器不一定会接受这种建议，如果你没有将函数声明为内联函数，那么编译器也可能将此函数做内联编译。一个好的编译器将会内联小的、简单的函数。**","slug":"C++/内联函数","published":1,"updated":"2023-08-25T08:47:34.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd670001ngcr73wm34i26","content":"<h1 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h1><p><strong>内联仅仅只是给编译器一个建议，编译器不一定会接受这种建议，如果你没有将函数声明为内联函数，那么编译器也可能将此函数做内联编译。一个好的编译器将会内联小的、简单的函数。</strong></p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-1.png","cover_type":"img","excerpt":"","more":"<h1 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h1><p><strong>内联仅仅只是给编译器一个建议，编译器不一定会接受这种建议，如果你没有将函数声明为内联函数，那么编译器也可能将此函数做内联编译。一个好的编译器将会内联小的、简单的函数。</strong></p>\n"},{"title":"左值与右值","date":"2023-08-24T14:38:18.643Z","description":null,"top_img":false,"_content":"\n# 一、左值与右值\n\n- 啥是左值和右值呢？\n\n  左值：在[内存](https://so.csdn.net/so/search?q=内存&spm=1001.2101.3001.7020)有确定存储地址、有变量名，表达式结束依然存在的值，简单来说左值就是非临时对象。\n  右值：就是在内存没有确定存储地址、没有变量名，[表达式](https://so.csdn.net/so/search?q=表达式&spm=1001.2101.3001.7020)结束就会销毁的值，简单来说右值就是临时对象。\n\n  ```\n  int a = 0;  // 在这条语句中，a 是左值，0 是临时值，就是右值。\n  ```\n\n- 左值可以分为两类：非常量左值和常量左值；\n\n  ```\n  int a=10;              \t// a 为非常量左值（有确定存储地址，也有变量名）\n  const int a1=10;      //a1 为常量左值（有确定存储地址，也有变量名）\n  const int a2=20;      //a2 为常量左值（有确定存储地址，也有变量名）\n  ```\n\n- 同理，右值也可以分为两类：非常量右值和常量右值。\n\n  ```\n   int a=10;              \t// 10 为非常量右值\n  const int a1=10;      \n  const int a2=20;      \n  a1+a2               \t// (a1+a2) 为常量右值\n  ```\n\n# 二、左值引用于右值引用\n\n- **知道了左值与右值了，那啥是左值引用与右值引用呢？**\n\n  左值引用：其实就是绑定到左值的引用，通过&来获得左值引用。\n\n  - 左值引用举例：\n\n    ```\n    int a=10;              //非常量左值（有确定存储地址，也有变量名）\n    const int a1=10;       //常量左值（有确定存储地址，也有变量名）\n    const int a2=20;       //常量左值（有确定存储地址，也有变量名）\n     \n    //非常量左值引用\n    int &b1=a;            //正确，a是一个非常量左值，可以被非常量左值引用绑定\n    int &b2=a1;           //错误,a1是一个常量左值，不可以被非常量左值引用绑定\n    int &b3=10;           //错误，10是一个非常量右值，不可以被非常量左值引用绑定\n    int &b4=a1+a2;        //错误,（a1+a2）是一个常量右值，不可以被非常量左值引用绑定\n    \n    //常量左值引用\n    const int &c1=a;      //正确，a是一个非常量左值，可以被非常量右值引用绑定\n    const int &c2=a1;     //正确,a1是一个常量左值，可以被非常量右值引用绑定\n    const int &c3=a+a1;   //正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定\n    const int &c4=a1+a2;  //正确,（a1+a2）是一个常量右值，可以被非常量右值引用绑定\n    ```\n\n  - 总结归纳：非常量左值引用只能绑定到非常量左值上；常量左值引用可以绑定到非常量左值、常量左值、非常量右值、常量右值等所有的值类型。\n\n  右值引用：其实也是绑定到右值的引用，通过&&来获得右值引用。\n\n  - 右值引用举例：\n\n    ```\n    int a=10;             //非常量左值（有确定存储地址，也有变量名）\n    const int a1=20;      //常量左值（有确定存储地址，也有变量名）\n    const int a2=20;      //常量左值（有确定存储地址，也有变量名）\n    \n    //非常量右值引用\n    int &&b1=a;            //错误，a是一个非常量左值，不可以被非常量右值引用绑定\n    int &&b2=a1;           //错误,a1是一个常量左值，不可以被非常量右值引用绑定\n    int &&b3=10;           //正确，10是一个非常量右值，可以被非常量右值引用绑定\n    int &&b4=a1+a2;        //错误,（a1+a2）是一个常量右值，不可以被非常量右值引用绑定\n    \n    //常量右值引用\n    const int &&c1=a;      //错误，a是一个非常量左值，不可以被常量右值引用绑定\n    const int &&c2=a1;     //错误,a1是一个常量左值，不可以被常量右值引用绑定\n    const int &&c3=a+a1;   //正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定\n    const int &&c4=a1+a2;  //正确,（a1+a2）是一个常量右值，不可以被常量右值引用绑定\n    ```\n\n  - 总结归纳：非常量右值引用只能绑定到非常量右值上；常量右值引用可以绑定到非常量右值、常量右值上。\n\n    ![](./media/3d9e381b93fe4df790357680b15d4635.png)\n\n    **从上述可以发现，常量左值引用可以绑定到右值上，但右值引用不能绑定任何类型的左值，若想利用右值引用绑定左值该怎么办呢？**\n\n- C++11中提供了一个标准库move函数获得绑定到左值上的右值引用，即直接调用std::move告诉编译器将左值像对待同类型右值一样处理，但是被调用后的左值将不能再被使用。\n\n  - **std::move()函数举例**\n\n    ```\n    int a=10;                 //非常量左值（有确定存储地址，也有变量名）\n    const int a1=20;          //常量左值（有确定存储地址，也有变量名）\n    \n    //非常量右值引用\n    int &&d1=std::move(a);    //正确，将非常量左值a转换为非常量右值，可以被非常量右值引用绑定\n    int &&d2=std::move(a1);    //错误,将常量左值a1转换为常量右值，不可以被非常量右值引用绑定\n    \n    //常量右值引用\n    const int &&c1=std::move(a);      //正确，将非常量左值a转换为非常量右值，可以被常量右值引用绑定\n    const int &&c2=std::move(a1);     //正确,将常量左值a1转换为常量右值，可以被常量右值引用绑定\n    ```\n\n    最后可以发现，编译器利用std::move将左值强制转换为相同类型的右值之后，引用情况跟右值是一模一样的。\n\n# 三、右值引用与左值引用的区别\n\n- 1、左值引用绑定到有确定存储空间以及变量名的对象上，表达式结束后对象依然存在；\n\n- 2、右值引用绑定到要求转换的表达式、字面常量、返回右值的表达式等临时对象上，赋值表达式结束后就对象就会被销毁。\n\n- 3、左值引用后可以利用别名修改左值对象；右值引用绑定的值不能修改。\n\n# 四、引入右值引用的原因\n\n- 1、替代需要销毁对象的拷贝，提高效率：某些情况下，需要拷贝一个对象然后将其销毁，如：临时类对象的拷贝就要先将旧内存的资源拷贝到新内存，然后释放旧内存，引入右值引用后，就可以让新对象直接使用旧内存并且销毁原对象，这样就减少了内存和运算资源的使用，从而提高了运行效率；\n\n- 2、移动含有不能共享资源的类对象：像IO、unique_ptr这样的类包含不能被共享的资源（如：IO缓冲、指针），因此，这些类对象不能拷贝但可以移动。这种情况，需要先调用std::move将左值强制转换为右值，再进行右值引用。\n","source":"_posts/C++/左值与右值.md","raw":"---\ntitle: 左值与右值\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 一、左值与右值\n\n- 啥是左值和右值呢？\n\n  左值：在[内存](https://so.csdn.net/so/search?q=内存&spm=1001.2101.3001.7020)有确定存储地址、有变量名，表达式结束依然存在的值，简单来说左值就是非临时对象。\n  右值：就是在内存没有确定存储地址、没有变量名，[表达式](https://so.csdn.net/so/search?q=表达式&spm=1001.2101.3001.7020)结束就会销毁的值，简单来说右值就是临时对象。\n\n  ```\n  int a = 0;  // 在这条语句中，a 是左值，0 是临时值，就是右值。\n  ```\n\n- 左值可以分为两类：非常量左值和常量左值；\n\n  ```\n  int a=10;              \t// a 为非常量左值（有确定存储地址，也有变量名）\n  const int a1=10;      //a1 为常量左值（有确定存储地址，也有变量名）\n  const int a2=20;      //a2 为常量左值（有确定存储地址，也有变量名）\n  ```\n\n- 同理，右值也可以分为两类：非常量右值和常量右值。\n\n  ```\n   int a=10;              \t// 10 为非常量右值\n  const int a1=10;      \n  const int a2=20;      \n  a1+a2               \t// (a1+a2) 为常量右值\n  ```\n\n# 二、左值引用于右值引用\n\n- **知道了左值与右值了，那啥是左值引用与右值引用呢？**\n\n  左值引用：其实就是绑定到左值的引用，通过&来获得左值引用。\n\n  - 左值引用举例：\n\n    ```\n    int a=10;              //非常量左值（有确定存储地址，也有变量名）\n    const int a1=10;       //常量左值（有确定存储地址，也有变量名）\n    const int a2=20;       //常量左值（有确定存储地址，也有变量名）\n     \n    //非常量左值引用\n    int &b1=a;            //正确，a是一个非常量左值，可以被非常量左值引用绑定\n    int &b2=a1;           //错误,a1是一个常量左值，不可以被非常量左值引用绑定\n    int &b3=10;           //错误，10是一个非常量右值，不可以被非常量左值引用绑定\n    int &b4=a1+a2;        //错误,（a1+a2）是一个常量右值，不可以被非常量左值引用绑定\n    \n    //常量左值引用\n    const int &c1=a;      //正确，a是一个非常量左值，可以被非常量右值引用绑定\n    const int &c2=a1;     //正确,a1是一个常量左值，可以被非常量右值引用绑定\n    const int &c3=a+a1;   //正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定\n    const int &c4=a1+a2;  //正确,（a1+a2）是一个常量右值，可以被非常量右值引用绑定\n    ```\n\n  - 总结归纳：非常量左值引用只能绑定到非常量左值上；常量左值引用可以绑定到非常量左值、常量左值、非常量右值、常量右值等所有的值类型。\n\n  右值引用：其实也是绑定到右值的引用，通过&&来获得右值引用。\n\n  - 右值引用举例：\n\n    ```\n    int a=10;             //非常量左值（有确定存储地址，也有变量名）\n    const int a1=20;      //常量左值（有确定存储地址，也有变量名）\n    const int a2=20;      //常量左值（有确定存储地址，也有变量名）\n    \n    //非常量右值引用\n    int &&b1=a;            //错误，a是一个非常量左值，不可以被非常量右值引用绑定\n    int &&b2=a1;           //错误,a1是一个常量左值，不可以被非常量右值引用绑定\n    int &&b3=10;           //正确，10是一个非常量右值，可以被非常量右值引用绑定\n    int &&b4=a1+a2;        //错误,（a1+a2）是一个常量右值，不可以被非常量右值引用绑定\n    \n    //常量右值引用\n    const int &&c1=a;      //错误，a是一个非常量左值，不可以被常量右值引用绑定\n    const int &&c2=a1;     //错误,a1是一个常量左值，不可以被常量右值引用绑定\n    const int &&c3=a+a1;   //正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定\n    const int &&c4=a1+a2;  //正确,（a1+a2）是一个常量右值，不可以被常量右值引用绑定\n    ```\n\n  - 总结归纳：非常量右值引用只能绑定到非常量右值上；常量右值引用可以绑定到非常量右值、常量右值上。\n\n    ![](./media/3d9e381b93fe4df790357680b15d4635.png)\n\n    **从上述可以发现，常量左值引用可以绑定到右值上，但右值引用不能绑定任何类型的左值，若想利用右值引用绑定左值该怎么办呢？**\n\n- C++11中提供了一个标准库move函数获得绑定到左值上的右值引用，即直接调用std::move告诉编译器将左值像对待同类型右值一样处理，但是被调用后的左值将不能再被使用。\n\n  - **std::move()函数举例**\n\n    ```\n    int a=10;                 //非常量左值（有确定存储地址，也有变量名）\n    const int a1=20;          //常量左值（有确定存储地址，也有变量名）\n    \n    //非常量右值引用\n    int &&d1=std::move(a);    //正确，将非常量左值a转换为非常量右值，可以被非常量右值引用绑定\n    int &&d2=std::move(a1);    //错误,将常量左值a1转换为常量右值，不可以被非常量右值引用绑定\n    \n    //常量右值引用\n    const int &&c1=std::move(a);      //正确，将非常量左值a转换为非常量右值，可以被常量右值引用绑定\n    const int &&c2=std::move(a1);     //正确,将常量左值a1转换为常量右值，可以被常量右值引用绑定\n    ```\n\n    最后可以发现，编译器利用std::move将左值强制转换为相同类型的右值之后，引用情况跟右值是一模一样的。\n\n# 三、右值引用与左值引用的区别\n\n- 1、左值引用绑定到有确定存储空间以及变量名的对象上，表达式结束后对象依然存在；\n\n- 2、右值引用绑定到要求转换的表达式、字面常量、返回右值的表达式等临时对象上，赋值表达式结束后就对象就会被销毁。\n\n- 3、左值引用后可以利用别名修改左值对象；右值引用绑定的值不能修改。\n\n# 四、引入右值引用的原因\n\n- 1、替代需要销毁对象的拷贝，提高效率：某些情况下，需要拷贝一个对象然后将其销毁，如：临时类对象的拷贝就要先将旧内存的资源拷贝到新内存，然后释放旧内存，引入右值引用后，就可以让新对象直接使用旧内存并且销毁原对象，这样就减少了内存和运算资源的使用，从而提高了运行效率；\n\n- 2、移动含有不能共享资源的类对象：像IO、unique_ptr这样的类包含不能被共享的资源（如：IO缓冲、指针），因此，这些类对象不能拷贝但可以移动。这种情况，需要先调用std::move将左值强制转换为右值，再进行右值引用。\n","slug":"C++/左值与右值","published":1,"updated":"2023-08-25T08:48:08.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd670001qgcr7ay7i4pfp","content":"<h1 id=\"一、左值与右值\"><a href=\"#一、左值与右值\" class=\"headerlink\" title=\"一、左值与右值\"></a>一、左值与右值</h1><ul>\n<li><p>啥是左值和右值呢？</p>\n<p>左值：在<a href=\"https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020\">内存</a>有确定存储地址、有变量名，表达式结束依然存在的值，简单来说左值就是非临时对象。<br>右值：就是在内存没有确定存储地址、没有变量名，<a href=\"https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020\">表达式</a>结束就会销毁的值，简单来说右值就是临时对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = 0;  // 在这条语句中，a 是左值，0 是临时值，就是右值。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>左值可以分为两类：非常量左值和常量左值；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a=10;              \t// a 为非常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a1=10;      //a1 为常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a2=20;      //a2 为常量左值（有确定存储地址，也有变量名）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同理，右值也可以分为两类：非常量右值和常量右值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> int a=10;              \t// 10 为非常量右值</span><br><span class=\"line\">const int a1=10;      </span><br><span class=\"line\">const int a2=20;      </span><br><span class=\"line\">a1+a2               \t// (a1+a2) 为常量右值</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"二、左值引用于右值引用\"><a href=\"#二、左值引用于右值引用\" class=\"headerlink\" title=\"二、左值引用于右值引用\"></a>二、左值引用于右值引用</h1><ul>\n<li><p><strong>知道了左值与右值了，那啥是左值引用与右值引用呢？</strong></p>\n<p>左值引用：其实就是绑定到左值的引用，通过&amp;来获得左值引用。</p>\n<ul>\n<li><p>左值引用举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a=10;              //非常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a1=10;       //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a2=20;       //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\"> </span><br><span class=\"line\">//非常量左值引用</span><br><span class=\"line\">int &amp;b1=a;            //正确，a是一个非常量左值，可以被非常量左值引用绑定</span><br><span class=\"line\">int &amp;b2=a1;           //错误,a1是一个常量左值，不可以被非常量左值引用绑定</span><br><span class=\"line\">int &amp;b3=10;           //错误，10是一个非常量右值，不可以被非常量左值引用绑定</span><br><span class=\"line\">int &amp;b4=a1+a2;        //错误,（a1+a2）是一个常量右值，不可以被非常量左值引用绑定</span><br><span class=\"line\"></span><br><span class=\"line\">//常量左值引用</span><br><span class=\"line\">const int &amp;c1=a;      //正确，a是一个非常量左值，可以被非常量右值引用绑定</span><br><span class=\"line\">const int &amp;c2=a1;     //正确,a1是一个常量左值，可以被非常量右值引用绑定</span><br><span class=\"line\">const int &amp;c3=a+a1;   //正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;c4=a1+a2;  //正确,（a1+a2）是一个常量右值，可以被非常量右值引用绑定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结归纳：非常量左值引用只能绑定到非常量左值上；常量左值引用可以绑定到非常量左值、常量左值、非常量右值、常量右值等所有的值类型。</p>\n</li>\n</ul>\n<p>右值引用：其实也是绑定到右值的引用，通过&amp;&amp;来获得右值引用。</p>\n<ul>\n<li><p>右值引用举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a=10;             //非常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a1=20;      //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a2=20;      //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\"></span><br><span class=\"line\">//非常量右值引用</span><br><span class=\"line\">int &amp;&amp;b1=a;            //错误，a是一个非常量左值，不可以被非常量右值引用绑定</span><br><span class=\"line\">int &amp;&amp;b2=a1;           //错误,a1是一个常量左值，不可以被非常量右值引用绑定</span><br><span class=\"line\">int &amp;&amp;b3=10;           //正确，10是一个非常量右值，可以被非常量右值引用绑定</span><br><span class=\"line\">int &amp;&amp;b4=a1+a2;        //错误,（a1+a2）是一个常量右值，不可以被非常量右值引用绑定</span><br><span class=\"line\"></span><br><span class=\"line\">//常量右值引用</span><br><span class=\"line\">const int &amp;&amp;c1=a;      //错误，a是一个非常量左值，不可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;&amp;c2=a1;     //错误,a1是一个常量左值，不可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;&amp;c3=a+a1;   //正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;&amp;c4=a1+a2;  //正确,（a1+a2）是一个常量右值，不可以被常量右值引用绑定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结归纳：非常量右值引用只能绑定到非常量右值上；常量右值引用可以绑定到非常量右值、常量右值上。</p>\n<p><img src=\"/./media/3d9e381b93fe4df790357680b15d4635.png\"></p>\n<p><strong>从上述可以发现，常量左值引用可以绑定到右值上，但右值引用不能绑定任何类型的左值，若想利用右值引用绑定左值该怎么办呢？</strong></p>\n</li>\n</ul>\n</li>\n<li><p>C++11中提供了一个标准库move函数获得绑定到左值上的右值引用，即直接调用std::move告诉编译器将左值像对待同类型右值一样处理，但是被调用后的左值将不能再被使用。</p>\n<ul>\n<li><p><strong>std::move()函数举例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a=10;                 //非常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a1=20;          //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\"></span><br><span class=\"line\">//非常量右值引用</span><br><span class=\"line\">int &amp;&amp;d1=std::move(a);    //正确，将非常量左值a转换为非常量右值，可以被非常量右值引用绑定</span><br><span class=\"line\">int &amp;&amp;d2=std::move(a1);    //错误,将常量左值a1转换为常量右值，不可以被非常量右值引用绑定</span><br><span class=\"line\"></span><br><span class=\"line\">//常量右值引用</span><br><span class=\"line\">const int &amp;&amp;c1=std::move(a);      //正确，将非常量左值a转换为非常量右值，可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;&amp;c2=std::move(a1);     //正确,将常量左值a1转换为常量右值，可以被常量右值引用绑定</span><br></pre></td></tr></table></figure>\n\n<p>最后可以发现，编译器利用std::move将左值强制转换为相同类型的右值之后，引用情况跟右值是一模一样的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"三、右值引用与左值引用的区别\"><a href=\"#三、右值引用与左值引用的区别\" class=\"headerlink\" title=\"三、右值引用与左值引用的区别\"></a>三、右值引用与左值引用的区别</h1><ul>\n<li><p>1、左值引用绑定到有确定存储空间以及变量名的对象上，表达式结束后对象依然存在；</p>\n</li>\n<li><p>2、右值引用绑定到要求转换的表达式、字面常量、返回右值的表达式等临时对象上，赋值表达式结束后就对象就会被销毁。</p>\n</li>\n<li><p>3、左值引用后可以利用别名修改左值对象；右值引用绑定的值不能修改。</p>\n</li>\n</ul>\n<h1 id=\"四、引入右值引用的原因\"><a href=\"#四、引入右值引用的原因\" class=\"headerlink\" title=\"四、引入右值引用的原因\"></a>四、引入右值引用的原因</h1><ul>\n<li><p>1、替代需要销毁对象的拷贝，提高效率：某些情况下，需要拷贝一个对象然后将其销毁，如：临时类对象的拷贝就要先将旧内存的资源拷贝到新内存，然后释放旧内存，引入右值引用后，就可以让新对象直接使用旧内存并且销毁原对象，这样就减少了内存和运算资源的使用，从而提高了运行效率；</p>\n</li>\n<li><p>2、移动含有不能共享资源的类对象：像IO、unique_ptr这样的类包含不能被共享的资源（如：IO缓冲、指针），因此，这些类对象不能拷贝但可以移动。这种情况，需要先调用std::move将左值强制转换为右值，再进行右值引用。</p>\n</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-3.png","cover_type":"img","excerpt":"","more":"<h1 id=\"一、左值与右值\"><a href=\"#一、左值与右值\" class=\"headerlink\" title=\"一、左值与右值\"></a>一、左值与右值</h1><ul>\n<li><p>啥是左值和右值呢？</p>\n<p>左值：在<a href=\"https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020\">内存</a>有确定存储地址、有变量名，表达式结束依然存在的值，简单来说左值就是非临时对象。<br>右值：就是在内存没有确定存储地址、没有变量名，<a href=\"https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020\">表达式</a>结束就会销毁的值，简单来说右值就是临时对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a = 0;  // 在这条语句中，a 是左值，0 是临时值，就是右值。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>左值可以分为两类：非常量左值和常量左值；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a=10;              \t// a 为非常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a1=10;      //a1 为常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a2=20;      //a2 为常量左值（有确定存储地址，也有变量名）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同理，右值也可以分为两类：非常量右值和常量右值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> int a=10;              \t// 10 为非常量右值</span><br><span class=\"line\">const int a1=10;      </span><br><span class=\"line\">const int a2=20;      </span><br><span class=\"line\">a1+a2               \t// (a1+a2) 为常量右值</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"二、左值引用于右值引用\"><a href=\"#二、左值引用于右值引用\" class=\"headerlink\" title=\"二、左值引用于右值引用\"></a>二、左值引用于右值引用</h1><ul>\n<li><p><strong>知道了左值与右值了，那啥是左值引用与右值引用呢？</strong></p>\n<p>左值引用：其实就是绑定到左值的引用，通过&amp;来获得左值引用。</p>\n<ul>\n<li><p>左值引用举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a=10;              //非常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a1=10;       //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a2=20;       //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\"> </span><br><span class=\"line\">//非常量左值引用</span><br><span class=\"line\">int &amp;b1=a;            //正确，a是一个非常量左值，可以被非常量左值引用绑定</span><br><span class=\"line\">int &amp;b2=a1;           //错误,a1是一个常量左值，不可以被非常量左值引用绑定</span><br><span class=\"line\">int &amp;b3=10;           //错误，10是一个非常量右值，不可以被非常量左值引用绑定</span><br><span class=\"line\">int &amp;b4=a1+a2;        //错误,（a1+a2）是一个常量右值，不可以被非常量左值引用绑定</span><br><span class=\"line\"></span><br><span class=\"line\">//常量左值引用</span><br><span class=\"line\">const int &amp;c1=a;      //正确，a是一个非常量左值，可以被非常量右值引用绑定</span><br><span class=\"line\">const int &amp;c2=a1;     //正确,a1是一个常量左值，可以被非常量右值引用绑定</span><br><span class=\"line\">const int &amp;c3=a+a1;   //正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;c4=a1+a2;  //正确,（a1+a2）是一个常量右值，可以被非常量右值引用绑定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结归纳：非常量左值引用只能绑定到非常量左值上；常量左值引用可以绑定到非常量左值、常量左值、非常量右值、常量右值等所有的值类型。</p>\n</li>\n</ul>\n<p>右值引用：其实也是绑定到右值的引用，通过&amp;&amp;来获得右值引用。</p>\n<ul>\n<li><p>右值引用举例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a=10;             //非常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a1=20;      //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a2=20;      //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\"></span><br><span class=\"line\">//非常量右值引用</span><br><span class=\"line\">int &amp;&amp;b1=a;            //错误，a是一个非常量左值，不可以被非常量右值引用绑定</span><br><span class=\"line\">int &amp;&amp;b2=a1;           //错误,a1是一个常量左值，不可以被非常量右值引用绑定</span><br><span class=\"line\">int &amp;&amp;b3=10;           //正确，10是一个非常量右值，可以被非常量右值引用绑定</span><br><span class=\"line\">int &amp;&amp;b4=a1+a2;        //错误,（a1+a2）是一个常量右值，不可以被非常量右值引用绑定</span><br><span class=\"line\"></span><br><span class=\"line\">//常量右值引用</span><br><span class=\"line\">const int &amp;&amp;c1=a;      //错误，a是一个非常量左值，不可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;&amp;c2=a1;     //错误,a1是一个常量左值，不可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;&amp;c3=a+a1;   //正确，（a+a1）是一个非常量右值，可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;&amp;c4=a1+a2;  //正确,（a1+a2）是一个常量右值，不可以被常量右值引用绑定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总结归纳：非常量右值引用只能绑定到非常量右值上；常量右值引用可以绑定到非常量右值、常量右值上。</p>\n<p><img src=\"/./media/3d9e381b93fe4df790357680b15d4635.png\"></p>\n<p><strong>从上述可以发现，常量左值引用可以绑定到右值上，但右值引用不能绑定任何类型的左值，若想利用右值引用绑定左值该怎么办呢？</strong></p>\n</li>\n</ul>\n</li>\n<li><p>C++11中提供了一个标准库move函数获得绑定到左值上的右值引用，即直接调用std::move告诉编译器将左值像对待同类型右值一样处理，但是被调用后的左值将不能再被使用。</p>\n<ul>\n<li><p><strong>std::move()函数举例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a=10;                 //非常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\">const int a1=20;          //常量左值（有确定存储地址，也有变量名）</span><br><span class=\"line\"></span><br><span class=\"line\">//非常量右值引用</span><br><span class=\"line\">int &amp;&amp;d1=std::move(a);    //正确，将非常量左值a转换为非常量右值，可以被非常量右值引用绑定</span><br><span class=\"line\">int &amp;&amp;d2=std::move(a1);    //错误,将常量左值a1转换为常量右值，不可以被非常量右值引用绑定</span><br><span class=\"line\"></span><br><span class=\"line\">//常量右值引用</span><br><span class=\"line\">const int &amp;&amp;c1=std::move(a);      //正确，将非常量左值a转换为非常量右值，可以被常量右值引用绑定</span><br><span class=\"line\">const int &amp;&amp;c2=std::move(a1);     //正确,将常量左值a1转换为常量右值，可以被常量右值引用绑定</span><br></pre></td></tr></table></figure>\n\n<p>最后可以发现，编译器利用std::move将左值强制转换为相同类型的右值之后，引用情况跟右值是一模一样的。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"三、右值引用与左值引用的区别\"><a href=\"#三、右值引用与左值引用的区别\" class=\"headerlink\" title=\"三、右值引用与左值引用的区别\"></a>三、右值引用与左值引用的区别</h1><ul>\n<li><p>1、左值引用绑定到有确定存储空间以及变量名的对象上，表达式结束后对象依然存在；</p>\n</li>\n<li><p>2、右值引用绑定到要求转换的表达式、字面常量、返回右值的表达式等临时对象上，赋值表达式结束后就对象就会被销毁。</p>\n</li>\n<li><p>3、左值引用后可以利用别名修改左值对象；右值引用绑定的值不能修改。</p>\n</li>\n</ul>\n<h1 id=\"四、引入右值引用的原因\"><a href=\"#四、引入右值引用的原因\" class=\"headerlink\" title=\"四、引入右值引用的原因\"></a>四、引入右值引用的原因</h1><ul>\n<li><p>1、替代需要销毁对象的拷贝，提高效率：某些情况下，需要拷贝一个对象然后将其销毁，如：临时类对象的拷贝就要先将旧内存的资源拷贝到新内存，然后释放旧内存，引入右值引用后，就可以让新对象直接使用旧内存并且销毁原对象，这样就减少了内存和运算资源的使用，从而提高了运行效率；</p>\n</li>\n<li><p>2、移动含有不能共享资源的类对象：像IO、unique_ptr这样的类包含不能被共享的资源（如：IO缓冲、指针），因此，这些类对象不能拷贝但可以移动。这种情况，需要先调用std::move将左值强制转换为右值，再进行右值引用。</p>\n</li>\n</ul>\n"},{"title":"函数指针的定义方式","date":"2023-08-24T14:38:18.641Z","description":null,"top_img":false,"_content":"\n# 函数指针的定义方式\n\n```c++\nvoid func(inta,charc)\n{\n\tprintf(\"helloworld\\n\");\n}\n \nvoid test01()\n{\n\t//1、先定义出函数类型，再通过类型定义函数指针\n\ttypedef void(FUNC_TYPE)(int,char);\n \n\tFUNC_TYPE * pFunc = func;\n\t//pFunc(10,'a');\n \n\t//2、定义出函数指针类型，通过类型定义函数指针变量\n\ttypedefvoid( * FUNC_TYPE2)(int,char);\n \n\tFUNC_TYPE2p Func2 = func;\n\t//pFunc2(20,'b');\n \n \n\t//3、直接定义函数指针变量\n\tvoid( * pFunc3)(int,char) = func;\n\tpFunc3(30,'c');\n \n\t//函数指针和指针函数区别？\n\t//函数指针指向了函数的指针\n\t//指针函数函数返回值是指针的函数\n}\n\n```\n\n\n","source":"_posts/C++/函数指针的定义方式.md","raw":"---\ntitle: 函数指针的定义方式\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 函数指针的定义方式\n\n```c++\nvoid func(inta,charc)\n{\n\tprintf(\"helloworld\\n\");\n}\n \nvoid test01()\n{\n\t//1、先定义出函数类型，再通过类型定义函数指针\n\ttypedef void(FUNC_TYPE)(int,char);\n \n\tFUNC_TYPE * pFunc = func;\n\t//pFunc(10,'a');\n \n\t//2、定义出函数指针类型，通过类型定义函数指针变量\n\ttypedefvoid( * FUNC_TYPE2)(int,char);\n \n\tFUNC_TYPE2p Func2 = func;\n\t//pFunc2(20,'b');\n \n \n\t//3、直接定义函数指针变量\n\tvoid( * pFunc3)(int,char) = func;\n\tpFunc3(30,'c');\n \n\t//函数指针和指针函数区别？\n\t//函数指针指向了函数的指针\n\t//指针函数函数返回值是指针的函数\n}\n\n```\n\n\n","slug":"C++/函数指针的定义方式","published":1,"updated":"2023-08-25T08:47:07.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd670001tgcr7hrdoh4wu","content":"<h1 id=\"函数指针的定义方式\"><a href=\"#函数指针的定义方式\" class=\"headerlink\" title=\"函数指针的定义方式\"></a>函数指针的定义方式</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(inta,charc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;helloworld\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、先定义出函数类型，再通过类型定义函数指针</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span><span class=\"params\">(FUNC_TYPE)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">char</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tFUNC_TYPE * pFunc = func;</span><br><span class=\"line\">\t<span class=\"comment\">//pFunc(10,&#x27;a&#x27;);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//2、定义出函数指针类型，通过类型定义函数指针变量</span></span><br><span class=\"line\">\t<span class=\"built_in\">typedefvoid</span>( * FUNC_TYPE2)(<span class=\"type\">int</span>,<span class=\"type\">char</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\tFUNC_TYPE2p Func2 = func;</span><br><span class=\"line\">\t<span class=\"comment\">//pFunc2(20,&#x27;b&#x27;);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//3、直接定义函数指针变量</span></span><br><span class=\"line\">\t<span class=\"built_in\">void</span>( * pFunc3)(<span class=\"type\">int</span>,<span class=\"type\">char</span>) = func;</span><br><span class=\"line\">\t<span class=\"built_in\">pFunc3</span>(<span class=\"number\">30</span>,<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//函数指针和指针函数区别？</span></span><br><span class=\"line\">\t<span class=\"comment\">//函数指针指向了函数的指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//指针函数函数返回值是指针的函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-1.png","cover_type":"img","excerpt":"","more":"<h1 id=\"函数指针的定义方式\"><a href=\"#函数指针的定义方式\" class=\"headerlink\" title=\"函数指针的定义方式\"></a>函数指针的定义方式</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(inta,charc)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;helloworld\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//1、先定义出函数类型，再通过类型定义函数指针</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span><span class=\"params\">(FUNC_TYPE)</span><span class=\"params\">(<span class=\"type\">int</span>,<span class=\"type\">char</span>)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tFUNC_TYPE * pFunc = func;</span><br><span class=\"line\">\t<span class=\"comment\">//pFunc(10,&#x27;a&#x27;);</span></span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//2、定义出函数指针类型，通过类型定义函数指针变量</span></span><br><span class=\"line\">\t<span class=\"built_in\">typedefvoid</span>( * FUNC_TYPE2)(<span class=\"type\">int</span>,<span class=\"type\">char</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\tFUNC_TYPE2p Func2 = func;</span><br><span class=\"line\">\t<span class=\"comment\">//pFunc2(20,&#x27;b&#x27;);</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//3、直接定义函数指针变量</span></span><br><span class=\"line\">\t<span class=\"built_in\">void</span>( * pFunc3)(<span class=\"type\">int</span>,<span class=\"type\">char</span>) = func;</span><br><span class=\"line\">\t<span class=\"built_in\">pFunc3</span>(<span class=\"number\">30</span>,<span class=\"string\">&#x27;c&#x27;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">\t<span class=\"comment\">//函数指针和指针函数区别？</span></span><br><span class=\"line\">\t<span class=\"comment\">//函数指针指向了函数的指针</span></span><br><span class=\"line\">\t<span class=\"comment\">//指针函数函数返回值是指针的函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"单例模式","date":"2023-08-24T14:38:18.642Z","description":null,"top_img":false,"_content":"\n# 单例模式\n\n\n\n## 1.构造函数私有化\n\n![- class  ChairMan  public:  static  ChairMar1 \\* getlnstacne  return singleMan,  private:  Chairman  b) 01  Chai rM const ChairMan  // public:  private:  static  ChairMart  \\* singleMan,  thairMar1  Chairman • :singleMan -  Chairman  new ](media/82e528c1d8aeb1e85113f6a7d826cdfd.png)\n\n## 2.\n\n![ChairMan \\* cl = Chairhan: •.åetlnstacne()  Chairlan \\* c2 = Chairhan: ; ](media/f700387f242b93abd4799aae4384a23a.png)\n","source":"_posts/C++/单例模式.md","raw":"---\ntitle: 单例模式\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 单例模式\n\n\n\n## 1.构造函数私有化\n\n![- class  ChairMan  public:  static  ChairMar1 \\* getlnstacne  return singleMan,  private:  Chairman  b) 01  Chai rM const ChairMan  // public:  private:  static  ChairMart  \\* singleMan,  thairMar1  Chairman • :singleMan -  Chairman  new ](media/82e528c1d8aeb1e85113f6a7d826cdfd.png)\n\n## 2.\n\n![ChairMan \\* cl = Chairhan: •.åetlnstacne()  Chairlan \\* c2 = Chairhan: ; ](media/f700387f242b93abd4799aae4384a23a.png)\n","slug":"C++/单例模式","published":1,"updated":"2023-08-25T08:46:43.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd671001wgcr70sk8be2j","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"1-构造函数私有化\"><a href=\"#1-构造函数私有化\" class=\"headerlink\" title=\"1.构造函数私有化\"></a>1.构造函数私有化</h2><p><img src=\"/media/82e528c1d8aeb1e85113f6a7d826cdfd.png\" alt=\"- class  ChairMan  public:  static  ChairMar1 \\* getlnstacne  return singleMan,  private:  Chairman  b) 01  Chai rM const ChairMan  // public:  private:  static  ChairMart  \\* singleMan,  thairMar1  Chairman • :singleMan -  Chairman  new \"></p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><p><img src=\"/media/f700387f242b93abd4799aae4384a23a.png\" alt=\"ChairMan \\* cl = Chairhan: •.åetlnstacne()  Chairlan \\* c2 = Chairhan: ; \"></p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-6.png","cover_type":"img","excerpt":"","more":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"1-构造函数私有化\"><a href=\"#1-构造函数私有化\" class=\"headerlink\" title=\"1.构造函数私有化\"></a>1.构造函数私有化</h2><p><img src=\"/media/82e528c1d8aeb1e85113f6a7d826cdfd.png\" alt=\"- class  ChairMan  public:  static  ChairMar1 \\* getlnstacne  return singleMan,  private:  Chairman  b) 01  Chai rM const ChairMan  // public:  private:  static  ChairMart  \\* singleMan,  thairMar1  Chairman • :singleMan -  Chairman  new \"></p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><p><img src=\"/media/f700387f242b93abd4799aae4384a23a.png\" alt=\"ChairMan \\* cl = Chairhan: •.åetlnstacne()  Chairlan \\* c2 = Chairhan: ; \"></p>\n"},{"title":"常用函数","date":"2023-08-24T14:38:18.645Z","description":null,"top_img":false,"_content":"\n# 常用函数\n\n- ## **swap（）：**\n\n  **@brief：**用于元素的交换\n\n  ```\n  swap(a, b)\n  ```\n\n  \n\n- ## **substr（）:**\n\n  **形式 ：** s.substr(pos, len)\n\n  **返回值：** string，包含s中从pos开始的len个字符的拷贝（pos的默认值是0，len的默认值是s.size() - pos，即不加参数会默认拷贝整个s）\n\n  substr有2种常用用法：\n\n  假设：string s = “0123456789”;\n\n  ```\n  string sub1 = s.substr(5); //只有一个数字5表示从下标为5开始一直到结尾：sub1 = “56789”\n  \n  string sub2 = s.substr(5, 3); //从下标为5开始截取长度为3位：sub2 = “567”\n  ```\n\n  \n\n- ## **compare():**\n\n  **@brief：**两个字符串相同，返回0。\n\n  ​\t\t\t\t调用字符串小与被调用字符串，返回-1。\n\n  ​\t\t\t\t调用字符串大于被调用字符串，返回1。\n\n  ```\n  int compare(const string &s) const;\n  \n  int conpare(const char *s) const;\n  ```\n\n  ![1  2  3  4  5  6  7  8  9  le  11  12  13  14  15  16  17  18  19  2e  21  22  23  using namespace std;  int main()  string  string ;  int b=sl. 14+2 ,  cout\\<\\<b\\<\\<endl;  int c=sl.  cout\\<\\<c\\<\\<endl;  int d=sl.  ; //sl +\\*Öando\\$LJs2  string s3=\"abc\";  string s4=\"abc\";  int  cout\\<\\<e\\<\\<endl;  return e; ](media/a5f23af609c2c0cc2c6cfe51f1ca22f0.png)\n\n  \n\n-   ## **reverse():**\n\n    **@brief：**reverse函数用于反转 [ first , last ）范围内的顺序\n\n    ![string a = ihello\";  string b •world';  a.end());  b.end()); ](media/899e5f1f4f1d4a5651454501e4b6a19c.png)\n\n- ## round():\n\n  **@brief：**round()函数仅仅保留到整数位，即仅仅对小数点后一位四舍五入\n\n  ```c++\n  round(1.5) = 2.000000\n  round(1.56) = 2.000000\n  round(-1.5) = -2.000000\n  round(-1.56) = -2.000000\n  ```\n\n- ## std::numeric_limits：\n\n  **@brief：**提供关于不同平台编译的算术类型(整型、[浮点型](https://so.csdn.net/so/search?q=浮点型&spm=1001.2101.3001.7020))的属性信息，如int型的最大最小值，位宽等信息。 因此该模板素有成员函\t\t\t\t数、成员变量均为静态函数\n\n  ```c++\n  #include <iostream>     // std::cout\n  #include <limits>       // std::numeric_limits\n  \n  int main () {\n    std::cout << std::boolalpha;\n    std::cout << \"Minimum value for int: \" << std::numeric_limits<int>::min() << '\\n';\n    std::cout << \"Maximum value for int: \" << std::numeric_limits<int>::max() << '\\n';\n    std::cout << \"int is signed: \" << std::numeric_limits<int>::is_signed << '\\n';\n    std::cout << \"Non-sign bits in int: \" << std::numeric_limits<int>::digits << '\\n';\n    std::cout << \"int has infinity: \" << std::numeric_limits<int>::has_infinity << '\\n';\n    return 0;\n  }\n  ```\n\n  ","source":"_posts/C++/常用函数.md","raw":"---\ntitle: 常用函数\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 常用函数\n\n- ## **swap（）：**\n\n  **@brief：**用于元素的交换\n\n  ```\n  swap(a, b)\n  ```\n\n  \n\n- ## **substr（）:**\n\n  **形式 ：** s.substr(pos, len)\n\n  **返回值：** string，包含s中从pos开始的len个字符的拷贝（pos的默认值是0，len的默认值是s.size() - pos，即不加参数会默认拷贝整个s）\n\n  substr有2种常用用法：\n\n  假设：string s = “0123456789”;\n\n  ```\n  string sub1 = s.substr(5); //只有一个数字5表示从下标为5开始一直到结尾：sub1 = “56789”\n  \n  string sub2 = s.substr(5, 3); //从下标为5开始截取长度为3位：sub2 = “567”\n  ```\n\n  \n\n- ## **compare():**\n\n  **@brief：**两个字符串相同，返回0。\n\n  ​\t\t\t\t调用字符串小与被调用字符串，返回-1。\n\n  ​\t\t\t\t调用字符串大于被调用字符串，返回1。\n\n  ```\n  int compare(const string &s) const;\n  \n  int conpare(const char *s) const;\n  ```\n\n  ![1  2  3  4  5  6  7  8  9  le  11  12  13  14  15  16  17  18  19  2e  21  22  23  using namespace std;  int main()  string  string ;  int b=sl. 14+2 ,  cout\\<\\<b\\<\\<endl;  int c=sl.  cout\\<\\<c\\<\\<endl;  int d=sl.  ; //sl +\\*Öando\\$LJs2  string s3=\"abc\";  string s4=\"abc\";  int  cout\\<\\<e\\<\\<endl;  return e; ](media/a5f23af609c2c0cc2c6cfe51f1ca22f0.png)\n\n  \n\n-   ## **reverse():**\n\n    **@brief：**reverse函数用于反转 [ first , last ）范围内的顺序\n\n    ![string a = ihello\";  string b •world';  a.end());  b.end()); ](media/899e5f1f4f1d4a5651454501e4b6a19c.png)\n\n- ## round():\n\n  **@brief：**round()函数仅仅保留到整数位，即仅仅对小数点后一位四舍五入\n\n  ```c++\n  round(1.5) = 2.000000\n  round(1.56) = 2.000000\n  round(-1.5) = -2.000000\n  round(-1.56) = -2.000000\n  ```\n\n- ## std::numeric_limits：\n\n  **@brief：**提供关于不同平台编译的算术类型(整型、[浮点型](https://so.csdn.net/so/search?q=浮点型&spm=1001.2101.3001.7020))的属性信息，如int型的最大最小值，位宽等信息。 因此该模板素有成员函\t\t\t\t数、成员变量均为静态函数\n\n  ```c++\n  #include <iostream>     // std::cout\n  #include <limits>       // std::numeric_limits\n  \n  int main () {\n    std::cout << std::boolalpha;\n    std::cout << \"Minimum value for int: \" << std::numeric_limits<int>::min() << '\\n';\n    std::cout << \"Maximum value for int: \" << std::numeric_limits<int>::max() << '\\n';\n    std::cout << \"int is signed: \" << std::numeric_limits<int>::is_signed << '\\n';\n    std::cout << \"Non-sign bits in int: \" << std::numeric_limits<int>::digits << '\\n';\n    std::cout << \"int has infinity: \" << std::numeric_limits<int>::has_infinity << '\\n';\n    return 0;\n  }\n  ```\n\n  ","slug":"C++/常用函数","published":1,"updated":"2023-08-25T08:46:36.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd671001zgcr78wl452ua","content":"<h1 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h1><ul>\n<li><h2 id=\"swap（）：\"><a href=\"#swap（）：\" class=\"headerlink\" title=\"swap（）：\"></a><strong>swap（）：</strong></h2><p><strong>@brief：</strong>用于元素的交换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(a, b)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><h2 id=\"substr（）\"><a href=\"#substr（）\" class=\"headerlink\" title=\"substr（）:\"></a><strong>substr（）:</strong></h2><p><strong>形式 ：</strong> s.substr(pos, len)</p>\n<p><strong>返回值：</strong> string，包含s中从pos开始的len个字符的拷贝（pos的默认值是0，len的默认值是s.size() - pos，即不加参数会默认拷贝整个s）</p>\n<p>substr有2种常用用法：</p>\n<p>假设：string s &#x3D; “0123456789”;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string sub1 = s.substr(5); //只有一个数字5表示从下标为5开始一直到结尾：sub1 = “56789”</span><br><span class=\"line\"></span><br><span class=\"line\">string sub2 = s.substr(5, 3); //从下标为5开始截取长度为3位：sub2 = “567”</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><h2 id=\"compare\"><a href=\"#compare\" class=\"headerlink\" title=\"compare():\"></a><strong>compare():</strong></h2><p><strong>@brief：</strong>两个字符串相同，返回0。</p>\n<p>​\t\t\t\t调用字符串小与被调用字符串，返回-1。</p>\n<p>​\t\t\t\t调用字符串大于被调用字符串，返回1。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int compare(const string &amp;s) const;</span><br><span class=\"line\"></span><br><span class=\"line\">int conpare(const char *s) const;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/a5f23af609c2c0cc2c6cfe51f1ca22f0.png\" alt=\"1  2  3  4  5  6  7  8  9  le  11  12  13  14  15  16  17  18  19  2e  21  22  23  using namespace std;  int main()  string  string ;  int b=sl. 14+2 ,  cout\\&lt;\\&lt;b\\&lt;\\&lt;endl;  int c=sl.  cout\\&lt;\\&lt;c\\&lt;\\&lt;endl;  int d=sl.  ; //sl +\\*Öando\\$LJs2  string s3=&quot;abc&quot;;  string s4=&quot;abc&quot;;  int  cout\\&lt;\\&lt;e\\&lt;\\&lt;endl;  return e; \"></p>\n</li>\n<li><h2 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse():\"></a><strong>reverse():</strong></h2><p><strong>@brief：</strong>reverse函数用于反转 [ first , last ）范围内的顺序</p>\n<p><img src=\"/media/899e5f1f4f1d4a5651454501e4b6a19c.png\" alt=\"string a = ihello&quot;;  string b •world&#39;;  a.end());  b.end()); \"></p>\n</li>\n<li><h2 id=\"round\"><a href=\"#round\" class=\"headerlink\" title=\"round():\"></a>round():</h2><p><strong>@brief：</strong>round()函数仅仅保留到整数位，即仅仅对小数点后一位四舍五入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">round</span>(<span class=\"number\">1.5</span>) = <span class=\"number\">2.000000</span></span><br><span class=\"line\"><span class=\"built_in\">round</span>(<span class=\"number\">1.56</span>) = <span class=\"number\">2.000000</span></span><br><span class=\"line\"><span class=\"built_in\">round</span>(<span class=\"number\">-1.5</span>) = <span class=\"number\">-2.000000</span></span><br><span class=\"line\"><span class=\"built_in\">round</span>(<span class=\"number\">-1.56</span>) = <span class=\"number\">-2.000000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h2 id=\"std-numeric-limits：\"><a href=\"#std-numeric-limits：\" class=\"headerlink\" title=\"std::numeric_limits：\"></a>std::numeric_limits：</h2><p><strong>@brief：</strong>提供关于不同平台编译的算术类型(整型、<a href=\"https://so.csdn.net/so/search?q=%E6%B5%AE%E7%82%B9%E5%9E%8B&spm=1001.2101.3001.7020\">浮点型</a>)的属性信息，如int型的最大最小值，位宽等信息。 因此该模板素有成员函\t\t\t\t数、成员变量均为静态函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>     <span class=\"comment\">// std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits&gt;</span>       <span class=\"comment\">// std::numeric_limits</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  std::cout &lt;&lt; std::boolalpha;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Minimum value for int: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Maximum value for int: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;int is signed: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::is_signed &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Non-sign bits in int: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::digits &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;int has infinity: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::has_infinity &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-8.png","cover_type":"img","excerpt":"","more":"<h1 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h1><ul>\n<li><h2 id=\"swap（）：\"><a href=\"#swap（）：\" class=\"headerlink\" title=\"swap（）：\"></a><strong>swap（）：</strong></h2><p><strong>@brief：</strong>用于元素的交换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swap(a, b)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><h2 id=\"substr（）\"><a href=\"#substr（）\" class=\"headerlink\" title=\"substr（）:\"></a><strong>substr（）:</strong></h2><p><strong>形式 ：</strong> s.substr(pos, len)</p>\n<p><strong>返回值：</strong> string，包含s中从pos开始的len个字符的拷贝（pos的默认值是0，len的默认值是s.size() - pos，即不加参数会默认拷贝整个s）</p>\n<p>substr有2种常用用法：</p>\n<p>假设：string s &#x3D; “0123456789”;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string sub1 = s.substr(5); //只有一个数字5表示从下标为5开始一直到结尾：sub1 = “56789”</span><br><span class=\"line\"></span><br><span class=\"line\">string sub2 = s.substr(5, 3); //从下标为5开始截取长度为3位：sub2 = “567”</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><h2 id=\"compare\"><a href=\"#compare\" class=\"headerlink\" title=\"compare():\"></a><strong>compare():</strong></h2><p><strong>@brief：</strong>两个字符串相同，返回0。</p>\n<p>​\t\t\t\t调用字符串小与被调用字符串，返回-1。</p>\n<p>​\t\t\t\t调用字符串大于被调用字符串，返回1。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int compare(const string &amp;s) const;</span><br><span class=\"line\"></span><br><span class=\"line\">int conpare(const char *s) const;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/a5f23af609c2c0cc2c6cfe51f1ca22f0.png\" alt=\"1  2  3  4  5  6  7  8  9  le  11  12  13  14  15  16  17  18  19  2e  21  22  23  using namespace std;  int main()  string  string ;  int b=sl. 14+2 ,  cout\\&lt;\\&lt;b\\&lt;\\&lt;endl;  int c=sl.  cout\\&lt;\\&lt;c\\&lt;\\&lt;endl;  int d=sl.  ; //sl +\\*Öando\\$LJs2  string s3=&quot;abc&quot;;  string s4=&quot;abc&quot;;  int  cout\\&lt;\\&lt;e\\&lt;\\&lt;endl;  return e; \"></p>\n</li>\n<li><h2 id=\"reverse\"><a href=\"#reverse\" class=\"headerlink\" title=\"reverse():\"></a><strong>reverse():</strong></h2><p><strong>@brief：</strong>reverse函数用于反转 [ first , last ）范围内的顺序</p>\n<p><img src=\"/media/899e5f1f4f1d4a5651454501e4b6a19c.png\" alt=\"string a = ihello&quot;;  string b •world&#39;;  a.end());  b.end()); \"></p>\n</li>\n<li><h2 id=\"round\"><a href=\"#round\" class=\"headerlink\" title=\"round():\"></a>round():</h2><p><strong>@brief：</strong>round()函数仅仅保留到整数位，即仅仅对小数点后一位四舍五入</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">round</span>(<span class=\"number\">1.5</span>) = <span class=\"number\">2.000000</span></span><br><span class=\"line\"><span class=\"built_in\">round</span>(<span class=\"number\">1.56</span>) = <span class=\"number\">2.000000</span></span><br><span class=\"line\"><span class=\"built_in\">round</span>(<span class=\"number\">-1.5</span>) = <span class=\"number\">-2.000000</span></span><br><span class=\"line\"><span class=\"built_in\">round</span>(<span class=\"number\">-1.56</span>) = <span class=\"number\">-2.000000</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h2 id=\"std-numeric-limits：\"><a href=\"#std-numeric-limits：\" class=\"headerlink\" title=\"std::numeric_limits：\"></a>std::numeric_limits：</h2><p><strong>@brief：</strong>提供关于不同平台编译的算术类型(整型、<a href=\"https://so.csdn.net/so/search?q=%E6%B5%AE%E7%82%B9%E5%9E%8B&spm=1001.2101.3001.7020\">浮点型</a>)的属性信息，如int型的最大最小值，位宽等信息。 因此该模板素有成员函\t\t\t\t数、成员变量均为静态函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>     <span class=\"comment\">// std::cout</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits&gt;</span>       <span class=\"comment\">// std::numeric_limits</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  std::cout &lt;&lt; std::boolalpha;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Minimum value for int: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">min</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Maximum value for int: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::<span class=\"built_in\">max</span>() &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;int is signed: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::is_signed &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;Non-sign bits in int: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::digits &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; <span class=\"string\">&quot;int has infinity: &quot;</span> &lt;&lt; std::numeric_limits&lt;<span class=\"type\">int</span>&gt;::has_infinity &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"常规函数与内联函数","date":"2023-08-24T14:38:18.646Z","description":null,"top_img":false,"_content":"\n# 常规函数与内联函数\n\n\n\n常规函数调用将程序流程转到独立的函数就行运行\n\n\n\n内敛函数用相应的代码段替换函数调用，因此内联函数运行较快，但是更加占用内存\n","source":"_posts/C++/常规函数与内联函数.md","raw":"---\ntitle: 常规函数与内联函数\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 常规函数与内联函数\n\n\n\n常规函数调用将程序流程转到独立的函数就行运行\n\n\n\n内敛函数用相应的代码段替换函数调用，因此内联函数运行较快，但是更加占用内存\n","slug":"C++/常规函数与内联函数","published":1,"updated":"2023-08-25T08:46:27.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd6710022gcr71nzc72a4","content":"<h1 id=\"常规函数与内联函数\"><a href=\"#常规函数与内联函数\" class=\"headerlink\" title=\"常规函数与内联函数\"></a>常规函数与内联函数</h1><p>常规函数调用将程序流程转到独立的函数就行运行</p>\n<p>内敛函数用相应的代码段替换函数调用，因此内联函数运行较快，但是更加占用内存</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-10.png","cover_type":"img","excerpt":"","more":"<h1 id=\"常规函数与内联函数\"><a href=\"#常规函数与内联函数\" class=\"headerlink\" title=\"常规函数与内联函数\"></a>常规函数与内联函数</h1><p>常规函数调用将程序流程转到独立的函数就行运行</p>\n<p>内敛函数用相应的代码段替换函数调用，因此内联函数运行较快，但是更加占用内存</p>\n"},{"title":"构造函数的调用时机","date":"2023-08-24T14:38:18.650Z","description":null,"top_img":false,"_content":"\n# 构造函数的调用时机\n\n```c++\n//1. 无参构造调用方式\nvoid test01(){\n    \n    //调用无参构造函数\n    Person person1; \n    person1.PrintPerson();\n \n    //无参构造函数错误调用方式\n    //Person person2();\n    //person2.PrintPerson();\n}\n//2. 调用有参构造函数\nvoid test02(){\n    \n    //第一种 括号法，最常用\n    Person person01(100);\n    person01.PrintPerson();\n \n    //调用拷贝构造函数\n    Person person02(person01);\n    person02.PrintPerson();\n \n    //第二种 匿名对象(显示调用构造函数)\n    Person(200); //匿名对象，没有名字的对象\n \n    Person person03 = Person(300);\n    person03.PrintPerson();\n \n    //注意: 使用匿名对象初始化判断调用哪一个构造函数，要看匿名对象的参数类型\n    Person person06(Person(400)); //等价于 Person person06 = Person(400);\n    person06.PrintPerson();\n \n    //第三种 =号法 隐式转换\n    Person person04 = 100; //Person person04 =  Person(100)\n    person04.PrintPerson();\n \n    //调用拷贝构造\n    Person person05 = person04; //Person person05 =  Person(person04)\n    person05.PrintPerson();\n}\n\n```\n\n\n","source":"_posts/C++/构造函数的调用时机.md","raw":"---\ntitle: 构造函数的调用时机\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 构造函数的调用时机\n\n```c++\n//1. 无参构造调用方式\nvoid test01(){\n    \n    //调用无参构造函数\n    Person person1; \n    person1.PrintPerson();\n \n    //无参构造函数错误调用方式\n    //Person person2();\n    //person2.PrintPerson();\n}\n//2. 调用有参构造函数\nvoid test02(){\n    \n    //第一种 括号法，最常用\n    Person person01(100);\n    person01.PrintPerson();\n \n    //调用拷贝构造函数\n    Person person02(person01);\n    person02.PrintPerson();\n \n    //第二种 匿名对象(显示调用构造函数)\n    Person(200); //匿名对象，没有名字的对象\n \n    Person person03 = Person(300);\n    person03.PrintPerson();\n \n    //注意: 使用匿名对象初始化判断调用哪一个构造函数，要看匿名对象的参数类型\n    Person person06(Person(400)); //等价于 Person person06 = Person(400);\n    person06.PrintPerson();\n \n    //第三种 =号法 隐式转换\n    Person person04 = 100; //Person person04 =  Person(100)\n    person04.PrintPerson();\n \n    //调用拷贝构造\n    Person person05 = person04; //Person person05 =  Person(person04)\n    person05.PrintPerson();\n}\n\n```\n\n\n","slug":"C++/构造函数的调用时机","published":1,"updated":"2023-08-25T08:47:00.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd6720025gcr7g40m7j55","content":"<h1 id=\"构造函数的调用时机\"><a href=\"#构造函数的调用时机\" class=\"headerlink\" title=\"构造函数的调用时机\"></a>构造函数的调用时机</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 无参构造调用方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//调用无参构造函数</span></span><br><span class=\"line\">    Person person1; </span><br><span class=\"line\">    person1.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//无参构造函数错误调用方式</span></span><br><span class=\"line\">    <span class=\"comment\">//Person person2();</span></span><br><span class=\"line\">    <span class=\"comment\">//person2.PrintPerson();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2. 调用有参构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//第一种 括号法，最常用</span></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person01</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">    person01.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//调用拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person02</span><span class=\"params\">(person01)</span></span>;</span><br><span class=\"line\">    person02.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//第二种 匿名对象(显示调用构造函数)</span></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"number\">200</span>); <span class=\"comment\">//匿名对象，没有名字的对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    Person person03 = <span class=\"built_in\">Person</span>(<span class=\"number\">300</span>);</span><br><span class=\"line\">    person03.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//注意: 使用匿名对象初始化判断调用哪一个构造函数，要看匿名对象的参数类型</span></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person06</span><span class=\"params\">(Person(<span class=\"number\">400</span>))</span></span>; <span class=\"comment\">//等价于 Person person06 = Person(400);</span></span><br><span class=\"line\">    person06.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//第三种 =号法 隐式转换</span></span><br><span class=\"line\">    Person person04 = <span class=\"number\">100</span>; <span class=\"comment\">//Person person04 =  Person(100)</span></span><br><span class=\"line\">    person04.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//调用拷贝构造</span></span><br><span class=\"line\">    Person person05 = person04; <span class=\"comment\">//Person person05 =  Person(person04)</span></span><br><span class=\"line\">    person05.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-6.png","cover_type":"img","excerpt":"","more":"<h1 id=\"构造函数的调用时机\"><a href=\"#构造函数的调用时机\" class=\"headerlink\" title=\"构造函数的调用时机\"></a>构造函数的调用时机</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 无参构造调用方式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//调用无参构造函数</span></span><br><span class=\"line\">    Person person1; </span><br><span class=\"line\">    person1.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//无参构造函数错误调用方式</span></span><br><span class=\"line\">    <span class=\"comment\">//Person person2();</span></span><br><span class=\"line\">    <span class=\"comment\">//person2.PrintPerson();</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2. 调用有参构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test02</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//第一种 括号法，最常用</span></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person01</span><span class=\"params\">(<span class=\"number\">100</span>)</span></span>;</span><br><span class=\"line\">    person01.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//调用拷贝构造函数</span></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person02</span><span class=\"params\">(person01)</span></span>;</span><br><span class=\"line\">    person02.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//第二种 匿名对象(显示调用构造函数)</span></span><br><span class=\"line\">    <span class=\"built_in\">Person</span>(<span class=\"number\">200</span>); <span class=\"comment\">//匿名对象，没有名字的对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    Person person03 = <span class=\"built_in\">Person</span>(<span class=\"number\">300</span>);</span><br><span class=\"line\">    person03.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//注意: 使用匿名对象初始化判断调用哪一个构造函数，要看匿名对象的参数类型</span></span><br><span class=\"line\">    <span class=\"function\">Person <span class=\"title\">person06</span><span class=\"params\">(Person(<span class=\"number\">400</span>))</span></span>; <span class=\"comment\">//等价于 Person person06 = Person(400);</span></span><br><span class=\"line\">    person06.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//第三种 =号法 隐式转换</span></span><br><span class=\"line\">    Person person04 = <span class=\"number\">100</span>; <span class=\"comment\">//Person person04 =  Person(100)</span></span><br><span class=\"line\">    person04.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//调用拷贝构造</span></span><br><span class=\"line\">    Person person05 = person04; <span class=\"comment\">//Person person05 =  Person(person04)</span></span><br><span class=\"line\">    person05.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"opencv常用api","date":"2023-08-24T14:38:18.631Z","description":null,"top_img":false,"_content":"\n# opencv常用api\n\n\n\n## **cvFloor：**\n\n返回不大于参数的最大整数值\n\n\n\n## **cvCeil：**\n\n返回不小于参数的最小整数值\n\n\n\n## **cvRound：**\n\n四舍五入\n\n\n\n## **Range类：**\n\n表示从start到end但是不包含end\n\n\n\n## **Mat::rowRange** and **Mat::colRange:** \n\n返回某些行或者列（只取左边界而不取右边界）\n\nexp:img1.rowRange(10,10);\n\n\n\n## **Rect(int x, int y, int width, int height)**;\n\n裁剪图片\n\n参数含义：\n\nRect（左上角x坐标 ， 左上角y坐标，矩形的宽，矩形的高）\n\nexp:img2 = img1(Rect(10,19,20,29);\n\n\n\n## **Mat::reshape(int cn, int rows)**:\n\ncn表示通道数，如果设置值为0则表示拖到不变，rows表示行数，如果设置为0则表示行数不变。 函数对原有矩阵进行序列化\n\n\n\n## **Mat::resize() ：**\n\n```\nvoid cv::resize(InputArray src,OutputArray dst,Size dsize,double fx = 0,double fy = 0,int interpolation = INTER_LINEAR)\n```\n\n![s rc  dsize  dst  fx , fy  interpolation  numpy. ndarray  tuple\\<int\\>  int  None  int ZÄ,  opencv ](media/84e9d962295b753134094e778499e2a0.png)\n\nexp：resize(img1, img2, Size(100, 100));\n\n\n\n## **copyTo：**\n\nimg1.copyTo(img2);\n\n\n\n## **clone():** \n\nimg2 = img1.clone();","source":"_posts/C++/opencv常用api.md","raw":"---\ntitle: opencv常用api\ndate:\ntags: \n- C++\n- Opencv\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# opencv常用api\n\n\n\n## **cvFloor：**\n\n返回不大于参数的最大整数值\n\n\n\n## **cvCeil：**\n\n返回不小于参数的最小整数值\n\n\n\n## **cvRound：**\n\n四舍五入\n\n\n\n## **Range类：**\n\n表示从start到end但是不包含end\n\n\n\n## **Mat::rowRange** and **Mat::colRange:** \n\n返回某些行或者列（只取左边界而不取右边界）\n\nexp:img1.rowRange(10,10);\n\n\n\n## **Rect(int x, int y, int width, int height)**;\n\n裁剪图片\n\n参数含义：\n\nRect（左上角x坐标 ， 左上角y坐标，矩形的宽，矩形的高）\n\nexp:img2 = img1(Rect(10,19,20,29);\n\n\n\n## **Mat::reshape(int cn, int rows)**:\n\ncn表示通道数，如果设置值为0则表示拖到不变，rows表示行数，如果设置为0则表示行数不变。 函数对原有矩阵进行序列化\n\n\n\n## **Mat::resize() ：**\n\n```\nvoid cv::resize(InputArray src,OutputArray dst,Size dsize,double fx = 0,double fy = 0,int interpolation = INTER_LINEAR)\n```\n\n![s rc  dsize  dst  fx , fy  interpolation  numpy. ndarray  tuple\\<int\\>  int  None  int ZÄ,  opencv ](media/84e9d962295b753134094e778499e2a0.png)\n\nexp：resize(img1, img2, Size(100, 100));\n\n\n\n## **copyTo：**\n\nimg1.copyTo(img2);\n\n\n\n## **clone():** \n\nimg2 = img1.clone();","slug":"C++/opencv常用api","published":1,"updated":"2023-08-25T08:45:29.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd6720028gcr7epal3so6","content":"<h1 id=\"opencv常用api\"><a href=\"#opencv常用api\" class=\"headerlink\" title=\"opencv常用api\"></a>opencv常用api</h1><h2 id=\"cvFloor：\"><a href=\"#cvFloor：\" class=\"headerlink\" title=\"cvFloor：\"></a><strong>cvFloor：</strong></h2><p>返回不大于参数的最大整数值</p>\n<h2 id=\"cvCeil：\"><a href=\"#cvCeil：\" class=\"headerlink\" title=\"cvCeil：\"></a><strong>cvCeil：</strong></h2><p>返回不小于参数的最小整数值</p>\n<h2 id=\"cvRound：\"><a href=\"#cvRound：\" class=\"headerlink\" title=\"cvRound：\"></a><strong>cvRound：</strong></h2><p>四舍五入</p>\n<h2 id=\"Range类：\"><a href=\"#Range类：\" class=\"headerlink\" title=\"Range类：\"></a><strong>Range类：</strong></h2><p>表示从start到end但是不包含end</p>\n<h2 id=\"Mat-rowRange-and-Mat-colRange\"><a href=\"#Mat-rowRange-and-Mat-colRange\" class=\"headerlink\" title=\"Mat::rowRange and Mat::colRange:\"></a><strong>Mat::rowRange</strong> and <strong>Mat::colRange:</strong></h2><p>返回某些行或者列（只取左边界而不取右边界）</p>\n<p>exp:img1.rowRange(10,10);</p>\n<h2 id=\"Rect-int-x-int-y-int-width-int-height\"><a href=\"#Rect-int-x-int-y-int-width-int-height\" class=\"headerlink\" title=\"Rect(int x, int y, int width, int height);\"></a><strong>Rect(int x, int y, int width, int height)</strong>;</h2><p>裁剪图片</p>\n<p>参数含义：</p>\n<p>Rect（左上角x坐标 ， 左上角y坐标，矩形的宽，矩形的高）</p>\n<p>exp:img2 &#x3D; img1(Rect(10,19,20,29);</p>\n<h2 id=\"Mat-reshape-int-cn-int-rows\"><a href=\"#Mat-reshape-int-cn-int-rows\" class=\"headerlink\" title=\"Mat::reshape(int cn, int rows):\"></a><strong>Mat::reshape(int cn, int rows)</strong>:</h2><p>cn表示通道数，如果设置值为0则表示拖到不变，rows表示行数，如果设置为0则表示行数不变。 函数对原有矩阵进行序列化</p>\n<h2 id=\"Mat-resize-：\"><a href=\"#Mat-resize-：\" class=\"headerlink\" title=\"Mat::resize() ：\"></a><strong>Mat::resize() ：</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void cv::resize(InputArray src,OutputArray dst,Size dsize,double fx = 0,double fy = 0,int interpolation = INTER_LINEAR)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/84e9d962295b753134094e778499e2a0.png\" alt=\"s rc  dsize  dst  fx , fy  interpolation  numpy. ndarray  tuple\\&lt;int\\&gt;  int  None  int ZÄ,  opencv \"></p>\n<p>exp：resize(img1, img2, Size(100, 100));</p>\n<h2 id=\"copyTo：\"><a href=\"#copyTo：\" class=\"headerlink\" title=\"copyTo：\"></a><strong>copyTo：</strong></h2><p>img1.copyTo(img2);</p>\n<h2 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone():\"></a><strong>clone():</strong></h2><p>img2 &#x3D; img1.clone();</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"opencv常用api\"><a href=\"#opencv常用api\" class=\"headerlink\" title=\"opencv常用api\"></a>opencv常用api</h1><h2 id=\"cvFloor：\"><a href=\"#cvFloor：\" class=\"headerlink\" title=\"cvFloor：\"></a><strong>cvFloor：</strong></h2><p>返回不大于参数的最大整数值</p>\n<h2 id=\"cvCeil：\"><a href=\"#cvCeil：\" class=\"headerlink\" title=\"cvCeil：\"></a><strong>cvCeil：</strong></h2><p>返回不小于参数的最小整数值</p>\n<h2 id=\"cvRound：\"><a href=\"#cvRound：\" class=\"headerlink\" title=\"cvRound：\"></a><strong>cvRound：</strong></h2><p>四舍五入</p>\n<h2 id=\"Range类：\"><a href=\"#Range类：\" class=\"headerlink\" title=\"Range类：\"></a><strong>Range类：</strong></h2><p>表示从start到end但是不包含end</p>\n<h2 id=\"Mat-rowRange-and-Mat-colRange\"><a href=\"#Mat-rowRange-and-Mat-colRange\" class=\"headerlink\" title=\"Mat::rowRange and Mat::colRange:\"></a><strong>Mat::rowRange</strong> and <strong>Mat::colRange:</strong></h2><p>返回某些行或者列（只取左边界而不取右边界）</p>\n<p>exp:img1.rowRange(10,10);</p>\n<h2 id=\"Rect-int-x-int-y-int-width-int-height\"><a href=\"#Rect-int-x-int-y-int-width-int-height\" class=\"headerlink\" title=\"Rect(int x, int y, int width, int height);\"></a><strong>Rect(int x, int y, int width, int height)</strong>;</h2><p>裁剪图片</p>\n<p>参数含义：</p>\n<p>Rect（左上角x坐标 ， 左上角y坐标，矩形的宽，矩形的高）</p>\n<p>exp:img2 &#x3D; img1(Rect(10,19,20,29);</p>\n<h2 id=\"Mat-reshape-int-cn-int-rows\"><a href=\"#Mat-reshape-int-cn-int-rows\" class=\"headerlink\" title=\"Mat::reshape(int cn, int rows):\"></a><strong>Mat::reshape(int cn, int rows)</strong>:</h2><p>cn表示通道数，如果设置值为0则表示拖到不变，rows表示行数，如果设置为0则表示行数不变。 函数对原有矩阵进行序列化</p>\n<h2 id=\"Mat-resize-：\"><a href=\"#Mat-resize-：\" class=\"headerlink\" title=\"Mat::resize() ：\"></a><strong>Mat::resize() ：</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void cv::resize(InputArray src,OutputArray dst,Size dsize,double fx = 0,double fy = 0,int interpolation = INTER_LINEAR)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/84e9d962295b753134094e778499e2a0.png\" alt=\"s rc  dsize  dst  fx , fy  interpolation  numpy. ndarray  tuple\\&lt;int\\&gt;  int  None  int ZÄ,  opencv \"></p>\n<p>exp：resize(img1, img2, Size(100, 100));</p>\n<h2 id=\"copyTo：\"><a href=\"#copyTo：\" class=\"headerlink\" title=\"copyTo：\"></a><strong>copyTo：</strong></h2><p>img1.copyTo(img2);</p>\n<h2 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone():\"></a><strong>clone():</strong></h2><p>img2 &#x3D; img1.clone();</p>\n"},{"title":"数据类型字节数","date":"2023-08-24T14:38:18.648Z","description":null,"top_img":false,"_content":"\n# 数据类型字节数\n\n\n\n![](media/b5d733fac8312c1270eb8bc87d58c555.png)\n\n1个字节 = 8位  n表示位\n\n整数有符号取值范围：[-2^(n-1), 2^(n-1) -1]\n\n整数无符号取值范围：[0, 2^n -1]\n\n```\n一、整型(int、short、long、long long)\n1、有符号整型\n有符号整型的数据类型通常包括 int、short、long、long long 四种，因为是有符号类型，所以前面要加上 signed ，但是通常省略，也就是说在代码中直接打出 int 类型就代表是有符号类型的。\n\n（1）int类型\n数据类型大小是 4 字节，能表示的数值范围是\n-2^(32-1) – 2^(32-1)-1 （即 -2147483648 ~ 2147483647）\n打印类型是 %d ，使用格式为 int 名 = 值;\n\n（2）short类型\n数据类型大小是 2 字节，能表示的数值范围是\n-2^(16-1) – 2^(16-1) -1 （即 -32768 ~ 32767）\n打印类型是 %hd ，使用格式为 short 名 = 值;\n\n（3）long类型\n数据类型大小是 4 字节，能表示的数值范围是\n-2^(32-1) – 2^(32-1)-1 （即 -2147483648 ~ 2147483647）\n打印类型是 %ld ，使用格式为 long 名 = 值;\n\n（4）long long类型\n数据类型大小是 8 字节，能表示的数值范围是\n-2^(64-1) ~ 2^(64-1)-1\n\n打印类型是 %lld ，使用格式为 long long 名 = 值;\n\n2、无符号整型\n无符号数用 unsigned 表示 ，只表示数据量，而没有方向（没有正负，且无符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。\n\n（1）unsigned int 类型\n数据类型大小是 4 字节，能表示的数值范围是\n0 – 2^(32）-1 （即 0~4294967295）\n打印类型是 %u ，使用格式为 unsigned int 名 = 值;\n\n（2）unsigned short 类型\n数据类型大小是 2 字节，能表示的数值范围是\n0 ~ 2^16 -1 （即 0~65535）\n打印类型是 %hu ，使用格式为 unsigned short 名 = 值;\n\n（3）unsigned long 类型\n数据类型大小是 4 字节，能表示的数值范围是\n0 – 2^(32）-1 （即 0~4294967295）\n打印类型是 %lu ，使用格式为 unsigned long 名 = 值;\n\n（4）unsigned long long 类型\n数据类型大小是 8 字节，能表示的数值范围是\n0~2^64-1\n打印类型是 %llu ，使用格式为 unsigned long long 名 = 值;\n```\n\n","source":"_posts/C++/数据类型字节数.md","raw":"---\ntitle: 数据类型字节数\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 数据类型字节数\n\n\n\n![](media/b5d733fac8312c1270eb8bc87d58c555.png)\n\n1个字节 = 8位  n表示位\n\n整数有符号取值范围：[-2^(n-1), 2^(n-1) -1]\n\n整数无符号取值范围：[0, 2^n -1]\n\n```\n一、整型(int、short、long、long long)\n1、有符号整型\n有符号整型的数据类型通常包括 int、short、long、long long 四种，因为是有符号类型，所以前面要加上 signed ，但是通常省略，也就是说在代码中直接打出 int 类型就代表是有符号类型的。\n\n（1）int类型\n数据类型大小是 4 字节，能表示的数值范围是\n-2^(32-1) – 2^(32-1)-1 （即 -2147483648 ~ 2147483647）\n打印类型是 %d ，使用格式为 int 名 = 值;\n\n（2）short类型\n数据类型大小是 2 字节，能表示的数值范围是\n-2^(16-1) – 2^(16-1) -1 （即 -32768 ~ 32767）\n打印类型是 %hd ，使用格式为 short 名 = 值;\n\n（3）long类型\n数据类型大小是 4 字节，能表示的数值范围是\n-2^(32-1) – 2^(32-1)-1 （即 -2147483648 ~ 2147483647）\n打印类型是 %ld ，使用格式为 long 名 = 值;\n\n（4）long long类型\n数据类型大小是 8 字节，能表示的数值范围是\n-2^(64-1) ~ 2^(64-1)-1\n\n打印类型是 %lld ，使用格式为 long long 名 = 值;\n\n2、无符号整型\n无符号数用 unsigned 表示 ，只表示数据量，而没有方向（没有正负，且无符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。\n\n（1）unsigned int 类型\n数据类型大小是 4 字节，能表示的数值范围是\n0 – 2^(32）-1 （即 0~4294967295）\n打印类型是 %u ，使用格式为 unsigned int 名 = 值;\n\n（2）unsigned short 类型\n数据类型大小是 2 字节，能表示的数值范围是\n0 ~ 2^16 -1 （即 0~65535）\n打印类型是 %hu ，使用格式为 unsigned short 名 = 值;\n\n（3）unsigned long 类型\n数据类型大小是 4 字节，能表示的数值范围是\n0 – 2^(32）-1 （即 0~4294967295）\n打印类型是 %lu ，使用格式为 unsigned long 名 = 值;\n\n（4）unsigned long long 类型\n数据类型大小是 8 字节，能表示的数值范围是\n0~2^64-1\n打印类型是 %llu ，使用格式为 unsigned long long 名 = 值;\n```\n\n","slug":"C++/数据类型字节数","published":1,"updated":"2023-08-25T08:47:41.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd673002bgcr7465h8y7x","content":"<h1 id=\"数据类型字节数\"><a href=\"#数据类型字节数\" class=\"headerlink\" title=\"数据类型字节数\"></a>数据类型字节数</h1><p><img src=\"/media/b5d733fac8312c1270eb8bc87d58c555.png\"></p>\n<p>1个字节 &#x3D; 8位  n表示位</p>\n<p>整数有符号取值范围：[-2^(n-1), 2^(n-1) -1]</p>\n<p>整数无符号取值范围：[0, 2^n -1]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、整型(int、short、long、long long)</span><br><span class=\"line\">1、有符号整型</span><br><span class=\"line\">有符号整型的数据类型通常包括 int、short、long、long long 四种，因为是有符号类型，所以前面要加上 signed ，但是通常省略，也就是说在代码中直接打出 int 类型就代表是有符号类型的。</span><br><span class=\"line\"></span><br><span class=\"line\">（1）int类型</span><br><span class=\"line\">数据类型大小是 4 字节，能表示的数值范围是</span><br><span class=\"line\">-2^(32-1) – 2^(32-1)-1 （即 -2147483648 ~ 2147483647）</span><br><span class=\"line\">打印类型是 %d ，使用格式为 int 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（2）short类型</span><br><span class=\"line\">数据类型大小是 2 字节，能表示的数值范围是</span><br><span class=\"line\">-2^(16-1) – 2^(16-1) -1 （即 -32768 ~ 32767）</span><br><span class=\"line\">打印类型是 %hd ，使用格式为 short 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（3）long类型</span><br><span class=\"line\">数据类型大小是 4 字节，能表示的数值范围是</span><br><span class=\"line\">-2^(32-1) – 2^(32-1)-1 （即 -2147483648 ~ 2147483647）</span><br><span class=\"line\">打印类型是 %ld ，使用格式为 long 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（4）long long类型</span><br><span class=\"line\">数据类型大小是 8 字节，能表示的数值范围是</span><br><span class=\"line\">-2^(64-1) ~ 2^(64-1)-1</span><br><span class=\"line\"></span><br><span class=\"line\">打印类型是 %lld ，使用格式为 long long 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">2、无符号整型</span><br><span class=\"line\">无符号数用 unsigned 表示 ，只表示数据量，而没有方向（没有正负，且无符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。</span><br><span class=\"line\"></span><br><span class=\"line\">（1）unsigned int 类型</span><br><span class=\"line\">数据类型大小是 4 字节，能表示的数值范围是</span><br><span class=\"line\">0 – 2^(32）-1 （即 0~4294967295）</span><br><span class=\"line\">打印类型是 %u ，使用格式为 unsigned int 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（2）unsigned short 类型</span><br><span class=\"line\">数据类型大小是 2 字节，能表示的数值范围是</span><br><span class=\"line\">0 ~ 2^16 -1 （即 0~65535）</span><br><span class=\"line\">打印类型是 %hu ，使用格式为 unsigned short 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（3）unsigned long 类型</span><br><span class=\"line\">数据类型大小是 4 字节，能表示的数值范围是</span><br><span class=\"line\">0 – 2^(32）-1 （即 0~4294967295）</span><br><span class=\"line\">打印类型是 %lu ，使用格式为 unsigned long 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（4）unsigned long long 类型</span><br><span class=\"line\">数据类型大小是 8 字节，能表示的数值范围是</span><br><span class=\"line\">0~2^64-1</span><br><span class=\"line\">打印类型是 %llu ，使用格式为 unsigned long long 名 = 值;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":"<h1 id=\"数据类型字节数\"><a href=\"#数据类型字节数\" class=\"headerlink\" title=\"数据类型字节数\"></a>数据类型字节数</h1><p><img src=\"/media/b5d733fac8312c1270eb8bc87d58c555.png\"></p>\n<p>1个字节 &#x3D; 8位  n表示位</p>\n<p>整数有符号取值范围：[-2^(n-1), 2^(n-1) -1]</p>\n<p>整数无符号取值范围：[0, 2^n -1]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一、整型(int、short、long、long long)</span><br><span class=\"line\">1、有符号整型</span><br><span class=\"line\">有符号整型的数据类型通常包括 int、short、long、long long 四种，因为是有符号类型，所以前面要加上 signed ，但是通常省略，也就是说在代码中直接打出 int 类型就代表是有符号类型的。</span><br><span class=\"line\"></span><br><span class=\"line\">（1）int类型</span><br><span class=\"line\">数据类型大小是 4 字节，能表示的数值范围是</span><br><span class=\"line\">-2^(32-1) – 2^(32-1)-1 （即 -2147483648 ~ 2147483647）</span><br><span class=\"line\">打印类型是 %d ，使用格式为 int 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（2）short类型</span><br><span class=\"line\">数据类型大小是 2 字节，能表示的数值范围是</span><br><span class=\"line\">-2^(16-1) – 2^(16-1) -1 （即 -32768 ~ 32767）</span><br><span class=\"line\">打印类型是 %hd ，使用格式为 short 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（3）long类型</span><br><span class=\"line\">数据类型大小是 4 字节，能表示的数值范围是</span><br><span class=\"line\">-2^(32-1) – 2^(32-1)-1 （即 -2147483648 ~ 2147483647）</span><br><span class=\"line\">打印类型是 %ld ，使用格式为 long 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（4）long long类型</span><br><span class=\"line\">数据类型大小是 8 字节，能表示的数值范围是</span><br><span class=\"line\">-2^(64-1) ~ 2^(64-1)-1</span><br><span class=\"line\"></span><br><span class=\"line\">打印类型是 %lld ，使用格式为 long long 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">2、无符号整型</span><br><span class=\"line\">无符号数用 unsigned 表示 ，只表示数据量，而没有方向（没有正负，且无符号数最高位不是符号位，而就是数的一部分，无符号数不可能是负数。</span><br><span class=\"line\"></span><br><span class=\"line\">（1）unsigned int 类型</span><br><span class=\"line\">数据类型大小是 4 字节，能表示的数值范围是</span><br><span class=\"line\">0 – 2^(32）-1 （即 0~4294967295）</span><br><span class=\"line\">打印类型是 %u ，使用格式为 unsigned int 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（2）unsigned short 类型</span><br><span class=\"line\">数据类型大小是 2 字节，能表示的数值范围是</span><br><span class=\"line\">0 ~ 2^16 -1 （即 0~65535）</span><br><span class=\"line\">打印类型是 %hu ，使用格式为 unsigned short 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（3）unsigned long 类型</span><br><span class=\"line\">数据类型大小是 4 字节，能表示的数值范围是</span><br><span class=\"line\">0 – 2^(32）-1 （即 0~4294967295）</span><br><span class=\"line\">打印类型是 %lu ，使用格式为 unsigned long 名 = 值;</span><br><span class=\"line\"></span><br><span class=\"line\">（4）unsigned long long 类型</span><br><span class=\"line\">数据类型大小是 8 字节，能表示的数值范围是</span><br><span class=\"line\">0~2^64-1</span><br><span class=\"line\">打印类型是 %llu ，使用格式为 unsigned long long 名 = 值;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"计算时间","date":"2023-08-24T14:38:18.653Z","description":null,"top_img":false,"_content":"\n# 计算时间\n\n```c++\n#include<chrono>\nstd::chrono::steady_clock::time_point t1 = std::chrono::steady_clock::now();\nstd::chrono::steady_clock::time_point t2 = std::chrono::steady_clock::now();\ndouble ttrack = std::chrono::duration_cast< std::chrono::duration<double>>(t2-t1).count();\n```\n\n\n","source":"_posts/C++/计算时间.md","raw":"---\ntitle: 计算时间\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 计算时间\n\n```c++\n#include<chrono>\nstd::chrono::steady_clock::time_point t1 = std::chrono::steady_clock::now();\nstd::chrono::steady_clock::time_point t2 = std::chrono::steady_clock::now();\ndouble ttrack = std::chrono::duration_cast< std::chrono::duration<double>>(t2-t1).count();\n```\n\n\n","slug":"C++/计算时间","published":1,"updated":"2023-08-25T08:47:16.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd673002egcr7hvd69yhi","content":"<h1 id=\"计算时间\"><a href=\"#计算时间\" class=\"headerlink\" title=\"计算时间\"></a>计算时间</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\">std::chrono::steady_clock::time_point t1 = std::chrono::steady_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\">std::chrono::steady_clock::time_point t2 = std::chrono::steady_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"><span class=\"type\">double</span> ttrack = std::chrono::duration_cast&lt; std::chrono::duration&lt;<span class=\"type\">double</span>&gt;&gt;(t2-t1).<span class=\"built_in\">count</span>();</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-9.png","cover_type":"img","excerpt":"","more":"<h1 id=\"计算时间\"><a href=\"#计算时间\" class=\"headerlink\" title=\"计算时间\"></a>计算时间</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\">std::chrono::steady_clock::time_point t1 = std::chrono::steady_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\">std::chrono::steady_clock::time_point t2 = std::chrono::steady_clock::<span class=\"built_in\">now</span>();</span><br><span class=\"line\"><span class=\"type\">double</span> ttrack = std::chrono::duration_cast&lt; std::chrono::duration&lt;<span class=\"type\">double</span>&gt;&gt;(t2-t1).<span class=\"built_in\">count</span>();</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"类知识点","date":"2023-08-24T14:38:18.652Z","description":null,"top_img":false,"_content":"\n# 类知识点\n\n1. 类声明描述如何分配内存，但是并不分配内存\n\n   \n\n2. 对于静态成员函数，在类外进行初始化\n\n   \n\n3. 构造函数用于创建对象\n\n   \n\n4. 函数返回对象时会调用拷贝构造函数\n\n   \n\n5. 一个类的所有对象共享一组类方法\n\n   \n\n6. 继承类可以重新定义在父类中的函数，并且使用虚函数语法时，可以使用父类指针或者引用指向继承类对象，会根据指向的对象类型来选择函数方法，如果不使用虚函数，则只会根据引用或者指针类型选择函数方法，这样就会造成冲突。也就是使用了动态联编，而后者则是静态联编。\n\n   \n\n7. 最好对类数据成员采用私有访问控制，不要使用保护访问控制；同时使用基类方法使派生类能够访问基类数据。\n\n   \n\n8. 包含动态内存分配时（new delete）要考虑深浅拷贝问题！默认复制构造函数对于动态内存分配来说是不合适的，容易造成内存的泄露。\n\n   \n\n9. 一般使用对象作为函数参数时，应该按照引用传递而不是值传递，这样是为了提高效率，按值传递对象涉及到生成临时拷贝。返回对象与返回引用与参数时情况相似。\n\n   \n\n10. 使用explicit来防止单参数构造函数的隐式转换，使用const方法防止修改数据\n\n    ```\n    class t(int a);\n    t = 10; 存在隐式转换\n    ```\n\n    \n\n11. 派生类的成员可以直接访问基类的保护成员，但是不能直接访问基类的私有成员","source":"_posts/C++/类知识点.md","raw":"---\ntitle: 类知识点\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 类知识点\n\n1. 类声明描述如何分配内存，但是并不分配内存\n\n   \n\n2. 对于静态成员函数，在类外进行初始化\n\n   \n\n3. 构造函数用于创建对象\n\n   \n\n4. 函数返回对象时会调用拷贝构造函数\n\n   \n\n5. 一个类的所有对象共享一组类方法\n\n   \n\n6. 继承类可以重新定义在父类中的函数，并且使用虚函数语法时，可以使用父类指针或者引用指向继承类对象，会根据指向的对象类型来选择函数方法，如果不使用虚函数，则只会根据引用或者指针类型选择函数方法，这样就会造成冲突。也就是使用了动态联编，而后者则是静态联编。\n\n   \n\n7. 最好对类数据成员采用私有访问控制，不要使用保护访问控制；同时使用基类方法使派生类能够访问基类数据。\n\n   \n\n8. 包含动态内存分配时（new delete）要考虑深浅拷贝问题！默认复制构造函数对于动态内存分配来说是不合适的，容易造成内存的泄露。\n\n   \n\n9. 一般使用对象作为函数参数时，应该按照引用传递而不是值传递，这样是为了提高效率，按值传递对象涉及到生成临时拷贝。返回对象与返回引用与参数时情况相似。\n\n   \n\n10. 使用explicit来防止单参数构造函数的隐式转换，使用const方法防止修改数据\n\n    ```\n    class t(int a);\n    t = 10; 存在隐式转换\n    ```\n\n    \n\n11. 派生类的成员可以直接访问基类的保护成员，但是不能直接访问基类的私有成员","slug":"C++/类知识点","published":1,"updated":"2023-08-25T08:47:26.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd673002hgcr71ja306vk","content":"<h1 id=\"类知识点\"><a href=\"#类知识点\" class=\"headerlink\" title=\"类知识点\"></a>类知识点</h1><ol>\n<li><p>类声明描述如何分配内存，但是并不分配内存</p>\n</li>\n<li><p>对于静态成员函数，在类外进行初始化</p>\n</li>\n<li><p>构造函数用于创建对象</p>\n</li>\n<li><p>函数返回对象时会调用拷贝构造函数</p>\n</li>\n<li><p>一个类的所有对象共享一组类方法</p>\n</li>\n<li><p>继承类可以重新定义在父类中的函数，并且使用虚函数语法时，可以使用父类指针或者引用指向继承类对象，会根据指向的对象类型来选择函数方法，如果不使用虚函数，则只会根据引用或者指针类型选择函数方法，这样就会造成冲突。也就是使用了动态联编，而后者则是静态联编。</p>\n</li>\n<li><p>最好对类数据成员采用私有访问控制，不要使用保护访问控制；同时使用基类方法使派生类能够访问基类数据。</p>\n</li>\n<li><p>包含动态内存分配时（new delete）要考虑深浅拷贝问题！默认复制构造函数对于动态内存分配来说是不合适的，容易造成内存的泄露。</p>\n</li>\n<li><p>一般使用对象作为函数参数时，应该按照引用传递而不是值传递，这样是为了提高效率，按值传递对象涉及到生成临时拷贝。返回对象与返回引用与参数时情况相似。</p>\n</li>\n<li><p>使用explicit来防止单参数构造函数的隐式转换，使用const方法防止修改数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class t(int a);</span><br><span class=\"line\">t = 10; 存在隐式转换</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>派生类的成员可以直接访问基类的保护成员，但是不能直接访问基类的私有成员</p>\n</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"类知识点\"><a href=\"#类知识点\" class=\"headerlink\" title=\"类知识点\"></a>类知识点</h1><ol>\n<li><p>类声明描述如何分配内存，但是并不分配内存</p>\n</li>\n<li><p>对于静态成员函数，在类外进行初始化</p>\n</li>\n<li><p>构造函数用于创建对象</p>\n</li>\n<li><p>函数返回对象时会调用拷贝构造函数</p>\n</li>\n<li><p>一个类的所有对象共享一组类方法</p>\n</li>\n<li><p>继承类可以重新定义在父类中的函数，并且使用虚函数语法时，可以使用父类指针或者引用指向继承类对象，会根据指向的对象类型来选择函数方法，如果不使用虚函数，则只会根据引用或者指针类型选择函数方法，这样就会造成冲突。也就是使用了动态联编，而后者则是静态联编。</p>\n</li>\n<li><p>最好对类数据成员采用私有访问控制，不要使用保护访问控制；同时使用基类方法使派生类能够访问基类数据。</p>\n</li>\n<li><p>包含动态内存分配时（new delete）要考虑深浅拷贝问题！默认复制构造函数对于动态内存分配来说是不合适的，容易造成内存的泄露。</p>\n</li>\n<li><p>一般使用对象作为函数参数时，应该按照引用传递而不是值传递，这样是为了提高效率，按值传递对象涉及到生成临时拷贝。返回对象与返回引用与参数时情况相似。</p>\n</li>\n<li><p>使用explicit来防止单参数构造函数的隐式转换，使用const方法防止修改数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class t(int a);</span><br><span class=\"line\">t = 10; 存在隐式转换</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>派生类的成员可以直接访问基类的保护成员，但是不能直接访问基类的私有成员</p>\n</li>\n</ol>\n"},{"title":"QT迁移项目后显示修改时间大于当前时间","date":"2023-08-25T09:08:59.459Z","description":null,"top_img":false,"_content":"\n# QT迁移项目后显示修改时间大于当前时间\n\n打开终端输入\n\n```shell\nfind /项目路径 -type f -exec touch {} +\n```\n\n\n","source":"_posts/QT/QT迁移项目后显示修改时间大于当前时间.md","raw":"---\ntitle: QT迁移项目后显示修改时间大于当前时间\ndate:\ntags: \n- Qt\ncategories:\n- Qt\ndescription:\ntop_img: false\n\n---\n\n# QT迁移项目后显示修改时间大于当前时间\n\n打开终端输入\n\n```shell\nfind /项目路径 -type f -exec touch {} +\n```\n\n\n","slug":"QT/QT迁移项目后显示修改时间大于当前时间","published":1,"updated":"2023-08-25T09:16:45.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd674002kgcr70vjyaulq","content":"<h1 id=\"QT迁移项目后显示修改时间大于当前时间\"><a href=\"#QT迁移项目后显示修改时间大于当前时间\" class=\"headerlink\" title=\"QT迁移项目后显示修改时间大于当前时间\"></a>QT迁移项目后显示修改时间大于当前时间</h1><p>打开终端输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /项目路径 -type f -exec touch &#123;&#125; +</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-9.png","cover_type":"img","excerpt":"","more":"<h1 id=\"QT迁移项目后显示修改时间大于当前时间\"><a href=\"#QT迁移项目后显示修改时间大于当前时间\" class=\"headerlink\" title=\"QT迁移项目后显示修改时间大于当前时间\"></a>QT迁移项目后显示修改时间大于当前时间</h1><p>打开终端输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find /项目路径 -type f -exec touch &#123;&#125; +</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"常规数据类型转换","date":"2023-08-24T14:38:18.654Z","description":null,"top_img":false,"_content":"\n# 转换\n\n## int to string \n\n```c++\nstring = to_string(int a)\n```\n\n\n\n## string to char\n\n```c++\n*.c_str()\n```\n\n\n\n## char\\* to double \n\n```c++\nstd::atof()\n```\n\n","source":"_posts/C++/转换.md","raw":"---\ntitle: 常规数据类型转换\ndate:\ntags: \n- C++\ncategories:\n- C++\ndescription:\ntop_img: false\n\n---\n\n# 转换\n\n## int to string \n\n```c++\nstring = to_string(int a)\n```\n\n\n\n## string to char\n\n```c++\n*.c_str()\n```\n\n\n\n## char\\* to double \n\n```c++\nstd::atof()\n```\n\n","slug":"C++/转换","published":1,"updated":"2023-08-25T08:48:00.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd674002ngcr7b63d85mi","content":"<h1 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h1><h2 id=\"int-to-string\"><a href=\"#int-to-string\" class=\"headerlink\" title=\"int to string\"></a>int to string</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"built_in\">to_string</span>(<span class=\"type\">int</span> a)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"string-to-char\"><a href=\"#string-to-char\" class=\"headerlink\" title=\"string to char\"></a>string to char</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.<span class=\"built_in\">c_str</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"char-to-double\"><a href=\"#char-to-double\" class=\"headerlink\" title=\"char* to double\"></a>char* to double</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::<span class=\"built_in\">atof</span>()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-6.png","cover_type":"img","excerpt":"","more":"<h1 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h1><h2 id=\"int-to-string\"><a href=\"#int-to-string\" class=\"headerlink\" title=\"int to string\"></a>int to string</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string = <span class=\"built_in\">to_string</span>(<span class=\"type\">int</span> a)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"string-to-char\"><a href=\"#string-to-char\" class=\"headerlink\" title=\"string to char\"></a>string to char</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*.<span class=\"built_in\">c_str</span>()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"char-to-double\"><a href=\"#char-to-double\" class=\"headerlink\" title=\"char* to double\"></a>char* to double</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">std::<span class=\"built_in\">atof</span>()</span><br></pre></td></tr></table></figure>\n\n"},{"title":"基于arm架构的NVIDIA Xavier安装Qt","date":"2023-08-25T09:08:59.461Z","description":null,"top_img":false,"_content":"\n# 基于arm架构的NVIDIA Xavier安装Qt\n\n## **Part1：安装Qt**\n\n#### 1.安装Qt Creator\n\n```shell\nsudo apt-get install qt5-default qtcreator -y\n```\n\n#### 2.安装Qt示例和文档\n\n```sh\nsudo apt-get install qt5-doc qt5-doc-html qtbase5-doc-html qtbase5-examples -y\n```\n\n\n\n## **Part2：配置Qt**\n\n#### 1.搜索Qt并打开应用程序，当然也可以用命令行直接打开：\n\n![](media/1f6646aa0ab8a10bff97905f3abc2bd0.png)\n\n\n\n#### 2.Tools-\\>Options-\\>Build & Run-\\>Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为/usr/bin/gcc，添加完路径之后还要修改开发平台，如图所示：\n\n![](media/58a8c77bc1b373fbe5c744399c14d865.png)\n\n\n\n#### 3.切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：\n\n![](media/fda7277fe1a8ca54433d8f2a47a26758.png)\n","source":"_posts/QT/基于arm架构的NVIDIA_Xavier安装Qt.md","raw":"---\ntitle: 基于arm架构的NVIDIA Xavier安装Qt\ndate:\ntags: \n- Qt\n- Xavier\ncategories:\n- Qt\ndescription:\ntop_img: false\n---\n\n# 基于arm架构的NVIDIA Xavier安装Qt\n\n## **Part1：安装Qt**\n\n#### 1.安装Qt Creator\n\n```shell\nsudo apt-get install qt5-default qtcreator -y\n```\n\n#### 2.安装Qt示例和文档\n\n```sh\nsudo apt-get install qt5-doc qt5-doc-html qtbase5-doc-html qtbase5-examples -y\n```\n\n\n\n## **Part2：配置Qt**\n\n#### 1.搜索Qt并打开应用程序，当然也可以用命令行直接打开：\n\n![](media/1f6646aa0ab8a10bff97905f3abc2bd0.png)\n\n\n\n#### 2.Tools-\\>Options-\\>Build & Run-\\>Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为/usr/bin/gcc，添加完路径之后还要修改开发平台，如图所示：\n\n![](media/58a8c77bc1b373fbe5c744399c14d865.png)\n\n\n\n#### 3.切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：\n\n![](media/fda7277fe1a8ca54433d8f2a47a26758.png)\n","slug":"QT/基于arm架构的NVIDIA_Xavier安装Qt","published":1,"updated":"2023-08-25T09:11:17.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd675002sgcr7f924d130","content":"<h1 id=\"基于arm架构的NVIDIA-Xavier安装Qt\"><a href=\"#基于arm架构的NVIDIA-Xavier安装Qt\" class=\"headerlink\" title=\"基于arm架构的NVIDIA Xavier安装Qt\"></a>基于arm架构的NVIDIA Xavier安装Qt</h1><h2 id=\"Part1：安装Qt\"><a href=\"#Part1：安装Qt\" class=\"headerlink\" title=\"Part1：安装Qt\"></a><strong>Part1：安装Qt</strong></h2><h4 id=\"1-安装Qt-Creator\"><a href=\"#1-安装Qt-Creator\" class=\"headerlink\" title=\"1.安装Qt Creator\"></a>1.安装Qt Creator</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install qt5-default qtcreator -y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-安装Qt示例和文档\"><a href=\"#2-安装Qt示例和文档\" class=\"headerlink\" title=\"2.安装Qt示例和文档\"></a>2.安装Qt示例和文档</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install qt5-doc qt5-doc-html qtbase5-doc-html qtbase5-examples -y</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Part2：配置Qt\"><a href=\"#Part2：配置Qt\" class=\"headerlink\" title=\"Part2：配置Qt\"></a><strong>Part2：配置Qt</strong></h2><h4 id=\"1-搜索Qt并打开应用程序，当然也可以用命令行直接打开：\"><a href=\"#1-搜索Qt并打开应用程序，当然也可以用命令行直接打开：\" class=\"headerlink\" title=\"1.搜索Qt并打开应用程序，当然也可以用命令行直接打开：\"></a>1.搜索Qt并打开应用程序，当然也可以用命令行直接打开：</h4><p><img src=\"/media/1f6646aa0ab8a10bff97905f3abc2bd0.png\"></p>\n<h4 id=\"2-Tools-Options-Build-Run-Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为-usr-bin-gcc，添加完路径之后还要修改开发平台，如图所示：\"><a href=\"#2-Tools-Options-Build-Run-Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为-usr-bin-gcc，添加完路径之后还要修改开发平台，如图所示：\" class=\"headerlink\" title=\"2.Tools-&gt;Options-&gt;Build &amp; Run-&gt;Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为&#x2F;usr&#x2F;bin&#x2F;gcc，添加完路径之后还要修改开发平台，如图所示：\"></a>2.Tools-&gt;Options-&gt;Build &amp; Run-&gt;Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为&#x2F;usr&#x2F;bin&#x2F;gcc，添加完路径之后还要修改开发平台，如图所示：</h4><p><img src=\"/media/58a8c77bc1b373fbe5c744399c14d865.png\"></p>\n<h4 id=\"3-切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：\"><a href=\"#3-切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：\" class=\"headerlink\" title=\"3.切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：\"></a>3.切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：</h4><p><img src=\"/media/fda7277fe1a8ca54433d8f2a47a26758.png\"></p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-3.png","cover_type":"img","excerpt":"","more":"<h1 id=\"基于arm架构的NVIDIA-Xavier安装Qt\"><a href=\"#基于arm架构的NVIDIA-Xavier安装Qt\" class=\"headerlink\" title=\"基于arm架构的NVIDIA Xavier安装Qt\"></a>基于arm架构的NVIDIA Xavier安装Qt</h1><h2 id=\"Part1：安装Qt\"><a href=\"#Part1：安装Qt\" class=\"headerlink\" title=\"Part1：安装Qt\"></a><strong>Part1：安装Qt</strong></h2><h4 id=\"1-安装Qt-Creator\"><a href=\"#1-安装Qt-Creator\" class=\"headerlink\" title=\"1.安装Qt Creator\"></a>1.安装Qt Creator</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install qt5-default qtcreator -y</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-安装Qt示例和文档\"><a href=\"#2-安装Qt示例和文档\" class=\"headerlink\" title=\"2.安装Qt示例和文档\"></a>2.安装Qt示例和文档</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install qt5-doc qt5-doc-html qtbase5-doc-html qtbase5-examples -y</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Part2：配置Qt\"><a href=\"#Part2：配置Qt\" class=\"headerlink\" title=\"Part2：配置Qt\"></a><strong>Part2：配置Qt</strong></h2><h4 id=\"1-搜索Qt并打开应用程序，当然也可以用命令行直接打开：\"><a href=\"#1-搜索Qt并打开应用程序，当然也可以用命令行直接打开：\" class=\"headerlink\" title=\"1.搜索Qt并打开应用程序，当然也可以用命令行直接打开：\"></a>1.搜索Qt并打开应用程序，当然也可以用命令行直接打开：</h4><p><img src=\"/media/1f6646aa0ab8a10bff97905f3abc2bd0.png\"></p>\n<h4 id=\"2-Tools-Options-Build-Run-Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为-usr-bin-gcc，添加完路径之后还要修改开发平台，如图所示：\"><a href=\"#2-Tools-Options-Build-Run-Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为-usr-bin-gcc，添加完路径之后还要修改开发平台，如图所示：\" class=\"headerlink\" title=\"2.Tools-&gt;Options-&gt;Build &amp; Run-&gt;Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为&#x2F;usr&#x2F;bin&#x2F;gcc，添加完路径之后还要修改开发平台，如图所示：\"></a>2.Tools-&gt;Options-&gt;Build &amp; Run-&gt;Compilers，单击add选择添加GCC编译器，GCC编译器默认路径为&#x2F;usr&#x2F;bin&#x2F;gcc，添加完路径之后还要修改开发平台，如图所示：</h4><p><img src=\"/media/58a8c77bc1b373fbe5c744399c14d865.png\"></p>\n<h4 id=\"3-切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：\"><a href=\"#3-切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：\" class=\"headerlink\" title=\"3.切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：\"></a>3.切换到Kit下，添加开发套件。名称可以随便写，需要注意的是必须先配置上一步的GCC，这一步才能直接添加GCC，否则就会像Desktop套件一样报错：</h4><p><img src=\"/media/fda7277fe1a8ca54433d8f2a47a26758.png\"></p>\n"},{"title":"项目默认文件介绍","date":"2023-08-25T09:08:59.463Z","description":null,"top_img":false,"_content":"\n# 项目默认文件介绍\n\n## **main.cpp**\n\n```c++\n#include \"mainwindow.h\"\n#include <QApplication> //应用程序类\n\n//argc 命令行变量数量 argv 命令行变量数组\n\nint main(int argc, char *argv[])\n{\n\n\t//应用程序对象 在Qt中应用程序对象有且仅有一个\n\tQApplication a(argc, argv);\n\n\t//通过 窗口类实例化对象\n\tMainWindow w;\n\n\t//窗口不会默认弹出，需要调用show方法显示\n\tw.show();\n\n\t//a.exc();加入消息循环机制 阻塞功能\n\treturn a.exec();\n\n}\n```\n\n\n\n## **.pro文件**\n\n```c++\nQT += core gui //Qt包含的模块\n\ngreaterThan(QT_MAJOR_VERSION, 4): QT += widgets //大于4版本 加入 widgets 模块\n\nTARGET = 01_QtFirst //生成.exe程序的名称\n\nTEMPLATE = app //模板 应用程序模板\n\nSOURCES += main.cpp\\\\ //源文件\n\nmywidget.cpp\n\nHEADERS += mywidget.h //头文件\n```\n\n\n","source":"_posts/QT/项目默认文件介绍.md","raw":"---\ntitle: 项目默认文件介绍\ndate:\ntags: \n- Qt\ncategories:\n- Qt\ndescription:\ntop_img: false\n---\n\n# 项目默认文件介绍\n\n## **main.cpp**\n\n```c++\n#include \"mainwindow.h\"\n#include <QApplication> //应用程序类\n\n//argc 命令行变量数量 argv 命令行变量数组\n\nint main(int argc, char *argv[])\n{\n\n\t//应用程序对象 在Qt中应用程序对象有且仅有一个\n\tQApplication a(argc, argv);\n\n\t//通过 窗口类实例化对象\n\tMainWindow w;\n\n\t//窗口不会默认弹出，需要调用show方法显示\n\tw.show();\n\n\t//a.exc();加入消息循环机制 阻塞功能\n\treturn a.exec();\n\n}\n```\n\n\n\n## **.pro文件**\n\n```c++\nQT += core gui //Qt包含的模块\n\ngreaterThan(QT_MAJOR_VERSION, 4): QT += widgets //大于4版本 加入 widgets 模块\n\nTARGET = 01_QtFirst //生成.exe程序的名称\n\nTEMPLATE = app //模板 应用程序模板\n\nSOURCES += main.cpp\\\\ //源文件\n\nmywidget.cpp\n\nHEADERS += mywidget.h //头文件\n```\n\n\n","slug":"QT/项目默认文件介绍","published":1,"updated":"2023-08-25T09:10:54.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd675002vgcr73segcpu4","content":"<h1 id=\"项目默认文件介绍\"><a href=\"#项目默认文件介绍\" class=\"headerlink\" title=\"项目默认文件介绍\"></a>项目默认文件介绍</h1><h2 id=\"main-cpp\"><a href=\"#main-cpp\" class=\"headerlink\" title=\"main.cpp\"></a><strong>main.cpp</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mainwindow.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QApplication&gt;</span> <span class=\"comment\">//应用程序类</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//argc 命令行变量数量 argv 命令行变量数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//应用程序对象 在Qt中应用程序对象有且仅有一个</span></span><br><span class=\"line\">\t<span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过 窗口类实例化对象</span></span><br><span class=\"line\">\tMainWindow w;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//窗口不会默认弹出，需要调用show方法显示</span></span><br><span class=\"line\">\tw.<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//a.exc();加入消息循环机制 阻塞功能</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pro文件\"><a href=\"#pro文件\" class=\"headerlink\" title=\".pro文件\"></a><strong>.pro文件</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QT += core gui <span class=\"comment\">//Qt包含的模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">greaterThan</span>(QT_MAJOR_VERSION, <span class=\"number\">4</span>): QT += widgets <span class=\"comment\">//大于4版本 加入 widgets 模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">TARGET = <span class=\"number\">01</span>_QtFirst <span class=\"comment\">//生成.exe程序的名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">TEMPLATE = app <span class=\"comment\">//模板 应用程序模板</span></span><br><span class=\"line\"></span><br><span class=\"line\">SOURCES += main.cpp\\\\ <span class=\"comment\">//源文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">mywidget.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">HEADERS += mywidget.h <span class=\"comment\">//头文件</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"项目默认文件介绍\"><a href=\"#项目默认文件介绍\" class=\"headerlink\" title=\"项目默认文件介绍\"></a>项目默认文件介绍</h1><h2 id=\"main-cpp\"><a href=\"#main-cpp\" class=\"headerlink\" title=\"main.cpp\"></a><strong>main.cpp</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;mainwindow.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QApplication&gt;</span> <span class=\"comment\">//应用程序类</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//argc 命令行变量数量 argv 命令行变量数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//应用程序对象 在Qt中应用程序对象有且仅有一个</span></span><br><span class=\"line\">\t<span class=\"function\">QApplication <span class=\"title\">a</span><span class=\"params\">(argc, argv)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过 窗口类实例化对象</span></span><br><span class=\"line\">\tMainWindow w;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//窗口不会默认弹出，需要调用show方法显示</span></span><br><span class=\"line\">\tw.<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//a.exc();加入消息循环机制 阻塞功能</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.<span class=\"built_in\">exec</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pro文件\"><a href=\"#pro文件\" class=\"headerlink\" title=\".pro文件\"></a><strong>.pro文件</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QT += core gui <span class=\"comment\">//Qt包含的模块</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">greaterThan</span>(QT_MAJOR_VERSION, <span class=\"number\">4</span>): QT += widgets <span class=\"comment\">//大于4版本 加入 widgets 模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">TARGET = <span class=\"number\">01</span>_QtFirst <span class=\"comment\">//生成.exe程序的名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">TEMPLATE = app <span class=\"comment\">//模板 应用程序模板</span></span><br><span class=\"line\"></span><br><span class=\"line\">SOURCES += main.cpp\\\\ <span class=\"comment\">//源文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">mywidget.cpp</span><br><span class=\"line\"></span><br><span class=\"line\">HEADERS += mywidget.h <span class=\"comment\">//头文件</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Qt点击按钮进行页面的切换","date":"2023-08-25T09:08:59.431Z","description":null,"top_img":false,"_content":"\n# Qt点击按钮进行页面的切换\n\n## **widget.h**\n\n```c++\n#ifndef WIDGET_H\n#define WIDGET_H\n\n#include <QWidget>\n\nclass Widget : public QWidget\n{\n\tQ_OBJECT\n\npublic:\n\tWidget(QWidget *parent = 0);\n\t~Widget();\n\n\tpublic slots:\n};\n\n#endif // WIDGET_H\n```\n\n\n\n## widget.cpp\n\n```c++\n#include \"widget.h\"\n#include \"subwidget.h\"\n\n#include <QPushButton>\n\nWidget::Widget(QWidget *parent) : QWidget(parent)\n\n{\n\n\tthis->resize(800,600);\n\n\tthis->setWindowTitle(\"登录\");\n\n\t//定义一个查询窗口\n\tsubwidget *s = new subwidget();\n\n\t//创建一个下一页的按钮\n\tQPushButton *btn = new QPushButton(\"下一页\",this);\n\n\tconnect(btn,&QPushButton::clicked,[=](){\n\n\t//当前窗口隐藏\n\tthis->hide();\n\n\t//查询窗口显示\n\ts->show();\n\n\t});\n\n\t//监测查询窗口s的回退信号\n\tconnect(s,&subwidget::back,[=](){\n\n\t//隐藏查询窗口\n\ts->hide();\n\n\t//显示当前窗口\n\tthis->show();\n\n\t});\n\n}\n\nWidget::~Widget()\n{\n\n}\n```\n\n\n\n## **nextwidget.h**\n\n```c++\n#ifndef SUBWIDGET_H\n#define SUBWIDGET_H\n#include <QWidget>\n\nclass subwidget : public QWidget\n{\n\tQ_OBJECT\n\npublic:\n\n\texplicit subwidget(QWidget \\*parent = nullptr);\n\n\tsignals:\n\n\tvoid back();\n\n\tpublic slots:\n\n};\n\n#endif // SUBWIDGET_H\n\n\n```\n\n\n\n## **nextwidget.cpp**\n\n```c++\n#include \"subwidget.h\"\n#include <QPushButton>\n\nsubwidget::subwidget(QWidget *parent) : QWidget(parent)\n{\n\tthis->resize(800,600);\n\n\tthis->setWindowTitle(\"查询\");\n\n\t//定义一个回退按钮\n\tQPushButton *btn = new QPushButton(\"back\",this);\n\n\t//当按下back 就发出一个back信号\n\tconnect(btn,&QPushButton::clicked,[=](){\n\n\temit this->back();\n\n\t});\n\n}\n```\n\n\n","source":"_posts/QT/Qt点击按钮进行页面的切换.md","raw":"---\ntitle: Qt点击按钮进行页面的切换\ndate:\ntags: \n- Qt\ncategories:\n- Qt\ndescription:\ntop_img: false\n---\n\n# Qt点击按钮进行页面的切换\n\n## **widget.h**\n\n```c++\n#ifndef WIDGET_H\n#define WIDGET_H\n\n#include <QWidget>\n\nclass Widget : public QWidget\n{\n\tQ_OBJECT\n\npublic:\n\tWidget(QWidget *parent = 0);\n\t~Widget();\n\n\tpublic slots:\n};\n\n#endif // WIDGET_H\n```\n\n\n\n## widget.cpp\n\n```c++\n#include \"widget.h\"\n#include \"subwidget.h\"\n\n#include <QPushButton>\n\nWidget::Widget(QWidget *parent) : QWidget(parent)\n\n{\n\n\tthis->resize(800,600);\n\n\tthis->setWindowTitle(\"登录\");\n\n\t//定义一个查询窗口\n\tsubwidget *s = new subwidget();\n\n\t//创建一个下一页的按钮\n\tQPushButton *btn = new QPushButton(\"下一页\",this);\n\n\tconnect(btn,&QPushButton::clicked,[=](){\n\n\t//当前窗口隐藏\n\tthis->hide();\n\n\t//查询窗口显示\n\ts->show();\n\n\t});\n\n\t//监测查询窗口s的回退信号\n\tconnect(s,&subwidget::back,[=](){\n\n\t//隐藏查询窗口\n\ts->hide();\n\n\t//显示当前窗口\n\tthis->show();\n\n\t});\n\n}\n\nWidget::~Widget()\n{\n\n}\n```\n\n\n\n## **nextwidget.h**\n\n```c++\n#ifndef SUBWIDGET_H\n#define SUBWIDGET_H\n#include <QWidget>\n\nclass subwidget : public QWidget\n{\n\tQ_OBJECT\n\npublic:\n\n\texplicit subwidget(QWidget \\*parent = nullptr);\n\n\tsignals:\n\n\tvoid back();\n\n\tpublic slots:\n\n};\n\n#endif // SUBWIDGET_H\n\n\n```\n\n\n\n## **nextwidget.cpp**\n\n```c++\n#include \"subwidget.h\"\n#include <QPushButton>\n\nsubwidget::subwidget(QWidget *parent) : QWidget(parent)\n{\n\tthis->resize(800,600);\n\n\tthis->setWindowTitle(\"查询\");\n\n\t//定义一个回退按钮\n\tQPushButton *btn = new QPushButton(\"back\",this);\n\n\t//当按下back 就发出一个back信号\n\tconnect(btn,&QPushButton::clicked,[=](){\n\n\temit this->back();\n\n\t});\n\n}\n```\n\n\n","slug":"QT/Qt点击按钮进行页面的切换","published":1,"updated":"2023-08-25T09:23:49.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd675002ygcr7g5mdgwtp","content":"<h1 id=\"Qt点击按钮进行页面的切换\"><a href=\"#Qt点击按钮进行页面的切换\" class=\"headerlink\" title=\"Qt点击按钮进行页面的切换\"></a>Qt点击按钮进行页面的切换</h1><h2 id=\"widget-h\"><a href=\"#widget-h\" class=\"headerlink\" title=\"widget.h\"></a><strong>widget.h</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> WIDGET_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WIDGET_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Widget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Widget</span>(QWidget *parent = <span class=\"number\">0</span>);</span><br><span class=\"line\">\t~<span class=\"built_in\">Widget</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> slots:</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"widget-cpp\"><a href=\"#widget-cpp\" class=\"headerlink\" title=\"widget.cpp\"></a>widget.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;widget.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;subwidget.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPushButton&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Widget::<span class=\"built_in\">Widget</span>(QWidget *parent) : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">resize</span>(<span class=\"number\">800</span>,<span class=\"number\">600</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">setWindowTitle</span>(<span class=\"string\">&quot;登录&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义一个查询窗口</span></span><br><span class=\"line\">\tsubwidget *s = <span class=\"keyword\">new</span> <span class=\"built_in\">subwidget</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建一个下一页的按钮</span></span><br><span class=\"line\">\tQPushButton *btn = <span class=\"keyword\">new</span> <span class=\"built_in\">QPushButton</span>(<span class=\"string\">&quot;下一页&quot;</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(btn,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//当前窗口隐藏</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查询窗口显示</span></span><br><span class=\"line\">\ts-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//监测查询窗口s的回退信号</span></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(s,&amp;subwidget::back,[=]()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//隐藏查询窗口</span></span><br><span class=\"line\">\ts-&gt;<span class=\"built_in\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//显示当前窗口</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget::~<span class=\"built_in\">Widget</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"nextwidget-h\"><a href=\"#nextwidget-h\" class=\"headerlink\" title=\"nextwidget.h\"></a><strong>nextwidget.h</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> SUBWIDGET_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SUBWIDGET_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">subwidget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">subwidget</span><span class=\"params\">(QWidget \\*parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsignals:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">back</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> slots:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// SUBWIDGET_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"nextwidget-cpp\"><a href=\"#nextwidget-cpp\" class=\"headerlink\" title=\"nextwidget.cpp\"></a><strong>nextwidget.cpp</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;subwidget.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPushButton&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">subwidget::<span class=\"built_in\">subwidget</span>(QWidget *parent) : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">resize</span>(<span class=\"number\">800</span>,<span class=\"number\">600</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">setWindowTitle</span>(<span class=\"string\">&quot;查询&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义一个回退按钮</span></span><br><span class=\"line\">\tQPushButton *btn = <span class=\"keyword\">new</span> <span class=\"built_in\">QPushButton</span>(<span class=\"string\">&quot;back&quot;</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//当按下back 就发出一个back信号</span></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(btn,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\temit <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">back</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-5.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Qt点击按钮进行页面的切换\"><a href=\"#Qt点击按钮进行页面的切换\" class=\"headerlink\" title=\"Qt点击按钮进行页面的切换\"></a>Qt点击按钮进行页面的切换</h1><h2 id=\"widget-h\"><a href=\"#widget-h\" class=\"headerlink\" title=\"widget.h\"></a><strong>widget.h</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> WIDGET_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> WIDGET_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Widget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Widget</span>(QWidget *parent = <span class=\"number\">0</span>);</span><br><span class=\"line\">\t~<span class=\"built_in\">Widget</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> slots:</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"widget-cpp\"><a href=\"#widget-cpp\" class=\"headerlink\" title=\"widget.cpp\"></a>widget.cpp</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;widget.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;subwidget.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPushButton&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">Widget::<span class=\"built_in\">Widget</span>(QWidget *parent) : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">resize</span>(<span class=\"number\">800</span>,<span class=\"number\">600</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">setWindowTitle</span>(<span class=\"string\">&quot;登录&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义一个查询窗口</span></span><br><span class=\"line\">\tsubwidget *s = <span class=\"keyword\">new</span> <span class=\"built_in\">subwidget</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建一个下一页的按钮</span></span><br><span class=\"line\">\tQPushButton *btn = <span class=\"keyword\">new</span> <span class=\"built_in\">QPushButton</span>(<span class=\"string\">&quot;下一页&quot;</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(btn,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//当前窗口隐藏</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//查询窗口显示</span></span><br><span class=\"line\">\ts-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//监测查询窗口s的回退信号</span></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(s,&amp;subwidget::back,[=]()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//隐藏查询窗口</span></span><br><span class=\"line\">\ts-&gt;<span class=\"built_in\">hide</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//显示当前窗口</span></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">show</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Widget::~<span class=\"built_in\">Widget</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"nextwidget-h\"><a href=\"#nextwidget-h\" class=\"headerlink\" title=\"nextwidget.h\"></a><strong>nextwidget.h</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> SUBWIDGET_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> SUBWIDGET_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QWidget&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">subwidget</span> : <span class=\"keyword\">public</span> QWidget</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tQ_OBJECT</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">explicit</span> <span class=\"title\">subwidget</span><span class=\"params\">(QWidget \\*parent = <span class=\"literal\">nullptr</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsignals:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">back</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> slots:</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// SUBWIDGET_H</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"nextwidget-cpp\"><a href=\"#nextwidget-cpp\" class=\"headerlink\" title=\"nextwidget.cpp\"></a><strong>nextwidget.cpp</strong></h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;subwidget.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;QPushButton&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">subwidget::<span class=\"built_in\">subwidget</span>(QWidget *parent) : <span class=\"built_in\">QWidget</span>(parent)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">resize</span>(<span class=\"number\">800</span>,<span class=\"number\">600</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">setWindowTitle</span>(<span class=\"string\">&quot;查询&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//定义一个回退按钮</span></span><br><span class=\"line\">\tQPushButton *btn = <span class=\"keyword\">new</span> <span class=\"built_in\">QPushButton</span>(<span class=\"string\">&quot;back&quot;</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//当按下back 就发出一个back信号</span></span><br><span class=\"line\">\t<span class=\"built_in\">connect</span>(btn,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\temit <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">back</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"ROS指令","date":"2023-08-24T14:38:18.634Z","description":null,"top_img":false,"_content":"\n# ROS指令\n\n## ROS Shell命令\n\n| 命令               | 功能                                                |\n| ------------------ | --------------------------------------------------- |\n| roscd              | 移动到指定的ROS软件包目录                           |\n| rosls              | 显示ROS软件包的文件与目录                           |\n| rosed              | 编辑ROS软件包的文件                                 |\n| roscp              | 复制ROS软件包的文件                                 |\n| rospd              | 添加目录至ROS目录索引                               |\n| rosd               | 显示ROS目录索引中的目录                             |\n| roscd [功能包名称] | 使用它，无需再使用cd一层层到查找，进入功能包里      |\n| rosls [功能包名称] | 等价与roscd+ls。查看ROS功能包的文件列表更方便，快捷 |\n| rosed [功能包名称] | 用于编辑功能包中的特定文件，优点也是快捷，修改容易  |\n\n## ROS执行命令\n\n| 命令                                  | 功能                                                         |\n| ------------------------------------- | ------------------------------------------------------------ |\n| roscore                               | 开启Master(ROS名称服务)                                      |\n| rosrun                                | 运行单个节点                                                 |\n| roslaunch                             | 运行多个节点及设置运行选项                                   |\n| rosclean                              | 检查或删除ROS日志文件                                        |\n| roscore [选项]。                      | 运行主节点，主节点管理节点之间的消息通信中的连接信息。关于主节点的具体作用就不累述了 |\n| rosrun [功能包名称] [节点名称]。      | 执行指定的功能包中的一个节点的命令(rosrun rqt_graph rqt_graph 可查看当前系统的运行情况) |\n| roslaunch [功能包名称] [launch文件名] | 类似dat批命令，是运行指定功能包中一个或设置执行选项的命令    |\n| rosclean [选项]                       | 运行roscore时，对所有节点的记录都会写入日志文件，随着时间的推移，需要定期使用rosclean命令删除这些记录 |\n\n## ROS信息命令 \n\n| 命令       | 功能                    |\n| ---------- | ----------------------- |\n| rostopic   | 查看ROS话题信息         |\n| rosservice | 查看ROS服务信息         |\n| rosnode    | 查看ROS节点信息         |\n| rosparam   | 确认和修改ROS参数信息   |\n| rosbag     | 记录和回放ROS消息       |\n| rosmsg     | 显示ROS消息类型         |\n| rossrv     | 显示ROS服务类型         |\n| rosversion | 显示ROS功能包的版本信息 |\n| roswtf     | 检查ROS系统             |\n\n### **rostopic [选项]** \n\nlist - 列出活动话题 \n\necho [话题名称] - 实时显示指定话题的消息内容 \n\nfind [类型名称] - 显示使用指定类型的消息的话题 \n\ntype [话题名称] - 显示指定话题的消息类型 \n\nbw [话题名称] - 显示指定话题的消息类型 \n\nhz [话题名称] - 显示指定话题的消息数据发布周期 \n\ninfo [话题名称] - 显示指定话题的消息 \n\npub [话题名称] [消息类型] [参数] - 用指定的话题名称发布消息，许多时候另开一个终端操作 例：rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist – ‘[2.0, 0.0, 0.0]”[0.0, 0.0, 0.0]’ \n\n\n\n### **rosservice [选项]** \n\nlist - 显示活动的服务信息 \n\ninfo [服务名称] - 显示指定服务的信息 \n\ntype [服务名称] - 显示服务类型 \n\nfind [服务类型] - 查找指定服务类型的服务 \n\nuri [服务名称] - 显示ROSRPC URI服务 \n\nargs [服务名称] - 显示服务参数 \n\ncall [服务名称] [参数] - 用输入的参数请求服务，通常用于测试服务 \n\n \n\n### **rosnode [选项]** \n\nlist - 查看活动的节点列表 \n\nping [节点名称] - 与指定的节点进行连接测试 \n\ninfo [节点名称] - 查看指定节点的信息 \n\nmachine [PC名称或IP] - 查看该PC中运行的节点列表 \n\nkill [节点名称] - 停止指定节点的运行 \n\ncleanup - 删除失连节点的注册信息 \n\n\n\n### **rosparam [参数]** \n\nlist - 查看参数列表 \n\nget [参数名称] - 获取参数值 \n\nset [参数名称] - 设置参数值 \n\ndump [文件名称] - 将参数保存到指定文件 \n\nload [文件名称] - 获取保存在指定文件中的参数，经常使用。 \n\ndelete [参数名称] - 删除参数 \n\n \n\n### **rosmsg [参数]** \n\nlist - 显示所有消息 \n\nshow [消息名称] - 显示指定消息 \n\nmd5 [消息名称] - 显示md5sum \n\npackage [功能包名称] - 显示用于指定功能包的所有消息 \n\npackages - 显示使用消息的所有功能包 \n\n \n\n### **rossrv [参数]** \n\nlist -显示所以服务 \n\nshow [服务名称] - 显示指定的服务信息 \n\nmd5 [服务名称] - 显示md5sum \n\npackage [功能包名称] - 显示指定的功能包中用到的所有服务 \n\npackages - 显示使用服务的所有功能包 \n\n \n\n### rosbag [参数] \n\nrecord [选项] [话题名称] - 将指定话题的消息记录到bag文件 \n\ninfo [文件名称] - 查看bag文件的信息 \n\nplay [文件名称] - 回放指定的bag文件，这个使用玩的也多。 \n\ncompress [文件名称] - 压缩指定的bag文件 \n\ndecompress [文件名称] - 解压指定的bag文件 \n\nfilter [输入文件] [输出文件] [选项] - 生成一个删除了指定内容的新的bag文件 \n\nreindex bag [文件名称] - 刷新索引 \n\ncheck bag [文件名称] - 检查指定的bag文件是否能在当前系统中回放 \n\nfix [输入文件] [输出文件] [选项] - 将由于版本不同而无法回放的bag文件修改可以回放的文件 \n\n## ROS catkin命令\n\ncatkin_create_pkg - 自动生成功能包（示例命令：catkin_create_pkg [功能包名称] [依赖性功能包1] [依赖性功能包2]….）。 \n\ncatkin_make - 基于catkin构建系统的构建 （示例：catkin_make –pkg [包名] 只构建一部分功能包）。 \n\ncatkin_eclipse - 对于用catkin构建系统生成的功能包进行修改，使其能在Eclipse环境中使用。 \n\ncatkin_prepare_release - 在发布时用到的日志整理和版本标记。 \n\ncatkin_generate_changelog - 在发布时生成或更新CHANGLOG.rst文件。 \n\ncatkin_init_workspace - 初始化catkin构建统的工作目录。 \n\ncatkin_find - 搜素catkin，找到并显示工作空间。 \n\n## ROS功能包命令 \n\nrospack [选项] [功能包名称] - 查看与ROS功能包相关的信息(可以使用find, list, depend-on, depends和profile等选项)。 \n\nrosinstall - 安装ROS附加功能包。 \n\nrosdep [选项] - 安装该功能包的依赖性文件（check, install, init, update）。 \n\nroslocate [选项] [功能包名称] - ROS功能包信息相关命令（可用的选项是info, vcs, type, uri和repo等）。 \n\n## 常用的一些指令\n\n| 指令                                  |        含义        |\n| :------------------------------------ | :----------------: |\n| rosrun map_server map_saver           | rviz保存生成的地图 |\n| rosrun map_server map_server map.yaml | rviz加载生成的地图 |\n| rostopic echo <topic> --noarr         |  详细显示话题信息  |\n\n","source":"_posts/slam_theory/ROS指令.md","raw":"---\ntitle: ROS指令\ndate:\ntags: \n- SLAM\n- ROS\ncategories:\n- [SLAM, ROS]\ndescription:\ntop_img: false\n\n---\n\n# ROS指令\n\n## ROS Shell命令\n\n| 命令               | 功能                                                |\n| ------------------ | --------------------------------------------------- |\n| roscd              | 移动到指定的ROS软件包目录                           |\n| rosls              | 显示ROS软件包的文件与目录                           |\n| rosed              | 编辑ROS软件包的文件                                 |\n| roscp              | 复制ROS软件包的文件                                 |\n| rospd              | 添加目录至ROS目录索引                               |\n| rosd               | 显示ROS目录索引中的目录                             |\n| roscd [功能包名称] | 使用它，无需再使用cd一层层到查找，进入功能包里      |\n| rosls [功能包名称] | 等价与roscd+ls。查看ROS功能包的文件列表更方便，快捷 |\n| rosed [功能包名称] | 用于编辑功能包中的特定文件，优点也是快捷，修改容易  |\n\n## ROS执行命令\n\n| 命令                                  | 功能                                                         |\n| ------------------------------------- | ------------------------------------------------------------ |\n| roscore                               | 开启Master(ROS名称服务)                                      |\n| rosrun                                | 运行单个节点                                                 |\n| roslaunch                             | 运行多个节点及设置运行选项                                   |\n| rosclean                              | 检查或删除ROS日志文件                                        |\n| roscore [选项]。                      | 运行主节点，主节点管理节点之间的消息通信中的连接信息。关于主节点的具体作用就不累述了 |\n| rosrun [功能包名称] [节点名称]。      | 执行指定的功能包中的一个节点的命令(rosrun rqt_graph rqt_graph 可查看当前系统的运行情况) |\n| roslaunch [功能包名称] [launch文件名] | 类似dat批命令，是运行指定功能包中一个或设置执行选项的命令    |\n| rosclean [选项]                       | 运行roscore时，对所有节点的记录都会写入日志文件，随着时间的推移，需要定期使用rosclean命令删除这些记录 |\n\n## ROS信息命令 \n\n| 命令       | 功能                    |\n| ---------- | ----------------------- |\n| rostopic   | 查看ROS话题信息         |\n| rosservice | 查看ROS服务信息         |\n| rosnode    | 查看ROS节点信息         |\n| rosparam   | 确认和修改ROS参数信息   |\n| rosbag     | 记录和回放ROS消息       |\n| rosmsg     | 显示ROS消息类型         |\n| rossrv     | 显示ROS服务类型         |\n| rosversion | 显示ROS功能包的版本信息 |\n| roswtf     | 检查ROS系统             |\n\n### **rostopic [选项]** \n\nlist - 列出活动话题 \n\necho [话题名称] - 实时显示指定话题的消息内容 \n\nfind [类型名称] - 显示使用指定类型的消息的话题 \n\ntype [话题名称] - 显示指定话题的消息类型 \n\nbw [话题名称] - 显示指定话题的消息类型 \n\nhz [话题名称] - 显示指定话题的消息数据发布周期 \n\ninfo [话题名称] - 显示指定话题的消息 \n\npub [话题名称] [消息类型] [参数] - 用指定的话题名称发布消息，许多时候另开一个终端操作 例：rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist – ‘[2.0, 0.0, 0.0]”[0.0, 0.0, 0.0]’ \n\n\n\n### **rosservice [选项]** \n\nlist - 显示活动的服务信息 \n\ninfo [服务名称] - 显示指定服务的信息 \n\ntype [服务名称] - 显示服务类型 \n\nfind [服务类型] - 查找指定服务类型的服务 \n\nuri [服务名称] - 显示ROSRPC URI服务 \n\nargs [服务名称] - 显示服务参数 \n\ncall [服务名称] [参数] - 用输入的参数请求服务，通常用于测试服务 \n\n \n\n### **rosnode [选项]** \n\nlist - 查看活动的节点列表 \n\nping [节点名称] - 与指定的节点进行连接测试 \n\ninfo [节点名称] - 查看指定节点的信息 \n\nmachine [PC名称或IP] - 查看该PC中运行的节点列表 \n\nkill [节点名称] - 停止指定节点的运行 \n\ncleanup - 删除失连节点的注册信息 \n\n\n\n### **rosparam [参数]** \n\nlist - 查看参数列表 \n\nget [参数名称] - 获取参数值 \n\nset [参数名称] - 设置参数值 \n\ndump [文件名称] - 将参数保存到指定文件 \n\nload [文件名称] - 获取保存在指定文件中的参数，经常使用。 \n\ndelete [参数名称] - 删除参数 \n\n \n\n### **rosmsg [参数]** \n\nlist - 显示所有消息 \n\nshow [消息名称] - 显示指定消息 \n\nmd5 [消息名称] - 显示md5sum \n\npackage [功能包名称] - 显示用于指定功能包的所有消息 \n\npackages - 显示使用消息的所有功能包 \n\n \n\n### **rossrv [参数]** \n\nlist -显示所以服务 \n\nshow [服务名称] - 显示指定的服务信息 \n\nmd5 [服务名称] - 显示md5sum \n\npackage [功能包名称] - 显示指定的功能包中用到的所有服务 \n\npackages - 显示使用服务的所有功能包 \n\n \n\n### rosbag [参数] \n\nrecord [选项] [话题名称] - 将指定话题的消息记录到bag文件 \n\ninfo [文件名称] - 查看bag文件的信息 \n\nplay [文件名称] - 回放指定的bag文件，这个使用玩的也多。 \n\ncompress [文件名称] - 压缩指定的bag文件 \n\ndecompress [文件名称] - 解压指定的bag文件 \n\nfilter [输入文件] [输出文件] [选项] - 生成一个删除了指定内容的新的bag文件 \n\nreindex bag [文件名称] - 刷新索引 \n\ncheck bag [文件名称] - 检查指定的bag文件是否能在当前系统中回放 \n\nfix [输入文件] [输出文件] [选项] - 将由于版本不同而无法回放的bag文件修改可以回放的文件 \n\n## ROS catkin命令\n\ncatkin_create_pkg - 自动生成功能包（示例命令：catkin_create_pkg [功能包名称] [依赖性功能包1] [依赖性功能包2]….）。 \n\ncatkin_make - 基于catkin构建系统的构建 （示例：catkin_make –pkg [包名] 只构建一部分功能包）。 \n\ncatkin_eclipse - 对于用catkin构建系统生成的功能包进行修改，使其能在Eclipse环境中使用。 \n\ncatkin_prepare_release - 在发布时用到的日志整理和版本标记。 \n\ncatkin_generate_changelog - 在发布时生成或更新CHANGLOG.rst文件。 \n\ncatkin_init_workspace - 初始化catkin构建统的工作目录。 \n\ncatkin_find - 搜素catkin，找到并显示工作空间。 \n\n## ROS功能包命令 \n\nrospack [选项] [功能包名称] - 查看与ROS功能包相关的信息(可以使用find, list, depend-on, depends和profile等选项)。 \n\nrosinstall - 安装ROS附加功能包。 \n\nrosdep [选项] - 安装该功能包的依赖性文件（check, install, init, update）。 \n\nroslocate [选项] [功能包名称] - ROS功能包信息相关命令（可用的选项是info, vcs, type, uri和repo等）。 \n\n## 常用的一些指令\n\n| 指令                                  |        含义        |\n| :------------------------------------ | :----------------: |\n| rosrun map_server map_saver           | rviz保存生成的地图 |\n| rosrun map_server map_server map.yaml | rviz加载生成的地图 |\n| rostopic echo <topic> --noarr         |  详细显示话题信息  |\n\n","slug":"slam_theory/ROS指令","published":1,"updated":"2023-08-25T09:07:01.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd6760033gcr7489ma6qj","content":"<h1 id=\"ROS指令\"><a href=\"#ROS指令\" class=\"headerlink\" title=\"ROS指令\"></a>ROS指令</h1><h2 id=\"ROS-Shell命令\"><a href=\"#ROS-Shell命令\" class=\"headerlink\" title=\"ROS Shell命令\"></a>ROS Shell命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>roscd</td>\n<td>移动到指定的ROS软件包目录</td>\n</tr>\n<tr>\n<td>rosls</td>\n<td>显示ROS软件包的文件与目录</td>\n</tr>\n<tr>\n<td>rosed</td>\n<td>编辑ROS软件包的文件</td>\n</tr>\n<tr>\n<td>roscp</td>\n<td>复制ROS软件包的文件</td>\n</tr>\n<tr>\n<td>rospd</td>\n<td>添加目录至ROS目录索引</td>\n</tr>\n<tr>\n<td>rosd</td>\n<td>显示ROS目录索引中的目录</td>\n</tr>\n<tr>\n<td>roscd [功能包名称]</td>\n<td>使用它，无需再使用cd一层层到查找，进入功能包里</td>\n</tr>\n<tr>\n<td>rosls [功能包名称]</td>\n<td>等价与roscd+ls。查看ROS功能包的文件列表更方便，快捷</td>\n</tr>\n<tr>\n<td>rosed [功能包名称]</td>\n<td>用于编辑功能包中的特定文件，优点也是快捷，修改容易</td>\n</tr>\n</tbody></table>\n<h2 id=\"ROS执行命令\"><a href=\"#ROS执行命令\" class=\"headerlink\" title=\"ROS执行命令\"></a>ROS执行命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>roscore</td>\n<td>开启Master(ROS名称服务)</td>\n</tr>\n<tr>\n<td>rosrun</td>\n<td>运行单个节点</td>\n</tr>\n<tr>\n<td>roslaunch</td>\n<td>运行多个节点及设置运行选项</td>\n</tr>\n<tr>\n<td>rosclean</td>\n<td>检查或删除ROS日志文件</td>\n</tr>\n<tr>\n<td>roscore [选项]。</td>\n<td>运行主节点，主节点管理节点之间的消息通信中的连接信息。关于主节点的具体作用就不累述了</td>\n</tr>\n<tr>\n<td>rosrun [功能包名称] [节点名称]。</td>\n<td>执行指定的功能包中的一个节点的命令(rosrun rqt_graph rqt_graph 可查看当前系统的运行情况)</td>\n</tr>\n<tr>\n<td>roslaunch [功能包名称] [launch文件名]</td>\n<td>类似dat批命令，是运行指定功能包中一个或设置执行选项的命令</td>\n</tr>\n<tr>\n<td>rosclean [选项]</td>\n<td>运行roscore时，对所有节点的记录都会写入日志文件，随着时间的推移，需要定期使用rosclean命令删除这些记录</td>\n</tr>\n</tbody></table>\n<h2 id=\"ROS信息命令\"><a href=\"#ROS信息命令\" class=\"headerlink\" title=\"ROS信息命令\"></a>ROS信息命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rostopic</td>\n<td>查看ROS话题信息</td>\n</tr>\n<tr>\n<td>rosservice</td>\n<td>查看ROS服务信息</td>\n</tr>\n<tr>\n<td>rosnode</td>\n<td>查看ROS节点信息</td>\n</tr>\n<tr>\n<td>rosparam</td>\n<td>确认和修改ROS参数信息</td>\n</tr>\n<tr>\n<td>rosbag</td>\n<td>记录和回放ROS消息</td>\n</tr>\n<tr>\n<td>rosmsg</td>\n<td>显示ROS消息类型</td>\n</tr>\n<tr>\n<td>rossrv</td>\n<td>显示ROS服务类型</td>\n</tr>\n<tr>\n<td>rosversion</td>\n<td>显示ROS功能包的版本信息</td>\n</tr>\n<tr>\n<td>roswtf</td>\n<td>检查ROS系统</td>\n</tr>\n</tbody></table>\n<h3 id=\"rostopic-选项\"><a href=\"#rostopic-选项\" class=\"headerlink\" title=\"rostopic [选项]\"></a><strong>rostopic [选项]</strong></h3><p>list - 列出活动话题 </p>\n<p>echo [话题名称] - 实时显示指定话题的消息内容 </p>\n<p>find [类型名称] - 显示使用指定类型的消息的话题 </p>\n<p>type [话题名称] - 显示指定话题的消息类型 </p>\n<p>bw [话题名称] - 显示指定话题的消息类型 </p>\n<p>hz [话题名称] - 显示指定话题的消息数据发布周期 </p>\n<p>info [话题名称] - 显示指定话题的消息 </p>\n<p>pub [话题名称] [消息类型] [参数] - 用指定的话题名称发布消息，许多时候另开一个终端操作 例：rostopic pub -1 &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist – ‘[2.0, 0.0, 0.0]”[0.0, 0.0, 0.0]’ </p>\n<h3 id=\"rosservice-选项\"><a href=\"#rosservice-选项\" class=\"headerlink\" title=\"rosservice [选项]\"></a><strong>rosservice [选项]</strong></h3><p>list - 显示活动的服务信息 </p>\n<p>info [服务名称] - 显示指定服务的信息 </p>\n<p>type [服务名称] - 显示服务类型 </p>\n<p>find [服务类型] - 查找指定服务类型的服务 </p>\n<p>uri [服务名称] - 显示ROSRPC URI服务 </p>\n<p>args [服务名称] - 显示服务参数 </p>\n<p>call [服务名称] [参数] - 用输入的参数请求服务，通常用于测试服务 </p>\n<h3 id=\"rosnode-选项\"><a href=\"#rosnode-选项\" class=\"headerlink\" title=\"rosnode [选项]\"></a><strong>rosnode [选项]</strong></h3><p>list - 查看活动的节点列表 </p>\n<p>ping [节点名称] - 与指定的节点进行连接测试 </p>\n<p>info [节点名称] - 查看指定节点的信息 </p>\n<p>machine [PC名称或IP] - 查看该PC中运行的节点列表 </p>\n<p>kill [节点名称] - 停止指定节点的运行 </p>\n<p>cleanup - 删除失连节点的注册信息 </p>\n<h3 id=\"rosparam-参数\"><a href=\"#rosparam-参数\" class=\"headerlink\" title=\"rosparam [参数]\"></a><strong>rosparam [参数]</strong></h3><p>list - 查看参数列表 </p>\n<p>get [参数名称] - 获取参数值 </p>\n<p>set [参数名称] - 设置参数值 </p>\n<p>dump [文件名称] - 将参数保存到指定文件 </p>\n<p>load [文件名称] - 获取保存在指定文件中的参数，经常使用。 </p>\n<p>delete [参数名称] - 删除参数 </p>\n<h3 id=\"rosmsg-参数\"><a href=\"#rosmsg-参数\" class=\"headerlink\" title=\"rosmsg [参数]\"></a><strong>rosmsg [参数]</strong></h3><p>list - 显示所有消息 </p>\n<p>show [消息名称] - 显示指定消息 </p>\n<p>md5 [消息名称] - 显示md5sum </p>\n<p>package [功能包名称] - 显示用于指定功能包的所有消息 </p>\n<p>packages - 显示使用消息的所有功能包 </p>\n<h3 id=\"rossrv-参数\"><a href=\"#rossrv-参数\" class=\"headerlink\" title=\"rossrv [参数]\"></a><strong>rossrv [参数]</strong></h3><p>list -显示所以服务 </p>\n<p>show [服务名称] - 显示指定的服务信息 </p>\n<p>md5 [服务名称] - 显示md5sum </p>\n<p>package [功能包名称] - 显示指定的功能包中用到的所有服务 </p>\n<p>packages - 显示使用服务的所有功能包 </p>\n<h3 id=\"rosbag-参数\"><a href=\"#rosbag-参数\" class=\"headerlink\" title=\"rosbag [参数]\"></a>rosbag [参数]</h3><p>record [选项] [话题名称] - 将指定话题的消息记录到bag文件 </p>\n<p>info [文件名称] - 查看bag文件的信息 </p>\n<p>play [文件名称] - 回放指定的bag文件，这个使用玩的也多。 </p>\n<p>compress [文件名称] - 压缩指定的bag文件 </p>\n<p>decompress [文件名称] - 解压指定的bag文件 </p>\n<p>filter [输入文件] [输出文件] [选项] - 生成一个删除了指定内容的新的bag文件 </p>\n<p>reindex bag [文件名称] - 刷新索引 </p>\n<p>check bag [文件名称] - 检查指定的bag文件是否能在当前系统中回放 </p>\n<p>fix [输入文件] [输出文件] [选项] - 将由于版本不同而无法回放的bag文件修改可以回放的文件 </p>\n<h2 id=\"ROS-catkin命令\"><a href=\"#ROS-catkin命令\" class=\"headerlink\" title=\"ROS catkin命令\"></a>ROS catkin命令</h2><p>catkin_create_pkg - 自动生成功能包（示例命令：catkin_create_pkg [功能包名称] [依赖性功能包1] [依赖性功能包2]….）。 </p>\n<p>catkin_make - 基于catkin构建系统的构建 （示例：catkin_make –pkg [包名] 只构建一部分功能包）。 </p>\n<p>catkin_eclipse - 对于用catkin构建系统生成的功能包进行修改，使其能在Eclipse环境中使用。 </p>\n<p>catkin_prepare_release - 在发布时用到的日志整理和版本标记。 </p>\n<p>catkin_generate_changelog - 在发布时生成或更新CHANGLOG.rst文件。 </p>\n<p>catkin_init_workspace - 初始化catkin构建统的工作目录。 </p>\n<p>catkin_find - 搜素catkin，找到并显示工作空间。 </p>\n<h2 id=\"ROS功能包命令\"><a href=\"#ROS功能包命令\" class=\"headerlink\" title=\"ROS功能包命令\"></a>ROS功能包命令</h2><p>rospack [选项] [功能包名称] - 查看与ROS功能包相关的信息(可以使用find, list, depend-on, depends和profile等选项)。 </p>\n<p>rosinstall - 安装ROS附加功能包。 </p>\n<p>rosdep [选项] - 安装该功能包的依赖性文件（check, install, init, update）。 </p>\n<p>roslocate [选项] [功能包名称] - ROS功能包信息相关命令（可用的选项是info, vcs, type, uri和repo等）。 </p>\n<h2 id=\"常用的一些指令\"><a href=\"#常用的一些指令\" class=\"headerlink\" title=\"常用的一些指令\"></a>常用的一些指令</h2><table>\n<thead>\n<tr>\n<th align=\"left\">指令</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">rosrun map_server map_saver</td>\n<td align=\"center\">rviz保存生成的地图</td>\n</tr>\n<tr>\n<td align=\"left\">rosrun map_server map_server map.yaml</td>\n<td align=\"center\">rviz加载生成的地图</td>\n</tr>\n<tr>\n<td align=\"left\">rostopic echo <topic> –noarr</td>\n<td align=\"center\">详细显示话题信息</td>\n</tr>\n</tbody></table>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-9.png","cover_type":"img","excerpt":"","more":"<h1 id=\"ROS指令\"><a href=\"#ROS指令\" class=\"headerlink\" title=\"ROS指令\"></a>ROS指令</h1><h2 id=\"ROS-Shell命令\"><a href=\"#ROS-Shell命令\" class=\"headerlink\" title=\"ROS Shell命令\"></a>ROS Shell命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>roscd</td>\n<td>移动到指定的ROS软件包目录</td>\n</tr>\n<tr>\n<td>rosls</td>\n<td>显示ROS软件包的文件与目录</td>\n</tr>\n<tr>\n<td>rosed</td>\n<td>编辑ROS软件包的文件</td>\n</tr>\n<tr>\n<td>roscp</td>\n<td>复制ROS软件包的文件</td>\n</tr>\n<tr>\n<td>rospd</td>\n<td>添加目录至ROS目录索引</td>\n</tr>\n<tr>\n<td>rosd</td>\n<td>显示ROS目录索引中的目录</td>\n</tr>\n<tr>\n<td>roscd [功能包名称]</td>\n<td>使用它，无需再使用cd一层层到查找，进入功能包里</td>\n</tr>\n<tr>\n<td>rosls [功能包名称]</td>\n<td>等价与roscd+ls。查看ROS功能包的文件列表更方便，快捷</td>\n</tr>\n<tr>\n<td>rosed [功能包名称]</td>\n<td>用于编辑功能包中的特定文件，优点也是快捷，修改容易</td>\n</tr>\n</tbody></table>\n<h2 id=\"ROS执行命令\"><a href=\"#ROS执行命令\" class=\"headerlink\" title=\"ROS执行命令\"></a>ROS执行命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>roscore</td>\n<td>开启Master(ROS名称服务)</td>\n</tr>\n<tr>\n<td>rosrun</td>\n<td>运行单个节点</td>\n</tr>\n<tr>\n<td>roslaunch</td>\n<td>运行多个节点及设置运行选项</td>\n</tr>\n<tr>\n<td>rosclean</td>\n<td>检查或删除ROS日志文件</td>\n</tr>\n<tr>\n<td>roscore [选项]。</td>\n<td>运行主节点，主节点管理节点之间的消息通信中的连接信息。关于主节点的具体作用就不累述了</td>\n</tr>\n<tr>\n<td>rosrun [功能包名称] [节点名称]。</td>\n<td>执行指定的功能包中的一个节点的命令(rosrun rqt_graph rqt_graph 可查看当前系统的运行情况)</td>\n</tr>\n<tr>\n<td>roslaunch [功能包名称] [launch文件名]</td>\n<td>类似dat批命令，是运行指定功能包中一个或设置执行选项的命令</td>\n</tr>\n<tr>\n<td>rosclean [选项]</td>\n<td>运行roscore时，对所有节点的记录都会写入日志文件，随着时间的推移，需要定期使用rosclean命令删除这些记录</td>\n</tr>\n</tbody></table>\n<h2 id=\"ROS信息命令\"><a href=\"#ROS信息命令\" class=\"headerlink\" title=\"ROS信息命令\"></a>ROS信息命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rostopic</td>\n<td>查看ROS话题信息</td>\n</tr>\n<tr>\n<td>rosservice</td>\n<td>查看ROS服务信息</td>\n</tr>\n<tr>\n<td>rosnode</td>\n<td>查看ROS节点信息</td>\n</tr>\n<tr>\n<td>rosparam</td>\n<td>确认和修改ROS参数信息</td>\n</tr>\n<tr>\n<td>rosbag</td>\n<td>记录和回放ROS消息</td>\n</tr>\n<tr>\n<td>rosmsg</td>\n<td>显示ROS消息类型</td>\n</tr>\n<tr>\n<td>rossrv</td>\n<td>显示ROS服务类型</td>\n</tr>\n<tr>\n<td>rosversion</td>\n<td>显示ROS功能包的版本信息</td>\n</tr>\n<tr>\n<td>roswtf</td>\n<td>检查ROS系统</td>\n</tr>\n</tbody></table>\n<h3 id=\"rostopic-选项\"><a href=\"#rostopic-选项\" class=\"headerlink\" title=\"rostopic [选项]\"></a><strong>rostopic [选项]</strong></h3><p>list - 列出活动话题 </p>\n<p>echo [话题名称] - 实时显示指定话题的消息内容 </p>\n<p>find [类型名称] - 显示使用指定类型的消息的话题 </p>\n<p>type [话题名称] - 显示指定话题的消息类型 </p>\n<p>bw [话题名称] - 显示指定话题的消息类型 </p>\n<p>hz [话题名称] - 显示指定话题的消息数据发布周期 </p>\n<p>info [话题名称] - 显示指定话题的消息 </p>\n<p>pub [话题名称] [消息类型] [参数] - 用指定的话题名称发布消息，许多时候另开一个终端操作 例：rostopic pub -1 &#x2F;turtle1&#x2F;cmd_vel geometry_msgs&#x2F;Twist – ‘[2.0, 0.0, 0.0]”[0.0, 0.0, 0.0]’ </p>\n<h3 id=\"rosservice-选项\"><a href=\"#rosservice-选项\" class=\"headerlink\" title=\"rosservice [选项]\"></a><strong>rosservice [选项]</strong></h3><p>list - 显示活动的服务信息 </p>\n<p>info [服务名称] - 显示指定服务的信息 </p>\n<p>type [服务名称] - 显示服务类型 </p>\n<p>find [服务类型] - 查找指定服务类型的服务 </p>\n<p>uri [服务名称] - 显示ROSRPC URI服务 </p>\n<p>args [服务名称] - 显示服务参数 </p>\n<p>call [服务名称] [参数] - 用输入的参数请求服务，通常用于测试服务 </p>\n<h3 id=\"rosnode-选项\"><a href=\"#rosnode-选项\" class=\"headerlink\" title=\"rosnode [选项]\"></a><strong>rosnode [选项]</strong></h3><p>list - 查看活动的节点列表 </p>\n<p>ping [节点名称] - 与指定的节点进行连接测试 </p>\n<p>info [节点名称] - 查看指定节点的信息 </p>\n<p>machine [PC名称或IP] - 查看该PC中运行的节点列表 </p>\n<p>kill [节点名称] - 停止指定节点的运行 </p>\n<p>cleanup - 删除失连节点的注册信息 </p>\n<h3 id=\"rosparam-参数\"><a href=\"#rosparam-参数\" class=\"headerlink\" title=\"rosparam [参数]\"></a><strong>rosparam [参数]</strong></h3><p>list - 查看参数列表 </p>\n<p>get [参数名称] - 获取参数值 </p>\n<p>set [参数名称] - 设置参数值 </p>\n<p>dump [文件名称] - 将参数保存到指定文件 </p>\n<p>load [文件名称] - 获取保存在指定文件中的参数，经常使用。 </p>\n<p>delete [参数名称] - 删除参数 </p>\n<h3 id=\"rosmsg-参数\"><a href=\"#rosmsg-参数\" class=\"headerlink\" title=\"rosmsg [参数]\"></a><strong>rosmsg [参数]</strong></h3><p>list - 显示所有消息 </p>\n<p>show [消息名称] - 显示指定消息 </p>\n<p>md5 [消息名称] - 显示md5sum </p>\n<p>package [功能包名称] - 显示用于指定功能包的所有消息 </p>\n<p>packages - 显示使用消息的所有功能包 </p>\n<h3 id=\"rossrv-参数\"><a href=\"#rossrv-参数\" class=\"headerlink\" title=\"rossrv [参数]\"></a><strong>rossrv [参数]</strong></h3><p>list -显示所以服务 </p>\n<p>show [服务名称] - 显示指定的服务信息 </p>\n<p>md5 [服务名称] - 显示md5sum </p>\n<p>package [功能包名称] - 显示指定的功能包中用到的所有服务 </p>\n<p>packages - 显示使用服务的所有功能包 </p>\n<h3 id=\"rosbag-参数\"><a href=\"#rosbag-参数\" class=\"headerlink\" title=\"rosbag [参数]\"></a>rosbag [参数]</h3><p>record [选项] [话题名称] - 将指定话题的消息记录到bag文件 </p>\n<p>info [文件名称] - 查看bag文件的信息 </p>\n<p>play [文件名称] - 回放指定的bag文件，这个使用玩的也多。 </p>\n<p>compress [文件名称] - 压缩指定的bag文件 </p>\n<p>decompress [文件名称] - 解压指定的bag文件 </p>\n<p>filter [输入文件] [输出文件] [选项] - 生成一个删除了指定内容的新的bag文件 </p>\n<p>reindex bag [文件名称] - 刷新索引 </p>\n<p>check bag [文件名称] - 检查指定的bag文件是否能在当前系统中回放 </p>\n<p>fix [输入文件] [输出文件] [选项] - 将由于版本不同而无法回放的bag文件修改可以回放的文件 </p>\n<h2 id=\"ROS-catkin命令\"><a href=\"#ROS-catkin命令\" class=\"headerlink\" title=\"ROS catkin命令\"></a>ROS catkin命令</h2><p>catkin_create_pkg - 自动生成功能包（示例命令：catkin_create_pkg [功能包名称] [依赖性功能包1] [依赖性功能包2]….）。 </p>\n<p>catkin_make - 基于catkin构建系统的构建 （示例：catkin_make –pkg [包名] 只构建一部分功能包）。 </p>\n<p>catkin_eclipse - 对于用catkin构建系统生成的功能包进行修改，使其能在Eclipse环境中使用。 </p>\n<p>catkin_prepare_release - 在发布时用到的日志整理和版本标记。 </p>\n<p>catkin_generate_changelog - 在发布时生成或更新CHANGLOG.rst文件。 </p>\n<p>catkin_init_workspace - 初始化catkin构建统的工作目录。 </p>\n<p>catkin_find - 搜素catkin，找到并显示工作空间。 </p>\n<h2 id=\"ROS功能包命令\"><a href=\"#ROS功能包命令\" class=\"headerlink\" title=\"ROS功能包命令\"></a>ROS功能包命令</h2><p>rospack [选项] [功能包名称] - 查看与ROS功能包相关的信息(可以使用find, list, depend-on, depends和profile等选项)。 </p>\n<p>rosinstall - 安装ROS附加功能包。 </p>\n<p>rosdep [选项] - 安装该功能包的依赖性文件（check, install, init, update）。 </p>\n<p>roslocate [选项] [功能包名称] - ROS功能包信息相关命令（可用的选项是info, vcs, type, uri和repo等）。 </p>\n<h2 id=\"常用的一些指令\"><a href=\"#常用的一些指令\" class=\"headerlink\" title=\"常用的一些指令\"></a>常用的一些指令</h2><table>\n<thead>\n<tr>\n<th align=\"left\">指令</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">rosrun map_server map_saver</td>\n<td align=\"center\">rviz保存生成的地图</td>\n</tr>\n<tr>\n<td align=\"left\">rosrun map_server map_server map.yaml</td>\n<td align=\"center\">rviz加载生成的地图</td>\n</tr>\n<tr>\n<td align=\"left\">rostopic echo <topic> –noarr</td>\n<td align=\"center\">详细显示话题信息</td>\n</tr>\n</tbody></table>\n"},{"title":"认识BASH这个Shell","date":"2023-08-25T09:18:58.007Z","description":null,"top_img":false,"_content":"\n## ![大标题的图示](http://cn.linux.vbird.org/image/logo.png)**认识 BASH 这个 Shell**\n\n我们在[第一章 Linux 是什么](http://cn.linux.vbird.org/linux_basic/0110whatislinux.php)当中提到了： 管理整个计算机硬件的其实是操作系统的核心 (kernel)，这个核心是需要被保护的！ 所以我们一般使用者就只能透过 shell 来跟核心沟通，以让核心达到我们所想要达到的工作。 那么系统有多少 shell 可用呢？为什么我们要使用 bash 啊？底下分别来谈一谈喔！\n\n\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**硬件、核心与 Shell**\n\n这应该是个蛮有趣的话题：『什么是 Shell 』？相信只要摸过计算机，对于操作系统 (不论是 Linux 、 Unix 或者是 Windows) 有点概念的朋友们大多听过这个名词，因为只要有『操作系统』那么就离不开 Shell 这个东西。不过，在讨论 Shell 之前，我们先来了解一下计算机的运行状况吧！ 举个例子来说：当你要计算机传输出来『音乐』的时候，你的计算机需要什么东西呢？\n\n1. 硬件：当然就是需要你的硬件有『声卡芯片』这个配备，否则怎么会有声音；\n2. 核心管理：操作系统的核心可以支持这个芯片组，当然还需要提供芯片的驱动程序啰；\n3. 应用程序：需要使用者 (就是你) 输入发生声音的命令啰！\n\n这就是基本的一个输出声音所需要的步骤！也就是说，你必须要『输入』一个命令之后， 『硬件』才会透过你下达的命令来工作！那么硬件如何知道你下达的命令呢？那就是 kernel (核心) 的控制工作了！也就是说，我们必须要透过『 Shell 』将我们输入的命令与 Kernel 沟通，好让 Kernel 可以控制硬件来正确无误的工作！ 基本上，我们可以透过底下这张图来说明一下：\n\n![硬件、核心与用户的相关性图标](./media/0320bash_1.jpg)\n图 1.1.1、硬件、核心与用户的相关性图示\n\n我们在[第零章内的操作系统小节](http://cn.linux.vbird.org/linux_basic/0105computers.php#program_os)曾经提到过， 操作系统其实是一组软件，由于这组软件在控制整个硬件与管理系统的活动监测， 如果这组软件能被用户随意的操作，若使用者应用不当，将会使得整个系统崩溃！因为操作系统管理的就是整个硬件功能嘛！ 所以当然不能够随便被一些没有管理能力的终端用户随意使用啰！\n\n但是我们总是需要让用户操作系统的，所以就有了在操作系统上面发展的应用程序啦！用户可以透过应用程序来指挥核心， 让核心达成我们所需要的硬件任务！如果考虑如[第零章所提供的操作系统图标(图4.2.1)](http://cn.linux.vbird.org/linux_basic/0105computers/os_01.gif)， 我们可以发现应用程序其实是在最外层，就如同鸡蛋的外壳一样，因此这个咚咚也就被称呼为壳程序 (shell) 啰！\n\n其实壳程序的功能只是提供用户操作系统的一个接口，因此这个壳程序需要可以呼叫其他软件才好。 我们在第五章到第十章提到过很多命令，包括 man, chmod, chown, vi, fdisk, mkfs 等等命令，这些命令都是独立的应用程序， 但是我们可以透过壳程序 (就是命令列模式) 来操作这些应用程序，让这些应用程序呼叫核心来运行所需的工作哩！ 这样对于壳程序是否有了一定的概念了？\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**为何要学文字接口的 shell？**\n\n文字接口的 shell 是很不好学的，但是学了之后好处多多！所以， 在这里鸟哥要先对您进行一些心理建设，先来了解一下为啥学习 shell 是有好处的，这样你才会有信心继续玩下去 ^_^\n\n\n\n------\n\n- ### 文字接口的 shell：大家都一样！\n\n鸟哥常常听到这个问题：『我干嘛要学习 shell 呢？ 不是已经有很多的工具可以提供我配置我的主机了？我为何要花这么多时间去学命令呢？不是以 X Window 按一按几个按钮就可以搞定了吗？』唉～还是得一再地强调， X Window 还有 Web 接口的配置工具例如 Webmin ([注1](http://cn.linux.vbird.org/linux_basic/0320bash_1.php#ps1)) 是真的好用的家伙， 他真的可以帮助我们很简易的配置好我们的主机，甚至是一些很进阶的配置都可以帮我们搞定。\n\n但是鸟哥在前面的章节里面也已经提到过相当多次了， X Window 与 web 接口的工具，他的接口虽然亲善，功能虽然强大， 但毕竟他是将所有利用到的软件都整合在一起的一组应用程序而已， 并非是一个完整的套件，所以某些时候当你升级或者是使用其他套件管理模块 (例如 tarball 而非 rpm 文件等等) 时，就会造成配置的困扰了。甚至不同的 distribution 所设计的 X window 接口也都不相同，这样也造成学习方面的困扰。\n\n文字接口的 shell 就不同了！几乎各家 distributions 使用的 bash 都是一样的！如此一来， 你就能够轻轻松松的转换不同的 distributions ，就像武侠小说里面提到的『一法通、万法通！』\n\n\n\n------\n\n- ### 远程管理：文字接口就是比较快！\n\n此外，Linux 的管理常常需要透过远程联机，而联机时文字接口的传输速度一定比较快， 而且，较不容易出现断线或者是信息外流的问题，因此，shell 真的是得学习的一项工具。而且，他可以让您更深入 Linux ，更了解他，而不是只会按一按鼠标而已！所谓『天助自助者！』多摸一点文本模式的东西，会让你与 Linux 更亲近呢！\n\n\n\n------\n\n- ### Linux 的任督二脉： shell 是也！\n\n有些朋友也很可爱，常会说：『我学这么多干什么？ 又不常用，也用不到！』嘿嘿！有没有听过『书到用时方恨少？』 当你的主机一切安然无恙的时候，您当然会觉得好像学这么多的东西一点帮助也没有呀！ 万一，某一天真的不幸给他中标了，您该如何是好？是直接重新安装？ 还是先追踪入侵来源后进行漏洞的修补？或者是干脆就关站好了？这当然涉及很多的考虑， 但就以鸟哥的观点来看，多学一点总是好的，尤其我们可以有备而无患嘛！甚至学的不精也没有关系，了解概念也就 OK 啦！毕竟没有人要您一定要背这么多的内容啦！了解概念就很了不起了！\n\n此外，如果你真的有心想要将您的主机管理的好，那么良好的 shell 程序编写是一定需要的啦！就鸟哥自己来说，鸟哥管理的主机虽然还不算多， 只有区区不到十部，但是如果每部主机都要花上几十分钟来查阅他的登录文件信息以及相关的信息， 那么鸟哥可能会疯掉！基本上，也太没有效率了！这个时候，如果能够藉由 shell 提供的数据流重导向以及管线命令，呵呵！ 那么鸟哥分析登录信息只要花费不到十分钟就可以看完所有的主机之重要信息了！相当的好用呢！\n\n由于学习 shell 的好处真的是多多啦！所以，如果你是个系统管理员，或者有心想要管理系统的话，那么 shell 与 shell scripts 这个东西真的有必要看一看！因为他就像『打通任督二脉，任何武功都能随你应用』的说！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**系统的合法 shell 与 /etc/shells 功能**\n\n知道什么是 Shell 之后，那么我们来了解一下 Linux 使用的是哪一个 shell 呢？什么！哪一个？难道说 shell 不就是『一个 shell 吗？』哈哈！那可不！由于早年的 Unix 年代，发展者众，所以由于 shell 依据发展者的不同就有许多的版本，例如常听到的 Bourne SHell (sh) 、在 Sun 里头默认的 C SHell、 商业上常用的 K SHell、, 还有 TCSH 等等，每一种 Shell 都各有其特点。至于 Linux 使用的这一种版本就称为『 Bourne Again SHell (简称 bash) 』，这个 Shell 是 Bourne Shell 的增强版本，也是基准于 GNU 的架构下发展出来的呦！\n\n在介绍 shell 的优点之前，先来说一说 shell 的简单历史吧([注2](http://cn.linux.vbird.org/linux_basic/0320bash_1.php#ps2))：第一个流行的 shell 是由 Steven Bourne 发展出来的，为了纪念他所以就称为 Bourne shell ，或直接简称为 sh ！而后来另一个广为流传的 shell 是由柏克莱大学的 Bill Joy 设计依附于 BSD 版的 Unix 系统中的 shell ，这个 shell 的语法有点类似 C 语言，所以才得名为 C shell ，简称为 csh ！由于在学术界 Sun 主机势力相当的庞大，而 Sun 主要是 BSD 的分支之一，所以 C shell 也是另一个很重要而且流传很广的 shell 之一 。\n\n那么目前我们的 Linux (以 CentOS 5.x 为例) 有多少我们可以使用的 shells 呢？ 你可以检查一下 /etc/shells 这个文件，至少就有底下这几个可以用的 shells：\n\n- /bin/sh (已经被 /bin/bash 所取代)\n- /bin/bash (就是 Linux 默认的 shell)\n- /bin/ksh (Kornshell 由 AT&T Bell lab. 发展出来的，兼容于 bash)\n- /bin/tcsh (整合 C Shell ，提供更多的功能)\n- /bin/csh (已经被 /bin/tcsh 所取代)\n- /bin/zsh (基于 ksh 发展出来的，功能更强大的 shell)\n\n虽然各家 shell 的功能都差不多，但是在某些语法的下达方面则有所不同，因此建议你还是得要选择某一种 shell 来熟悉一下较佳。 Linux 默认就是使用 bash ，所以最初你只要学会 bash 就非常了不起了！ ^_^！ 另外，咦！为什么我们系统上合法的 shell 要写入 /etc/shells 这个文件啊？ 这是因为系统某些服务在运行过程中，会去检查使用者能够使用的 shells ，而这些 shell 的查询就是藉由 /etc/shells 这个文件啰！\n\n举例来说，某些 FTP 网站会去检查使用者的可用 shell ，而如果你不想要让这些使用者使用 FTP 以外的主机资源时，可能会给予该使用者一些怪怪的 shell，让使用者无法以其他服务登陆主机。 这个时候，你就得将那些怪怪的 shell 写到 /etc/shells 当中了。举例来说，我们的 CentOS 5.x 的 /etc/shells 里头就有个 /sbin/nologin 文件的存在，这个就是我们说的怪怪的 shell 啰～\n\n那么，再想一想，我这个使用者什么时候可以取得 shell 来工作呢？还有， 我这个使用者默认会取得哪一个 shell 啊？还记得我们在[第五章的在终端界面登陆linux小节](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#start_cmd)当中提到的登陆动作吧？ 当我登陆的时候，系统就会给我一个 shell 让我来工作了。 而这个登陆取得的 shell 就记录在 /etc/passwd 这个文件内！这个文件的内容是啥？\n\n```\n[root@www ~]# cat /etc/passwd root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin .....(底下省略)..... \n```\n\n如上所示，在每一行的最后一个数据，就是你登陆后可以取得的默认的 shell 啦！那你也会看到， root 是 /bin/bash ，不过，系统账号 bin 与 daemon 等等，就使用那个怪怪的 /sbin/nologin 啰～关于使用者这部分的内容，我们留在[第十四章的账号管理](http://cn.linux.vbird.org/linux_basic/0410accountmanager.php)时提供更多的说明。\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**Bash shell 的功能**\n\n既然 /bin/bash 是 Linux 默认的 shell ，那么总是得了解一下这个玩意儿吧！bash 是 GNU 计划中重要的工具软件之一，目前也是 Linux distributions 的标准 shell 。 bash 主要兼容于 sh ，并且依据一些使用者需求，而加强的 shell 版本。不论你使用的是那个 distribution ，你都难逃需要学习 bash 的宿命啦！那么这个 shell 有什么好处，干嘛 Linux 要使用他作为默认的 shell 呢？ bash 主要的优点有底下几个：\n\n\n\n------\n\n- ### 命令编修能力 (history)：\n\nbash 的功能里头，鸟哥个人认为相当棒的一个就是『他能记忆使用过的命令！』 这功能真的相当的棒！因为我只要在命令列按『上下键』就可以找到前/后一个输入的命令！而在很多 distribution 里头，默认的命令记忆功能可以到达 1000 个！也就是说， 你曾经下达过的命令几乎都被记录下来了。\n\n这么多的命令记录在哪里呢？在你的家目录内的 .bash_history 啦！ 不过，需要留意的是，~/.bash_history 记录的是前一次登陆以前所运行过的命令， 而至于这一次登陆所运行的命令都被缓存在内存中，当你成功的注销系统后，该命令记忆才会记录到 .bash_history 当中！\n\n这有什么功能呢？最大的好处就是可以『查询曾经做过的举动！』 如此可以知道你的运行步骤，那么就可以追踪你曾下达过的命令，以作为除错的工具！ 但如此一来也有个烦恼，就是如果被黑客入侵了，那么他只要翻你曾经运行过的命令， 刚好你的命令又跟系统有关 (例如直接输入 MySQL 的密码在命令列上面)，那你的主机可就伤脑筋了！ 到底记录命令的数目越多还是越少越好？这部份是见仁见智啦，没有一定的答案的。\n\n\n\n\n\n------\n\n- ### 命令与文件补全功能： ([tab] 按键的好处)\n\n还记得我们在[第五章内的重要的几个热键小节](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_hkey)当中提到的 [tab] 这个按键吗？这个按键的功能就是在 bash 里头才有的啦！常常在 bash 环境中使用 [tab] 是个很棒的习惯喔！因为至少可以让你 1)少打很多字； 2)确定输入的数据是正确的！ 使用 [tab] 按键的时机依据 [tab] 接在命令后或参数后而有所不同。我们再复习一次：\n\n- [Tab] 接在一串命令的第一个字的后面，则为命令补全；\n- [Tab] 接在一串命令的第二个字以后时，则为『文件补齐』！\n\n所以说，如果我想要知道我的环境中，所有可以运行的命令有几个？ 就直接在 bash 的提示字符后面连续按两次 [tab] 按键就能够显示所有的可运行命令了。 那如果想要知道系统当中所有以 c 为开头的命令呢？就按下『 c[tab][tab] 』就好啦！ ^_^\n\n是的！真的是很方便的功能，所以，有事没事，在 bash shell 底下，多按几次 [tab] 是一个不错的习惯啦！\n\n\n\n------\n\n- ### 命令别名配置功能： (alias)\n\n假如我需要知道这个目录底下的所有文件 (包含隐藏档) 及所有的文件属性，那么我就必须要下达『 ls -al 』这样的命令串，唉！真麻烦，有没有更快的取代方式？呵呵！就使用命令别名呀！例如鸟哥最喜欢直接以 lm 这个自定义的命令来取代上面的命令，也就是说， lm 会等于 ls -al 这样的一个功能，嘿！那么要如何作呢？就使用 alias 即可！你可以在命令列输入 alias 就可以知道目前的命令别名有哪些了！也可以直接下达命令来配置别名呦：\n\n> alias lm='ls -al'\n\n\n\n------\n\n- ### 工作控制、前景背景控制： (job control, foreground, background)\n\n这部分我们在[第十七章 Linux 过程控制](http://cn.linux.vbird.org/linux_basic/0440processcontrol.php)中再提及！ 使用前、背景的控制可以让工作进行的更为顺利！至于工作控制(jobs)的用途则更广， 可以让我们随时将工作丢到背景中运行！而不怕不小心使用了 [Ctrl] + c 来停掉该程序！真是好样的！此外，也可以在单一登录的环境中，达到多任务的目的呢！\n\n\n\n------\n\n- ### 程序化脚本： (shell scripts)\n\n在 DOS 年代还记得将一堆命令写在一起的所谓的『批处理文件』吧？在 Linux 底下的 shell scripts 则发挥更为强大的功能，可以将你平时管理系统常需要下达的连续命令写成一个文件， 该文件并且可以透过对谈交互式的方式来进行主机的侦测工作！也可以藉由 shell 提供的环境变量及相关命令来进行设计，哇！整个设计下来几乎就是一个小型的程序语言了！该 scripts 的功能真的是超乎我的想象之外！以前在 DOS 底下需要程序语言才能写的东西，在 Linux 底下使用简单的 shell scripts 就可以帮你达成了！真的厉害！这部分我们在[第十三章](http://cn.linux.vbird.org/linux_basic/0340bashshell-scripts.php)再来谈！\n\n\n\n------\n\n- ### 通配符： (Wildcard)\n\n除了完整的字符串之外， bash 还支持许多的通配符来帮助用户查询与命令下达。 举例来说，想要知道 /usr/bin 底下有多少以 X 为开头的文件吗？使用：『 ls -l /usr/bin/X* 』就能够知道啰～此外，还有其他可供利用的通配符， 这些都能够加快使用者的操作呢！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**Bash shell 的内建命令： type**\n\n我们在[第五章](http://cn.linux.vbird.org/linux_basic/0160startlinux.php)提到关于 [Linux 的联机帮助文件](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#manual_man)部分，也就是 man page 的内容，那么 bash 有没有什么说明文件啊？开玩笑～ 这么棒的东西怎么可能没有说明文件！请你在 shell 的环境下，直接输入 man bash 瞧一瞧， 嘿嘿！不是盖的吧！让你看个几天几夜也无法看完的 bash 说明文件，可是很详尽的数据啊！ ^_^\n\n不过，在这个 bash 的 man page 当中，不知道你是否有察觉到，咦！ 怎么这个说明文件里面有其他的文件说明啊？举例来说，那个 cd 命令的说明就在这个 man page 内？ 然后我直接输入 man cd 时，怎么出现的画面中，最上方竟然出现一堆命令的介绍？这是怎么回事？ 为了方便 shell 的操作，其实 bash 已经『内建』了很多命令了，例如上面提到的 cd ， 还有例如 umask 等等的命令，都是内建在 bash 当中的呢！\n\n那我怎么知道这个命令是来自于外部命令(指的是其他非 bash 所提供的命令) 或是内建在 bash 当中的呢？ 嘿嘿！利用 type 这个命令来观察即可！举例来说：\n\n```\n[root@www ~]# type [-tpa] name\n选项与参数：\n    ：不加任何选项与参数时，type 会显示出 name 是外部命令还是 bash 内建命令\n-t  ：当加入 -t 参数时，type 会将 name 以底下这些字眼显示出他的意义：\n      file    ：表示为外部命令；\n      alias   ：表示该命令为命令别名所配置的名称；\n      builtin ：表示该命令为 bash 内建的命令功能；\n-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；\n-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 alias\n\n范例一：查询一下 ls 这个命令是否为 bash 内建？\n[root@www ~]# type ls\nls is aliased to `ls --color=tty' <==未加任何参数，列出 ls 的最主要使用情况\n[root@www ~]# type -t ls\nalias                             <==仅列出 ls 运行时的依据\n[root@www ~]# type -a ls\nls is aliased to `ls --color=tty' <==最先使用 aliase\nls is /bin/ls                     <==还有找到外部命令在 /bin/ls\n\n范例二：那么 cd 呢？\n[root@www ~]# type cd\ncd is a shell builtin             <==看到了吗？ cd 是 shell 内建命令\n```\n\n透过 type 这个命令我们可以知道每个命令是否为 bash 的内建命令。 此外，由于利用 type 搜寻后面的名称时，如果后面接的名称并不能以运行档的状态被找到， 那么该名称是不会被显示出来的。也就是说， type 主要在找出『运行档』而不是一般文件档名喔！ 呵呵！所以，这个 type 也可以用来作为类似 [which](http://cn.linux.vbird.org/linux_basic/0220filemanager.php#which) 命令的用途啦！找命令用的！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**命令的下达**\n\n我们在[第五章的开始下达命令小节](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_cmd)已经提到过在 shell 环境下的命令下达方法，如果你忘记了请回到第五章再去回忆一下！这里不重复说明了。 鸟哥这里仅就反斜杠 (\\) 来说明一下命令下达的方式啰！\n\n```\n范例：如果命令串太长的话，如何使用两行来输出？ [vbird@www ~]# cp /var/spool/mail/root /etc/crontab \\ > /etc/fstab /root \n```\n\n上面这个命令用途是将三个文件复制到 /root 这个目录下而已。不过，因为命令太长， 于是鸟哥就利用『 \\[Enter] 』来将 [Enter] 这个按键『跳脱！』开来，让 [Enter] 按键不再具有『开始运行』的功能！好让命令可以继续在下一行输入。 需要特别留意， [Enter] 按键是紧接着反斜杠 (\\) 的，两者中间没有其他字符。 因为 \\ 仅跳脱『紧接着的下一个字符』而已！所以，万一我写成： 『 \\ [Enter] 』，亦即 [Enter] 与反斜杠中间有一个空格时，则 \\ 跳脱的是『空格键』而不是 [Enter] 按键！这个地方请再仔细的看一遍！很重要！\n\n如果顺利跳脱 [Enter] 后，下一行最前面就会主动出现 > 的符号， 你可以继续输入命令啰！也就是说，那个 > 是系统自动出现的，你不需要输入。\n\n总之，当我们顺利的在终端机 (tty) 上面登陆后， Linux 就会依据 /etc/passwd 文件的配置给我们一个 shell (默认是 bash)，然后我们就可以依据上面的命令下达方式来操作 shell， 之后，我们就可以透过 man 这个在线查询来查询命令的使用方式与参数说明， 很不错吧！那么我们就赶紧更进一步来操作 bash 这个好玩的东西啰！","source":"_posts/Linux/认识BASH这个Shell.md","raw":"---\ntitle: 认识BASH这个Shell\ndate:\ntags: \n- Linux\n- Shell\ncategories:\n- Linux\ndescription:\ntop_img: false\n---\n\n## ![大标题的图示](http://cn.linux.vbird.org/image/logo.png)**认识 BASH 这个 Shell**\n\n我们在[第一章 Linux 是什么](http://cn.linux.vbird.org/linux_basic/0110whatislinux.php)当中提到了： 管理整个计算机硬件的其实是操作系统的核心 (kernel)，这个核心是需要被保护的！ 所以我们一般使用者就只能透过 shell 来跟核心沟通，以让核心达到我们所想要达到的工作。 那么系统有多少 shell 可用呢？为什么我们要使用 bash 啊？底下分别来谈一谈喔！\n\n\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**硬件、核心与 Shell**\n\n这应该是个蛮有趣的话题：『什么是 Shell 』？相信只要摸过计算机，对于操作系统 (不论是 Linux 、 Unix 或者是 Windows) 有点概念的朋友们大多听过这个名词，因为只要有『操作系统』那么就离不开 Shell 这个东西。不过，在讨论 Shell 之前，我们先来了解一下计算机的运行状况吧！ 举个例子来说：当你要计算机传输出来『音乐』的时候，你的计算机需要什么东西呢？\n\n1. 硬件：当然就是需要你的硬件有『声卡芯片』这个配备，否则怎么会有声音；\n2. 核心管理：操作系统的核心可以支持这个芯片组，当然还需要提供芯片的驱动程序啰；\n3. 应用程序：需要使用者 (就是你) 输入发生声音的命令啰！\n\n这就是基本的一个输出声音所需要的步骤！也就是说，你必须要『输入』一个命令之后， 『硬件』才会透过你下达的命令来工作！那么硬件如何知道你下达的命令呢？那就是 kernel (核心) 的控制工作了！也就是说，我们必须要透过『 Shell 』将我们输入的命令与 Kernel 沟通，好让 Kernel 可以控制硬件来正确无误的工作！ 基本上，我们可以透过底下这张图来说明一下：\n\n![硬件、核心与用户的相关性图标](./media/0320bash_1.jpg)\n图 1.1.1、硬件、核心与用户的相关性图示\n\n我们在[第零章内的操作系统小节](http://cn.linux.vbird.org/linux_basic/0105computers.php#program_os)曾经提到过， 操作系统其实是一组软件，由于这组软件在控制整个硬件与管理系统的活动监测， 如果这组软件能被用户随意的操作，若使用者应用不当，将会使得整个系统崩溃！因为操作系统管理的就是整个硬件功能嘛！ 所以当然不能够随便被一些没有管理能力的终端用户随意使用啰！\n\n但是我们总是需要让用户操作系统的，所以就有了在操作系统上面发展的应用程序啦！用户可以透过应用程序来指挥核心， 让核心达成我们所需要的硬件任务！如果考虑如[第零章所提供的操作系统图标(图4.2.1)](http://cn.linux.vbird.org/linux_basic/0105computers/os_01.gif)， 我们可以发现应用程序其实是在最外层，就如同鸡蛋的外壳一样，因此这个咚咚也就被称呼为壳程序 (shell) 啰！\n\n其实壳程序的功能只是提供用户操作系统的一个接口，因此这个壳程序需要可以呼叫其他软件才好。 我们在第五章到第十章提到过很多命令，包括 man, chmod, chown, vi, fdisk, mkfs 等等命令，这些命令都是独立的应用程序， 但是我们可以透过壳程序 (就是命令列模式) 来操作这些应用程序，让这些应用程序呼叫核心来运行所需的工作哩！ 这样对于壳程序是否有了一定的概念了？\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**为何要学文字接口的 shell？**\n\n文字接口的 shell 是很不好学的，但是学了之后好处多多！所以， 在这里鸟哥要先对您进行一些心理建设，先来了解一下为啥学习 shell 是有好处的，这样你才会有信心继续玩下去 ^_^\n\n\n\n------\n\n- ### 文字接口的 shell：大家都一样！\n\n鸟哥常常听到这个问题：『我干嘛要学习 shell 呢？ 不是已经有很多的工具可以提供我配置我的主机了？我为何要花这么多时间去学命令呢？不是以 X Window 按一按几个按钮就可以搞定了吗？』唉～还是得一再地强调， X Window 还有 Web 接口的配置工具例如 Webmin ([注1](http://cn.linux.vbird.org/linux_basic/0320bash_1.php#ps1)) 是真的好用的家伙， 他真的可以帮助我们很简易的配置好我们的主机，甚至是一些很进阶的配置都可以帮我们搞定。\n\n但是鸟哥在前面的章节里面也已经提到过相当多次了， X Window 与 web 接口的工具，他的接口虽然亲善，功能虽然强大， 但毕竟他是将所有利用到的软件都整合在一起的一组应用程序而已， 并非是一个完整的套件，所以某些时候当你升级或者是使用其他套件管理模块 (例如 tarball 而非 rpm 文件等等) 时，就会造成配置的困扰了。甚至不同的 distribution 所设计的 X window 接口也都不相同，这样也造成学习方面的困扰。\n\n文字接口的 shell 就不同了！几乎各家 distributions 使用的 bash 都是一样的！如此一来， 你就能够轻轻松松的转换不同的 distributions ，就像武侠小说里面提到的『一法通、万法通！』\n\n\n\n------\n\n- ### 远程管理：文字接口就是比较快！\n\n此外，Linux 的管理常常需要透过远程联机，而联机时文字接口的传输速度一定比较快， 而且，较不容易出现断线或者是信息外流的问题，因此，shell 真的是得学习的一项工具。而且，他可以让您更深入 Linux ，更了解他，而不是只会按一按鼠标而已！所谓『天助自助者！』多摸一点文本模式的东西，会让你与 Linux 更亲近呢！\n\n\n\n------\n\n- ### Linux 的任督二脉： shell 是也！\n\n有些朋友也很可爱，常会说：『我学这么多干什么？ 又不常用，也用不到！』嘿嘿！有没有听过『书到用时方恨少？』 当你的主机一切安然无恙的时候，您当然会觉得好像学这么多的东西一点帮助也没有呀！ 万一，某一天真的不幸给他中标了，您该如何是好？是直接重新安装？ 还是先追踪入侵来源后进行漏洞的修补？或者是干脆就关站好了？这当然涉及很多的考虑， 但就以鸟哥的观点来看，多学一点总是好的，尤其我们可以有备而无患嘛！甚至学的不精也没有关系，了解概念也就 OK 啦！毕竟没有人要您一定要背这么多的内容啦！了解概念就很了不起了！\n\n此外，如果你真的有心想要将您的主机管理的好，那么良好的 shell 程序编写是一定需要的啦！就鸟哥自己来说，鸟哥管理的主机虽然还不算多， 只有区区不到十部，但是如果每部主机都要花上几十分钟来查阅他的登录文件信息以及相关的信息， 那么鸟哥可能会疯掉！基本上，也太没有效率了！这个时候，如果能够藉由 shell 提供的数据流重导向以及管线命令，呵呵！ 那么鸟哥分析登录信息只要花费不到十分钟就可以看完所有的主机之重要信息了！相当的好用呢！\n\n由于学习 shell 的好处真的是多多啦！所以，如果你是个系统管理员，或者有心想要管理系统的话，那么 shell 与 shell scripts 这个东西真的有必要看一看！因为他就像『打通任督二脉，任何武功都能随你应用』的说！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**系统的合法 shell 与 /etc/shells 功能**\n\n知道什么是 Shell 之后，那么我们来了解一下 Linux 使用的是哪一个 shell 呢？什么！哪一个？难道说 shell 不就是『一个 shell 吗？』哈哈！那可不！由于早年的 Unix 年代，发展者众，所以由于 shell 依据发展者的不同就有许多的版本，例如常听到的 Bourne SHell (sh) 、在 Sun 里头默认的 C SHell、 商业上常用的 K SHell、, 还有 TCSH 等等，每一种 Shell 都各有其特点。至于 Linux 使用的这一种版本就称为『 Bourne Again SHell (简称 bash) 』，这个 Shell 是 Bourne Shell 的增强版本，也是基准于 GNU 的架构下发展出来的呦！\n\n在介绍 shell 的优点之前，先来说一说 shell 的简单历史吧([注2](http://cn.linux.vbird.org/linux_basic/0320bash_1.php#ps2))：第一个流行的 shell 是由 Steven Bourne 发展出来的，为了纪念他所以就称为 Bourne shell ，或直接简称为 sh ！而后来另一个广为流传的 shell 是由柏克莱大学的 Bill Joy 设计依附于 BSD 版的 Unix 系统中的 shell ，这个 shell 的语法有点类似 C 语言，所以才得名为 C shell ，简称为 csh ！由于在学术界 Sun 主机势力相当的庞大，而 Sun 主要是 BSD 的分支之一，所以 C shell 也是另一个很重要而且流传很广的 shell 之一 。\n\n那么目前我们的 Linux (以 CentOS 5.x 为例) 有多少我们可以使用的 shells 呢？ 你可以检查一下 /etc/shells 这个文件，至少就有底下这几个可以用的 shells：\n\n- /bin/sh (已经被 /bin/bash 所取代)\n- /bin/bash (就是 Linux 默认的 shell)\n- /bin/ksh (Kornshell 由 AT&T Bell lab. 发展出来的，兼容于 bash)\n- /bin/tcsh (整合 C Shell ，提供更多的功能)\n- /bin/csh (已经被 /bin/tcsh 所取代)\n- /bin/zsh (基于 ksh 发展出来的，功能更强大的 shell)\n\n虽然各家 shell 的功能都差不多，但是在某些语法的下达方面则有所不同，因此建议你还是得要选择某一种 shell 来熟悉一下较佳。 Linux 默认就是使用 bash ，所以最初你只要学会 bash 就非常了不起了！ ^_^！ 另外，咦！为什么我们系统上合法的 shell 要写入 /etc/shells 这个文件啊？ 这是因为系统某些服务在运行过程中，会去检查使用者能够使用的 shells ，而这些 shell 的查询就是藉由 /etc/shells 这个文件啰！\n\n举例来说，某些 FTP 网站会去检查使用者的可用 shell ，而如果你不想要让这些使用者使用 FTP 以外的主机资源时，可能会给予该使用者一些怪怪的 shell，让使用者无法以其他服务登陆主机。 这个时候，你就得将那些怪怪的 shell 写到 /etc/shells 当中了。举例来说，我们的 CentOS 5.x 的 /etc/shells 里头就有个 /sbin/nologin 文件的存在，这个就是我们说的怪怪的 shell 啰～\n\n那么，再想一想，我这个使用者什么时候可以取得 shell 来工作呢？还有， 我这个使用者默认会取得哪一个 shell 啊？还记得我们在[第五章的在终端界面登陆linux小节](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#start_cmd)当中提到的登陆动作吧？ 当我登陆的时候，系统就会给我一个 shell 让我来工作了。 而这个登陆取得的 shell 就记录在 /etc/passwd 这个文件内！这个文件的内容是啥？\n\n```\n[root@www ~]# cat /etc/passwd root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin .....(底下省略)..... \n```\n\n如上所示，在每一行的最后一个数据，就是你登陆后可以取得的默认的 shell 啦！那你也会看到， root 是 /bin/bash ，不过，系统账号 bin 与 daemon 等等，就使用那个怪怪的 /sbin/nologin 啰～关于使用者这部分的内容，我们留在[第十四章的账号管理](http://cn.linux.vbird.org/linux_basic/0410accountmanager.php)时提供更多的说明。\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**Bash shell 的功能**\n\n既然 /bin/bash 是 Linux 默认的 shell ，那么总是得了解一下这个玩意儿吧！bash 是 GNU 计划中重要的工具软件之一，目前也是 Linux distributions 的标准 shell 。 bash 主要兼容于 sh ，并且依据一些使用者需求，而加强的 shell 版本。不论你使用的是那个 distribution ，你都难逃需要学习 bash 的宿命啦！那么这个 shell 有什么好处，干嘛 Linux 要使用他作为默认的 shell 呢？ bash 主要的优点有底下几个：\n\n\n\n------\n\n- ### 命令编修能力 (history)：\n\nbash 的功能里头，鸟哥个人认为相当棒的一个就是『他能记忆使用过的命令！』 这功能真的相当的棒！因为我只要在命令列按『上下键』就可以找到前/后一个输入的命令！而在很多 distribution 里头，默认的命令记忆功能可以到达 1000 个！也就是说， 你曾经下达过的命令几乎都被记录下来了。\n\n这么多的命令记录在哪里呢？在你的家目录内的 .bash_history 啦！ 不过，需要留意的是，~/.bash_history 记录的是前一次登陆以前所运行过的命令， 而至于这一次登陆所运行的命令都被缓存在内存中，当你成功的注销系统后，该命令记忆才会记录到 .bash_history 当中！\n\n这有什么功能呢？最大的好处就是可以『查询曾经做过的举动！』 如此可以知道你的运行步骤，那么就可以追踪你曾下达过的命令，以作为除错的工具！ 但如此一来也有个烦恼，就是如果被黑客入侵了，那么他只要翻你曾经运行过的命令， 刚好你的命令又跟系统有关 (例如直接输入 MySQL 的密码在命令列上面)，那你的主机可就伤脑筋了！ 到底记录命令的数目越多还是越少越好？这部份是见仁见智啦，没有一定的答案的。\n\n\n\n\n\n------\n\n- ### 命令与文件补全功能： ([tab] 按键的好处)\n\n还记得我们在[第五章内的重要的几个热键小节](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_hkey)当中提到的 [tab] 这个按键吗？这个按键的功能就是在 bash 里头才有的啦！常常在 bash 环境中使用 [tab] 是个很棒的习惯喔！因为至少可以让你 1)少打很多字； 2)确定输入的数据是正确的！ 使用 [tab] 按键的时机依据 [tab] 接在命令后或参数后而有所不同。我们再复习一次：\n\n- [Tab] 接在一串命令的第一个字的后面，则为命令补全；\n- [Tab] 接在一串命令的第二个字以后时，则为『文件补齐』！\n\n所以说，如果我想要知道我的环境中，所有可以运行的命令有几个？ 就直接在 bash 的提示字符后面连续按两次 [tab] 按键就能够显示所有的可运行命令了。 那如果想要知道系统当中所有以 c 为开头的命令呢？就按下『 c[tab][tab] 』就好啦！ ^_^\n\n是的！真的是很方便的功能，所以，有事没事，在 bash shell 底下，多按几次 [tab] 是一个不错的习惯啦！\n\n\n\n------\n\n- ### 命令别名配置功能： (alias)\n\n假如我需要知道这个目录底下的所有文件 (包含隐藏档) 及所有的文件属性，那么我就必须要下达『 ls -al 』这样的命令串，唉！真麻烦，有没有更快的取代方式？呵呵！就使用命令别名呀！例如鸟哥最喜欢直接以 lm 这个自定义的命令来取代上面的命令，也就是说， lm 会等于 ls -al 这样的一个功能，嘿！那么要如何作呢？就使用 alias 即可！你可以在命令列输入 alias 就可以知道目前的命令别名有哪些了！也可以直接下达命令来配置别名呦：\n\n> alias lm='ls -al'\n\n\n\n------\n\n- ### 工作控制、前景背景控制： (job control, foreground, background)\n\n这部分我们在[第十七章 Linux 过程控制](http://cn.linux.vbird.org/linux_basic/0440processcontrol.php)中再提及！ 使用前、背景的控制可以让工作进行的更为顺利！至于工作控制(jobs)的用途则更广， 可以让我们随时将工作丢到背景中运行！而不怕不小心使用了 [Ctrl] + c 来停掉该程序！真是好样的！此外，也可以在单一登录的环境中，达到多任务的目的呢！\n\n\n\n------\n\n- ### 程序化脚本： (shell scripts)\n\n在 DOS 年代还记得将一堆命令写在一起的所谓的『批处理文件』吧？在 Linux 底下的 shell scripts 则发挥更为强大的功能，可以将你平时管理系统常需要下达的连续命令写成一个文件， 该文件并且可以透过对谈交互式的方式来进行主机的侦测工作！也可以藉由 shell 提供的环境变量及相关命令来进行设计，哇！整个设计下来几乎就是一个小型的程序语言了！该 scripts 的功能真的是超乎我的想象之外！以前在 DOS 底下需要程序语言才能写的东西，在 Linux 底下使用简单的 shell scripts 就可以帮你达成了！真的厉害！这部分我们在[第十三章](http://cn.linux.vbird.org/linux_basic/0340bashshell-scripts.php)再来谈！\n\n\n\n------\n\n- ### 通配符： (Wildcard)\n\n除了完整的字符串之外， bash 还支持许多的通配符来帮助用户查询与命令下达。 举例来说，想要知道 /usr/bin 底下有多少以 X 为开头的文件吗？使用：『 ls -l /usr/bin/X* 』就能够知道啰～此外，还有其他可供利用的通配符， 这些都能够加快使用者的操作呢！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**Bash shell 的内建命令： type**\n\n我们在[第五章](http://cn.linux.vbird.org/linux_basic/0160startlinux.php)提到关于 [Linux 的联机帮助文件](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#manual_man)部分，也就是 man page 的内容，那么 bash 有没有什么说明文件啊？开玩笑～ 这么棒的东西怎么可能没有说明文件！请你在 shell 的环境下，直接输入 man bash 瞧一瞧， 嘿嘿！不是盖的吧！让你看个几天几夜也无法看完的 bash 说明文件，可是很详尽的数据啊！ ^_^\n\n不过，在这个 bash 的 man page 当中，不知道你是否有察觉到，咦！ 怎么这个说明文件里面有其他的文件说明啊？举例来说，那个 cd 命令的说明就在这个 man page 内？ 然后我直接输入 man cd 时，怎么出现的画面中，最上方竟然出现一堆命令的介绍？这是怎么回事？ 为了方便 shell 的操作，其实 bash 已经『内建』了很多命令了，例如上面提到的 cd ， 还有例如 umask 等等的命令，都是内建在 bash 当中的呢！\n\n那我怎么知道这个命令是来自于外部命令(指的是其他非 bash 所提供的命令) 或是内建在 bash 当中的呢？ 嘿嘿！利用 type 这个命令来观察即可！举例来说：\n\n```\n[root@www ~]# type [-tpa] name\n选项与参数：\n    ：不加任何选项与参数时，type 会显示出 name 是外部命令还是 bash 内建命令\n-t  ：当加入 -t 参数时，type 会将 name 以底下这些字眼显示出他的意义：\n      file    ：表示为外部命令；\n      alias   ：表示该命令为命令别名所配置的名称；\n      builtin ：表示该命令为 bash 内建的命令功能；\n-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；\n-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 alias\n\n范例一：查询一下 ls 这个命令是否为 bash 内建？\n[root@www ~]# type ls\nls is aliased to `ls --color=tty' <==未加任何参数，列出 ls 的最主要使用情况\n[root@www ~]# type -t ls\nalias                             <==仅列出 ls 运行时的依据\n[root@www ~]# type -a ls\nls is aliased to `ls --color=tty' <==最先使用 aliase\nls is /bin/ls                     <==还有找到外部命令在 /bin/ls\n\n范例二：那么 cd 呢？\n[root@www ~]# type cd\ncd is a shell builtin             <==看到了吗？ cd 是 shell 内建命令\n```\n\n透过 type 这个命令我们可以知道每个命令是否为 bash 的内建命令。 此外，由于利用 type 搜寻后面的名称时，如果后面接的名称并不能以运行档的状态被找到， 那么该名称是不会被显示出来的。也就是说， type 主要在找出『运行档』而不是一般文件档名喔！ 呵呵！所以，这个 type 也可以用来作为类似 [which](http://cn.linux.vbird.org/linux_basic/0220filemanager.php#which) 命令的用途啦！找命令用的！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**命令的下达**\n\n我们在[第五章的开始下达命令小节](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_cmd)已经提到过在 shell 环境下的命令下达方法，如果你忘记了请回到第五章再去回忆一下！这里不重复说明了。 鸟哥这里仅就反斜杠 (\\) 来说明一下命令下达的方式啰！\n\n```\n范例：如果命令串太长的话，如何使用两行来输出？ [vbird@www ~]# cp /var/spool/mail/root /etc/crontab \\ > /etc/fstab /root \n```\n\n上面这个命令用途是将三个文件复制到 /root 这个目录下而已。不过，因为命令太长， 于是鸟哥就利用『 \\[Enter] 』来将 [Enter] 这个按键『跳脱！』开来，让 [Enter] 按键不再具有『开始运行』的功能！好让命令可以继续在下一行输入。 需要特别留意， [Enter] 按键是紧接着反斜杠 (\\) 的，两者中间没有其他字符。 因为 \\ 仅跳脱『紧接着的下一个字符』而已！所以，万一我写成： 『 \\ [Enter] 』，亦即 [Enter] 与反斜杠中间有一个空格时，则 \\ 跳脱的是『空格键』而不是 [Enter] 按键！这个地方请再仔细的看一遍！很重要！\n\n如果顺利跳脱 [Enter] 后，下一行最前面就会主动出现 > 的符号， 你可以继续输入命令啰！也就是说，那个 > 是系统自动出现的，你不需要输入。\n\n总之，当我们顺利的在终端机 (tty) 上面登陆后， Linux 就会依据 /etc/passwd 文件的配置给我们一个 shell (默认是 bash)，然后我们就可以依据上面的命令下达方式来操作 shell， 之后，我们就可以透过 man 这个在线查询来查询命令的使用方式与参数说明， 很不错吧！那么我们就赶紧更进一步来操作 bash 这个好玩的东西啰！","slug":"Linux/认识BASH这个Shell","published":1,"updated":"2023-08-25T09:21:25.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd6760036gcr7fi3ucnxb","content":"<h2 id=\"认识-BASH-这个-Shell\"><a href=\"#认识-BASH-这个-Shell\" class=\"headerlink\" title=\"认识 BASH 这个 Shell\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"大标题的图示\"><strong>认识 BASH 这个 Shell</strong></h2><p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0110whatislinux.php\">第一章 Linux 是什么</a>当中提到了： 管理整个计算机硬件的其实是操作系统的核心 (kernel)，这个核心是需要被保护的！ 所以我们一般使用者就只能透过 shell 来跟核心沟通，以让核心达到我们所想要达到的工作。 那么系统有多少 shell 可用呢？为什么我们要使用 bash 啊？底下分别来谈一谈喔！</p>\n<hr>\n<h2 id=\"硬件、核心与-Shell\"><a href=\"#硬件、核心与-Shell\" class=\"headerlink\" title=\"硬件、核心与 Shell\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>硬件、核心与 Shell</strong></h2><p>这应该是个蛮有趣的话题：『什么是 Shell 』？相信只要摸过计算机，对于操作系统 (不论是 Linux 、 Unix 或者是 Windows) 有点概念的朋友们大多听过这个名词，因为只要有『操作系统』那么就离不开 Shell 这个东西。不过，在讨论 Shell 之前，我们先来了解一下计算机的运行状况吧！ 举个例子来说：当你要计算机传输出来『音乐』的时候，你的计算机需要什么东西呢？</p>\n<ol>\n<li>硬件：当然就是需要你的硬件有『声卡芯片』这个配备，否则怎么会有声音；</li>\n<li>核心管理：操作系统的核心可以支持这个芯片组，当然还需要提供芯片的驱动程序啰；</li>\n<li>应用程序：需要使用者 (就是你) 输入发生声音的命令啰！</li>\n</ol>\n<p>这就是基本的一个输出声音所需要的步骤！也就是说，你必须要『输入』一个命令之后， 『硬件』才会透过你下达的命令来工作！那么硬件如何知道你下达的命令呢？那就是 kernel (核心) 的控制工作了！也就是说，我们必须要透过『 Shell 』将我们输入的命令与 Kernel 沟通，好让 Kernel 可以控制硬件来正确无误的工作！ 基本上，我们可以透过底下这张图来说明一下：</p>\n<p><img src=\"/./media/0320bash_1.jpg\" alt=\"硬件、核心与用户的相关性图标\"><br>图 1.1.1、硬件、核心与用户的相关性图示</p>\n<p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0105computers.php#program_os\">第零章内的操作系统小节</a>曾经提到过， 操作系统其实是一组软件，由于这组软件在控制整个硬件与管理系统的活动监测， 如果这组软件能被用户随意的操作，若使用者应用不当，将会使得整个系统崩溃！因为操作系统管理的就是整个硬件功能嘛！ 所以当然不能够随便被一些没有管理能力的终端用户随意使用啰！</p>\n<p>但是我们总是需要让用户操作系统的，所以就有了在操作系统上面发展的应用程序啦！用户可以透过应用程序来指挥核心， 让核心达成我们所需要的硬件任务！如果考虑如<a href=\"http://cn.linux.vbird.org/linux_basic/0105computers/os_01.gif\">第零章所提供的操作系统图标(图4.2.1)</a>， 我们可以发现应用程序其实是在最外层，就如同鸡蛋的外壳一样，因此这个咚咚也就被称呼为壳程序 (shell) 啰！</p>\n<p>其实壳程序的功能只是提供用户操作系统的一个接口，因此这个壳程序需要可以呼叫其他软件才好。 我们在第五章到第十章提到过很多命令，包括 man, chmod, chown, vi, fdisk, mkfs 等等命令，这些命令都是独立的应用程序， 但是我们可以透过壳程序 (就是命令列模式) 来操作这些应用程序，让这些应用程序呼叫核心来运行所需的工作哩！ 这样对于壳程序是否有了一定的概念了？</p>\n<hr>\n<h2 id=\"为何要学文字接口的-shell？\"><a href=\"#为何要学文字接口的-shell？\" class=\"headerlink\" title=\"为何要学文字接口的 shell？\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>为何要学文字接口的 shell？</strong></h2><p>文字接口的 shell 是很不好学的，但是学了之后好处多多！所以， 在这里鸟哥要先对您进行一些心理建设，先来了解一下为啥学习 shell 是有好处的，这样你才会有信心继续玩下去 ^_^</p>\n<hr>\n<ul>\n<li><h3 id=\"文字接口的-shell：大家都一样！\"><a href=\"#文字接口的-shell：大家都一样！\" class=\"headerlink\" title=\"文字接口的 shell：大家都一样！\"></a>文字接口的 shell：大家都一样！</h3></li>\n</ul>\n<p>鸟哥常常听到这个问题：『我干嘛要学习 shell 呢？ 不是已经有很多的工具可以提供我配置我的主机了？我为何要花这么多时间去学命令呢？不是以 X Window 按一按几个按钮就可以搞定了吗？』唉～还是得一再地强调， X Window 还有 Web 接口的配置工具例如 Webmin (<a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_1.php#ps1\">注1</a>) 是真的好用的家伙， 他真的可以帮助我们很简易的配置好我们的主机，甚至是一些很进阶的配置都可以帮我们搞定。</p>\n<p>但是鸟哥在前面的章节里面也已经提到过相当多次了， X Window 与 web 接口的工具，他的接口虽然亲善，功能虽然强大， 但毕竟他是将所有利用到的软件都整合在一起的一组应用程序而已， 并非是一个完整的套件，所以某些时候当你升级或者是使用其他套件管理模块 (例如 tarball 而非 rpm 文件等等) 时，就会造成配置的困扰了。甚至不同的 distribution 所设计的 X window 接口也都不相同，这样也造成学习方面的困扰。</p>\n<p>文字接口的 shell 就不同了！几乎各家 distributions 使用的 bash 都是一样的！如此一来， 你就能够轻轻松松的转换不同的 distributions ，就像武侠小说里面提到的『一法通、万法通！』</p>\n<hr>\n<ul>\n<li><h3 id=\"远程管理：文字接口就是比较快！\"><a href=\"#远程管理：文字接口就是比较快！\" class=\"headerlink\" title=\"远程管理：文字接口就是比较快！\"></a>远程管理：文字接口就是比较快！</h3></li>\n</ul>\n<p>此外，Linux 的管理常常需要透过远程联机，而联机时文字接口的传输速度一定比较快， 而且，较不容易出现断线或者是信息外流的问题，因此，shell 真的是得学习的一项工具。而且，他可以让您更深入 Linux ，更了解他，而不是只会按一按鼠标而已！所谓『天助自助者！』多摸一点文本模式的东西，会让你与 Linux 更亲近呢！</p>\n<hr>\n<ul>\n<li><h3 id=\"Linux-的任督二脉：-shell-是也！\"><a href=\"#Linux-的任督二脉：-shell-是也！\" class=\"headerlink\" title=\"Linux 的任督二脉： shell 是也！\"></a>Linux 的任督二脉： shell 是也！</h3></li>\n</ul>\n<p>有些朋友也很可爱，常会说：『我学这么多干什么？ 又不常用，也用不到！』嘿嘿！有没有听过『书到用时方恨少？』 当你的主机一切安然无恙的时候，您当然会觉得好像学这么多的东西一点帮助也没有呀！ 万一，某一天真的不幸给他中标了，您该如何是好？是直接重新安装？ 还是先追踪入侵来源后进行漏洞的修补？或者是干脆就关站好了？这当然涉及很多的考虑， 但就以鸟哥的观点来看，多学一点总是好的，尤其我们可以有备而无患嘛！甚至学的不精也没有关系，了解概念也就 OK 啦！毕竟没有人要您一定要背这么多的内容啦！了解概念就很了不起了！</p>\n<p>此外，如果你真的有心想要将您的主机管理的好，那么良好的 shell 程序编写是一定需要的啦！就鸟哥自己来说，鸟哥管理的主机虽然还不算多， 只有区区不到十部，但是如果每部主机都要花上几十分钟来查阅他的登录文件信息以及相关的信息， 那么鸟哥可能会疯掉！基本上，也太没有效率了！这个时候，如果能够藉由 shell 提供的数据流重导向以及管线命令，呵呵！ 那么鸟哥分析登录信息只要花费不到十分钟就可以看完所有的主机之重要信息了！相当的好用呢！</p>\n<p>由于学习 shell 的好处真的是多多啦！所以，如果你是个系统管理员，或者有心想要管理系统的话，那么 shell 与 shell scripts 这个东西真的有必要看一看！因为他就像『打通任督二脉，任何武功都能随你应用』的说！</p>\n<hr>\n<h2 id=\"系统的合法-shell-与-etc-shells-功能\"><a href=\"#系统的合法-shell-与-etc-shells-功能\" class=\"headerlink\" title=\"系统的合法 shell 与 &#x2F;etc&#x2F;shells 功能\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>系统的合法 shell 与 &#x2F;etc&#x2F;shells 功能</strong></h2><p>知道什么是 Shell 之后，那么我们来了解一下 Linux 使用的是哪一个 shell 呢？什么！哪一个？难道说 shell 不就是『一个 shell 吗？』哈哈！那可不！由于早年的 Unix 年代，发展者众，所以由于 shell 依据发展者的不同就有许多的版本，例如常听到的 Bourne SHell (sh) 、在 Sun 里头默认的 C SHell、 商业上常用的 K SHell、, 还有 TCSH 等等，每一种 Shell 都各有其特点。至于 Linux 使用的这一种版本就称为『 Bourne Again SHell (简称 bash) 』，这个 Shell 是 Bourne Shell 的增强版本，也是基准于 GNU 的架构下发展出来的呦！</p>\n<p>在介绍 shell 的优点之前，先来说一说 shell 的简单历史吧(<a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_1.php#ps2\">注2</a>)：第一个流行的 shell 是由 Steven Bourne 发展出来的，为了纪念他所以就称为 Bourne shell ，或直接简称为 sh ！而后来另一个广为流传的 shell 是由柏克莱大学的 Bill Joy 设计依附于 BSD 版的 Unix 系统中的 shell ，这个 shell 的语法有点类似 C 语言，所以才得名为 C shell ，简称为 csh ！由于在学术界 Sun 主机势力相当的庞大，而 Sun 主要是 BSD 的分支之一，所以 C shell 也是另一个很重要而且流传很广的 shell 之一 。</p>\n<p>那么目前我们的 Linux (以 CentOS 5.x 为例) 有多少我们可以使用的 shells 呢？ 你可以检查一下 &#x2F;etc&#x2F;shells 这个文件，至少就有底下这几个可以用的 shells：</p>\n<ul>\n<li>&#x2F;bin&#x2F;sh (已经被 &#x2F;bin&#x2F;bash 所取代)</li>\n<li>&#x2F;bin&#x2F;bash (就是 Linux 默认的 shell)</li>\n<li>&#x2F;bin&#x2F;ksh (Kornshell 由 AT&amp;T Bell lab. 发展出来的，兼容于 bash)</li>\n<li>&#x2F;bin&#x2F;tcsh (整合 C Shell ，提供更多的功能)</li>\n<li>&#x2F;bin&#x2F;csh (已经被 &#x2F;bin&#x2F;tcsh 所取代)</li>\n<li>&#x2F;bin&#x2F;zsh (基于 ksh 发展出来的，功能更强大的 shell)</li>\n</ul>\n<p>虽然各家 shell 的功能都差不多，但是在某些语法的下达方面则有所不同，因此建议你还是得要选择某一种 shell 来熟悉一下较佳。 Linux 默认就是使用 bash ，所以最初你只要学会 bash 就非常了不起了！ ^_^！ 另外，咦！为什么我们系统上合法的 shell 要写入 &#x2F;etc&#x2F;shells 这个文件啊？ 这是因为系统某些服务在运行过程中，会去检查使用者能够使用的 shells ，而这些 shell 的查询就是藉由 &#x2F;etc&#x2F;shells 这个文件啰！</p>\n<p>举例来说，某些 FTP 网站会去检查使用者的可用 shell ，而如果你不想要让这些使用者使用 FTP 以外的主机资源时，可能会给予该使用者一些怪怪的 shell，让使用者无法以其他服务登陆主机。 这个时候，你就得将那些怪怪的 shell 写到 &#x2F;etc&#x2F;shells 当中了。举例来说，我们的 CentOS 5.x 的 &#x2F;etc&#x2F;shells 里头就有个 &#x2F;sbin&#x2F;nologin 文件的存在，这个就是我们说的怪怪的 shell 啰～</p>\n<p>那么，再想一想，我这个使用者什么时候可以取得 shell 来工作呢？还有， 我这个使用者默认会取得哪一个 shell 啊？还记得我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#start_cmd\">第五章的在终端界面登陆linux小节</a>当中提到的登陆动作吧？ 当我登陆的时候，系统就会给我一个 shell 让我来工作了。 而这个登陆取得的 shell 就记录在 &#x2F;etc&#x2F;passwd 这个文件内！这个文件的内容是啥？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# cat /etc/passwd root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin .....(底下省略)..... </span><br></pre></td></tr></table></figure>\n\n<p>如上所示，在每一行的最后一个数据，就是你登陆后可以取得的默认的 shell 啦！那你也会看到， root 是 &#x2F;bin&#x2F;bash ，不过，系统账号 bin 与 daemon 等等，就使用那个怪怪的 &#x2F;sbin&#x2F;nologin 啰～关于使用者这部分的内容，我们留在<a href=\"http://cn.linux.vbird.org/linux_basic/0410accountmanager.php\">第十四章的账号管理</a>时提供更多的说明。</p>\n<hr>\n<h2 id=\"Bash-shell-的功能\"><a href=\"#Bash-shell-的功能\" class=\"headerlink\" title=\"Bash shell 的功能\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>Bash shell 的功能</strong></h2><p>既然 &#x2F;bin&#x2F;bash 是 Linux 默认的 shell ，那么总是得了解一下这个玩意儿吧！bash 是 GNU 计划中重要的工具软件之一，目前也是 Linux distributions 的标准 shell 。 bash 主要兼容于 sh ，并且依据一些使用者需求，而加强的 shell 版本。不论你使用的是那个 distribution ，你都难逃需要学习 bash 的宿命啦！那么这个 shell 有什么好处，干嘛 Linux 要使用他作为默认的 shell 呢？ bash 主要的优点有底下几个：</p>\n<hr>\n<ul>\n<li><h3 id=\"命令编修能力-history-：\"><a href=\"#命令编修能力-history-：\" class=\"headerlink\" title=\"命令编修能力 (history)：\"></a>命令编修能力 (history)：</h3></li>\n</ul>\n<p>bash 的功能里头，鸟哥个人认为相当棒的一个就是『他能记忆使用过的命令！』 这功能真的相当的棒！因为我只要在命令列按『上下键』就可以找到前&#x2F;后一个输入的命令！而在很多 distribution 里头，默认的命令记忆功能可以到达 1000 个！也就是说， 你曾经下达过的命令几乎都被记录下来了。</p>\n<p>这么多的命令记录在哪里呢？在你的家目录内的 .bash_history 啦！ 不过，需要留意的是，~&#x2F;.bash_history 记录的是前一次登陆以前所运行过的命令， 而至于这一次登陆所运行的命令都被缓存在内存中，当你成功的注销系统后，该命令记忆才会记录到 .bash_history 当中！</p>\n<p>这有什么功能呢？最大的好处就是可以『查询曾经做过的举动！』 如此可以知道你的运行步骤，那么就可以追踪你曾下达过的命令，以作为除错的工具！ 但如此一来也有个烦恼，就是如果被黑客入侵了，那么他只要翻你曾经运行过的命令， 刚好你的命令又跟系统有关 (例如直接输入 MySQL 的密码在命令列上面)，那你的主机可就伤脑筋了！ 到底记录命令的数目越多还是越少越好？这部份是见仁见智啦，没有一定的答案的。</p>\n<hr>\n<ul>\n<li><h3 id=\"命令与文件补全功能：-tab-按键的好处\"><a href=\"#命令与文件补全功能：-tab-按键的好处\" class=\"headerlink\" title=\"命令与文件补全功能： ([tab] 按键的好处)\"></a>命令与文件补全功能： ([tab] 按键的好处)</h3></li>\n</ul>\n<p>还记得我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_hkey\">第五章内的重要的几个热键小节</a>当中提到的 [tab] 这个按键吗？这个按键的功能就是在 bash 里头才有的啦！常常在 bash 环境中使用 [tab] 是个很棒的习惯喔！因为至少可以让你 1)少打很多字； 2)确定输入的数据是正确的！ 使用 [tab] 按键的时机依据 [tab] 接在命令后或参数后而有所不同。我们再复习一次：</p>\n<ul>\n<li>[Tab] 接在一串命令的第一个字的后面，则为命令补全；</li>\n<li>[Tab] 接在一串命令的第二个字以后时，则为『文件补齐』！</li>\n</ul>\n<p>所以说，如果我想要知道我的环境中，所有可以运行的命令有几个？ 就直接在 bash 的提示字符后面连续按两次 [tab] 按键就能够显示所有的可运行命令了。 那如果想要知道系统当中所有以 c 为开头的命令呢？就按下『 c[tab][tab] 』就好啦！ ^_^</p>\n<p>是的！真的是很方便的功能，所以，有事没事，在 bash shell 底下，多按几次 [tab] 是一个不错的习惯啦！</p>\n<hr>\n<ul>\n<li><h3 id=\"命令别名配置功能：-alias\"><a href=\"#命令别名配置功能：-alias\" class=\"headerlink\" title=\"命令别名配置功能： (alias)\"></a>命令别名配置功能： (alias)</h3></li>\n</ul>\n<p>假如我需要知道这个目录底下的所有文件 (包含隐藏档) 及所有的文件属性，那么我就必须要下达『 ls -al 』这样的命令串，唉！真麻烦，有没有更快的取代方式？呵呵！就使用命令别名呀！例如鸟哥最喜欢直接以 lm 这个自定义的命令来取代上面的命令，也就是说， lm 会等于 ls -al 这样的一个功能，嘿！那么要如何作呢？就使用 alias 即可！你可以在命令列输入 alias 就可以知道目前的命令别名有哪些了！也可以直接下达命令来配置别名呦：</p>\n<blockquote>\n<p>alias lm&#x3D;’ls -al’</p>\n</blockquote>\n<hr>\n<ul>\n<li><h3 id=\"工作控制、前景背景控制：-job-control-foreground-background\"><a href=\"#工作控制、前景背景控制：-job-control-foreground-background\" class=\"headerlink\" title=\"工作控制、前景背景控制： (job control, foreground, background)\"></a>工作控制、前景背景控制： (job control, foreground, background)</h3></li>\n</ul>\n<p>这部分我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0440processcontrol.php\">第十七章 Linux 过程控制</a>中再提及！ 使用前、背景的控制可以让工作进行的更为顺利！至于工作控制(jobs)的用途则更广， 可以让我们随时将工作丢到背景中运行！而不怕不小心使用了 [Ctrl] + c 来停掉该程序！真是好样的！此外，也可以在单一登录的环境中，达到多任务的目的呢！</p>\n<hr>\n<ul>\n<li><h3 id=\"程序化脚本：-shell-scripts\"><a href=\"#程序化脚本：-shell-scripts\" class=\"headerlink\" title=\"程序化脚本： (shell scripts)\"></a>程序化脚本： (shell scripts)</h3></li>\n</ul>\n<p>在 DOS 年代还记得将一堆命令写在一起的所谓的『批处理文件』吧？在 Linux 底下的 shell scripts 则发挥更为强大的功能，可以将你平时管理系统常需要下达的连续命令写成一个文件， 该文件并且可以透过对谈交互式的方式来进行主机的侦测工作！也可以藉由 shell 提供的环境变量及相关命令来进行设计，哇！整个设计下来几乎就是一个小型的程序语言了！该 scripts 的功能真的是超乎我的想象之外！以前在 DOS 底下需要程序语言才能写的东西，在 Linux 底下使用简单的 shell scripts 就可以帮你达成了！真的厉害！这部分我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0340bashshell-scripts.php\">第十三章</a>再来谈！</p>\n<hr>\n<ul>\n<li><h3 id=\"通配符：-Wildcard\"><a href=\"#通配符：-Wildcard\" class=\"headerlink\" title=\"通配符： (Wildcard)\"></a>通配符： (Wildcard)</h3></li>\n</ul>\n<p>除了完整的字符串之外， bash 还支持许多的通配符来帮助用户查询与命令下达。 举例来说，想要知道 &#x2F;usr&#x2F;bin 底下有多少以 X 为开头的文件吗？使用：『 ls -l &#x2F;usr&#x2F;bin&#x2F;X* 』就能够知道啰～此外，还有其他可供利用的通配符， 这些都能够加快使用者的操作呢！</p>\n<hr>\n<h2 id=\"Bash-shell-的内建命令：-type\"><a href=\"#Bash-shell-的内建命令：-type\" class=\"headerlink\" title=\"Bash shell 的内建命令： type\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>Bash shell 的内建命令： type</strong></h2><p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php\">第五章</a>提到关于 <a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#manual_man\">Linux 的联机帮助文件</a>部分，也就是 man page 的内容，那么 bash 有没有什么说明文件啊？开玩笑～ 这么棒的东西怎么可能没有说明文件！请你在 shell 的环境下，直接输入 man bash 瞧一瞧， 嘿嘿！不是盖的吧！让你看个几天几夜也无法看完的 bash 说明文件，可是很详尽的数据啊！ ^_^</p>\n<p>不过，在这个 bash 的 man page 当中，不知道你是否有察觉到，咦！ 怎么这个说明文件里面有其他的文件说明啊？举例来说，那个 cd 命令的说明就在这个 man page 内？ 然后我直接输入 man cd 时，怎么出现的画面中，最上方竟然出现一堆命令的介绍？这是怎么回事？ 为了方便 shell 的操作，其实 bash 已经『内建』了很多命令了，例如上面提到的 cd ， 还有例如 umask 等等的命令，都是内建在 bash 当中的呢！</p>\n<p>那我怎么知道这个命令是来自于外部命令(指的是其他非 bash 所提供的命令) 或是内建在 bash 当中的呢？ 嘿嘿！利用 type 这个命令来观察即可！举例来说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# type [-tpa] name</span><br><span class=\"line\">选项与参数：</span><br><span class=\"line\">    ：不加任何选项与参数时，type 会显示出 name 是外部命令还是 bash 内建命令</span><br><span class=\"line\">-t  ：当加入 -t 参数时，type 会将 name 以底下这些字眼显示出他的意义：</span><br><span class=\"line\">      file    ：表示为外部命令；</span><br><span class=\"line\">      alias   ：表示该命令为命令别名所配置的名称；</span><br><span class=\"line\">      builtin ：表示该命令为 bash 内建的命令功能；</span><br><span class=\"line\">-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；</span><br><span class=\"line\">-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 alias</span><br><span class=\"line\"></span><br><span class=\"line\">范例一：查询一下 ls 这个命令是否为 bash 内建？</span><br><span class=\"line\">[root@www ~]# type ls</span><br><span class=\"line\">ls is aliased to `ls --color=tty&#x27; &lt;==未加任何参数，列出 ls 的最主要使用情况</span><br><span class=\"line\">[root@www ~]# type -t ls</span><br><span class=\"line\">alias                             &lt;==仅列出 ls 运行时的依据</span><br><span class=\"line\">[root@www ~]# type -a ls</span><br><span class=\"line\">ls is aliased to `ls --color=tty&#x27; &lt;==最先使用 aliase</span><br><span class=\"line\">ls is /bin/ls                     &lt;==还有找到外部命令在 /bin/ls</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：那么 cd 呢？</span><br><span class=\"line\">[root@www ~]# type cd</span><br><span class=\"line\">cd is a shell builtin             &lt;==看到了吗？ cd 是 shell 内建命令</span><br></pre></td></tr></table></figure>\n\n<p>透过 type 这个命令我们可以知道每个命令是否为 bash 的内建命令。 此外，由于利用 type 搜寻后面的名称时，如果后面接的名称并不能以运行档的状态被找到， 那么该名称是不会被显示出来的。也就是说， type 主要在找出『运行档』而不是一般文件档名喔！ 呵呵！所以，这个 type 也可以用来作为类似 <a href=\"http://cn.linux.vbird.org/linux_basic/0220filemanager.php#which\">which</a> 命令的用途啦！找命令用的！</p>\n<hr>\n<h2 id=\"命令的下达\"><a href=\"#命令的下达\" class=\"headerlink\" title=\"命令的下达\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>命令的下达</strong></h2><p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_cmd\">第五章的开始下达命令小节</a>已经提到过在 shell 环境下的命令下达方法，如果你忘记了请回到第五章再去回忆一下！这里不重复说明了。 鸟哥这里仅就反斜杠 () 来说明一下命令下达的方式啰！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例：如果命令串太长的话，如何使用两行来输出？ [vbird@www ~]# cp /var/spool/mail/root /etc/crontab \\ &gt; /etc/fstab /root </span><br></pre></td></tr></table></figure>\n\n<p>上面这个命令用途是将三个文件复制到 &#x2F;root 这个目录下而已。不过，因为命令太长， 于是鸟哥就利用『 [Enter] 』来将 [Enter] 这个按键『跳脱！』开来，让 [Enter] 按键不再具有『开始运行』的功能！好让命令可以继续在下一行输入。 需要特别留意， [Enter] 按键是紧接着反斜杠 () 的，两者中间没有其他字符。 因为 \\ 仅跳脱『紧接着的下一个字符』而已！所以，万一我写成： 『 \\ [Enter] 』，亦即 [Enter] 与反斜杠中间有一个空格时，则 \\ 跳脱的是『空格键』而不是 [Enter] 按键！这个地方请再仔细的看一遍！很重要！</p>\n<p>如果顺利跳脱 [Enter] 后，下一行最前面就会主动出现 &gt; 的符号， 你可以继续输入命令啰！也就是说，那个 &gt; 是系统自动出现的，你不需要输入。</p>\n<p>总之，当我们顺利的在终端机 (tty) 上面登陆后， Linux 就会依据 &#x2F;etc&#x2F;passwd 文件的配置给我们一个 shell (默认是 bash)，然后我们就可以依据上面的命令下达方式来操作 shell， 之后，我们就可以透过 man 这个在线查询来查询命令的使用方式与参数说明， 很不错吧！那么我们就赶紧更进一步来操作 bash 这个好玩的东西啰！</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":"<h2 id=\"认识-BASH-这个-Shell\"><a href=\"#认识-BASH-这个-Shell\" class=\"headerlink\" title=\"认识 BASH 这个 Shell\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"大标题的图示\"><strong>认识 BASH 这个 Shell</strong></h2><p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0110whatislinux.php\">第一章 Linux 是什么</a>当中提到了： 管理整个计算机硬件的其实是操作系统的核心 (kernel)，这个核心是需要被保护的！ 所以我们一般使用者就只能透过 shell 来跟核心沟通，以让核心达到我们所想要达到的工作。 那么系统有多少 shell 可用呢？为什么我们要使用 bash 啊？底下分别来谈一谈喔！</p>\n<hr>\n<h2 id=\"硬件、核心与-Shell\"><a href=\"#硬件、核心与-Shell\" class=\"headerlink\" title=\"硬件、核心与 Shell\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>硬件、核心与 Shell</strong></h2><p>这应该是个蛮有趣的话题：『什么是 Shell 』？相信只要摸过计算机，对于操作系统 (不论是 Linux 、 Unix 或者是 Windows) 有点概念的朋友们大多听过这个名词，因为只要有『操作系统』那么就离不开 Shell 这个东西。不过，在讨论 Shell 之前，我们先来了解一下计算机的运行状况吧！ 举个例子来说：当你要计算机传输出来『音乐』的时候，你的计算机需要什么东西呢？</p>\n<ol>\n<li>硬件：当然就是需要你的硬件有『声卡芯片』这个配备，否则怎么会有声音；</li>\n<li>核心管理：操作系统的核心可以支持这个芯片组，当然还需要提供芯片的驱动程序啰；</li>\n<li>应用程序：需要使用者 (就是你) 输入发生声音的命令啰！</li>\n</ol>\n<p>这就是基本的一个输出声音所需要的步骤！也就是说，你必须要『输入』一个命令之后， 『硬件』才会透过你下达的命令来工作！那么硬件如何知道你下达的命令呢？那就是 kernel (核心) 的控制工作了！也就是说，我们必须要透过『 Shell 』将我们输入的命令与 Kernel 沟通，好让 Kernel 可以控制硬件来正确无误的工作！ 基本上，我们可以透过底下这张图来说明一下：</p>\n<p><img src=\"/./media/0320bash_1.jpg\" alt=\"硬件、核心与用户的相关性图标\"><br>图 1.1.1、硬件、核心与用户的相关性图示</p>\n<p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0105computers.php#program_os\">第零章内的操作系统小节</a>曾经提到过， 操作系统其实是一组软件，由于这组软件在控制整个硬件与管理系统的活动监测， 如果这组软件能被用户随意的操作，若使用者应用不当，将会使得整个系统崩溃！因为操作系统管理的就是整个硬件功能嘛！ 所以当然不能够随便被一些没有管理能力的终端用户随意使用啰！</p>\n<p>但是我们总是需要让用户操作系统的，所以就有了在操作系统上面发展的应用程序啦！用户可以透过应用程序来指挥核心， 让核心达成我们所需要的硬件任务！如果考虑如<a href=\"http://cn.linux.vbird.org/linux_basic/0105computers/os_01.gif\">第零章所提供的操作系统图标(图4.2.1)</a>， 我们可以发现应用程序其实是在最外层，就如同鸡蛋的外壳一样，因此这个咚咚也就被称呼为壳程序 (shell) 啰！</p>\n<p>其实壳程序的功能只是提供用户操作系统的一个接口，因此这个壳程序需要可以呼叫其他软件才好。 我们在第五章到第十章提到过很多命令，包括 man, chmod, chown, vi, fdisk, mkfs 等等命令，这些命令都是独立的应用程序， 但是我们可以透过壳程序 (就是命令列模式) 来操作这些应用程序，让这些应用程序呼叫核心来运行所需的工作哩！ 这样对于壳程序是否有了一定的概念了？</p>\n<hr>\n<h2 id=\"为何要学文字接口的-shell？\"><a href=\"#为何要学文字接口的-shell？\" class=\"headerlink\" title=\"为何要学文字接口的 shell？\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>为何要学文字接口的 shell？</strong></h2><p>文字接口的 shell 是很不好学的，但是学了之后好处多多！所以， 在这里鸟哥要先对您进行一些心理建设，先来了解一下为啥学习 shell 是有好处的，这样你才会有信心继续玩下去 ^_^</p>\n<hr>\n<ul>\n<li><h3 id=\"文字接口的-shell：大家都一样！\"><a href=\"#文字接口的-shell：大家都一样！\" class=\"headerlink\" title=\"文字接口的 shell：大家都一样！\"></a>文字接口的 shell：大家都一样！</h3></li>\n</ul>\n<p>鸟哥常常听到这个问题：『我干嘛要学习 shell 呢？ 不是已经有很多的工具可以提供我配置我的主机了？我为何要花这么多时间去学命令呢？不是以 X Window 按一按几个按钮就可以搞定了吗？』唉～还是得一再地强调， X Window 还有 Web 接口的配置工具例如 Webmin (<a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_1.php#ps1\">注1</a>) 是真的好用的家伙， 他真的可以帮助我们很简易的配置好我们的主机，甚至是一些很进阶的配置都可以帮我们搞定。</p>\n<p>但是鸟哥在前面的章节里面也已经提到过相当多次了， X Window 与 web 接口的工具，他的接口虽然亲善，功能虽然强大， 但毕竟他是将所有利用到的软件都整合在一起的一组应用程序而已， 并非是一个完整的套件，所以某些时候当你升级或者是使用其他套件管理模块 (例如 tarball 而非 rpm 文件等等) 时，就会造成配置的困扰了。甚至不同的 distribution 所设计的 X window 接口也都不相同，这样也造成学习方面的困扰。</p>\n<p>文字接口的 shell 就不同了！几乎各家 distributions 使用的 bash 都是一样的！如此一来， 你就能够轻轻松松的转换不同的 distributions ，就像武侠小说里面提到的『一法通、万法通！』</p>\n<hr>\n<ul>\n<li><h3 id=\"远程管理：文字接口就是比较快！\"><a href=\"#远程管理：文字接口就是比较快！\" class=\"headerlink\" title=\"远程管理：文字接口就是比较快！\"></a>远程管理：文字接口就是比较快！</h3></li>\n</ul>\n<p>此外，Linux 的管理常常需要透过远程联机，而联机时文字接口的传输速度一定比较快， 而且，较不容易出现断线或者是信息外流的问题，因此，shell 真的是得学习的一项工具。而且，他可以让您更深入 Linux ，更了解他，而不是只会按一按鼠标而已！所谓『天助自助者！』多摸一点文本模式的东西，会让你与 Linux 更亲近呢！</p>\n<hr>\n<ul>\n<li><h3 id=\"Linux-的任督二脉：-shell-是也！\"><a href=\"#Linux-的任督二脉：-shell-是也！\" class=\"headerlink\" title=\"Linux 的任督二脉： shell 是也！\"></a>Linux 的任督二脉： shell 是也！</h3></li>\n</ul>\n<p>有些朋友也很可爱，常会说：『我学这么多干什么？ 又不常用，也用不到！』嘿嘿！有没有听过『书到用时方恨少？』 当你的主机一切安然无恙的时候，您当然会觉得好像学这么多的东西一点帮助也没有呀！ 万一，某一天真的不幸给他中标了，您该如何是好？是直接重新安装？ 还是先追踪入侵来源后进行漏洞的修补？或者是干脆就关站好了？这当然涉及很多的考虑， 但就以鸟哥的观点来看，多学一点总是好的，尤其我们可以有备而无患嘛！甚至学的不精也没有关系，了解概念也就 OK 啦！毕竟没有人要您一定要背这么多的内容啦！了解概念就很了不起了！</p>\n<p>此外，如果你真的有心想要将您的主机管理的好，那么良好的 shell 程序编写是一定需要的啦！就鸟哥自己来说，鸟哥管理的主机虽然还不算多， 只有区区不到十部，但是如果每部主机都要花上几十分钟来查阅他的登录文件信息以及相关的信息， 那么鸟哥可能会疯掉！基本上，也太没有效率了！这个时候，如果能够藉由 shell 提供的数据流重导向以及管线命令，呵呵！ 那么鸟哥分析登录信息只要花费不到十分钟就可以看完所有的主机之重要信息了！相当的好用呢！</p>\n<p>由于学习 shell 的好处真的是多多啦！所以，如果你是个系统管理员，或者有心想要管理系统的话，那么 shell 与 shell scripts 这个东西真的有必要看一看！因为他就像『打通任督二脉，任何武功都能随你应用』的说！</p>\n<hr>\n<h2 id=\"系统的合法-shell-与-etc-shells-功能\"><a href=\"#系统的合法-shell-与-etc-shells-功能\" class=\"headerlink\" title=\"系统的合法 shell 与 &#x2F;etc&#x2F;shells 功能\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>系统的合法 shell 与 &#x2F;etc&#x2F;shells 功能</strong></h2><p>知道什么是 Shell 之后，那么我们来了解一下 Linux 使用的是哪一个 shell 呢？什么！哪一个？难道说 shell 不就是『一个 shell 吗？』哈哈！那可不！由于早年的 Unix 年代，发展者众，所以由于 shell 依据发展者的不同就有许多的版本，例如常听到的 Bourne SHell (sh) 、在 Sun 里头默认的 C SHell、 商业上常用的 K SHell、, 还有 TCSH 等等，每一种 Shell 都各有其特点。至于 Linux 使用的这一种版本就称为『 Bourne Again SHell (简称 bash) 』，这个 Shell 是 Bourne Shell 的增强版本，也是基准于 GNU 的架构下发展出来的呦！</p>\n<p>在介绍 shell 的优点之前，先来说一说 shell 的简单历史吧(<a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_1.php#ps2\">注2</a>)：第一个流行的 shell 是由 Steven Bourne 发展出来的，为了纪念他所以就称为 Bourne shell ，或直接简称为 sh ！而后来另一个广为流传的 shell 是由柏克莱大学的 Bill Joy 设计依附于 BSD 版的 Unix 系统中的 shell ，这个 shell 的语法有点类似 C 语言，所以才得名为 C shell ，简称为 csh ！由于在学术界 Sun 主机势力相当的庞大，而 Sun 主要是 BSD 的分支之一，所以 C shell 也是另一个很重要而且流传很广的 shell 之一 。</p>\n<p>那么目前我们的 Linux (以 CentOS 5.x 为例) 有多少我们可以使用的 shells 呢？ 你可以检查一下 &#x2F;etc&#x2F;shells 这个文件，至少就有底下这几个可以用的 shells：</p>\n<ul>\n<li>&#x2F;bin&#x2F;sh (已经被 &#x2F;bin&#x2F;bash 所取代)</li>\n<li>&#x2F;bin&#x2F;bash (就是 Linux 默认的 shell)</li>\n<li>&#x2F;bin&#x2F;ksh (Kornshell 由 AT&amp;T Bell lab. 发展出来的，兼容于 bash)</li>\n<li>&#x2F;bin&#x2F;tcsh (整合 C Shell ，提供更多的功能)</li>\n<li>&#x2F;bin&#x2F;csh (已经被 &#x2F;bin&#x2F;tcsh 所取代)</li>\n<li>&#x2F;bin&#x2F;zsh (基于 ksh 发展出来的，功能更强大的 shell)</li>\n</ul>\n<p>虽然各家 shell 的功能都差不多，但是在某些语法的下达方面则有所不同，因此建议你还是得要选择某一种 shell 来熟悉一下较佳。 Linux 默认就是使用 bash ，所以最初你只要学会 bash 就非常了不起了！ ^_^！ 另外，咦！为什么我们系统上合法的 shell 要写入 &#x2F;etc&#x2F;shells 这个文件啊？ 这是因为系统某些服务在运行过程中，会去检查使用者能够使用的 shells ，而这些 shell 的查询就是藉由 &#x2F;etc&#x2F;shells 这个文件啰！</p>\n<p>举例来说，某些 FTP 网站会去检查使用者的可用 shell ，而如果你不想要让这些使用者使用 FTP 以外的主机资源时，可能会给予该使用者一些怪怪的 shell，让使用者无法以其他服务登陆主机。 这个时候，你就得将那些怪怪的 shell 写到 &#x2F;etc&#x2F;shells 当中了。举例来说，我们的 CentOS 5.x 的 &#x2F;etc&#x2F;shells 里头就有个 &#x2F;sbin&#x2F;nologin 文件的存在，这个就是我们说的怪怪的 shell 啰～</p>\n<p>那么，再想一想，我这个使用者什么时候可以取得 shell 来工作呢？还有， 我这个使用者默认会取得哪一个 shell 啊？还记得我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#start_cmd\">第五章的在终端界面登陆linux小节</a>当中提到的登陆动作吧？ 当我登陆的时候，系统就会给我一个 shell 让我来工作了。 而这个登陆取得的 shell 就记录在 &#x2F;etc&#x2F;passwd 这个文件内！这个文件的内容是啥？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# cat /etc/passwd root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin .....(底下省略)..... </span><br></pre></td></tr></table></figure>\n\n<p>如上所示，在每一行的最后一个数据，就是你登陆后可以取得的默认的 shell 啦！那你也会看到， root 是 &#x2F;bin&#x2F;bash ，不过，系统账号 bin 与 daemon 等等，就使用那个怪怪的 &#x2F;sbin&#x2F;nologin 啰～关于使用者这部分的内容，我们留在<a href=\"http://cn.linux.vbird.org/linux_basic/0410accountmanager.php\">第十四章的账号管理</a>时提供更多的说明。</p>\n<hr>\n<h2 id=\"Bash-shell-的功能\"><a href=\"#Bash-shell-的功能\" class=\"headerlink\" title=\"Bash shell 的功能\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>Bash shell 的功能</strong></h2><p>既然 &#x2F;bin&#x2F;bash 是 Linux 默认的 shell ，那么总是得了解一下这个玩意儿吧！bash 是 GNU 计划中重要的工具软件之一，目前也是 Linux distributions 的标准 shell 。 bash 主要兼容于 sh ，并且依据一些使用者需求，而加强的 shell 版本。不论你使用的是那个 distribution ，你都难逃需要学习 bash 的宿命啦！那么这个 shell 有什么好处，干嘛 Linux 要使用他作为默认的 shell 呢？ bash 主要的优点有底下几个：</p>\n<hr>\n<ul>\n<li><h3 id=\"命令编修能力-history-：\"><a href=\"#命令编修能力-history-：\" class=\"headerlink\" title=\"命令编修能力 (history)：\"></a>命令编修能力 (history)：</h3></li>\n</ul>\n<p>bash 的功能里头，鸟哥个人认为相当棒的一个就是『他能记忆使用过的命令！』 这功能真的相当的棒！因为我只要在命令列按『上下键』就可以找到前&#x2F;后一个输入的命令！而在很多 distribution 里头，默认的命令记忆功能可以到达 1000 个！也就是说， 你曾经下达过的命令几乎都被记录下来了。</p>\n<p>这么多的命令记录在哪里呢？在你的家目录内的 .bash_history 啦！ 不过，需要留意的是，~&#x2F;.bash_history 记录的是前一次登陆以前所运行过的命令， 而至于这一次登陆所运行的命令都被缓存在内存中，当你成功的注销系统后，该命令记忆才会记录到 .bash_history 当中！</p>\n<p>这有什么功能呢？最大的好处就是可以『查询曾经做过的举动！』 如此可以知道你的运行步骤，那么就可以追踪你曾下达过的命令，以作为除错的工具！ 但如此一来也有个烦恼，就是如果被黑客入侵了，那么他只要翻你曾经运行过的命令， 刚好你的命令又跟系统有关 (例如直接输入 MySQL 的密码在命令列上面)，那你的主机可就伤脑筋了！ 到底记录命令的数目越多还是越少越好？这部份是见仁见智啦，没有一定的答案的。</p>\n<hr>\n<ul>\n<li><h3 id=\"命令与文件补全功能：-tab-按键的好处\"><a href=\"#命令与文件补全功能：-tab-按键的好处\" class=\"headerlink\" title=\"命令与文件补全功能： ([tab] 按键的好处)\"></a>命令与文件补全功能： ([tab] 按键的好处)</h3></li>\n</ul>\n<p>还记得我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_hkey\">第五章内的重要的几个热键小节</a>当中提到的 [tab] 这个按键吗？这个按键的功能就是在 bash 里头才有的啦！常常在 bash 环境中使用 [tab] 是个很棒的习惯喔！因为至少可以让你 1)少打很多字； 2)确定输入的数据是正确的！ 使用 [tab] 按键的时机依据 [tab] 接在命令后或参数后而有所不同。我们再复习一次：</p>\n<ul>\n<li>[Tab] 接在一串命令的第一个字的后面，则为命令补全；</li>\n<li>[Tab] 接在一串命令的第二个字以后时，则为『文件补齐』！</li>\n</ul>\n<p>所以说，如果我想要知道我的环境中，所有可以运行的命令有几个？ 就直接在 bash 的提示字符后面连续按两次 [tab] 按键就能够显示所有的可运行命令了。 那如果想要知道系统当中所有以 c 为开头的命令呢？就按下『 c[tab][tab] 』就好啦！ ^_^</p>\n<p>是的！真的是很方便的功能，所以，有事没事，在 bash shell 底下，多按几次 [tab] 是一个不错的习惯啦！</p>\n<hr>\n<ul>\n<li><h3 id=\"命令别名配置功能：-alias\"><a href=\"#命令别名配置功能：-alias\" class=\"headerlink\" title=\"命令别名配置功能： (alias)\"></a>命令别名配置功能： (alias)</h3></li>\n</ul>\n<p>假如我需要知道这个目录底下的所有文件 (包含隐藏档) 及所有的文件属性，那么我就必须要下达『 ls -al 』这样的命令串，唉！真麻烦，有没有更快的取代方式？呵呵！就使用命令别名呀！例如鸟哥最喜欢直接以 lm 这个自定义的命令来取代上面的命令，也就是说， lm 会等于 ls -al 这样的一个功能，嘿！那么要如何作呢？就使用 alias 即可！你可以在命令列输入 alias 就可以知道目前的命令别名有哪些了！也可以直接下达命令来配置别名呦：</p>\n<blockquote>\n<p>alias lm&#x3D;’ls -al’</p>\n</blockquote>\n<hr>\n<ul>\n<li><h3 id=\"工作控制、前景背景控制：-job-control-foreground-background\"><a href=\"#工作控制、前景背景控制：-job-control-foreground-background\" class=\"headerlink\" title=\"工作控制、前景背景控制： (job control, foreground, background)\"></a>工作控制、前景背景控制： (job control, foreground, background)</h3></li>\n</ul>\n<p>这部分我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0440processcontrol.php\">第十七章 Linux 过程控制</a>中再提及！ 使用前、背景的控制可以让工作进行的更为顺利！至于工作控制(jobs)的用途则更广， 可以让我们随时将工作丢到背景中运行！而不怕不小心使用了 [Ctrl] + c 来停掉该程序！真是好样的！此外，也可以在单一登录的环境中，达到多任务的目的呢！</p>\n<hr>\n<ul>\n<li><h3 id=\"程序化脚本：-shell-scripts\"><a href=\"#程序化脚本：-shell-scripts\" class=\"headerlink\" title=\"程序化脚本： (shell scripts)\"></a>程序化脚本： (shell scripts)</h3></li>\n</ul>\n<p>在 DOS 年代还记得将一堆命令写在一起的所谓的『批处理文件』吧？在 Linux 底下的 shell scripts 则发挥更为强大的功能，可以将你平时管理系统常需要下达的连续命令写成一个文件， 该文件并且可以透过对谈交互式的方式来进行主机的侦测工作！也可以藉由 shell 提供的环境变量及相关命令来进行设计，哇！整个设计下来几乎就是一个小型的程序语言了！该 scripts 的功能真的是超乎我的想象之外！以前在 DOS 底下需要程序语言才能写的东西，在 Linux 底下使用简单的 shell scripts 就可以帮你达成了！真的厉害！这部分我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0340bashshell-scripts.php\">第十三章</a>再来谈！</p>\n<hr>\n<ul>\n<li><h3 id=\"通配符：-Wildcard\"><a href=\"#通配符：-Wildcard\" class=\"headerlink\" title=\"通配符： (Wildcard)\"></a>通配符： (Wildcard)</h3></li>\n</ul>\n<p>除了完整的字符串之外， bash 还支持许多的通配符来帮助用户查询与命令下达。 举例来说，想要知道 &#x2F;usr&#x2F;bin 底下有多少以 X 为开头的文件吗？使用：『 ls -l &#x2F;usr&#x2F;bin&#x2F;X* 』就能够知道啰～此外，还有其他可供利用的通配符， 这些都能够加快使用者的操作呢！</p>\n<hr>\n<h2 id=\"Bash-shell-的内建命令：-type\"><a href=\"#Bash-shell-的内建命令：-type\" class=\"headerlink\" title=\"Bash shell 的内建命令： type\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>Bash shell 的内建命令： type</strong></h2><p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php\">第五章</a>提到关于 <a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#manual_man\">Linux 的联机帮助文件</a>部分，也就是 man page 的内容，那么 bash 有没有什么说明文件啊？开玩笑～ 这么棒的东西怎么可能没有说明文件！请你在 shell 的环境下，直接输入 man bash 瞧一瞧， 嘿嘿！不是盖的吧！让你看个几天几夜也无法看完的 bash 说明文件，可是很详尽的数据啊！ ^_^</p>\n<p>不过，在这个 bash 的 man page 当中，不知道你是否有察觉到，咦！ 怎么这个说明文件里面有其他的文件说明啊？举例来说，那个 cd 命令的说明就在这个 man page 内？ 然后我直接输入 man cd 时，怎么出现的画面中，最上方竟然出现一堆命令的介绍？这是怎么回事？ 为了方便 shell 的操作，其实 bash 已经『内建』了很多命令了，例如上面提到的 cd ， 还有例如 umask 等等的命令，都是内建在 bash 当中的呢！</p>\n<p>那我怎么知道这个命令是来自于外部命令(指的是其他非 bash 所提供的命令) 或是内建在 bash 当中的呢？ 嘿嘿！利用 type 这个命令来观察即可！举例来说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# type [-tpa] name</span><br><span class=\"line\">选项与参数：</span><br><span class=\"line\">    ：不加任何选项与参数时，type 会显示出 name 是外部命令还是 bash 内建命令</span><br><span class=\"line\">-t  ：当加入 -t 参数时，type 会将 name 以底下这些字眼显示出他的意义：</span><br><span class=\"line\">      file    ：表示为外部命令；</span><br><span class=\"line\">      alias   ：表示该命令为命令别名所配置的名称；</span><br><span class=\"line\">      builtin ：表示该命令为 bash 内建的命令功能；</span><br><span class=\"line\">-p  ：如果后面接的 name 为外部命令时，才会显示完整文件名；</span><br><span class=\"line\">-a  ：会由 PATH 变量定义的路径中，将所有含 name 的命令都列出来，包含 alias</span><br><span class=\"line\"></span><br><span class=\"line\">范例一：查询一下 ls 这个命令是否为 bash 内建？</span><br><span class=\"line\">[root@www ~]# type ls</span><br><span class=\"line\">ls is aliased to `ls --color=tty&#x27; &lt;==未加任何参数，列出 ls 的最主要使用情况</span><br><span class=\"line\">[root@www ~]# type -t ls</span><br><span class=\"line\">alias                             &lt;==仅列出 ls 运行时的依据</span><br><span class=\"line\">[root@www ~]# type -a ls</span><br><span class=\"line\">ls is aliased to `ls --color=tty&#x27; &lt;==最先使用 aliase</span><br><span class=\"line\">ls is /bin/ls                     &lt;==还有找到外部命令在 /bin/ls</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：那么 cd 呢？</span><br><span class=\"line\">[root@www ~]# type cd</span><br><span class=\"line\">cd is a shell builtin             &lt;==看到了吗？ cd 是 shell 内建命令</span><br></pre></td></tr></table></figure>\n\n<p>透过 type 这个命令我们可以知道每个命令是否为 bash 的内建命令。 此外，由于利用 type 搜寻后面的名称时，如果后面接的名称并不能以运行档的状态被找到， 那么该名称是不会被显示出来的。也就是说， type 主要在找出『运行档』而不是一般文件档名喔！ 呵呵！所以，这个 type 也可以用来作为类似 <a href=\"http://cn.linux.vbird.org/linux_basic/0220filemanager.php#which\">which</a> 命令的用途啦！找命令用的！</p>\n<hr>\n<h2 id=\"命令的下达\"><a href=\"#命令的下达\" class=\"headerlink\" title=\"命令的下达\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>命令的下达</strong></h2><p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_cmd\">第五章的开始下达命令小节</a>已经提到过在 shell 环境下的命令下达方法，如果你忘记了请回到第五章再去回忆一下！这里不重复说明了。 鸟哥这里仅就反斜杠 () 来说明一下命令下达的方式啰！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例：如果命令串太长的话，如何使用两行来输出？ [vbird@www ~]# cp /var/spool/mail/root /etc/crontab \\ &gt; /etc/fstab /root </span><br></pre></td></tr></table></figure>\n\n<p>上面这个命令用途是将三个文件复制到 &#x2F;root 这个目录下而已。不过，因为命令太长， 于是鸟哥就利用『 [Enter] 』来将 [Enter] 这个按键『跳脱！』开来，让 [Enter] 按键不再具有『开始运行』的功能！好让命令可以继续在下一行输入。 需要特别留意， [Enter] 按键是紧接着反斜杠 () 的，两者中间没有其他字符。 因为 \\ 仅跳脱『紧接着的下一个字符』而已！所以，万一我写成： 『 \\ [Enter] 』，亦即 [Enter] 与反斜杠中间有一个空格时，则 \\ 跳脱的是『空格键』而不是 [Enter] 按键！这个地方请再仔细的看一遍！很重要！</p>\n<p>如果顺利跳脱 [Enter] 后，下一行最前面就会主动出现 &gt; 的符号， 你可以继续输入命令啰！也就是说，那个 &gt; 是系统自动出现的，你不需要输入。</p>\n<p>总之，当我们顺利的在终端机 (tty) 上面登陆后， Linux 就会依据 &#x2F;etc&#x2F;passwd 文件的配置给我们一个 shell (默认是 bash)，然后我们就可以依据上面的命令下达方式来操作 shell， 之后，我们就可以透过 man 这个在线查询来查询命令的使用方式与参数说明， 很不错吧！那么我们就赶紧更进一步来操作 bash 这个好玩的东西啰！</p>\n"},{"title":"stable-diffusion-webui手动安装详细步骤","date":"2023-08-25T09:23:07.723Z","description":null,"top_img":false,"_content":"\n# stable-diffusion-webui手动安装详细步骤\n\n## 环境\n\nOS：Windows10\n显卡类型：NVIDIA（英伟达）\n[Python版本](https://www.python.org/downloads/?login=from_csdn)：3.10.6（必须为该版本）\n[Git](https://git-scm.com/?login=from_csdn)：必须\n\n## 安装过程\n\n### 升级CUDA驱动\n\n**python3.10目前是不支持cuda10.2版本的torch包的,可以通过 [CUDA版本对应的torch](https://download.pytorch.org/whl/torch_stable.html?login=from_csdn)去查看，所以先要升级CUDA驱动，如果是更高版本的驱动可以跳过该步骤。**\n\n需要根据自己显卡类型去下载相应的驱动，win + x ->设备管理器 ->显示适配器\n\n![在这里插入图片描述](media/5ef388c5c9214b6c8fab73fbc87d0071.png)\n\n然后去 [CUDA驱动](https://www.nvidia.com/Download/Find.aspx?lang=en-us&login=from_csdn) 填写对应的显卡信息后搜索显卡驱动\n\n![在这里插入图片描述](media/f3bdcd5cb41b42a6bc70d01e7f62be57.png)\n\n这里选择第一个驱动进行下载，下载之后是一个exe文件，直接按照步骤安装即可，过程比较简单不再赘述\n\n![在这里插入图片描述](media/10e8e9317eca4b14b8682eb30fcbfd6c.png)\n\n使用命令`nvidia-smi`查看，可以看到CUDA版本是11.4，相应的驱动版本是472.84\n\n```shell\nPS C:\\Users\\samsung> nvidia-smi\nSat Apr  1 14:02:38 2023\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 472.84       Driver Version: 472.84       CUDA Version: 11.4     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ... WDDM  | 00000000:01:00.0 Off |                  N/A |\n| N/A    0C    P8    N/A /  N/A |     75MiB /  4096MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|    0   N/A  N/A     14052    C+G   ...IA GeForce Experience.exe    N/A      |\n+-----------------------------------------------------------------------------+\n\n```\n\n### 安装CUDAToolKit\n\n如果原来装过CUDA ToolKit请先卸载\n\n[CUDA ToolKit](https://developer.nvidia.cn/cuda-toolkit-archive?login=from_csdn)\n找到CUDA驱动版本对应的CUDA ToolKit版本下载，由于笔者这里的CUDA驱动版本是472.84，所以CUDA ToolKit版本选择11.4.4，[CUDA驱动版本与CUDA ToolKit对应关系](https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#major-components?login=from_csdn)\n\n![在这里插入图片描述](media/aed0d72bbc3449959f6423e074167458.png)\n\n![在这里插入图片描述](media/46ce665f69594feeae6a97b5bd605acc.png)\n\n下载好之后是一个exe文件，`cuda_11.4.4_472.50_windows.exe`，可以看到名字中含有可以使用该CUDA ToolKit的最小CUDA驱动为472.50。安装很简单，这里不再赘述。\n\n最终查看CUDA的实际版本，`nvcc --version`\n\n```\nPS C:\\Users\\samsung> nvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2021 NVIDIA Corporation\nBuilt on Mon_Oct_11_22:11:21_Pacific_Daylight_Time_2021\nCuda compilation tools, release 11.4, V11.4.152\nBuild cuda_11.4.r11.4/compiler.30521435_0\n```\n\n### 安装cuDNN\n\n[cuDNN版本](https://developer.nvidia.cn/rdp/cudnn-archive?login=from_csdn)\ncuDNN是一个神经网络学习的加速库，因为`stable-diffusion-webui`中根据一些模型进行文本生图时可以用该包加快渲染速度。找到与CUDA版本一直的cuDNN下载\n\n![在这里插入图片描述](media/c58d9bc86cac4a9f8b993aefaebe4151.png)\n\n下载后将该压缩包解压，将里面的全部文件复制到CUDA安装的目录下，路劲为：\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\n![在这里插入图片描述](media/b871c543fa5142f08deee9b5fdb5bdf5.png)\n注：可以看到虽然有同名文件夹，但是没有同名文件，所以cuDNN的文件在复制到CUDA中时是不会提示要覆盖的情况，如果有，那么一定是哪里出错了\n\n### 克隆项目地址\n\n[stable-diffusion-webui](https://github.com/AUTOMATIC1111/stable-diffusion-webui?login=from_csdn)\n![在这里插入图片描述](media/ad0e5659850d4708b89e93f9340c9e9e.png)\n\n### 安装Pytorch\n\n这里使用Anaconda安装了一个python3.10.6的虚拟环境，当然大家也可以不使用Anaconda，直接下载安装python3.10.6也是可以的\n\n[pytorch](https://pytorch.org/?login=from_csdn)\n需要安装CUDA版本对应的Pytorch版本，如果不是使用Annconda，请使用pip install指令下载pytorch\n![在这里插入图片描述](media/180ccb58ffd741a589b0b44079f2c589.png)\n笔者这里本应该安装CUDA11.4对应的pytorch，但是pytorch官网中目前并没有提供该版本，于是安装了CUDA11.3对应的pytorch版本，该版本可以在CUDA11.4中使用\n\n```shell\n# 创建一个python3.10.6的虚拟环境，并命名为 sdui\n(base) C:\\Users\\samsung>conda create -n sdui python==3.10.6\n\n...\n\n#激活创建的虚拟环境 sdui\n(base) C:\\Users\\samsung>conda activate sdui\n# 安装pytorch，等待时间取决于网速\n(sdui) C:\\Users\\samsung>conda install pytorch torchvision torchaudio pytorch-cuda=11.3 -c pytorch -c nvidia\n\n#测试torch是否安装成功\n(sdui) C:\\Users\\samsung>python\nPython 3.10.6 | packaged by conda-forge | (main, Oct 24 2022, 16:02:16) [MSC v.1916 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import torch\n>>> torch.cuda.is_available()\n# true代表成功使用torch\nTrue\n```\n\n### 部署启动项目\n\n**注意：项目README中提示我们去使用`webui-user.bat`一键部署项目，但是双击 `webui-user.bat`运行后会在项目根目录下生成一个虚拟的python环境（其实是拷贝了系统已经安装的python版本到webui的指定目录），即`\\venv\\Scripts\\python.exe`，后续安装的python依赖包都是需要通过该虚拟python环境中的python命令去下载的，而不是部署在我们通过Anaconda安装的虚拟python环境中。并且为了虚拟环境管理的便捷性，这里我们选择在conda虚拟环境下进行部署。**\n\n**进入到根目录下的modules文件夹，然后编辑launch_utils.py**\n\n大多数安装时过程中会出现反复报错的情况，其实大多数的错误是由于在安装过程中会去github拉去依赖包时超时而导致的，本质原因是不能顺利的访问github，于是可以给在需要去github拉去依赖的代码处加上代理地址：**https://ghproxy.com/**\n\n![image-20230821183317880](media/image-20230821183317880.png)\n\n如果git不下来也可以手动下载git仓库添加到项目根目录下repositories`文件夹\n\n#### 添加模型—没有模型也没有办法使用\n\n项目模型地址:\n\n```\nD:\\项目文件夹\\models\\Stable-diffusion\\模型文件\n```\n\n这里默认使用官方给的默认模型\n\n[模型地址](https://huggingface.co/CompVis/stable-diffusion-v-1-4-original/resolve/main/sd-v1-4.ckpt)\n\nsd-v1-4 .ckpt 这个模型大小接近 4G大小 如果您网速不好，那么请耐心等待。\n\n#### 接下来使用命令进行自动安装\n\n没有使用conda虚拟环境的可以使用`webui-user.bat`进行安装运行，使用conda虚拟环境的则直接运行launch文件\n\n```shell\npython launch.py\n```\n\n耐性等待项目安装结束即可。\n\n#### 启动项目\n\n为了使用gpu加速效果，我们使用下面的命令启动UI界面--xformers\n\n```\npython launch.py --share --xformers --enable-insecure-extension-access --theme dark\n```\n\n使用`webui-user.bat`进行启动的在打开启动文件修改`set COMMANDLINE_ARGS=`为`set COMMANDLINE_ARGS=--xformers`即可。\n\n当看到命令行中出现了\n\n```\nhttp://localhost:8075之类的路径则代表安装启动成功了，端口不一定时8075也有可能是别的  \n直接复制路径到浏览器中就可以了\n```\n\n![image-20230821184834825](media/image-20230821184834825.png)\n\n### 参考\n\nhttps://devpress.csdn.net/hangzhou/64c2430a9a15ac690d7c69c0.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDgzNzczLCJleHAiOjE2OTMwMzQ0MDEsImlhdCI6MTY5MjQyOTYwMSwidXNlcm5hbWUiOiJ3ZWl4aW5fNDM0MjkwNjYifQ.12-rJknE-9hDsR_MuDVKcLd_LptPsteUUBB2msHpWJ4","source":"_posts/something_else/stable-diffusion-webui手动安装详细步骤.md","raw":"---\ntitle: stable-diffusion-webui手动安装详细步骤\ndate:\ntags: \n- Jottings\ncategories:\n- Jottings\ndescription:\ntop_img: false\n---\n\n# stable-diffusion-webui手动安装详细步骤\n\n## 环境\n\nOS：Windows10\n显卡类型：NVIDIA（英伟达）\n[Python版本](https://www.python.org/downloads/?login=from_csdn)：3.10.6（必须为该版本）\n[Git](https://git-scm.com/?login=from_csdn)：必须\n\n## 安装过程\n\n### 升级CUDA驱动\n\n**python3.10目前是不支持cuda10.2版本的torch包的,可以通过 [CUDA版本对应的torch](https://download.pytorch.org/whl/torch_stable.html?login=from_csdn)去查看，所以先要升级CUDA驱动，如果是更高版本的驱动可以跳过该步骤。**\n\n需要根据自己显卡类型去下载相应的驱动，win + x ->设备管理器 ->显示适配器\n\n![在这里插入图片描述](media/5ef388c5c9214b6c8fab73fbc87d0071.png)\n\n然后去 [CUDA驱动](https://www.nvidia.com/Download/Find.aspx?lang=en-us&login=from_csdn) 填写对应的显卡信息后搜索显卡驱动\n\n![在这里插入图片描述](media/f3bdcd5cb41b42a6bc70d01e7f62be57.png)\n\n这里选择第一个驱动进行下载，下载之后是一个exe文件，直接按照步骤安装即可，过程比较简单不再赘述\n\n![在这里插入图片描述](media/10e8e9317eca4b14b8682eb30fcbfd6c.png)\n\n使用命令`nvidia-smi`查看，可以看到CUDA版本是11.4，相应的驱动版本是472.84\n\n```shell\nPS C:\\Users\\samsung> nvidia-smi\nSat Apr  1 14:02:38 2023\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 472.84       Driver Version: 472.84       CUDA Version: 11.4     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ... WDDM  | 00000000:01:00.0 Off |                  N/A |\n| N/A    0C    P8    N/A /  N/A |     75MiB /  4096MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|    0   N/A  N/A     14052    C+G   ...IA GeForce Experience.exe    N/A      |\n+-----------------------------------------------------------------------------+\n\n```\n\n### 安装CUDAToolKit\n\n如果原来装过CUDA ToolKit请先卸载\n\n[CUDA ToolKit](https://developer.nvidia.cn/cuda-toolkit-archive?login=from_csdn)\n找到CUDA驱动版本对应的CUDA ToolKit版本下载，由于笔者这里的CUDA驱动版本是472.84，所以CUDA ToolKit版本选择11.4.4，[CUDA驱动版本与CUDA ToolKit对应关系](https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#major-components?login=from_csdn)\n\n![在这里插入图片描述](media/aed0d72bbc3449959f6423e074167458.png)\n\n![在这里插入图片描述](media/46ce665f69594feeae6a97b5bd605acc.png)\n\n下载好之后是一个exe文件，`cuda_11.4.4_472.50_windows.exe`，可以看到名字中含有可以使用该CUDA ToolKit的最小CUDA驱动为472.50。安装很简单，这里不再赘述。\n\n最终查看CUDA的实际版本，`nvcc --version`\n\n```\nPS C:\\Users\\samsung> nvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2021 NVIDIA Corporation\nBuilt on Mon_Oct_11_22:11:21_Pacific_Daylight_Time_2021\nCuda compilation tools, release 11.4, V11.4.152\nBuild cuda_11.4.r11.4/compiler.30521435_0\n```\n\n### 安装cuDNN\n\n[cuDNN版本](https://developer.nvidia.cn/rdp/cudnn-archive?login=from_csdn)\ncuDNN是一个神经网络学习的加速库，因为`stable-diffusion-webui`中根据一些模型进行文本生图时可以用该包加快渲染速度。找到与CUDA版本一直的cuDNN下载\n\n![在这里插入图片描述](media/c58d9bc86cac4a9f8b993aefaebe4151.png)\n\n下载后将该压缩包解压，将里面的全部文件复制到CUDA安装的目录下，路劲为：\nC:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\n![在这里插入图片描述](media/b871c543fa5142f08deee9b5fdb5bdf5.png)\n注：可以看到虽然有同名文件夹，但是没有同名文件，所以cuDNN的文件在复制到CUDA中时是不会提示要覆盖的情况，如果有，那么一定是哪里出错了\n\n### 克隆项目地址\n\n[stable-diffusion-webui](https://github.com/AUTOMATIC1111/stable-diffusion-webui?login=from_csdn)\n![在这里插入图片描述](media/ad0e5659850d4708b89e93f9340c9e9e.png)\n\n### 安装Pytorch\n\n这里使用Anaconda安装了一个python3.10.6的虚拟环境，当然大家也可以不使用Anaconda，直接下载安装python3.10.6也是可以的\n\n[pytorch](https://pytorch.org/?login=from_csdn)\n需要安装CUDA版本对应的Pytorch版本，如果不是使用Annconda，请使用pip install指令下载pytorch\n![在这里插入图片描述](media/180ccb58ffd741a589b0b44079f2c589.png)\n笔者这里本应该安装CUDA11.4对应的pytorch，但是pytorch官网中目前并没有提供该版本，于是安装了CUDA11.3对应的pytorch版本，该版本可以在CUDA11.4中使用\n\n```shell\n# 创建一个python3.10.6的虚拟环境，并命名为 sdui\n(base) C:\\Users\\samsung>conda create -n sdui python==3.10.6\n\n...\n\n#激活创建的虚拟环境 sdui\n(base) C:\\Users\\samsung>conda activate sdui\n# 安装pytorch，等待时间取决于网速\n(sdui) C:\\Users\\samsung>conda install pytorch torchvision torchaudio pytorch-cuda=11.3 -c pytorch -c nvidia\n\n#测试torch是否安装成功\n(sdui) C:\\Users\\samsung>python\nPython 3.10.6 | packaged by conda-forge | (main, Oct 24 2022, 16:02:16) [MSC v.1916 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import torch\n>>> torch.cuda.is_available()\n# true代表成功使用torch\nTrue\n```\n\n### 部署启动项目\n\n**注意：项目README中提示我们去使用`webui-user.bat`一键部署项目，但是双击 `webui-user.bat`运行后会在项目根目录下生成一个虚拟的python环境（其实是拷贝了系统已经安装的python版本到webui的指定目录），即`\\venv\\Scripts\\python.exe`，后续安装的python依赖包都是需要通过该虚拟python环境中的python命令去下载的，而不是部署在我们通过Anaconda安装的虚拟python环境中。并且为了虚拟环境管理的便捷性，这里我们选择在conda虚拟环境下进行部署。**\n\n**进入到根目录下的modules文件夹，然后编辑launch_utils.py**\n\n大多数安装时过程中会出现反复报错的情况，其实大多数的错误是由于在安装过程中会去github拉去依赖包时超时而导致的，本质原因是不能顺利的访问github，于是可以给在需要去github拉去依赖的代码处加上代理地址：**https://ghproxy.com/**\n\n![image-20230821183317880](media/image-20230821183317880.png)\n\n如果git不下来也可以手动下载git仓库添加到项目根目录下repositories`文件夹\n\n#### 添加模型—没有模型也没有办法使用\n\n项目模型地址:\n\n```\nD:\\项目文件夹\\models\\Stable-diffusion\\模型文件\n```\n\n这里默认使用官方给的默认模型\n\n[模型地址](https://huggingface.co/CompVis/stable-diffusion-v-1-4-original/resolve/main/sd-v1-4.ckpt)\n\nsd-v1-4 .ckpt 这个模型大小接近 4G大小 如果您网速不好，那么请耐心等待。\n\n#### 接下来使用命令进行自动安装\n\n没有使用conda虚拟环境的可以使用`webui-user.bat`进行安装运行，使用conda虚拟环境的则直接运行launch文件\n\n```shell\npython launch.py\n```\n\n耐性等待项目安装结束即可。\n\n#### 启动项目\n\n为了使用gpu加速效果，我们使用下面的命令启动UI界面--xformers\n\n```\npython launch.py --share --xformers --enable-insecure-extension-access --theme dark\n```\n\n使用`webui-user.bat`进行启动的在打开启动文件修改`set COMMANDLINE_ARGS=`为`set COMMANDLINE_ARGS=--xformers`即可。\n\n当看到命令行中出现了\n\n```\nhttp://localhost:8075之类的路径则代表安装启动成功了，端口不一定时8075也有可能是别的  \n直接复制路径到浏览器中就可以了\n```\n\n![image-20230821184834825](media/image-20230821184834825.png)\n\n### 参考\n\nhttps://devpress.csdn.net/hangzhou/64c2430a9a15ac690d7c69c0.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDgzNzczLCJleHAiOjE2OTMwMzQ0MDEsImlhdCI6MTY5MjQyOTYwMSwidXNlcm5hbWUiOiJ3ZWl4aW5fNDM0MjkwNjYifQ.12-rJknE-9hDsR_MuDVKcLd_LptPsteUUBB2msHpWJ4","slug":"something_else/stable-diffusion-webui手动安装详细步骤","published":1,"updated":"2023-08-25T09:25:13.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd679003agcr7cksa6dxj","content":"<h1 id=\"stable-diffusion-webui手动安装详细步骤\"><a href=\"#stable-diffusion-webui手动安装详细步骤\" class=\"headerlink\" title=\"stable-diffusion-webui手动安装详细步骤\"></a>stable-diffusion-webui手动安装详细步骤</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>OS：Windows10<br>显卡类型：NVIDIA（英伟达）<br><a href=\"https://www.python.org/downloads/?login=from_csdn\">Python版本</a>：3.10.6（必须为该版本）<br><a href=\"https://git-scm.com/?login=from_csdn\">Git</a>：必须</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><h3 id=\"升级CUDA驱动\"><a href=\"#升级CUDA驱动\" class=\"headerlink\" title=\"升级CUDA驱动\"></a>升级CUDA驱动</h3><p><strong>python3.10目前是不支持cuda10.2版本的torch包的,可以通过 <a href=\"https://download.pytorch.org/whl/torch_stable.html?login=from_csdn\">CUDA版本对应的torch</a>去查看，所以先要升级CUDA驱动，如果是更高版本的驱动可以跳过该步骤。</strong></p>\n<p>需要根据自己显卡类型去下载相应的驱动，win + x -&gt;设备管理器 -&gt;显示适配器</p>\n<p><img src=\"/media/5ef388c5c9214b6c8fab73fbc87d0071.png\" alt=\"在这里插入图片描述\"></p>\n<p>然后去 <a href=\"https://www.nvidia.com/Download/Find.aspx?lang=en-us&login=from_csdn\">CUDA驱动</a> 填写对应的显卡信息后搜索显卡驱动</p>\n<p><img src=\"/media/f3bdcd5cb41b42a6bc70d01e7f62be57.png\" alt=\"在这里插入图片描述\"></p>\n<p>这里选择第一个驱动进行下载，下载之后是一个exe文件，直接按照步骤安装即可，过程比较简单不再赘述</p>\n<p><img src=\"/media/10e8e9317eca4b14b8682eb30fcbfd6c.png\" alt=\"在这里插入图片描述\"></p>\n<p>使用命令<code>nvidia-smi</code>查看，可以看到CUDA版本是11.4，相应的驱动版本是472.84</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\samsung&gt; nvidia-smi</span><br><span class=\"line\">Sat Apr  1 14:02:38 2023</span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\">| NVIDIA-SMI 472.84       Driver Version: 472.84       CUDA Version: 11.4     |</span><br><span class=\"line\">|-------------------------------+----------------------+----------------------+</span><br><span class=\"line\">| GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class=\"line\">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class=\"line\">|                               |                      |               MIG M. |</span><br><span class=\"line\">|===============================+======================+======================|</span><br><span class=\"line\">|   0  NVIDIA GeForce ... WDDM  | 00000000:01:00.0 Off |                  N/A |</span><br><span class=\"line\">| N/A    0C    P8    N/A /  N/A |     75MiB /  4096MiB |      0%      Default |</span><br><span class=\"line\">|                               |                      |                  N/A |</span><br><span class=\"line\">+-------------------------------+----------------------+----------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\">| Processes:                                                                  |</span><br><span class=\"line\">|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class=\"line\">|        ID   ID                                                   Usage      |</span><br><span class=\"line\">|=============================================================================|</span><br><span class=\"line\">|    0   N/A  N/A     14052    C+G   ...IA GeForce Experience.exe    N/A      |</span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装CUDAToolKit\"><a href=\"#安装CUDAToolKit\" class=\"headerlink\" title=\"安装CUDAToolKit\"></a>安装CUDAToolKit</h3><p>如果原来装过CUDA ToolKit请先卸载</p>\n<p><a href=\"https://developer.nvidia.cn/cuda-toolkit-archive?login=from_csdn\">CUDA ToolKit</a><br>找到CUDA驱动版本对应的CUDA ToolKit版本下载，由于笔者这里的CUDA驱动版本是472.84，所以CUDA ToolKit版本选择11.4.4，<a href=\"https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#major-components?login=from_csdn\">CUDA驱动版本与CUDA ToolKit对应关系</a></p>\n<p><img src=\"/media/aed0d72bbc3449959f6423e074167458.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/media/46ce665f69594feeae6a97b5bd605acc.png\" alt=\"在这里插入图片描述\"></p>\n<p>下载好之后是一个exe文件，<code>cuda_11.4.4_472.50_windows.exe</code>，可以看到名字中含有可以使用该CUDA ToolKit的最小CUDA驱动为472.50。安装很简单，这里不再赘述。</p>\n<p>最终查看CUDA的实际版本，<code>nvcc --version</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\samsung&gt; nvcc --version</span><br><span class=\"line\">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class=\"line\">Copyright (c) 2005-2021 NVIDIA Corporation</span><br><span class=\"line\">Built on Mon_Oct_11_22:11:21_Pacific_Daylight_Time_2021</span><br><span class=\"line\">Cuda compilation tools, release 11.4, V11.4.152</span><br><span class=\"line\">Build cuda_11.4.r11.4/compiler.30521435_0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装cuDNN\"><a href=\"#安装cuDNN\" class=\"headerlink\" title=\"安装cuDNN\"></a>安装cuDNN</h3><p><a href=\"https://developer.nvidia.cn/rdp/cudnn-archive?login=from_csdn\">cuDNN版本</a><br>cuDNN是一个神经网络学习的加速库，因为<code>stable-diffusion-webui</code>中根据一些模型进行文本生图时可以用该包加快渲染速度。找到与CUDA版本一直的cuDNN下载</p>\n<p><img src=\"/media/c58d9bc86cac4a9f8b993aefaebe4151.png\" alt=\"在这里插入图片描述\"></p>\n<p>下载后将该压缩包解压，将里面的全部文件复制到CUDA安装的目录下，路劲为：<br>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4<br><img src=\"/media/b871c543fa5142f08deee9b5fdb5bdf5.png\" alt=\"在这里插入图片描述\"><br>注：可以看到虽然有同名文件夹，但是没有同名文件，所以cuDNN的文件在复制到CUDA中时是不会提示要覆盖的情况，如果有，那么一定是哪里出错了</p>\n<h3 id=\"克隆项目地址\"><a href=\"#克隆项目地址\" class=\"headerlink\" title=\"克隆项目地址\"></a>克隆项目地址</h3><p><a href=\"https://github.com/AUTOMATIC1111/stable-diffusion-webui?login=from_csdn\">stable-diffusion-webui</a><br><img src=\"/media/ad0e5659850d4708b89e93f9340c9e9e.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"安装Pytorch\"><a href=\"#安装Pytorch\" class=\"headerlink\" title=\"安装Pytorch\"></a>安装Pytorch</h3><p>这里使用Anaconda安装了一个python3.10.6的虚拟环境，当然大家也可以不使用Anaconda，直接下载安装python3.10.6也是可以的</p>\n<p><a href=\"https://pytorch.org/?login=from_csdn\">pytorch</a><br>需要安装CUDA版本对应的Pytorch版本，如果不是使用Annconda，请使用pip install指令下载pytorch<br><img src=\"/media/180ccb58ffd741a589b0b44079f2c589.png\" alt=\"在这里插入图片描述\"><br>笔者这里本应该安装CUDA11.4对应的pytorch，但是pytorch官网中目前并没有提供该版本，于是安装了CUDA11.3对应的pytorch版本，该版本可以在CUDA11.4中使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建一个python3.10.6的虚拟环境，并命名为 sdui</span></span><br><span class=\"line\">(base) C:\\Users\\samsung&gt;conda create -n sdui python==3.10.6</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">激活创建的虚拟环境 sdui</span></span><br><span class=\"line\">(base) C:\\Users\\samsung&gt;conda activate sdui</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装pytorch，等待时间取决于网速</span></span><br><span class=\"line\">(sdui) C:\\Users\\samsung&gt;conda install pytorch torchvision torchaudio pytorch-cuda=11.3 -c pytorch -c nvidia</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">测试torch是否安装成功</span></span><br><span class=\"line\">(sdui) C:\\Users\\samsung&gt;python</span><br><span class=\"line\">Python 3.10.6 | packaged by conda-forge | (main, Oct 24 2022, 16:02:16) [MSC v.1916 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; import torch</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; torch.cuda.is_available()</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"literal\">true</span>代表成功使用torch</span></span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署启动项目\"><a href=\"#部署启动项目\" class=\"headerlink\" title=\"部署启动项目\"></a>部署启动项目</h3><p><strong>注意：项目README中提示我们去使用<code>webui-user.bat</code>一键部署项目，但是双击 <code>webui-user.bat</code>运行后会在项目根目录下生成一个虚拟的python环境（其实是拷贝了系统已经安装的python版本到webui的指定目录），即<code>\\venv\\Scripts\\python.exe</code>，后续安装的python依赖包都是需要通过该虚拟python环境中的python命令去下载的，而不是部署在我们通过Anaconda安装的虚拟python环境中。并且为了虚拟环境管理的便捷性，这里我们选择在conda虚拟环境下进行部署。</strong></p>\n<p><strong>进入到根目录下的modules文件夹，然后编辑launch_utils.py</strong></p>\n<p>大多数安装时过程中会出现反复报错的情况，其实大多数的错误是由于在安装过程中会去github拉去依赖包时超时而导致的，本质原因是不能顺利的访问github，于是可以给在需要去github拉去依赖的代码处加上代理地址：<strong><a href=\"https://ghproxy.com/\">https://ghproxy.com/</a></strong></p>\n<p><img src=\"/media/image-20230821183317880.png\" alt=\"image-20230821183317880\"></p>\n<p>如果git不下来也可以手动下载git仓库添加到项目根目录下repositories&#96;文件夹</p>\n<h4 id=\"添加模型—没有模型也没有办法使用\"><a href=\"#添加模型—没有模型也没有办法使用\" class=\"headerlink\" title=\"添加模型—没有模型也没有办法使用\"></a>添加模型—没有模型也没有办法使用</h4><p>项目模型地址:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\项目文件夹\\models\\Stable-diffusion\\模型文件</span><br></pre></td></tr></table></figure>\n\n<p>这里默认使用官方给的默认模型</p>\n<p><a href=\"https://huggingface.co/CompVis/stable-diffusion-v-1-4-original/resolve/main/sd-v1-4.ckpt\">模型地址</a></p>\n<p>sd-v1-4 .ckpt 这个模型大小接近 4G大小 如果您网速不好，那么请耐心等待。</p>\n<h4 id=\"接下来使用命令进行自动安装\"><a href=\"#接下来使用命令进行自动安装\" class=\"headerlink\" title=\"接下来使用命令进行自动安装\"></a>接下来使用命令进行自动安装</h4><p>没有使用conda虚拟环境的可以使用<code>webui-user.bat</code>进行安装运行，使用conda虚拟环境的则直接运行launch文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python launch.py</span><br></pre></td></tr></table></figure>\n\n<p>耐性等待项目安装结束即可。</p>\n<h4 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h4><p>为了使用gpu加速效果，我们使用下面的命令启动UI界面–xformers</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python launch.py --share --xformers --enable-insecure-extension-access --theme dark</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>webui-user.bat</code>进行启动的在打开启动文件修改<code>set COMMANDLINE_ARGS=</code>为<code>set COMMANDLINE_ARGS=--xformers</code>即可。</p>\n<p>当看到命令行中出现了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8075之类的路径则代表安装启动成功了，端口不一定时8075也有可能是别的  </span><br><span class=\"line\">直接复制路径到浏览器中就可以了</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/image-20230821184834825.png\" alt=\"image-20230821184834825\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://devpress.csdn.net/hangzhou/64c2430a9a15ac690d7c69c0.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDgzNzczLCJleHAiOjE2OTMwMzQ0MDEsImlhdCI6MTY5MjQyOTYwMSwidXNlcm5hbWUiOiJ3ZWl4aW5fNDM0MjkwNjYifQ.12-rJknE-9hDsR_MuDVKcLd_LptPsteUUBB2msHpWJ4\">https://devpress.csdn.net/hangzhou/64c2430a9a15ac690d7c69c0.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDgzNzczLCJleHAiOjE2OTMwMzQ0MDEsImlhdCI6MTY5MjQyOTYwMSwidXNlcm5hbWUiOiJ3ZWl4aW5fNDM0MjkwNjYifQ.12-rJknE-9hDsR_MuDVKcLd_LptPsteUUBB2msHpWJ4</a></p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-8.png","cover_type":"img","excerpt":"","more":"<h1 id=\"stable-diffusion-webui手动安装详细步骤\"><a href=\"#stable-diffusion-webui手动安装详细步骤\" class=\"headerlink\" title=\"stable-diffusion-webui手动安装详细步骤\"></a>stable-diffusion-webui手动安装详细步骤</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>OS：Windows10<br>显卡类型：NVIDIA（英伟达）<br><a href=\"https://www.python.org/downloads/?login=from_csdn\">Python版本</a>：3.10.6（必须为该版本）<br><a href=\"https://git-scm.com/?login=from_csdn\">Git</a>：必须</p>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><h3 id=\"升级CUDA驱动\"><a href=\"#升级CUDA驱动\" class=\"headerlink\" title=\"升级CUDA驱动\"></a>升级CUDA驱动</h3><p><strong>python3.10目前是不支持cuda10.2版本的torch包的,可以通过 <a href=\"https://download.pytorch.org/whl/torch_stable.html?login=from_csdn\">CUDA版本对应的torch</a>去查看，所以先要升级CUDA驱动，如果是更高版本的驱动可以跳过该步骤。</strong></p>\n<p>需要根据自己显卡类型去下载相应的驱动，win + x -&gt;设备管理器 -&gt;显示适配器</p>\n<p><img src=\"/media/5ef388c5c9214b6c8fab73fbc87d0071.png\" alt=\"在这里插入图片描述\"></p>\n<p>然后去 <a href=\"https://www.nvidia.com/Download/Find.aspx?lang=en-us&login=from_csdn\">CUDA驱动</a> 填写对应的显卡信息后搜索显卡驱动</p>\n<p><img src=\"/media/f3bdcd5cb41b42a6bc70d01e7f62be57.png\" alt=\"在这里插入图片描述\"></p>\n<p>这里选择第一个驱动进行下载，下载之后是一个exe文件，直接按照步骤安装即可，过程比较简单不再赘述</p>\n<p><img src=\"/media/10e8e9317eca4b14b8682eb30fcbfd6c.png\" alt=\"在这里插入图片描述\"></p>\n<p>使用命令<code>nvidia-smi</code>查看，可以看到CUDA版本是11.4，相应的驱动版本是472.84</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\samsung&gt; nvidia-smi</span><br><span class=\"line\">Sat Apr  1 14:02:38 2023</span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\">| NVIDIA-SMI 472.84       Driver Version: 472.84       CUDA Version: 11.4     |</span><br><span class=\"line\">|-------------------------------+----------------------+----------------------+</span><br><span class=\"line\">| GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class=\"line\">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class=\"line\">|                               |                      |               MIG M. |</span><br><span class=\"line\">|===============================+======================+======================|</span><br><span class=\"line\">|   0  NVIDIA GeForce ... WDDM  | 00000000:01:00.0 Off |                  N/A |</span><br><span class=\"line\">| N/A    0C    P8    N/A /  N/A |     75MiB /  4096MiB |      0%      Default |</span><br><span class=\"line\">|                               |                      |                  N/A |</span><br><span class=\"line\">+-------------------------------+----------------------+----------------------+</span><br><span class=\"line\"></span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\">| Processes:                                                                  |</span><br><span class=\"line\">|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |</span><br><span class=\"line\">|        ID   ID                                                   Usage      |</span><br><span class=\"line\">|=============================================================================|</span><br><span class=\"line\">|    0   N/A  N/A     14052    C+G   ...IA GeForce Experience.exe    N/A      |</span><br><span class=\"line\">+-----------------------------------------------------------------------------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装CUDAToolKit\"><a href=\"#安装CUDAToolKit\" class=\"headerlink\" title=\"安装CUDAToolKit\"></a>安装CUDAToolKit</h3><p>如果原来装过CUDA ToolKit请先卸载</p>\n<p><a href=\"https://developer.nvidia.cn/cuda-toolkit-archive?login=from_csdn\">CUDA ToolKit</a><br>找到CUDA驱动版本对应的CUDA ToolKit版本下载，由于笔者这里的CUDA驱动版本是472.84，所以CUDA ToolKit版本选择11.4.4，<a href=\"https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#major-components?login=from_csdn\">CUDA驱动版本与CUDA ToolKit对应关系</a></p>\n<p><img src=\"/media/aed0d72bbc3449959f6423e074167458.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"/media/46ce665f69594feeae6a97b5bd605acc.png\" alt=\"在这里插入图片描述\"></p>\n<p>下载好之后是一个exe文件，<code>cuda_11.4.4_472.50_windows.exe</code>，可以看到名字中含有可以使用该CUDA ToolKit的最小CUDA驱动为472.50。安装很简单，这里不再赘述。</p>\n<p>最终查看CUDA的实际版本，<code>nvcc --version</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\samsung&gt; nvcc --version</span><br><span class=\"line\">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class=\"line\">Copyright (c) 2005-2021 NVIDIA Corporation</span><br><span class=\"line\">Built on Mon_Oct_11_22:11:21_Pacific_Daylight_Time_2021</span><br><span class=\"line\">Cuda compilation tools, release 11.4, V11.4.152</span><br><span class=\"line\">Build cuda_11.4.r11.4/compiler.30521435_0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装cuDNN\"><a href=\"#安装cuDNN\" class=\"headerlink\" title=\"安装cuDNN\"></a>安装cuDNN</h3><p><a href=\"https://developer.nvidia.cn/rdp/cudnn-archive?login=from_csdn\">cuDNN版本</a><br>cuDNN是一个神经网络学习的加速库，因为<code>stable-diffusion-webui</code>中根据一些模型进行文本生图时可以用该包加快渲染速度。找到与CUDA版本一直的cuDNN下载</p>\n<p><img src=\"/media/c58d9bc86cac4a9f8b993aefaebe4151.png\" alt=\"在这里插入图片描述\"></p>\n<p>下载后将该压缩包解压，将里面的全部文件复制到CUDA安装的目录下，路劲为：<br>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4<br><img src=\"/media/b871c543fa5142f08deee9b5fdb5bdf5.png\" alt=\"在这里插入图片描述\"><br>注：可以看到虽然有同名文件夹，但是没有同名文件，所以cuDNN的文件在复制到CUDA中时是不会提示要覆盖的情况，如果有，那么一定是哪里出错了</p>\n<h3 id=\"克隆项目地址\"><a href=\"#克隆项目地址\" class=\"headerlink\" title=\"克隆项目地址\"></a>克隆项目地址</h3><p><a href=\"https://github.com/AUTOMATIC1111/stable-diffusion-webui?login=from_csdn\">stable-diffusion-webui</a><br><img src=\"/media/ad0e5659850d4708b89e93f9340c9e9e.png\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"安装Pytorch\"><a href=\"#安装Pytorch\" class=\"headerlink\" title=\"安装Pytorch\"></a>安装Pytorch</h3><p>这里使用Anaconda安装了一个python3.10.6的虚拟环境，当然大家也可以不使用Anaconda，直接下载安装python3.10.6也是可以的</p>\n<p><a href=\"https://pytorch.org/?login=from_csdn\">pytorch</a><br>需要安装CUDA版本对应的Pytorch版本，如果不是使用Annconda，请使用pip install指令下载pytorch<br><img src=\"/media/180ccb58ffd741a589b0b44079f2c589.png\" alt=\"在这里插入图片描述\"><br>笔者这里本应该安装CUDA11.4对应的pytorch，但是pytorch官网中目前并没有提供该版本，于是安装了CUDA11.3对应的pytorch版本，该版本可以在CUDA11.4中使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">创建一个python3.10.6的虚拟环境，并命名为 sdui</span></span><br><span class=\"line\">(base) C:\\Users\\samsung&gt;conda create -n sdui python==3.10.6</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">激活创建的虚拟环境 sdui</span></span><br><span class=\"line\">(base) C:\\Users\\samsung&gt;conda activate sdui</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装pytorch，等待时间取决于网速</span></span><br><span class=\"line\">(sdui) C:\\Users\\samsung&gt;conda install pytorch torchvision torchaudio pytorch-cuda=11.3 -c pytorch -c nvidia</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">测试torch是否安装成功</span></span><br><span class=\"line\">(sdui) C:\\Users\\samsung&gt;python</span><br><span class=\"line\">Python 3.10.6 | packaged by conda-forge | (main, Oct 24 2022, 16:02:16) [MSC v.1916 64 bit (AMD64)] on win32</span><br><span class=\"line\">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; import torch</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">&gt;&gt; torch.cuda.is_available()</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"literal\">true</span>代表成功使用torch</span></span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署启动项目\"><a href=\"#部署启动项目\" class=\"headerlink\" title=\"部署启动项目\"></a>部署启动项目</h3><p><strong>注意：项目README中提示我们去使用<code>webui-user.bat</code>一键部署项目，但是双击 <code>webui-user.bat</code>运行后会在项目根目录下生成一个虚拟的python环境（其实是拷贝了系统已经安装的python版本到webui的指定目录），即<code>\\venv\\Scripts\\python.exe</code>，后续安装的python依赖包都是需要通过该虚拟python环境中的python命令去下载的，而不是部署在我们通过Anaconda安装的虚拟python环境中。并且为了虚拟环境管理的便捷性，这里我们选择在conda虚拟环境下进行部署。</strong></p>\n<p><strong>进入到根目录下的modules文件夹，然后编辑launch_utils.py</strong></p>\n<p>大多数安装时过程中会出现反复报错的情况，其实大多数的错误是由于在安装过程中会去github拉去依赖包时超时而导致的，本质原因是不能顺利的访问github，于是可以给在需要去github拉去依赖的代码处加上代理地址：<strong><a href=\"https://ghproxy.com/\">https://ghproxy.com/</a></strong></p>\n<p><img src=\"/media/image-20230821183317880.png\" alt=\"image-20230821183317880\"></p>\n<p>如果git不下来也可以手动下载git仓库添加到项目根目录下repositories&#96;文件夹</p>\n<h4 id=\"添加模型—没有模型也没有办法使用\"><a href=\"#添加模型—没有模型也没有办法使用\" class=\"headerlink\" title=\"添加模型—没有模型也没有办法使用\"></a>添加模型—没有模型也没有办法使用</h4><p>项目模型地址:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\项目文件夹\\models\\Stable-diffusion\\模型文件</span><br></pre></td></tr></table></figure>\n\n<p>这里默认使用官方给的默认模型</p>\n<p><a href=\"https://huggingface.co/CompVis/stable-diffusion-v-1-4-original/resolve/main/sd-v1-4.ckpt\">模型地址</a></p>\n<p>sd-v1-4 .ckpt 这个模型大小接近 4G大小 如果您网速不好，那么请耐心等待。</p>\n<h4 id=\"接下来使用命令进行自动安装\"><a href=\"#接下来使用命令进行自动安装\" class=\"headerlink\" title=\"接下来使用命令进行自动安装\"></a>接下来使用命令进行自动安装</h4><p>没有使用conda虚拟环境的可以使用<code>webui-user.bat</code>进行安装运行，使用conda虚拟环境的则直接运行launch文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python launch.py</span><br></pre></td></tr></table></figure>\n\n<p>耐性等待项目安装结束即可。</p>\n<h4 id=\"启动项目\"><a href=\"#启动项目\" class=\"headerlink\" title=\"启动项目\"></a>启动项目</h4><p>为了使用gpu加速效果，我们使用下面的命令启动UI界面–xformers</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python launch.py --share --xformers --enable-insecure-extension-access --theme dark</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>webui-user.bat</code>进行启动的在打开启动文件修改<code>set COMMANDLINE_ARGS=</code>为<code>set COMMANDLINE_ARGS=--xformers</code>即可。</p>\n<p>当看到命令行中出现了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8075之类的路径则代表安装启动成功了，端口不一定时8075也有可能是别的  </span><br><span class=\"line\">直接复制路径到浏览器中就可以了</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/image-20230821184834825.png\" alt=\"image-20230821184834825\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://devpress.csdn.net/hangzhou/64c2430a9a15ac690d7c69c0.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDgzNzczLCJleHAiOjE2OTMwMzQ0MDEsImlhdCI6MTY5MjQyOTYwMSwidXNlcm5hbWUiOiJ3ZWl4aW5fNDM0MjkwNjYifQ.12-rJknE-9hDsR_MuDVKcLd_LptPsteUUBB2msHpWJ4\">https://devpress.csdn.net/hangzhou/64c2430a9a15ac690d7c69c0.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDgzNzczLCJleHAiOjE2OTMwMzQ0MDEsImlhdCI6MTY5MjQyOTYwMSwidXNlcm5hbWUiOiJ3ZWl4aW5fNDM0MjkwNjYifQ.12-rJknE-9hDsR_MuDVKcLd_LptPsteUUBB2msHpWJ4</a></p>\n"},{"title":"如何在Linux中使用Clash","date":"2023-08-25T09:23:07.758Z","description":null,"top_img":false,"_content":"\n# 如何在Linux中使用Clash\n\n## Step 1\n\n下载相应的[Clash](https://github.com/Dreamacro/clash/releases)文件，注意区分`amd`架构和`arm`架构，使用 `uname -m` 命令查询系统硬件型号。例如，本文使用系统是 `aarch64`，需要下载 `arm` 系列的Clash，选择下载 `clash-linux-arm64-v1.13.0.gz`\n\n![image-20230423204352633](media/image-20230423204352633.png)\n\n## Step 2\n\n将下载好的文件传输到Linux系统，解压文件夹或者在系统中解压缩都可以。在 `/etc` 目录下创建 `clash` 目录，使用 `cd /etc/clash` 命令切换到该目录。使用 `gzip -d clash-linux-amd64` 命令解压缩安装包到目标文件夹。使用 `wget -O config.yaml <url>` 命令下载订阅或者从windows版本订阅中打开编辑导出配置文件（这里的订阅文件必须命名为 `config.yaml`）。\n\n![image-20230423204921026](media/image-20230423204921026.png)\n\n## Step 3\n\n接着运行下面的命令修改运行文件名并运行：\n\n```\nmv clash-linux-amd64  clash\n\nchmod +x clash\n\n./clash\n```\n\n启动服务后，会自动下载 `Country.mmdb` 文件，需要等待一会儿，如果失败建议多尝试几次，如果网速不行也可以在[这里](https://pan.baidu.com/share/init?surl=0C7SvnoH3abTZF2j3aT4sw)下载，密码76kn\n\n## Step 4\n\n打开linux的网络链接，配置代理地址为Clash提供的地址，一般都是`127.0.0.1:7890`，如下图所示:\n\n![网络代理配置](media/240693210.png)\n\n浏览器打开地址：https://clash.razord.top/#/proxies，就可以看到Linux下基于WEB的ClashUI，选择对应的节点\n\n## Step 5\n\n设置开机自启动，创建 `/etc/systemd/system/clash.service` 文件，并更改内容如下：\n\n```\nsudo touch /etc/systemd/system/clash.service\n```\n\n```\n[Unit]\nDescription=Clash daemon, A rule-based proxy in Go.\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nExecStart=/usr/local/bin/clash -d /etc/clash\n\n[Install]\nWantedBy=multi-user.target\n```\n\n使用 `systemctl enable clash` 命令设置Clash服务在系统启动时运行。\n\n使用 `systemctl start clash` 命令立即运行Clash服务。\n\n使用 `systemctl stop clash` 命令立即运行Clash服务。\n\n使用 `systemctl status clash` 命令查看Clash服务的运行状态。","source":"_posts/something_else/如何在Linux中使用Clash.md","raw":"---\ntitle: 如何在Linux中使用Clash\ndate:\ntags: \n- Jottings\n- Clash\ncategories:\n- Jottings\ndescription:\ntop_img: false\n\n---\n\n# 如何在Linux中使用Clash\n\n## Step 1\n\n下载相应的[Clash](https://github.com/Dreamacro/clash/releases)文件，注意区分`amd`架构和`arm`架构，使用 `uname -m` 命令查询系统硬件型号。例如，本文使用系统是 `aarch64`，需要下载 `arm` 系列的Clash，选择下载 `clash-linux-arm64-v1.13.0.gz`\n\n![image-20230423204352633](media/image-20230423204352633.png)\n\n## Step 2\n\n将下载好的文件传输到Linux系统，解压文件夹或者在系统中解压缩都可以。在 `/etc` 目录下创建 `clash` 目录，使用 `cd /etc/clash` 命令切换到该目录。使用 `gzip -d clash-linux-amd64` 命令解压缩安装包到目标文件夹。使用 `wget -O config.yaml <url>` 命令下载订阅或者从windows版本订阅中打开编辑导出配置文件（这里的订阅文件必须命名为 `config.yaml`）。\n\n![image-20230423204921026](media/image-20230423204921026.png)\n\n## Step 3\n\n接着运行下面的命令修改运行文件名并运行：\n\n```\nmv clash-linux-amd64  clash\n\nchmod +x clash\n\n./clash\n```\n\n启动服务后，会自动下载 `Country.mmdb` 文件，需要等待一会儿，如果失败建议多尝试几次，如果网速不行也可以在[这里](https://pan.baidu.com/share/init?surl=0C7SvnoH3abTZF2j3aT4sw)下载，密码76kn\n\n## Step 4\n\n打开linux的网络链接，配置代理地址为Clash提供的地址，一般都是`127.0.0.1:7890`，如下图所示:\n\n![网络代理配置](media/240693210.png)\n\n浏览器打开地址：https://clash.razord.top/#/proxies，就可以看到Linux下基于WEB的ClashUI，选择对应的节点\n\n## Step 5\n\n设置开机自启动，创建 `/etc/systemd/system/clash.service` 文件，并更改内容如下：\n\n```\nsudo touch /etc/systemd/system/clash.service\n```\n\n```\n[Unit]\nDescription=Clash daemon, A rule-based proxy in Go.\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nExecStart=/usr/local/bin/clash -d /etc/clash\n\n[Install]\nWantedBy=multi-user.target\n```\n\n使用 `systemctl enable clash` 命令设置Clash服务在系统启动时运行。\n\n使用 `systemctl start clash` 命令立即运行Clash服务。\n\n使用 `systemctl stop clash` 命令立即运行Clash服务。\n\n使用 `systemctl status clash` 命令查看Clash服务的运行状态。","slug":"something_else/如何在Linux中使用Clash","published":1,"updated":"2023-08-25T09:25:41.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd679003egcr70fd52806","content":"<h1 id=\"如何在Linux中使用Clash\"><a href=\"#如何在Linux中使用Clash\" class=\"headerlink\" title=\"如何在Linux中使用Clash\"></a>如何在Linux中使用Clash</h1><h2 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h2><p>下载相应的<a href=\"https://github.com/Dreamacro/clash/releases\">Clash</a>文件，注意区分<code>amd</code>架构和<code>arm</code>架构，使用 <code>uname -m</code> 命令查询系统硬件型号。例如，本文使用系统是 <code>aarch64</code>，需要下载 <code>arm</code> 系列的Clash，选择下载 <code>clash-linux-arm64-v1.13.0.gz</code></p>\n<p><img src=\"/media/image-20230423204352633.png\" alt=\"image-20230423204352633\"></p>\n<h2 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h2><p>将下载好的文件传输到Linux系统，解压文件夹或者在系统中解压缩都可以。在 <code>/etc</code> 目录下创建 <code>clash</code> 目录，使用 <code>cd /etc/clash</code> 命令切换到该目录。使用 <code>gzip -d clash-linux-amd64</code> 命令解压缩安装包到目标文件夹。使用 <code>wget -O config.yaml &lt;url&gt;</code> 命令下载订阅或者从windows版本订阅中打开编辑导出配置文件（这里的订阅文件必须命名为 <code>config.yaml</code>）。</p>\n<p><img src=\"/media/image-20230423204921026.png\" alt=\"image-20230423204921026\"></p>\n<h2 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h2><p>接着运行下面的命令修改运行文件名并运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv clash-linux-amd64  clash</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x clash</span><br><span class=\"line\"></span><br><span class=\"line\">./clash</span><br></pre></td></tr></table></figure>\n\n<p>启动服务后，会自动下载 <code>Country.mmdb</code> 文件，需要等待一会儿，如果失败建议多尝试几次，如果网速不行也可以在<a href=\"https://pan.baidu.com/share/init?surl=0C7SvnoH3abTZF2j3aT4sw\">这里</a>下载，密码76kn</p>\n<h2 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h2><p>打开linux的网络链接，配置代理地址为Clash提供的地址，一般都是<code>127.0.0.1:7890</code>，如下图所示:</p>\n<p><img src=\"/media/240693210.png\" alt=\"网络代理配置\"></p>\n<p>浏览器打开地址：<a href=\"https://clash.razord.top/#/proxies%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0Linux%E4%B8%8B%E5%9F%BA%E4%BA%8EWEB%E7%9A%84ClashUI%EF%BC%8C%E9%80%89%E6%8B%A9%E5%AF%B9%E5%BA%94%E7%9A%84%E8%8A%82%E7%82%B9\">https://clash.razord.top/#/proxies，就可以看到Linux下基于WEB的ClashUI，选择对应的节点</a></p>\n<h2 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h2><p>设置开机自启动，创建 <code>/etc/systemd/system/clash.service</code> 文件，并更改内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo touch /etc/systemd/system/clash.service</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Clash daemon, A rule-based proxy in Go.</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">ExecStart=/usr/local/bin/clash -d /etc/clash</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>systemctl enable clash</code> 命令设置Clash服务在系统启动时运行。</p>\n<p>使用 <code>systemctl start clash</code> 命令立即运行Clash服务。</p>\n<p>使用 <code>systemctl stop clash</code> 命令立即运行Clash服务。</p>\n<p>使用 <code>systemctl status clash</code> 命令查看Clash服务的运行状态。</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-9.png","cover_type":"img","excerpt":"","more":"<h1 id=\"如何在Linux中使用Clash\"><a href=\"#如何在Linux中使用Clash\" class=\"headerlink\" title=\"如何在Linux中使用Clash\"></a>如何在Linux中使用Clash</h1><h2 id=\"Step-1\"><a href=\"#Step-1\" class=\"headerlink\" title=\"Step 1\"></a>Step 1</h2><p>下载相应的<a href=\"https://github.com/Dreamacro/clash/releases\">Clash</a>文件，注意区分<code>amd</code>架构和<code>arm</code>架构，使用 <code>uname -m</code> 命令查询系统硬件型号。例如，本文使用系统是 <code>aarch64</code>，需要下载 <code>arm</code> 系列的Clash，选择下载 <code>clash-linux-arm64-v1.13.0.gz</code></p>\n<p><img src=\"/media/image-20230423204352633.png\" alt=\"image-20230423204352633\"></p>\n<h2 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h2><p>将下载好的文件传输到Linux系统，解压文件夹或者在系统中解压缩都可以。在 <code>/etc</code> 目录下创建 <code>clash</code> 目录，使用 <code>cd /etc/clash</code> 命令切换到该目录。使用 <code>gzip -d clash-linux-amd64</code> 命令解压缩安装包到目标文件夹。使用 <code>wget -O config.yaml &lt;url&gt;</code> 命令下载订阅或者从windows版本订阅中打开编辑导出配置文件（这里的订阅文件必须命名为 <code>config.yaml</code>）。</p>\n<p><img src=\"/media/image-20230423204921026.png\" alt=\"image-20230423204921026\"></p>\n<h2 id=\"Step-3\"><a href=\"#Step-3\" class=\"headerlink\" title=\"Step 3\"></a>Step 3</h2><p>接着运行下面的命令修改运行文件名并运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv clash-linux-amd64  clash</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x clash</span><br><span class=\"line\"></span><br><span class=\"line\">./clash</span><br></pre></td></tr></table></figure>\n\n<p>启动服务后，会自动下载 <code>Country.mmdb</code> 文件，需要等待一会儿，如果失败建议多尝试几次，如果网速不行也可以在<a href=\"https://pan.baidu.com/share/init?surl=0C7SvnoH3abTZF2j3aT4sw\">这里</a>下载，密码76kn</p>\n<h2 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h2><p>打开linux的网络链接，配置代理地址为Clash提供的地址，一般都是<code>127.0.0.1:7890</code>，如下图所示:</p>\n<p><img src=\"/media/240693210.png\" alt=\"网络代理配置\"></p>\n<p>浏览器打开地址：<a href=\"https://clash.razord.top/#/proxies%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0Linux%E4%B8%8B%E5%9F%BA%E4%BA%8EWEB%E7%9A%84ClashUI%EF%BC%8C%E9%80%89%E6%8B%A9%E5%AF%B9%E5%BA%94%E7%9A%84%E8%8A%82%E7%82%B9\">https://clash.razord.top/#/proxies，就可以看到Linux下基于WEB的ClashUI，选择对应的节点</a></p>\n<h2 id=\"Step-5\"><a href=\"#Step-5\" class=\"headerlink\" title=\"Step 5\"></a>Step 5</h2><p>设置开机自启动，创建 <code>/etc/systemd/system/clash.service</code> 文件，并更改内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo touch /etc/systemd/system/clash.service</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Clash daemon, A rule-based proxy in Go.</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">ExecStart=/usr/local/bin/clash -d /etc/clash</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>systemctl enable clash</code> 命令设置Clash服务在系统启动时运行。</p>\n<p>使用 <code>systemctl start clash</code> 命令立即运行Clash服务。</p>\n<p>使用 <code>systemctl stop clash</code> 命令立即运行Clash服务。</p>\n<p>使用 <code>systemctl status clash</code> 命令查看Clash服务的运行状态。</p>\n"},{"title":"获取Office 2021安装包及相关激活工具","date":"2023-08-25T09:23:07.761Z","description":null,"top_img":false,"_content":"\n# 获取Office 2021安装包及相关激活工具🛠️\n\n### Office 2021 安装部署和激活方式💡\n\n> 概述\n\n废话不多说,这里我大致搜集了几种能够免费安装`Office 2021`的方法以及激活方式,并总结出保姆级教程 如下:\n\n- `通过Office 2021 RTM官方镜像下载与安装激活Office 2021`\n- `Office Tool Plus部署和安装 Office 2021 和 Office 365`\n- `通过Microsoft 365 订阅会员的方式白嫖Office 365`\n\n以上方式以`win10系统`为例, 任选一种都可以,简单通俗 无脑易懂, 现在就开始吧!\n\n#### 方式一 Office 2021 RTM官方镜像下载与安装激活🔥\n\n这是微软官方发布的`Office 2021 RTM专业增强零售版`\n\n由于微软目前发布的版本只有`Office 2021英文版`，因此如果想要切换为`Office 2021中文版`则需要再次手动安装中文语言包\n\n在后台回复关键字`【 office 】` 即可立即免费获取`Office 2021 RTM专业增强零售版+中文语言包+激活工具`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGZ41pLibUGoYBAIMnTY5Quaw82Gp38sNNdZUibdHoZeu0hgDica9q0cV9A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 安装 Office 2021 RTM 专业增强零售版\n\n下载好了之后会得到两个文件\n\n```\n如下图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9uzBb5MptUdjiamgWFWFrFiablkXgoZAvNkQ9zFuyCE4LJ46tcYSmc2Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后解压缩`Office 2021 RTM 安装包`, 点击其中的`Setup`开始安装\n\n```\n如下图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLyLr5Zq1s602oErsDWryLWB3u3KIDRdjIH2jaJF3RJYOOFQKhiaXOsw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后稍等片刻....\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGYsr79BjTfvaUl83r5uY6xt5MIrU7Uo8qXGrzXJA3CoMymbga43ajdQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n就开始自动安装了!\n\n```\n小提示: 由于零售版采用自动默认安装方式，因此安装时不会出现组件选择和安装位置选择的步骤。\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGgfpT8G8ibVp0SB7cFkF6gNeW4mOicKEJegnc5WcbSQ3Dz7ur2Xy3wPSw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n等待滚动条走动完毕之后，`Office 2021 RTM专业增强零售版`就算安装好了\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9p3ApiaEKe6RGKEZo8g1lNaJqqlJS5ibGPo7X69T1gcCsRc6fEePI6zA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后接下来就是最后一步安装中文语言包,否则就是英文版的。同样我们直接运行`中文语言安装包`文件就可以了!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGXENdWAhbmAMbey2AfO5xCf9ib6iaeW1GXAuNrtM7HJQo3tqOW36PgqaQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n稍等片刻..\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGEWiaPHwstUDzQOgL91kPFtiaSapIrDj159K63AOR641hTibqIMjWnE2kw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n完成中文汉化安装\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGrZFzbwWnpdbsiaNOADGicpZSOcreZPBhtpbQcicldzN29IhxiaChudC3kg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 激活 Office 2021\n\n当安装好了`Office 2021`之后选择还不能使用，因为你还没有购买, 那么接下来就教大家如何免费的来激活`Office 2021`\n\n那么针对`Office`除了购买正版密钥永久激活外， 这里我个人推荐如下激活方式:\n\n- `HEU KMS Activator`\n\n###### HEU KMS Activator 介绍🧶\n\n这里简单的介绍一下\n\n`HEU KMS Activator` 是基于MDL论坛的KMS 服务端模拟环境`KMS Server Emulator`而制作的一款简洁高效的 KMS 激活工具, 可激活所有受支持的`WIndows和Office`，无需联网即可一键激活，离线全自动激活软件!\n\n总的来说它是我个人觉得目前国内开发者制作的一款最全能激活工具，`绿色、无毒，纯净，无广告`, 口碑也很好!\n\n无论是 `Windows` 还是 `Office` 都可轻易进行激活\n\n```\n使用方法\n```\n\n\n\n还有你的`Office`是不是动不动就提示`许可证有问题`呢`HEU KMS Activator`还可以帮助你完美解决`Office许可证`的问题, 真的是一劳永逸!\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGiaUCjc8tq9kMnCRknCXUGmsDLJrrLwltESBIRtGiaz7zGjKjbfAwDFibA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n哈哈哈哈 别怪我没提醒你 这工具真强大!😁\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGJ0UenuqIPEzSDpxY98cohOVAteyRAick2zC22tJqwdwreXEF6yxSyvg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 完成 Office 2021 RTM的安装\n\n现在我们就可以开心的使用`Office 2021`啦! 搞起来😄\n\n`Office 2021`打开界面如下图所示\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSmGFrsgKr3RoUPiaJHNciamBaGzJmoKR7toqa9ZKa69YJNuK3NwQYJYQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n------\n\n#### 方式二 Office Tool Plus部署和安装 Office 2021🔥\n\n> 概述\n\n`Office Tool Plus`（简称OTP）是一款微软`Office`办公软件`下载、安装、管理`的部署工具。它可以快速自定义部署，在线下载安装 `Office` 产品的各个版本，也可以通过已有的离线安装文件来部署Office镜像，同时在安装过程中你可以自由选择安装哪些需要使用的组件， 在安装之后也可以单独来安装某个需要的组件。\n\n简单的说`Office Tool Plus`是基于 `Office` 的部署工具,可以很轻松地部署 `Office`。\n\n`Office Tool Plus` 支持多个 Office 许可版本的部署，用户只需几步配置即可开始`下载、安装`。同时为有需要的用户开设了多种安装选项，安装 `Office` 就是如此简单\n\n`Office Tool Plus` 可以为您安装密钥或者配置 KMS 服务。同时高级管理可以让您轻松管理 Office 的授权配置,同时它内部也包含激活方式!\n\n总的来说`Office Tool Plus`就是免费不要钱的`Office`安装工具!\n\nOffice Tool Plus 官方下载地址\n\nhttps://otp.landian.vip/zh-cn/\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGFfsTFqoG27ic3ZLzicqeGHy6hcW8fD3mAXib9ibtq0e8NdpsIB6WcZqNRA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 下载 Office Tool Plus\n\n1. 你可以到`Office Tool Plus官网`上去下载`Office Tool Plus部署工具`\n\n2. 也可以在`微信公众号`后台回复关键字`【 office 】` 直达传送门, 也可立即免费获取`Office Tool Plus`\n\n   `如图`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGto8PQcJK6DGOEGPrgfJrCwYAtgnFXo8j56NR4MlNeibZhxEEkzKSS0Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 使用 Office Tool Plus 部署Office 2021 LTSC专业增强版🔥\n\n###### 开始部署\n\n把下载的`Office Tool Plus 部署工具`压缩包解压后，会得到如下文件, 然后点击`Office Tool Plus`开始部署`Office`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGbibVIHQHX4WeVt1rUANK6YLzfqBfAp57Az8dxQGian2UIaU0311mwvDg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n温馨提示: 如果你的电脑中有其他版本的Office,建议使用这里的工具箱 先卸载掉\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGuvuyqxPdmqlbhhibaPaKRz5pmumuKGcFSsTEPbNLfqw34IKAOttodSw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n选择移除,然后点击开始即可删除电脑中的`Office`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGn8XPsqjGNGNE3VPAVRuy4TQxBJzfLYEwoaxf0uM077ia6u4Cz9csrkw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n清除许可证\n```\n\n这里你也必须使用`Office Tool Plus`部署工具清除一下之前所安装的`许可证`\n\n方法很简单在`Office Tool Plus`中打开`激活`选择里面的`许可证管理`然后再选择`清除激活状态`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKI5CuZONUxEqFOWFCMDazQ0vdmhBPfndn0qKCBdhB4cK1Qc9TfoGEA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n继续点击 `是`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGVUOdUbWbqUGJNic1KwkX4d6CMYjyazsTstxsQG81JEvL7116eWib2FgQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n这样才能完整的清除掉之前所安装的`许可证`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGkwUbaB4S6pIRQncvTSgAHwvS8rdX4tpmvlWs5XoYGfp8vEiaEyA9xeA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n所以在移除之前的`Office`版本后一定记住要做这一步!\n\n接下来确认电脑中没有任何其他版本的`Office`之后，我们就可以点击`部署`按钮开始部署了\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGDaIrsbOYCxjxl78A3j6KCv93SfnwybSaDml2F6Dv8k4xr4T3luUW9Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n###### Office Tool Plus部署安装 Office 2021 LTSC专业增强版\n\n在`部署设置`这一项你可以根据我的个人设置进行`基础设置、高级设置、部署设置`就可以了!\n\n```\n如下图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGmBmw4iaHohrzTv5jCb7ibKSOKQF5LHxy6arVANSbjcNyBdUkicYsc5bJw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n设置好了之后直接点击 `开始部署` 就可以下载相关文件和自动安装`Office 2021`了!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGuTE5gibx5nYkxV2P81lwhUDkOckQibucbBdeU1hCyCUcqMX4LIvpACCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n温馨提示: 推荐选择office 2021 LTSC 专业增强版本批量许可证, 其他版本可能安装出错或不容易激活,慎重考虑\n```\n\n这里科普一下 `office 2021 LTSC`是什么版\n\n`office 2021 LTSC`版是一种面向长期服务的永久版`Office`，并且不会有微软不断推送的更新，主要适用于限制联网的设备，生产车间设备或者没有条件联网的设备, 当然个人以及家用也是完全可以的!\n\n点击开始`部署按钮`之后,`Office Tool Plus`会自动安装软件, 在这个过程中会自动联网下载并完成`Office`的安装, 这个过程根据上网速度的不同所需要的时间也不同 ，所以稍等一下即可!\n\n\n\n```\n小提示: 由于零售版采用自动默认安装方式，因此安装时不会出现组件选择和安装位置选择的步骤。\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG4JTyC65hvfxeXr90lrNf7ZO5MGDlscI7Q2ISKCTbdibBm7Q2cxq3eicA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n完成安装!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSP1ArK45ictW1OLWCVuezVNTYD1Muh1z0XasnAR2TW6s1ly6HLWibKtw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n###### Office Tool Plus 激活Office 2021 LTSC专业增强版\n\n安装完成之后，就可以返回到`Office Tool Plus`主界面,再点选`激活`按钮!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG1C4NCvJibTyPv2mKez68w6x9dVsMl3KwgCtYv76ictnew3JpLZ0NJibPw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n激活配置\n```\n\n然后根据下图进行`激活配置`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGqjkNKxibX1hict8AVcrtOw7a5s4qBycP4xQAMb314Tfial2ibtBAAPmv1g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n开始自动安装许可证!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGhgeliaIcIFqDPVYgicTEcicljEDcOYcqDm7j2HN0Y21e0AatDpibiaiaQ32Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\nKMS服务器配置\n```\n\n然后点击`KMS管理`, 在`KMS主机`一栏中填写 kms.loli.best, 然后点击保存设置，最后点击`激活`按钮!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKzXlzictbWJ8blOpGlceLtpThM6zRREibcx7uZa4qRopRpcLBtbpFjicQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n最后你会看到` 产品激活成功`的字样!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGAC1wRawakXCqsyMuDCuazicPwia0x4fiaiabQicu7N5j7WCjaVnLZk21YNA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n###### 完成 Office 2021 LTSC专业增强版的安装\n\n现在我们又可以愉快的 开心的使用`Office 2021`啦! 搞起来😄\n\n完美激活`Office 2021最新版`之后打开界面如下图:![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGYUiat2ZMRK1P48BqIC8OxUIiaw3f2hEEBU2IfvyH4Uu0vGLhiaWSRRycg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 使用 Office Tool Plus 部署 Office 365🔥\n\n> 概述\n\n如果你喜欢`Office 365` 也可以使用`Office Tool Plus`来进行安装和部署\n\n在这里简单的科普一下什么是`Office 365`\n\n`Office 365`最大的特点就是`在线办公，协同办公，随时同步`，`onedrive空间大`。这些保证了无论你在任何一台设备修改文件，都可以立刻同步到任何一台联网的设备。\n\n`Office 365`还有一个特点是: 能够随时保持最新版本。\n\n`Office 365`功能最强大，并且一直在更新 也就是说，微软`Office` 新推出的功能，都会第一时间在`Office 365`上更新， 注意一下目前微软官方已经把`Office 365`已更名为`Microsoft 365` 你看到的这两个其实是一个东西！\n\n当然目前微软官方的定价也让很多学生党望而却步:\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG10UQJu9lHKwDcibic9XutUMKDibEudk9BElUgvdgDYiatbibibYicy116OiaUg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n所以这里我们也可以通过`Office Tool Plus` 的方式，来完成`Office 365`的安装与激活!\n\n那么废话不多说了 我们开始部署吧!😁\n\n###### Office Tool Plus部署与安装 Office 365\n\n```\n安装前的准备工作\n```\n\n之前我们就提醒过了 如果你的电脑中有其他版本的`Office`,建议使用`Office Tool Plus`的工具箱先卸载掉, 否则会出现安装失败和其他错误的情况，并且你也可以使用`Office Tool Plus`部署工具清除一下之前所安装的`许可证`\n\n方法很简单在`Office Tool Plus`中打开`激活`选择里面的`许可证管理`然后再选择`清除激活状态`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKI5CuZONUxEqFOWFCMDazQ0vdmhBPfndn0qKCBdhB4cK1Qc9TfoGEA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n继续点击 `是`\n\n\n\n这样才能完整的清除掉之前所安装的`许可证`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGkwUbaB4S6pIRQncvTSgAHwvS8rdX4tpmvlWs5XoYGfp8vEiaEyA9xeA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n所以在移除之前的`Office`版本后一定记住要做这一步!\n\n那么做完准备工作之后，我们就可以在`Office Tool Plus`主界面点击`部署`之后开始部署`Office 365`了\n\n在`部署设置`这一项你也可以根据我的`Office 365`个人配置进行`基础设置、高级设置、部署设置`就可以了!\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9ruNzrTRftDWEfuzdLwqvZsjibdfTvkBdYXZMmnaPrH5RpmVBsnacYg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后`部署配置`之后就可以点击 `部署`按钮了\n\n```\n小提示:文件开始下载，如果弹出提示 【是否校验文件】就点击 (是) 就可以了\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGia9m8lYQdDObKXFk7QWa3Ktwvog0vHZL1VMfEqhWff3iceE4Xv4kPpcA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n这个时候`Office Tool Plus`工具会自动下载`Office 365`以及`自动安装`到本地电脑上!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG2gW5oqqF62ZDx0bic5HriagKpjHMaKVwOB9WYZ8mKgmzGIse81ibwa4Jg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n稍等一会!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSZhcOraqre5RuXhlwvHPgrWYNgKrepicIZRH7oHIBicCw6hXibChAA5qg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n安装完成!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGcu9iaD0VV5bbib8hODlYCutgAaQ427ibdyQZZTf7qbTtUsMOdqO8JXG3A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n###### Office Tool Plus 激活Office365\n\n```\n激活配置\n```\n\n最主要的正题来啦，`安装是小事 激活是大事!`\n\n我们回到`Office Tool Plus`主界面点击`激活`按钮\n\n然后来到`许可证管理` 选择`Office Mondo 2016 批量许可证版`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGf1nJyI3vUphjXD4AT0XOIhnHYicDolDwibdAhAljbAgp0pmRC1vIcJzQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n`Office Mondo 2016 批量许可证版`这个版本的`Office`和`Office 365`功能上是差不多的,只是名称不同而已!\n\n最后点击`安装许可证` ，再次点击`是`按钮, 就可以开始安装了!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGfLeruP3VUg1pa5SGZhrDImrbuRgaYEpnZQBibkgFTVDVbWGD08ichiacA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n安装成功后如下图:\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLFb27zUekvaWk3duqTqlyfVoRDDEHbUjUwpA7HpE0FMD72TStIPjMg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\nKMS服务器配置\n```\n\n然后点击`KMS管理`, 在`KMS主机`一栏中填写 kms.loli.beer, 然后点击保存设置，最后点击`激活`按钮!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLibRicP96UZ71rhHEBmI17rvgqmIic5kgcicGaAMfl0iazEDpHVdAibNJUSA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n最后你会看到` 产品激活成功`的字样!\n\n###### 完成Office 365的安装\n\n此时已经完全安装好了最新的`Office 365`\n\n我们可以在激活信息里面查看到:`Microsoft Office Mondo 2016`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGTyx17Vt5RnVIXLwYib6ibzsA144Via6fhujicdbNqxL37EEn7Vq6wELUbg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGaq060BQZ6T4ia9YW37pfpiaxsTxzKGuNJcHzzAib0s4jhhqHCicibqjbepw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGGcuRic7iapATJAibOWibgw2O6kkqRDuXaUISysbvmOQURYWUIxJnkl7yng/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n到此所有`Office 365`的安装已完成!\n\n------\n\n#### 方式三 Microsoft 365 订阅会员的方式白嫖Office 365🔥\n\n> 概述\n\n这是`微软官方`让用户体验正版的`3个月`计划, 也就是说免费使用`Microsoft 365`的机会，其实说白了就是让你使用正版但是又有一定期限!\n\n这种方式需要你的`微软账户`申请并加入到`Microsoft 365 开发人员计划`中就可以了!\n\n```\n注意事项\n```\n\n1. 这种方式是微软官方的操作过程，中途可能会使用到`google人机验证` 就是需要你会`魔法`明白`魔法`吧 就是`哈利波特`的那种魔法`咻咻咻.....!`😁\n\n![图片](https://mmbiz.qpic.cn/mmbiz_gif/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGPLaKlahLZdQv1Ppguv1hxmweYLdUdFMK3wnoXUia4xx4iaQsqicoibgyqA/640?wx_fmt=gif&wxfrom=5&wx_lazy=1)\n\n1. 必须要准备一个`微软账户`,如果你还没有 就赶紧自行申请，申请地址如下:\n\n   https://signup.live.com/\n\n那么一切准备就绪之后就开始吧!  具体流程如下:\n\n##### 1.打开立即加入 Microsoft 365 开发人员计划 页面\n\n地址如下:\n\nhttps://developer.microsoft.com/zh-cn/microsoft-365/dev-program\n\n```\n如图\n```\n\n进入之后点击`立即加入` 接下来会叫你登录你的`微软账户`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG1wdpJ5xULxaFZibOBVsJ22iaOM0Z9rsOdIgA2ia9jZALia9hvFPw5wlW4w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 2.填写开发人员基本信息资料\n\n按照我给出的方式填写就可以了!\n\n```\n图1\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGtdUrqPlmMyvdaBthlTTFrPaFALic6hib1HM63XrvSZkECphcicvbibRWHQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n图2\n```\n\n\n\n```\n图3\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGNeSe927QcsFgEzGibI30ephrtd0KGe9W6lo2zEHu7w4G8bdomZLQabQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 3.填写E5订阅信息\n\n填写好开发者人员信息之后就可以开始 设置`E5`订阅。\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGOvPPjHCw3cAibibfickdOZ71JE7DI0iaZhAmv9PteCbTWJPrcTk16Zbvjw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n点击`设置E5订阅`之后会弹出 `E5 `沙盒设置对话框,  选择`可配置沙盒` 然后点击下一步!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGJUicicfqzUMchKFjtuYOBv9SpZLT0liclhP3anodKgp7VggWNIJjibUXSQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n接下来就填写`用户名`和`域` 你可以随便填，这里的用户名一定不要是使用过的名称\n\n密码需要`同时包含大小写字母`和`数字`。\n\n```\n注意:账户和密码一定要记牢 后面会使用到!\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGbzOib6HXUP0MRoAPxdEp3OKv8ziacOwMnJuV8YRKpibINS8oicYG8fdxibQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n填写好之后点击`继续`\n\n##### 4.手机短信验证\n\n接下来就是手机验证，输入你的手机号之后，点击`发送代码`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGMEHXKPsBKlz8Iwe4lmrcqGMuRaJkialGTuWEvtA6dPzBjHlLYV8LeCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n随后网页会自动加载出`验证码`输入框, 把你手机上接收到的`验证码`输入到 框中就可以点击`设置`了!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGQ4M6mQWN0ZtEibVtiaYLXQ5ztLprVqTDPtpaTF3ebRSbia6AdIcoCnA7A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n小提示\n```\n\n如果你手机没有接收到`验证码`或者说如果点击`发送代码`没有任何反应 说明你没有通过`魔法`来获取 ,`魔法`上面已经说过了!😁\n\n最后点击设置 稍等一会...\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGQgaoxz6NXI0y2A6FSic27GdZ01atfa2wWmYcGiap52SBR8b7zFa9yXfQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 5.配置Microsoft 365 admin center 管理者中心\n\n当`立即设置开发人员订阅`等待结束之后会跳转到`Microsoft 365 开发人员订阅`详情页面\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGEB3a7RibibxMiby25myiaqWQKNMHnpm4a8sCialHicr4ic76JOrfGcBKr0lUA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后我们要配置一下`Microsoft 365 admin center`管理者中心的账户权限\n\n`地址:` https://admin.microsoft.com/\n\n打开这个页面，这里又会叫你输入`微软账户`,这里的`微软账户`就是刚刚配置的`E5开发者账户`\n\n也就是格式为: 用户名@域.onmicrosoft.com的这个账户, 密码就是之前所设置的`密码`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGWAXJCQzTJBRGhbrAfvgBx2XDcWw2gvdBic3aPeibhJT8cjRsehbUu47w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n进入到 `Microsoft 365`管理者中心界面, 这里按照我给出的步骤设置即可!\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG6z0yeEnjBUQicFEARI9riavbFJibymt6VPvvDG0CmKcA3EJkZ8Aj0T7vA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n点击更改之后，会提示更改成功!\n\n```\n如图\n```\n\n\n\n##### 6.微软官方下载Office 365\n\n最后一步就是前往`微软Office官方地址`下载安装`Microsoft 365`到电脑上就可以了\n\n`下载地址:` www.office.com\n\n如果提示`登录账户`那么就使用刚刚注册的`E5开发者账户`来登录, 登录之后会出现如下页面:\n\n选择`安装Office`， 再选择`Office 365应用` 就可以下载官方的`Office 365`安装程序了!\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG2JKn7ay8bQmOiaBD5SGP9BrNyx0wyJB157v3jHvJAez0syB3DG1qgMA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n下载好了之后就直接运行`OfficeSetup.exe`执行程序开始安装了!\n\n```\n网速慢的朋友可能下载不了OfficeSetup.exe,我已经把安装包放到网盘 大家自行下载就可以了\n```\n\n在`微信公众号`后台回复关键字`【 office 】` 直达传送门, 也可立即获取到微软官方`OfficeSetup.exe`安装包\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGL395npnczLKvDlj0bfYbTsmR4PsJEYEpn6mAME9E6wpVI4Bh2ypPLA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n开始安装\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG3DNQlcDWFSwrLSbeoWhMICiaVApLZ2OC5BZ1v2fZ844CWwfbKFc3Cjw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n自动下载和安装`Office 365` 稍等一会...\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG96hL8Hy5aEbjyW7ib7NicIQQNjb3YPsp7TJOgknoSll86yrkZXBlmBIw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n完成安装!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGgEe47X6JbUnFe8nB07j118tCa1MmibGLpjE2GXj2ayOCNbF1vYUp8ZA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 7.使用你的E5开发者账户登录Office\n\n随便打开一个`Office`组件 并登录前面注册的`E5开发者账号`就可以成功激活并免费使用`Office 365`了\n\n输入`E5开发者账户`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG4UqicsfCaxicklF5dadOhWJQYw4fcrDCwEg0mJvoIEDoic5NpYlavWicrg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n输入密码\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG5ZD5HvpkiaUelESZib54d70Q5frYJyfzjGj29IIBoA4qHDOO70BrL84g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后你的`Office 365`就可以是完整的激活状态了!\n\n我们可以在`Office`的组件账户中可以查看到`Microsoft 365 Apps for enterprise(企业应用程序)`的字样!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG8MdrE1ugnySnrQafXvXvQfxFXYazQfKppPmCCHM1s7h6K8bKzWu9zw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)","source":"_posts/something_else/获取Office2021安装包及相关激活工具.md","raw":"---\ntitle: 获取Office 2021安装包及相关激活工具\ndate:\ntags: \n- Jottings\ncategories:\n- Jottings\ndescription:\ntop_img: false\n\n---\n\n# 获取Office 2021安装包及相关激活工具🛠️\n\n### Office 2021 安装部署和激活方式💡\n\n> 概述\n\n废话不多说,这里我大致搜集了几种能够免费安装`Office 2021`的方法以及激活方式,并总结出保姆级教程 如下:\n\n- `通过Office 2021 RTM官方镜像下载与安装激活Office 2021`\n- `Office Tool Plus部署和安装 Office 2021 和 Office 365`\n- `通过Microsoft 365 订阅会员的方式白嫖Office 365`\n\n以上方式以`win10系统`为例, 任选一种都可以,简单通俗 无脑易懂, 现在就开始吧!\n\n#### 方式一 Office 2021 RTM官方镜像下载与安装激活🔥\n\n这是微软官方发布的`Office 2021 RTM专业增强零售版`\n\n由于微软目前发布的版本只有`Office 2021英文版`，因此如果想要切换为`Office 2021中文版`则需要再次手动安装中文语言包\n\n在后台回复关键字`【 office 】` 即可立即免费获取`Office 2021 RTM专业增强零售版+中文语言包+激活工具`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGZ41pLibUGoYBAIMnTY5Quaw82Gp38sNNdZUibdHoZeu0hgDica9q0cV9A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 安装 Office 2021 RTM 专业增强零售版\n\n下载好了之后会得到两个文件\n\n```\n如下图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9uzBb5MptUdjiamgWFWFrFiablkXgoZAvNkQ9zFuyCE4LJ46tcYSmc2Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后解压缩`Office 2021 RTM 安装包`, 点击其中的`Setup`开始安装\n\n```\n如下图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLyLr5Zq1s602oErsDWryLWB3u3KIDRdjIH2jaJF3RJYOOFQKhiaXOsw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后稍等片刻....\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGYsr79BjTfvaUl83r5uY6xt5MIrU7Uo8qXGrzXJA3CoMymbga43ajdQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n就开始自动安装了!\n\n```\n小提示: 由于零售版采用自动默认安装方式，因此安装时不会出现组件选择和安装位置选择的步骤。\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGgfpT8G8ibVp0SB7cFkF6gNeW4mOicKEJegnc5WcbSQ3Dz7ur2Xy3wPSw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n等待滚动条走动完毕之后，`Office 2021 RTM专业增强零售版`就算安装好了\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9p3ApiaEKe6RGKEZo8g1lNaJqqlJS5ibGPo7X69T1gcCsRc6fEePI6zA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后接下来就是最后一步安装中文语言包,否则就是英文版的。同样我们直接运行`中文语言安装包`文件就可以了!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGXENdWAhbmAMbey2AfO5xCf9ib6iaeW1GXAuNrtM7HJQo3tqOW36PgqaQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n稍等片刻..\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGEWiaPHwstUDzQOgL91kPFtiaSapIrDj159K63AOR641hTibqIMjWnE2kw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n完成中文汉化安装\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGrZFzbwWnpdbsiaNOADGicpZSOcreZPBhtpbQcicldzN29IhxiaChudC3kg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 激活 Office 2021\n\n当安装好了`Office 2021`之后选择还不能使用，因为你还没有购买, 那么接下来就教大家如何免费的来激活`Office 2021`\n\n那么针对`Office`除了购买正版密钥永久激活外， 这里我个人推荐如下激活方式:\n\n- `HEU KMS Activator`\n\n###### HEU KMS Activator 介绍🧶\n\n这里简单的介绍一下\n\n`HEU KMS Activator` 是基于MDL论坛的KMS 服务端模拟环境`KMS Server Emulator`而制作的一款简洁高效的 KMS 激活工具, 可激活所有受支持的`WIndows和Office`，无需联网即可一键激活，离线全自动激活软件!\n\n总的来说它是我个人觉得目前国内开发者制作的一款最全能激活工具，`绿色、无毒，纯净，无广告`, 口碑也很好!\n\n无论是 `Windows` 还是 `Office` 都可轻易进行激活\n\n```\n使用方法\n```\n\n\n\n还有你的`Office`是不是动不动就提示`许可证有问题`呢`HEU KMS Activator`还可以帮助你完美解决`Office许可证`的问题, 真的是一劳永逸!\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGiaUCjc8tq9kMnCRknCXUGmsDLJrrLwltESBIRtGiaz7zGjKjbfAwDFibA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n哈哈哈哈 别怪我没提醒你 这工具真强大!😁\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGJ0UenuqIPEzSDpxY98cohOVAteyRAick2zC22tJqwdwreXEF6yxSyvg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 完成 Office 2021 RTM的安装\n\n现在我们就可以开心的使用`Office 2021`啦! 搞起来😄\n\n`Office 2021`打开界面如下图所示\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSmGFrsgKr3RoUPiaJHNciamBaGzJmoKR7toqa9ZKa69YJNuK3NwQYJYQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n------\n\n#### 方式二 Office Tool Plus部署和安装 Office 2021🔥\n\n> 概述\n\n`Office Tool Plus`（简称OTP）是一款微软`Office`办公软件`下载、安装、管理`的部署工具。它可以快速自定义部署，在线下载安装 `Office` 产品的各个版本，也可以通过已有的离线安装文件来部署Office镜像，同时在安装过程中你可以自由选择安装哪些需要使用的组件， 在安装之后也可以单独来安装某个需要的组件。\n\n简单的说`Office Tool Plus`是基于 `Office` 的部署工具,可以很轻松地部署 `Office`。\n\n`Office Tool Plus` 支持多个 Office 许可版本的部署，用户只需几步配置即可开始`下载、安装`。同时为有需要的用户开设了多种安装选项，安装 `Office` 就是如此简单\n\n`Office Tool Plus` 可以为您安装密钥或者配置 KMS 服务。同时高级管理可以让您轻松管理 Office 的授权配置,同时它内部也包含激活方式!\n\n总的来说`Office Tool Plus`就是免费不要钱的`Office`安装工具!\n\nOffice Tool Plus 官方下载地址\n\nhttps://otp.landian.vip/zh-cn/\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGFfsTFqoG27ic3ZLzicqeGHy6hcW8fD3mAXib9ibtq0e8NdpsIB6WcZqNRA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 下载 Office Tool Plus\n\n1. 你可以到`Office Tool Plus官网`上去下载`Office Tool Plus部署工具`\n\n2. 也可以在`微信公众号`后台回复关键字`【 office 】` 直达传送门, 也可立即免费获取`Office Tool Plus`\n\n   `如图`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGto8PQcJK6DGOEGPrgfJrCwYAtgnFXo8j56NR4MlNeibZhxEEkzKSS0Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 使用 Office Tool Plus 部署Office 2021 LTSC专业增强版🔥\n\n###### 开始部署\n\n把下载的`Office Tool Plus 部署工具`压缩包解压后，会得到如下文件, 然后点击`Office Tool Plus`开始部署`Office`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGbibVIHQHX4WeVt1rUANK6YLzfqBfAp57Az8dxQGian2UIaU0311mwvDg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n温馨提示: 如果你的电脑中有其他版本的Office,建议使用这里的工具箱 先卸载掉\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGuvuyqxPdmqlbhhibaPaKRz5pmumuKGcFSsTEPbNLfqw34IKAOttodSw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n选择移除,然后点击开始即可删除电脑中的`Office`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGn8XPsqjGNGNE3VPAVRuy4TQxBJzfLYEwoaxf0uM077ia6u4Cz9csrkw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n清除许可证\n```\n\n这里你也必须使用`Office Tool Plus`部署工具清除一下之前所安装的`许可证`\n\n方法很简单在`Office Tool Plus`中打开`激活`选择里面的`许可证管理`然后再选择`清除激活状态`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKI5CuZONUxEqFOWFCMDazQ0vdmhBPfndn0qKCBdhB4cK1Qc9TfoGEA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n继续点击 `是`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGVUOdUbWbqUGJNic1KwkX4d6CMYjyazsTstxsQG81JEvL7116eWib2FgQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n这样才能完整的清除掉之前所安装的`许可证`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGkwUbaB4S6pIRQncvTSgAHwvS8rdX4tpmvlWs5XoYGfp8vEiaEyA9xeA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n所以在移除之前的`Office`版本后一定记住要做这一步!\n\n接下来确认电脑中没有任何其他版本的`Office`之后，我们就可以点击`部署`按钮开始部署了\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGDaIrsbOYCxjxl78A3j6KCv93SfnwybSaDml2F6Dv8k4xr4T3luUW9Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n###### Office Tool Plus部署安装 Office 2021 LTSC专业增强版\n\n在`部署设置`这一项你可以根据我的个人设置进行`基础设置、高级设置、部署设置`就可以了!\n\n```\n如下图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGmBmw4iaHohrzTv5jCb7ibKSOKQF5LHxy6arVANSbjcNyBdUkicYsc5bJw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n设置好了之后直接点击 `开始部署` 就可以下载相关文件和自动安装`Office 2021`了!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGuTE5gibx5nYkxV2P81lwhUDkOckQibucbBdeU1hCyCUcqMX4LIvpACCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n温馨提示: 推荐选择office 2021 LTSC 专业增强版本批量许可证, 其他版本可能安装出错或不容易激活,慎重考虑\n```\n\n这里科普一下 `office 2021 LTSC`是什么版\n\n`office 2021 LTSC`版是一种面向长期服务的永久版`Office`，并且不会有微软不断推送的更新，主要适用于限制联网的设备，生产车间设备或者没有条件联网的设备, 当然个人以及家用也是完全可以的!\n\n点击开始`部署按钮`之后,`Office Tool Plus`会自动安装软件, 在这个过程中会自动联网下载并完成`Office`的安装, 这个过程根据上网速度的不同所需要的时间也不同 ，所以稍等一下即可!\n\n\n\n```\n小提示: 由于零售版采用自动默认安装方式，因此安装时不会出现组件选择和安装位置选择的步骤。\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG4JTyC65hvfxeXr90lrNf7ZO5MGDlscI7Q2ISKCTbdibBm7Q2cxq3eicA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n完成安装!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSP1ArK45ictW1OLWCVuezVNTYD1Muh1z0XasnAR2TW6s1ly6HLWibKtw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n###### Office Tool Plus 激活Office 2021 LTSC专业增强版\n\n安装完成之后，就可以返回到`Office Tool Plus`主界面,再点选`激活`按钮!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG1C4NCvJibTyPv2mKez68w6x9dVsMl3KwgCtYv76ictnew3JpLZ0NJibPw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n激活配置\n```\n\n然后根据下图进行`激活配置`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGqjkNKxibX1hict8AVcrtOw7a5s4qBycP4xQAMb314Tfial2ibtBAAPmv1g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n开始自动安装许可证!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGhgeliaIcIFqDPVYgicTEcicljEDcOYcqDm7j2HN0Y21e0AatDpibiaiaQ32Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\nKMS服务器配置\n```\n\n然后点击`KMS管理`, 在`KMS主机`一栏中填写 kms.loli.best, 然后点击保存设置，最后点击`激活`按钮!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKzXlzictbWJ8blOpGlceLtpThM6zRREibcx7uZa4qRopRpcLBtbpFjicQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n最后你会看到` 产品激活成功`的字样!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGAC1wRawakXCqsyMuDCuazicPwia0x4fiaiabQicu7N5j7WCjaVnLZk21YNA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n###### 完成 Office 2021 LTSC专业增强版的安装\n\n现在我们又可以愉快的 开心的使用`Office 2021`啦! 搞起来😄\n\n完美激活`Office 2021最新版`之后打开界面如下图:![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGYUiat2ZMRK1P48BqIC8OxUIiaw3f2hEEBU2IfvyH4Uu0vGLhiaWSRRycg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 使用 Office Tool Plus 部署 Office 365🔥\n\n> 概述\n\n如果你喜欢`Office 365` 也可以使用`Office Tool Plus`来进行安装和部署\n\n在这里简单的科普一下什么是`Office 365`\n\n`Office 365`最大的特点就是`在线办公，协同办公，随时同步`，`onedrive空间大`。这些保证了无论你在任何一台设备修改文件，都可以立刻同步到任何一台联网的设备。\n\n`Office 365`还有一个特点是: 能够随时保持最新版本。\n\n`Office 365`功能最强大，并且一直在更新 也就是说，微软`Office` 新推出的功能，都会第一时间在`Office 365`上更新， 注意一下目前微软官方已经把`Office 365`已更名为`Microsoft 365` 你看到的这两个其实是一个东西！\n\n当然目前微软官方的定价也让很多学生党望而却步:\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG10UQJu9lHKwDcibic9XutUMKDibEudk9BElUgvdgDYiatbibibYicy116OiaUg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n所以这里我们也可以通过`Office Tool Plus` 的方式，来完成`Office 365`的安装与激活!\n\n那么废话不多说了 我们开始部署吧!😁\n\n###### Office Tool Plus部署与安装 Office 365\n\n```\n安装前的准备工作\n```\n\n之前我们就提醒过了 如果你的电脑中有其他版本的`Office`,建议使用`Office Tool Plus`的工具箱先卸载掉, 否则会出现安装失败和其他错误的情况，并且你也可以使用`Office Tool Plus`部署工具清除一下之前所安装的`许可证`\n\n方法很简单在`Office Tool Plus`中打开`激活`选择里面的`许可证管理`然后再选择`清除激活状态`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKI5CuZONUxEqFOWFCMDazQ0vdmhBPfndn0qKCBdhB4cK1Qc9TfoGEA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n继续点击 `是`\n\n\n\n这样才能完整的清除掉之前所安装的`许可证`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGkwUbaB4S6pIRQncvTSgAHwvS8rdX4tpmvlWs5XoYGfp8vEiaEyA9xeA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n所以在移除之前的`Office`版本后一定记住要做这一步!\n\n那么做完准备工作之后，我们就可以在`Office Tool Plus`主界面点击`部署`之后开始部署`Office 365`了\n\n在`部署设置`这一项你也可以根据我的`Office 365`个人配置进行`基础设置、高级设置、部署设置`就可以了!\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9ruNzrTRftDWEfuzdLwqvZsjibdfTvkBdYXZMmnaPrH5RpmVBsnacYg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后`部署配置`之后就可以点击 `部署`按钮了\n\n```\n小提示:文件开始下载，如果弹出提示 【是否校验文件】就点击 (是) 就可以了\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGia9m8lYQdDObKXFk7QWa3Ktwvog0vHZL1VMfEqhWff3iceE4Xv4kPpcA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n这个时候`Office Tool Plus`工具会自动下载`Office 365`以及`自动安装`到本地电脑上!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG2gW5oqqF62ZDx0bic5HriagKpjHMaKVwOB9WYZ8mKgmzGIse81ibwa4Jg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n稍等一会!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSZhcOraqre5RuXhlwvHPgrWYNgKrepicIZRH7oHIBicCw6hXibChAA5qg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n安装完成!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGcu9iaD0VV5bbib8hODlYCutgAaQ427ibdyQZZTf7qbTtUsMOdqO8JXG3A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n###### Office Tool Plus 激活Office365\n\n```\n激活配置\n```\n\n最主要的正题来啦，`安装是小事 激活是大事!`\n\n我们回到`Office Tool Plus`主界面点击`激活`按钮\n\n然后来到`许可证管理` 选择`Office Mondo 2016 批量许可证版`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGf1nJyI3vUphjXD4AT0XOIhnHYicDolDwibdAhAljbAgp0pmRC1vIcJzQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n`Office Mondo 2016 批量许可证版`这个版本的`Office`和`Office 365`功能上是差不多的,只是名称不同而已!\n\n最后点击`安装许可证` ，再次点击`是`按钮, 就可以开始安装了!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGfLeruP3VUg1pa5SGZhrDImrbuRgaYEpnZQBibkgFTVDVbWGD08ichiacA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n安装成功后如下图:\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLFb27zUekvaWk3duqTqlyfVoRDDEHbUjUwpA7HpE0FMD72TStIPjMg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\nKMS服务器配置\n```\n\n然后点击`KMS管理`, 在`KMS主机`一栏中填写 kms.loli.beer, 然后点击保存设置，最后点击`激活`按钮!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLibRicP96UZ71rhHEBmI17rvgqmIic5kgcicGaAMfl0iazEDpHVdAibNJUSA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n最后你会看到` 产品激活成功`的字样!\n\n###### 完成Office 365的安装\n\n此时已经完全安装好了最新的`Office 365`\n\n我们可以在激活信息里面查看到:`Microsoft Office Mondo 2016`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGTyx17Vt5RnVIXLwYib6ibzsA144Via6fhujicdbNqxL37EEn7Vq6wELUbg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGaq060BQZ6T4ia9YW37pfpiaxsTxzKGuNJcHzzAib0s4jhhqHCicibqjbepw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGGcuRic7iapATJAibOWibgw2O6kkqRDuXaUISysbvmOQURYWUIxJnkl7yng/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n到此所有`Office 365`的安装已完成!\n\n------\n\n#### 方式三 Microsoft 365 订阅会员的方式白嫖Office 365🔥\n\n> 概述\n\n这是`微软官方`让用户体验正版的`3个月`计划, 也就是说免费使用`Microsoft 365`的机会，其实说白了就是让你使用正版但是又有一定期限!\n\n这种方式需要你的`微软账户`申请并加入到`Microsoft 365 开发人员计划`中就可以了!\n\n```\n注意事项\n```\n\n1. 这种方式是微软官方的操作过程，中途可能会使用到`google人机验证` 就是需要你会`魔法`明白`魔法`吧 就是`哈利波特`的那种魔法`咻咻咻.....!`😁\n\n![图片](https://mmbiz.qpic.cn/mmbiz_gif/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGPLaKlahLZdQv1Ppguv1hxmweYLdUdFMK3wnoXUia4xx4iaQsqicoibgyqA/640?wx_fmt=gif&wxfrom=5&wx_lazy=1)\n\n1. 必须要准备一个`微软账户`,如果你还没有 就赶紧自行申请，申请地址如下:\n\n   https://signup.live.com/\n\n那么一切准备就绪之后就开始吧!  具体流程如下:\n\n##### 1.打开立即加入 Microsoft 365 开发人员计划 页面\n\n地址如下:\n\nhttps://developer.microsoft.com/zh-cn/microsoft-365/dev-program\n\n```\n如图\n```\n\n进入之后点击`立即加入` 接下来会叫你登录你的`微软账户`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG1wdpJ5xULxaFZibOBVsJ22iaOM0Z9rsOdIgA2ia9jZALia9hvFPw5wlW4w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 2.填写开发人员基本信息资料\n\n按照我给出的方式填写就可以了!\n\n```\n图1\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGtdUrqPlmMyvdaBthlTTFrPaFALic6hib1HM63XrvSZkECphcicvbibRWHQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n图2\n```\n\n\n\n```\n图3\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGNeSe927QcsFgEzGibI30ephrtd0KGe9W6lo2zEHu7w4G8bdomZLQabQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 3.填写E5订阅信息\n\n填写好开发者人员信息之后就可以开始 设置`E5`订阅。\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGOvPPjHCw3cAibibfickdOZ71JE7DI0iaZhAmv9PteCbTWJPrcTk16Zbvjw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n点击`设置E5订阅`之后会弹出 `E5 `沙盒设置对话框,  选择`可配置沙盒` 然后点击下一步!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGJUicicfqzUMchKFjtuYOBv9SpZLT0liclhP3anodKgp7VggWNIJjibUXSQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n接下来就填写`用户名`和`域` 你可以随便填，这里的用户名一定不要是使用过的名称\n\n密码需要`同时包含大小写字母`和`数字`。\n\n```\n注意:账户和密码一定要记牢 后面会使用到!\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGbzOib6HXUP0MRoAPxdEp3OKv8ziacOwMnJuV8YRKpibINS8oicYG8fdxibQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n填写好之后点击`继续`\n\n##### 4.手机短信验证\n\n接下来就是手机验证，输入你的手机号之后，点击`发送代码`\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGMEHXKPsBKlz8Iwe4lmrcqGMuRaJkialGTuWEvtA6dPzBjHlLYV8LeCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n随后网页会自动加载出`验证码`输入框, 把你手机上接收到的`验证码`输入到 框中就可以点击`设置`了!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGQ4M6mQWN0ZtEibVtiaYLXQ5ztLprVqTDPtpaTF3ebRSbia6AdIcoCnA7A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n小提示\n```\n\n如果你手机没有接收到`验证码`或者说如果点击`发送代码`没有任何反应 说明你没有通过`魔法`来获取 ,`魔法`上面已经说过了!😁\n\n最后点击设置 稍等一会...\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGQgaoxz6NXI0y2A6FSic27GdZ01atfa2wWmYcGiap52SBR8b7zFa9yXfQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 5.配置Microsoft 365 admin center 管理者中心\n\n当`立即设置开发人员订阅`等待结束之后会跳转到`Microsoft 365 开发人员订阅`详情页面\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGEB3a7RibibxMiby25myiaqWQKNMHnpm4a8sCialHicr4ic76JOrfGcBKr0lUA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后我们要配置一下`Microsoft 365 admin center`管理者中心的账户权限\n\n`地址:` https://admin.microsoft.com/\n\n打开这个页面，这里又会叫你输入`微软账户`,这里的`微软账户`就是刚刚配置的`E5开发者账户`\n\n也就是格式为: 用户名@域.onmicrosoft.com的这个账户, 密码就是之前所设置的`密码`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGWAXJCQzTJBRGhbrAfvgBx2XDcWw2gvdBic3aPeibhJT8cjRsehbUu47w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n进入到 `Microsoft 365`管理者中心界面, 这里按照我给出的步骤设置即可!\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG6z0yeEnjBUQicFEARI9riavbFJibymt6VPvvDG0CmKcA3EJkZ8Aj0T7vA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n点击更改之后，会提示更改成功!\n\n```\n如图\n```\n\n\n\n##### 6.微软官方下载Office 365\n\n最后一步就是前往`微软Office官方地址`下载安装`Microsoft 365`到电脑上就可以了\n\n`下载地址:` www.office.com\n\n如果提示`登录账户`那么就使用刚刚注册的`E5开发者账户`来登录, 登录之后会出现如下页面:\n\n选择`安装Office`， 再选择`Office 365应用` 就可以下载官方的`Office 365`安装程序了!\n\n```\n如图\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG2JKn7ay8bQmOiaBD5SGP9BrNyx0wyJB157v3jHvJAez0syB3DG1qgMA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n下载好了之后就直接运行`OfficeSetup.exe`执行程序开始安装了!\n\n```\n网速慢的朋友可能下载不了OfficeSetup.exe,我已经把安装包放到网盘 大家自行下载就可以了\n```\n\n在`微信公众号`后台回复关键字`【 office 】` 直达传送门, 也可立即获取到微软官方`OfficeSetup.exe`安装包\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGL395npnczLKvDlj0bfYbTsmR4PsJEYEpn6mAME9E6wpVI4Bh2ypPLA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n开始安装\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG3DNQlcDWFSwrLSbeoWhMICiaVApLZ2OC5BZ1v2fZ844CWwfbKFc3Cjw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n自动下载和安装`Office 365` 稍等一会...\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG96hL8Hy5aEbjyW7ib7NicIQQNjb3YPsp7TJOgknoSll86yrkZXBlmBIw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n完成安装!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGgEe47X6JbUnFe8nB07j118tCa1MmibGLpjE2GXj2ayOCNbF1vYUp8ZA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n##### 7.使用你的E5开发者账户登录Office\n\n随便打开一个`Office`组件 并登录前面注册的`E5开发者账号`就可以成功激活并免费使用`Office 365`了\n\n输入`E5开发者账户`\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG4UqicsfCaxicklF5dadOhWJQYw4fcrDCwEg0mJvoIEDoic5NpYlavWicrg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n```\n输入密码\n```\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG5ZD5HvpkiaUelESZib54d70Q5frYJyfzjGj29IIBoA4qHDOO70BrL84g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)\n\n然后你的`Office 365`就可以是完整的激活状态了!\n\n我们可以在`Office`的组件账户中可以查看到`Microsoft 365 Apps for enterprise(企业应用程序)`的字样!\n\n![图片](https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG8MdrE1ugnySnrQafXvXvQfxFXYazQfKppPmCCHM1s7h6K8bKzWu9zw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1)","slug":"something_else/获取Office2021安装包及相关激活工具","published":1,"updated":"2023-08-25T09:25:50.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67a003igcr702s1bxfi","content":"<h1 id=\"获取Office-2021安装包及相关激活工具🛠️\"><a href=\"#获取Office-2021安装包及相关激活工具🛠️\" class=\"headerlink\" title=\"获取Office 2021安装包及相关激活工具🛠️\"></a>获取Office 2021安装包及相关激活工具🛠️</h1><h3 id=\"Office-2021-安装部署和激活方式💡\"><a href=\"#Office-2021-安装部署和激活方式💡\" class=\"headerlink\" title=\"Office 2021 安装部署和激活方式💡\"></a>Office 2021 安装部署和激活方式💡</h3><blockquote>\n<p>概述</p>\n</blockquote>\n<p>废话不多说,这里我大致搜集了几种能够免费安装<code>Office 2021</code>的方法以及激活方式,并总结出保姆级教程 如下:</p>\n<ul>\n<li><code>通过Office 2021 RTM官方镜像下载与安装激活Office 2021</code></li>\n<li><code>Office Tool Plus部署和安装 Office 2021 和 Office 365</code></li>\n<li><code>通过Microsoft 365 订阅会员的方式白嫖Office 365</code></li>\n</ul>\n<p>以上方式以<code>win10系统</code>为例, 任选一种都可以,简单通俗 无脑易懂, 现在就开始吧!</p>\n<h4 id=\"方式一-Office-2021-RTM官方镜像下载与安装激活🔥\"><a href=\"#方式一-Office-2021-RTM官方镜像下载与安装激活🔥\" class=\"headerlink\" title=\"方式一 Office 2021 RTM官方镜像下载与安装激活🔥\"></a>方式一 Office 2021 RTM官方镜像下载与安装激活🔥</h4><p>这是微软官方发布的<code>Office 2021 RTM专业增强零售版</code></p>\n<p>由于微软目前发布的版本只有<code>Office 2021英文版</code>，因此如果想要切换为<code>Office 2021中文版</code>则需要再次手动安装中文语言包</p>\n<p>在后台回复关键字<code>【 office 】</code> 即可立即免费获取<code>Office 2021 RTM专业增强零售版+中文语言包+激活工具</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGZ41pLibUGoYBAIMnTY5Quaw82Gp38sNNdZUibdHoZeu0hgDica9q0cV9A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"安装-Office-2021-RTM-专业增强零售版\"><a href=\"#安装-Office-2021-RTM-专业增强零售版\" class=\"headerlink\" title=\"安装 Office 2021 RTM 专业增强零售版\"></a>安装 Office 2021 RTM 专业增强零售版</h5><p>下载好了之后会得到两个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如下图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9uzBb5MptUdjiamgWFWFrFiablkXgoZAvNkQ9zFuyCE4LJ46tcYSmc2Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后解压缩<code>Office 2021 RTM 安装包</code>, 点击其中的<code>Setup</code>开始安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如下图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLyLr5Zq1s602oErsDWryLWB3u3KIDRdjIH2jaJF3RJYOOFQKhiaXOsw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后稍等片刻….</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGYsr79BjTfvaUl83r5uY6xt5MIrU7Uo8qXGrzXJA3CoMymbga43ajdQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>就开始自动安装了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小提示: 由于零售版采用自动默认安装方式，因此安装时不会出现组件选择和安装位置选择的步骤。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGgfpT8G8ibVp0SB7cFkF6gNeW4mOicKEJegnc5WcbSQ3Dz7ur2Xy3wPSw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>等待滚动条走动完毕之后，<code>Office 2021 RTM专业增强零售版</code>就算安装好了</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9p3ApiaEKe6RGKEZo8g1lNaJqqlJS5ibGPo7X69T1gcCsRc6fEePI6zA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后接下来就是最后一步安装中文语言包,否则就是英文版的。同样我们直接运行<code>中文语言安装包</code>文件就可以了!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGXENdWAhbmAMbey2AfO5xCf9ib6iaeW1GXAuNrtM7HJQo3tqOW36PgqaQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>稍等片刻..</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGEWiaPHwstUDzQOgL91kPFtiaSapIrDj159K63AOR641hTibqIMjWnE2kw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>完成中文汉化安装</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGrZFzbwWnpdbsiaNOADGicpZSOcreZPBhtpbQcicldzN29IhxiaChudC3kg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"激活-Office-2021\"><a href=\"#激活-Office-2021\" class=\"headerlink\" title=\"激活 Office 2021\"></a>激活 Office 2021</h5><p>当安装好了<code>Office 2021</code>之后选择还不能使用，因为你还没有购买, 那么接下来就教大家如何免费的来激活<code>Office 2021</code></p>\n<p>那么针对<code>Office</code>除了购买正版密钥永久激活外， 这里我个人推荐如下激活方式:</p>\n<ul>\n<li><code>HEU KMS Activator</code></li>\n</ul>\n<h6 id=\"HEU-KMS-Activator-介绍🧶\"><a href=\"#HEU-KMS-Activator-介绍🧶\" class=\"headerlink\" title=\"HEU KMS Activator 介绍🧶\"></a>HEU KMS Activator 介绍🧶</h6><p>这里简单的介绍一下</p>\n<p><code>HEU KMS Activator</code> 是基于MDL论坛的KMS 服务端模拟环境<code>KMS Server Emulator</code>而制作的一款简洁高效的 KMS 激活工具, 可激活所有受支持的<code>WIndows和Office</code>，无需联网即可一键激活，离线全自动激活软件!</p>\n<p>总的来说它是我个人觉得目前国内开发者制作的一款最全能激活工具，<code>绿色、无毒，纯净，无广告</code>, 口碑也很好!</p>\n<p>无论是 <code>Windows</code> 还是 <code>Office</code> 都可轻易进行激活</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用方法</span><br></pre></td></tr></table></figure>\n\n\n\n<p>还有你的<code>Office</code>是不是动不动就提示<code>许可证有问题</code>呢<code>HEU KMS Activator</code>还可以帮助你完美解决<code>Office许可证</code>的问题, 真的是一劳永逸!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGiaUCjc8tq9kMnCRknCXUGmsDLJrrLwltESBIRtGiaz7zGjKjbfAwDFibA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>哈哈哈哈 别怪我没提醒你 这工具真强大!😁</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGJ0UenuqIPEzSDpxY98cohOVAteyRAick2zC22tJqwdwreXEF6yxSyvg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"完成-Office-2021-RTM的安装\"><a href=\"#完成-Office-2021-RTM的安装\" class=\"headerlink\" title=\"完成 Office 2021 RTM的安装\"></a>完成 Office 2021 RTM的安装</h5><p>现在我们就可以开心的使用<code>Office 2021</code>啦! 搞起来😄</p>\n<p><code>Office 2021</code>打开界面如下图所示</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSmGFrsgKr3RoUPiaJHNciamBaGzJmoKR7toqa9ZKa69YJNuK3NwQYJYQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<hr>\n<h4 id=\"方式二-Office-Tool-Plus部署和安装-Office-2021🔥\"><a href=\"#方式二-Office-Tool-Plus部署和安装-Office-2021🔥\" class=\"headerlink\" title=\"方式二 Office Tool Plus部署和安装 Office 2021🔥\"></a>方式二 Office Tool Plus部署和安装 Office 2021🔥</h4><blockquote>\n<p>概述</p>\n</blockquote>\n<p><code>Office Tool Plus</code>（简称OTP）是一款微软<code>Office</code>办公软件<code>下载、安装、管理</code>的部署工具。它可以快速自定义部署，在线下载安装 <code>Office</code> 产品的各个版本，也可以通过已有的离线安装文件来部署Office镜像，同时在安装过程中你可以自由选择安装哪些需要使用的组件， 在安装之后也可以单独来安装某个需要的组件。</p>\n<p>简单的说<code>Office Tool Plus</code>是基于 <code>Office</code> 的部署工具,可以很轻松地部署 <code>Office</code>。</p>\n<p><code>Office Tool Plus</code> 支持多个 Office 许可版本的部署，用户只需几步配置即可开始<code>下载、安装</code>。同时为有需要的用户开设了多种安装选项，安装 <code>Office</code> 就是如此简单</p>\n<p><code>Office Tool Plus</code> 可以为您安装密钥或者配置 KMS 服务。同时高级管理可以让您轻松管理 Office 的授权配置,同时它内部也包含激活方式!</p>\n<p>总的来说<code>Office Tool Plus</code>就是免费不要钱的<code>Office</code>安装工具!</p>\n<p>Office Tool Plus 官方下载地址</p>\n<p><a href=\"https://otp.landian.vip/zh-cn/\">https://otp.landian.vip/zh-cn/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGFfsTFqoG27ic3ZLzicqeGHy6hcW8fD3mAXib9ibtq0e8NdpsIB6WcZqNRA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"下载-Office-Tool-Plus\"><a href=\"#下载-Office-Tool-Plus\" class=\"headerlink\" title=\"下载 Office Tool Plus\"></a>下载 Office Tool Plus</h5><ol>\n<li><p>你可以到<code>Office Tool Plus官网</code>上去下载<code>Office Tool Plus部署工具</code></p>\n</li>\n<li><p>也可以在<code>微信公众号</code>后台回复关键字<code>【 office 】</code> 直达传送门, 也可立即免费获取<code>Office Tool Plus</code></p>\n<p><code>如图</code></p>\n</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGto8PQcJK6DGOEGPrgfJrCwYAtgnFXo8j56NR4MlNeibZhxEEkzKSS0Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"使用-Office-Tool-Plus-部署Office-2021-LTSC专业增强版🔥\"><a href=\"#使用-Office-Tool-Plus-部署Office-2021-LTSC专业增强版🔥\" class=\"headerlink\" title=\"使用 Office Tool Plus 部署Office 2021 LTSC专业增强版🔥\"></a>使用 Office Tool Plus 部署Office 2021 LTSC专业增强版🔥</h5><h6 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h6><p>把下载的<code>Office Tool Plus 部署工具</code>压缩包解压后，会得到如下文件, 然后点击<code>Office Tool Plus</code>开始部署<code>Office</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGbibVIHQHX4WeVt1rUANK6YLzfqBfAp57Az8dxQGian2UIaU0311mwvDg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">温馨提示: 如果你的电脑中有其他版本的Office,建议使用这里的工具箱 先卸载掉</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGuvuyqxPdmqlbhhibaPaKRz5pmumuKGcFSsTEPbNLfqw34IKAOttodSw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>选择移除,然后点击开始即可删除电脑中的<code>Office</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGn8XPsqjGNGNE3VPAVRuy4TQxBJzfLYEwoaxf0uM077ia6u4Cz9csrkw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清除许可证</span><br></pre></td></tr></table></figure>\n\n<p>这里你也必须使用<code>Office Tool Plus</code>部署工具清除一下之前所安装的<code>许可证</code></p>\n<p>方法很简单在<code>Office Tool Plus</code>中打开<code>激活</code>选择里面的<code>许可证管理</code>然后再选择<code>清除激活状态</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKI5CuZONUxEqFOWFCMDazQ0vdmhBPfndn0qKCBdhB4cK1Qc9TfoGEA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>继续点击 <code>是</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGVUOdUbWbqUGJNic1KwkX4d6CMYjyazsTstxsQG81JEvL7116eWib2FgQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>这样才能完整的清除掉之前所安装的<code>许可证</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGkwUbaB4S6pIRQncvTSgAHwvS8rdX4tpmvlWs5XoYGfp8vEiaEyA9xeA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>所以在移除之前的<code>Office</code>版本后一定记住要做这一步!</p>\n<p>接下来确认电脑中没有任何其他版本的<code>Office</code>之后，我们就可以点击<code>部署</code>按钮开始部署了</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGDaIrsbOYCxjxl78A3j6KCv93SfnwybSaDml2F6Dv8k4xr4T3luUW9Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h6 id=\"Office-Tool-Plus部署安装-Office-2021-LTSC专业增强版\"><a href=\"#Office-Tool-Plus部署安装-Office-2021-LTSC专业增强版\" class=\"headerlink\" title=\"Office Tool Plus部署安装 Office 2021 LTSC专业增强版\"></a>Office Tool Plus部署安装 Office 2021 LTSC专业增强版</h6><p>在<code>部署设置</code>这一项你可以根据我的个人设置进行<code>基础设置、高级设置、部署设置</code>就可以了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如下图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGmBmw4iaHohrzTv5jCb7ibKSOKQF5LHxy6arVANSbjcNyBdUkicYsc5bJw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>设置好了之后直接点击 <code>开始部署</code> 就可以下载相关文件和自动安装<code>Office 2021</code>了!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGuTE5gibx5nYkxV2P81lwhUDkOckQibucbBdeU1hCyCUcqMX4LIvpACCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">温馨提示: 推荐选择office 2021 LTSC 专业增强版本批量许可证, 其他版本可能安装出错或不容易激活,慎重考虑</span><br></pre></td></tr></table></figure>\n\n<p>这里科普一下 <code>office 2021 LTSC</code>是什么版</p>\n<p><code>office 2021 LTSC</code>版是一种面向长期服务的永久版<code>Office</code>，并且不会有微软不断推送的更新，主要适用于限制联网的设备，生产车间设备或者没有条件联网的设备, 当然个人以及家用也是完全可以的!</p>\n<p>点击开始<code>部署按钮</code>之后,<code>Office Tool Plus</code>会自动安装软件, 在这个过程中会自动联网下载并完成<code>Office</code>的安装, 这个过程根据上网速度的不同所需要的时间也不同 ，所以稍等一下即可!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小提示: 由于零售版采用自动默认安装方式，因此安装时不会出现组件选择和安装位置选择的步骤。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG4JTyC65hvfxeXr90lrNf7ZO5MGDlscI7Q2ISKCTbdibBm7Q2cxq3eicA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>完成安装!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSP1ArK45ictW1OLWCVuezVNTYD1Muh1z0XasnAR2TW6s1ly6HLWibKtw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h6 id=\"Office-Tool-Plus-激活Office-2021-LTSC专业增强版\"><a href=\"#Office-Tool-Plus-激活Office-2021-LTSC专业增强版\" class=\"headerlink\" title=\"Office Tool Plus 激活Office 2021 LTSC专业增强版\"></a>Office Tool Plus 激活Office 2021 LTSC专业增强版</h6><p>安装完成之后，就可以返回到<code>Office Tool Plus</code>主界面,再点选<code>激活</code>按钮!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG1C4NCvJibTyPv2mKez68w6x9dVsMl3KwgCtYv76ictnew3JpLZ0NJibPw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">激活配置</span><br></pre></td></tr></table></figure>\n\n<p>然后根据下图进行<code>激活配置</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGqjkNKxibX1hict8AVcrtOw7a5s4qBycP4xQAMb314Tfial2ibtBAAPmv1g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>开始自动安装许可证!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGhgeliaIcIFqDPVYgicTEcicljEDcOYcqDm7j2HN0Y21e0AatDpibiaiaQ32Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KMS服务器配置</span><br></pre></td></tr></table></figure>\n\n<p>然后点击<code>KMS管理</code>, 在<code>KMS主机</code>一栏中填写 kms.loli.best, 然后点击保存设置，最后点击<code>激活</code>按钮!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKzXlzictbWJ8blOpGlceLtpThM6zRREibcx7uZa4qRopRpcLBtbpFjicQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>最后你会看到<code> 产品激活成功</code>的字样!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGAC1wRawakXCqsyMuDCuazicPwia0x4fiaiabQicu7N5j7WCjaVnLZk21YNA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h6 id=\"完成-Office-2021-LTSC专业增强版的安装\"><a href=\"#完成-Office-2021-LTSC专业增强版的安装\" class=\"headerlink\" title=\"完成 Office 2021 LTSC专业增强版的安装\"></a>完成 Office 2021 LTSC专业增强版的安装</h6><p>现在我们又可以愉快的 开心的使用<code>Office 2021</code>啦! 搞起来😄</p>\n<p>完美激活<code>Office 2021最新版</code>之后打开界面如下图:<img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGYUiat2ZMRK1P48BqIC8OxUIiaw3f2hEEBU2IfvyH4Uu0vGLhiaWSRRycg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"使用-Office-Tool-Plus-部署-Office-365🔥\"><a href=\"#使用-Office-Tool-Plus-部署-Office-365🔥\" class=\"headerlink\" title=\"使用 Office Tool Plus 部署 Office 365🔥\"></a>使用 Office Tool Plus 部署 Office 365🔥</h5><blockquote>\n<p>概述</p>\n</blockquote>\n<p>如果你喜欢<code>Office 365</code> 也可以使用<code>Office Tool Plus</code>来进行安装和部署</p>\n<p>在这里简单的科普一下什么是<code>Office 365</code></p>\n<p><code>Office 365</code>最大的特点就是<code>在线办公，协同办公，随时同步</code>，<code>onedrive空间大</code>。这些保证了无论你在任何一台设备修改文件，都可以立刻同步到任何一台联网的设备。</p>\n<p><code>Office 365</code>还有一个特点是: 能够随时保持最新版本。</p>\n<p><code>Office 365</code>功能最强大，并且一直在更新 也就是说，微软<code>Office</code> 新推出的功能，都会第一时间在<code>Office 365</code>上更新， 注意一下目前微软官方已经把<code>Office 365</code>已更名为<code>Microsoft 365</code> 你看到的这两个其实是一个东西！</p>\n<p>当然目前微软官方的定价也让很多学生党望而却步:</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG10UQJu9lHKwDcibic9XutUMKDibEudk9BElUgvdgDYiatbibibYicy116OiaUg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>所以这里我们也可以通过<code>Office Tool Plus</code> 的方式，来完成<code>Office 365</code>的安装与激活!</p>\n<p>那么废话不多说了 我们开始部署吧!😁</p>\n<h6 id=\"Office-Tool-Plus部署与安装-Office-365\"><a href=\"#Office-Tool-Plus部署与安装-Office-365\" class=\"headerlink\" title=\"Office Tool Plus部署与安装 Office 365\"></a>Office Tool Plus部署与安装 Office 365</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装前的准备工作</span><br></pre></td></tr></table></figure>\n\n<p>之前我们就提醒过了 如果你的电脑中有其他版本的<code>Office</code>,建议使用<code>Office Tool Plus</code>的工具箱先卸载掉, 否则会出现安装失败和其他错误的情况，并且你也可以使用<code>Office Tool Plus</code>部署工具清除一下之前所安装的<code>许可证</code></p>\n<p>方法很简单在<code>Office Tool Plus</code>中打开<code>激活</code>选择里面的<code>许可证管理</code>然后再选择<code>清除激活状态</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKI5CuZONUxEqFOWFCMDazQ0vdmhBPfndn0qKCBdhB4cK1Qc9TfoGEA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>继续点击 <code>是</code></p>\n<p>这样才能完整的清除掉之前所安装的<code>许可证</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGkwUbaB4S6pIRQncvTSgAHwvS8rdX4tpmvlWs5XoYGfp8vEiaEyA9xeA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>所以在移除之前的<code>Office</code>版本后一定记住要做这一步!</p>\n<p>那么做完准备工作之后，我们就可以在<code>Office Tool Plus</code>主界面点击<code>部署</code>之后开始部署<code>Office 365</code>了</p>\n<p>在<code>部署设置</code>这一项你也可以根据我的<code>Office 365</code>个人配置进行<code>基础设置、高级设置、部署设置</code>就可以了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9ruNzrTRftDWEfuzdLwqvZsjibdfTvkBdYXZMmnaPrH5RpmVBsnacYg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后<code>部署配置</code>之后就可以点击 <code>部署</code>按钮了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小提示:文件开始下载，如果弹出提示 【是否校验文件】就点击 (是) 就可以了</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGia9m8lYQdDObKXFk7QWa3Ktwvog0vHZL1VMfEqhWff3iceE4Xv4kPpcA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>这个时候<code>Office Tool Plus</code>工具会自动下载<code>Office 365</code>以及<code>自动安装</code>到本地电脑上!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG2gW5oqqF62ZDx0bic5HriagKpjHMaKVwOB9WYZ8mKgmzGIse81ibwa4Jg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>稍等一会!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSZhcOraqre5RuXhlwvHPgrWYNgKrepicIZRH7oHIBicCw6hXibChAA5qg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>安装完成!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGcu9iaD0VV5bbib8hODlYCutgAaQ427ibdyQZZTf7qbTtUsMOdqO8JXG3A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h6 id=\"Office-Tool-Plus-激活Office365\"><a href=\"#Office-Tool-Plus-激活Office365\" class=\"headerlink\" title=\"Office Tool Plus 激活Office365\"></a>Office Tool Plus 激活Office365</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">激活配置</span><br></pre></td></tr></table></figure>\n\n<p>最主要的正题来啦，<code>安装是小事 激活是大事!</code></p>\n<p>我们回到<code>Office Tool Plus</code>主界面点击<code>激活</code>按钮</p>\n<p>然后来到<code>许可证管理</code> 选择<code>Office Mondo 2016 批量许可证版</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGf1nJyI3vUphjXD4AT0XOIhnHYicDolDwibdAhAljbAgp0pmRC1vIcJzQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><code>Office Mondo 2016 批量许可证版</code>这个版本的<code>Office</code>和<code>Office 365</code>功能上是差不多的,只是名称不同而已!</p>\n<p>最后点击<code>安装许可证</code> ，再次点击<code>是</code>按钮, 就可以开始安装了!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGfLeruP3VUg1pa5SGZhrDImrbuRgaYEpnZQBibkgFTVDVbWGD08ichiacA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>安装成功后如下图:</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLFb27zUekvaWk3duqTqlyfVoRDDEHbUjUwpA7HpE0FMD72TStIPjMg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KMS服务器配置</span><br></pre></td></tr></table></figure>\n\n<p>然后点击<code>KMS管理</code>, 在<code>KMS主机</code>一栏中填写 kms.loli.beer, 然后点击保存设置，最后点击<code>激活</code>按钮!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLibRicP96UZ71rhHEBmI17rvgqmIic5kgcicGaAMfl0iazEDpHVdAibNJUSA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>最后你会看到<code> 产品激活成功</code>的字样!</p>\n<h6 id=\"完成Office-365的安装\"><a href=\"#完成Office-365的安装\" class=\"headerlink\" title=\"完成Office 365的安装\"></a>完成Office 365的安装</h6><p>此时已经完全安装好了最新的<code>Office 365</code></p>\n<p>我们可以在激活信息里面查看到:<code>Microsoft Office Mondo 2016</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGTyx17Vt5RnVIXLwYib6ibzsA144Via6fhujicdbNqxL37EEn7Vq6wELUbg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGaq060BQZ6T4ia9YW37pfpiaxsTxzKGuNJcHzzAib0s4jhhqHCicibqjbepw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGGcuRic7iapATJAibOWibgw2O6kkqRDuXaUISysbvmOQURYWUIxJnkl7yng/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>到此所有<code>Office 365</code>的安装已完成!</p>\n<hr>\n<h4 id=\"方式三-Microsoft-365-订阅会员的方式白嫖Office-365🔥\"><a href=\"#方式三-Microsoft-365-订阅会员的方式白嫖Office-365🔥\" class=\"headerlink\" title=\"方式三 Microsoft 365 订阅会员的方式白嫖Office 365🔥\"></a>方式三 Microsoft 365 订阅会员的方式白嫖Office 365🔥</h4><blockquote>\n<p>概述</p>\n</blockquote>\n<p>这是<code>微软官方</code>让用户体验正版的<code>3个月</code>计划, 也就是说免费使用<code>Microsoft 365</code>的机会，其实说白了就是让你使用正版但是又有一定期限!</p>\n<p>这种方式需要你的<code>微软账户</code>申请并加入到<code>Microsoft 365 开发人员计划</code>中就可以了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意事项</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>这种方式是微软官方的操作过程，中途可能会使用到<code>google人机验证</code> 就是需要你会<code>魔法</code>明白<code>魔法</code>吧 就是<code>哈利波特</code>的那种魔法<code>咻咻咻.....!</code>😁</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGPLaKlahLZdQv1Ppguv1hxmweYLdUdFMK3wnoXUia4xx4iaQsqicoibgyqA/640?wx_fmt=gif&wxfrom=5&wx_lazy=1\" alt=\"图片\"></p>\n<ol>\n<li><p>必须要准备一个<code>微软账户</code>,如果你还没有 就赶紧自行申请，申请地址如下:</p>\n<p><a href=\"https://signup.live.com/\">https://signup.live.com/</a></p>\n</li>\n</ol>\n<p>那么一切准备就绪之后就开始吧!  具体流程如下:</p>\n<h5 id=\"1-打开立即加入-Microsoft-365-开发人员计划-页面\"><a href=\"#1-打开立即加入-Microsoft-365-开发人员计划-页面\" class=\"headerlink\" title=\"1.打开立即加入 Microsoft 365 开发人员计划 页面\"></a>1.打开立即加入 Microsoft 365 开发人员计划 页面</h5><p>地址如下:</p>\n<p><a href=\"https://developer.microsoft.com/zh-cn/microsoft-365/dev-program\">https://developer.microsoft.com/zh-cn/microsoft-365/dev-program</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p>进入之后点击<code>立即加入</code> 接下来会叫你登录你的<code>微软账户</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG1wdpJ5xULxaFZibOBVsJ22iaOM0Z9rsOdIgA2ia9jZALia9hvFPw5wlW4w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"2-填写开发人员基本信息资料\"><a href=\"#2-填写开发人员基本信息资料\" class=\"headerlink\" title=\"2.填写开发人员基本信息资料\"></a>2.填写开发人员基本信息资料</h5><p>按照我给出的方式填写就可以了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">图1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGtdUrqPlmMyvdaBthlTTFrPaFALic6hib1HM63XrvSZkECphcicvbibRWHQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">图2</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">图3</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGNeSe927QcsFgEzGibI30ephrtd0KGe9W6lo2zEHu7w4G8bdomZLQabQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"3-填写E5订阅信息\"><a href=\"#3-填写E5订阅信息\" class=\"headerlink\" title=\"3.填写E5订阅信息\"></a>3.填写E5订阅信息</h5><p>填写好开发者人员信息之后就可以开始 设置<code>E5</code>订阅。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGOvPPjHCw3cAibibfickdOZ71JE7DI0iaZhAmv9PteCbTWJPrcTk16Zbvjw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>点击<code>设置E5订阅</code>之后会弹出 <code>E5 </code>沙盒设置对话框,  选择<code>可配置沙盒</code> 然后点击下一步!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGJUicicfqzUMchKFjtuYOBv9SpZLT0liclhP3anodKgp7VggWNIJjibUXSQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>接下来就填写<code>用户名</code>和<code>域</code> 你可以随便填，这里的用户名一定不要是使用过的名称</p>\n<p>密码需要<code>同时包含大小写字母</code>和<code>数字</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意:账户和密码一定要记牢 后面会使用到!</span><br><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGbzOib6HXUP0MRoAPxdEp3OKv8ziacOwMnJuV8YRKpibINS8oicYG8fdxibQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>填写好之后点击<code>继续</code></p>\n<h5 id=\"4-手机短信验证\"><a href=\"#4-手机短信验证\" class=\"headerlink\" title=\"4.手机短信验证\"></a>4.手机短信验证</h5><p>接下来就是手机验证，输入你的手机号之后，点击<code>发送代码</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGMEHXKPsBKlz8Iwe4lmrcqGMuRaJkialGTuWEvtA6dPzBjHlLYV8LeCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>随后网页会自动加载出<code>验证码</code>输入框, 把你手机上接收到的<code>验证码</code>输入到 框中就可以点击<code>设置</code>了!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGQ4M6mQWN0ZtEibVtiaYLXQ5ztLprVqTDPtpaTF3ebRSbia6AdIcoCnA7A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小提示</span><br></pre></td></tr></table></figure>\n\n<p>如果你手机没有接收到<code>验证码</code>或者说如果点击<code>发送代码</code>没有任何反应 说明你没有通过<code>魔法</code>来获取 ,<code>魔法</code>上面已经说过了!😁</p>\n<p>最后点击设置 稍等一会…</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGQgaoxz6NXI0y2A6FSic27GdZ01atfa2wWmYcGiap52SBR8b7zFa9yXfQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"5-配置Microsoft-365-admin-center-管理者中心\"><a href=\"#5-配置Microsoft-365-admin-center-管理者中心\" class=\"headerlink\" title=\"5.配置Microsoft 365 admin center 管理者中心\"></a>5.配置Microsoft 365 admin center 管理者中心</h5><p>当<code>立即设置开发人员订阅</code>等待结束之后会跳转到<code>Microsoft 365 开发人员订阅</code>详情页面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGEB3a7RibibxMiby25myiaqWQKNMHnpm4a8sCialHicr4ic76JOrfGcBKr0lUA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后我们要配置一下<code>Microsoft 365 admin center</code>管理者中心的账户权限</p>\n<p><code>地址:</code> <a href=\"https://admin.microsoft.com/\">https://admin.microsoft.com/</a></p>\n<p>打开这个页面，这里又会叫你输入<code>微软账户</code>,这里的<code>微软账户</code>就是刚刚配置的<code>E5开发者账户</code></p>\n<p>也就是格式为: 用户名@域.onmicrosoft.com的这个账户, 密码就是之前所设置的<code>密码</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGWAXJCQzTJBRGhbrAfvgBx2XDcWw2gvdBic3aPeibhJT8cjRsehbUu47w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>进入到 <code>Microsoft 365</code>管理者中心界面, 这里按照我给出的步骤设置即可!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG6z0yeEnjBUQicFEARI9riavbFJibymt6VPvvDG0CmKcA3EJkZ8Aj0T7vA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>点击更改之后，会提示更改成功!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"6-微软官方下载Office-365\"><a href=\"#6-微软官方下载Office-365\" class=\"headerlink\" title=\"6.微软官方下载Office 365\"></a>6.微软官方下载Office 365</h5><p>最后一步就是前往<code>微软Office官方地址</code>下载安装<code>Microsoft 365</code>到电脑上就可以了</p>\n<p><code>下载地址:</code> <a href=\"http://www.office.com/\">www.office.com</a></p>\n<p>如果提示<code>登录账户</code>那么就使用刚刚注册的<code>E5开发者账户</code>来登录, 登录之后会出现如下页面:</p>\n<p>选择<code>安装Office</code>， 再选择<code>Office 365应用</code> 就可以下载官方的<code>Office 365</code>安装程序了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG2JKn7ay8bQmOiaBD5SGP9BrNyx0wyJB157v3jHvJAez0syB3DG1qgMA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>下载好了之后就直接运行<code>OfficeSetup.exe</code>执行程序开始安装了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网速慢的朋友可能下载不了OfficeSetup.exe,我已经把安装包放到网盘 大家自行下载就可以了</span><br></pre></td></tr></table></figure>\n\n<p>在<code>微信公众号</code>后台回复关键字<code>【 office 】</code> 直达传送门, 也可立即获取到微软官方<code>OfficeSetup.exe</code>安装包</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGL395npnczLKvDlj0bfYbTsmR4PsJEYEpn6mAME9E6wpVI4Bh2ypPLA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>开始安装</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG3DNQlcDWFSwrLSbeoWhMICiaVApLZ2OC5BZ1v2fZ844CWwfbKFc3Cjw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>自动下载和安装<code>Office 365</code> 稍等一会…</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG96hL8Hy5aEbjyW7ib7NicIQQNjb3YPsp7TJOgknoSll86yrkZXBlmBIw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>完成安装!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGgEe47X6JbUnFe8nB07j118tCa1MmibGLpjE2GXj2ayOCNbF1vYUp8ZA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"7-使用你的E5开发者账户登录Office\"><a href=\"#7-使用你的E5开发者账户登录Office\" class=\"headerlink\" title=\"7.使用你的E5开发者账户登录Office\"></a>7.使用你的E5开发者账户登录Office</h5><p>随便打开一个<code>Office</code>组件 并登录前面注册的<code>E5开发者账号</code>就可以成功激活并免费使用<code>Office 365</code>了</p>\n<p>输入<code>E5开发者账户</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG4UqicsfCaxicklF5dadOhWJQYw4fcrDCwEg0mJvoIEDoic5NpYlavWicrg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入密码</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG5ZD5HvpkiaUelESZib54d70Q5frYJyfzjGj29IIBoA4qHDOO70BrL84g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后你的<code>Office 365</code>就可以是完整的激活状态了!</p>\n<p>我们可以在<code>Office</code>的组件账户中可以查看到<code>Microsoft 365 Apps for enterprise(企业应用程序)</code>的字样!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG8MdrE1ugnySnrQafXvXvQfxFXYazQfKppPmCCHM1s7h6K8bKzWu9zw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-5.png","cover_type":"img","excerpt":"","more":"<h1 id=\"获取Office-2021安装包及相关激活工具🛠️\"><a href=\"#获取Office-2021安装包及相关激活工具🛠️\" class=\"headerlink\" title=\"获取Office 2021安装包及相关激活工具🛠️\"></a>获取Office 2021安装包及相关激活工具🛠️</h1><h3 id=\"Office-2021-安装部署和激活方式💡\"><a href=\"#Office-2021-安装部署和激活方式💡\" class=\"headerlink\" title=\"Office 2021 安装部署和激活方式💡\"></a>Office 2021 安装部署和激活方式💡</h3><blockquote>\n<p>概述</p>\n</blockquote>\n<p>废话不多说,这里我大致搜集了几种能够免费安装<code>Office 2021</code>的方法以及激活方式,并总结出保姆级教程 如下:</p>\n<ul>\n<li><code>通过Office 2021 RTM官方镜像下载与安装激活Office 2021</code></li>\n<li><code>Office Tool Plus部署和安装 Office 2021 和 Office 365</code></li>\n<li><code>通过Microsoft 365 订阅会员的方式白嫖Office 365</code></li>\n</ul>\n<p>以上方式以<code>win10系统</code>为例, 任选一种都可以,简单通俗 无脑易懂, 现在就开始吧!</p>\n<h4 id=\"方式一-Office-2021-RTM官方镜像下载与安装激活🔥\"><a href=\"#方式一-Office-2021-RTM官方镜像下载与安装激活🔥\" class=\"headerlink\" title=\"方式一 Office 2021 RTM官方镜像下载与安装激活🔥\"></a>方式一 Office 2021 RTM官方镜像下载与安装激活🔥</h4><p>这是微软官方发布的<code>Office 2021 RTM专业增强零售版</code></p>\n<p>由于微软目前发布的版本只有<code>Office 2021英文版</code>，因此如果想要切换为<code>Office 2021中文版</code>则需要再次手动安装中文语言包</p>\n<p>在后台回复关键字<code>【 office 】</code> 即可立即免费获取<code>Office 2021 RTM专业增强零售版+中文语言包+激活工具</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGZ41pLibUGoYBAIMnTY5Quaw82Gp38sNNdZUibdHoZeu0hgDica9q0cV9A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"安装-Office-2021-RTM-专业增强零售版\"><a href=\"#安装-Office-2021-RTM-专业增强零售版\" class=\"headerlink\" title=\"安装 Office 2021 RTM 专业增强零售版\"></a>安装 Office 2021 RTM 专业增强零售版</h5><p>下载好了之后会得到两个文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如下图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9uzBb5MptUdjiamgWFWFrFiablkXgoZAvNkQ9zFuyCE4LJ46tcYSmc2Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后解压缩<code>Office 2021 RTM 安装包</code>, 点击其中的<code>Setup</code>开始安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如下图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLyLr5Zq1s602oErsDWryLWB3u3KIDRdjIH2jaJF3RJYOOFQKhiaXOsw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后稍等片刻….</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGYsr79BjTfvaUl83r5uY6xt5MIrU7Uo8qXGrzXJA3CoMymbga43ajdQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>就开始自动安装了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小提示: 由于零售版采用自动默认安装方式，因此安装时不会出现组件选择和安装位置选择的步骤。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGgfpT8G8ibVp0SB7cFkF6gNeW4mOicKEJegnc5WcbSQ3Dz7ur2Xy3wPSw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>等待滚动条走动完毕之后，<code>Office 2021 RTM专业增强零售版</code>就算安装好了</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9p3ApiaEKe6RGKEZo8g1lNaJqqlJS5ibGPo7X69T1gcCsRc6fEePI6zA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后接下来就是最后一步安装中文语言包,否则就是英文版的。同样我们直接运行<code>中文语言安装包</code>文件就可以了!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGXENdWAhbmAMbey2AfO5xCf9ib6iaeW1GXAuNrtM7HJQo3tqOW36PgqaQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>稍等片刻..</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGEWiaPHwstUDzQOgL91kPFtiaSapIrDj159K63AOR641hTibqIMjWnE2kw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>完成中文汉化安装</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGrZFzbwWnpdbsiaNOADGicpZSOcreZPBhtpbQcicldzN29IhxiaChudC3kg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"激活-Office-2021\"><a href=\"#激活-Office-2021\" class=\"headerlink\" title=\"激活 Office 2021\"></a>激活 Office 2021</h5><p>当安装好了<code>Office 2021</code>之后选择还不能使用，因为你还没有购买, 那么接下来就教大家如何免费的来激活<code>Office 2021</code></p>\n<p>那么针对<code>Office</code>除了购买正版密钥永久激活外， 这里我个人推荐如下激活方式:</p>\n<ul>\n<li><code>HEU KMS Activator</code></li>\n</ul>\n<h6 id=\"HEU-KMS-Activator-介绍🧶\"><a href=\"#HEU-KMS-Activator-介绍🧶\" class=\"headerlink\" title=\"HEU KMS Activator 介绍🧶\"></a>HEU KMS Activator 介绍🧶</h6><p>这里简单的介绍一下</p>\n<p><code>HEU KMS Activator</code> 是基于MDL论坛的KMS 服务端模拟环境<code>KMS Server Emulator</code>而制作的一款简洁高效的 KMS 激活工具, 可激活所有受支持的<code>WIndows和Office</code>，无需联网即可一键激活，离线全自动激活软件!</p>\n<p>总的来说它是我个人觉得目前国内开发者制作的一款最全能激活工具，<code>绿色、无毒，纯净，无广告</code>, 口碑也很好!</p>\n<p>无论是 <code>Windows</code> 还是 <code>Office</code> 都可轻易进行激活</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用方法</span><br></pre></td></tr></table></figure>\n\n\n\n<p>还有你的<code>Office</code>是不是动不动就提示<code>许可证有问题</code>呢<code>HEU KMS Activator</code>还可以帮助你完美解决<code>Office许可证</code>的问题, 真的是一劳永逸!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGiaUCjc8tq9kMnCRknCXUGmsDLJrrLwltESBIRtGiaz7zGjKjbfAwDFibA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>哈哈哈哈 别怪我没提醒你 这工具真强大!😁</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGJ0UenuqIPEzSDpxY98cohOVAteyRAick2zC22tJqwdwreXEF6yxSyvg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"完成-Office-2021-RTM的安装\"><a href=\"#完成-Office-2021-RTM的安装\" class=\"headerlink\" title=\"完成 Office 2021 RTM的安装\"></a>完成 Office 2021 RTM的安装</h5><p>现在我们就可以开心的使用<code>Office 2021</code>啦! 搞起来😄</p>\n<p><code>Office 2021</code>打开界面如下图所示</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSmGFrsgKr3RoUPiaJHNciamBaGzJmoKR7toqa9ZKa69YJNuK3NwQYJYQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<hr>\n<h4 id=\"方式二-Office-Tool-Plus部署和安装-Office-2021🔥\"><a href=\"#方式二-Office-Tool-Plus部署和安装-Office-2021🔥\" class=\"headerlink\" title=\"方式二 Office Tool Plus部署和安装 Office 2021🔥\"></a>方式二 Office Tool Plus部署和安装 Office 2021🔥</h4><blockquote>\n<p>概述</p>\n</blockquote>\n<p><code>Office Tool Plus</code>（简称OTP）是一款微软<code>Office</code>办公软件<code>下载、安装、管理</code>的部署工具。它可以快速自定义部署，在线下载安装 <code>Office</code> 产品的各个版本，也可以通过已有的离线安装文件来部署Office镜像，同时在安装过程中你可以自由选择安装哪些需要使用的组件， 在安装之后也可以单独来安装某个需要的组件。</p>\n<p>简单的说<code>Office Tool Plus</code>是基于 <code>Office</code> 的部署工具,可以很轻松地部署 <code>Office</code>。</p>\n<p><code>Office Tool Plus</code> 支持多个 Office 许可版本的部署，用户只需几步配置即可开始<code>下载、安装</code>。同时为有需要的用户开设了多种安装选项，安装 <code>Office</code> 就是如此简单</p>\n<p><code>Office Tool Plus</code> 可以为您安装密钥或者配置 KMS 服务。同时高级管理可以让您轻松管理 Office 的授权配置,同时它内部也包含激活方式!</p>\n<p>总的来说<code>Office Tool Plus</code>就是免费不要钱的<code>Office</code>安装工具!</p>\n<p>Office Tool Plus 官方下载地址</p>\n<p><a href=\"https://otp.landian.vip/zh-cn/\">https://otp.landian.vip/zh-cn/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGFfsTFqoG27ic3ZLzicqeGHy6hcW8fD3mAXib9ibtq0e8NdpsIB6WcZqNRA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"下载-Office-Tool-Plus\"><a href=\"#下载-Office-Tool-Plus\" class=\"headerlink\" title=\"下载 Office Tool Plus\"></a>下载 Office Tool Plus</h5><ol>\n<li><p>你可以到<code>Office Tool Plus官网</code>上去下载<code>Office Tool Plus部署工具</code></p>\n</li>\n<li><p>也可以在<code>微信公众号</code>后台回复关键字<code>【 office 】</code> 直达传送门, 也可立即免费获取<code>Office Tool Plus</code></p>\n<p><code>如图</code></p>\n</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGto8PQcJK6DGOEGPrgfJrCwYAtgnFXo8j56NR4MlNeibZhxEEkzKSS0Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"使用-Office-Tool-Plus-部署Office-2021-LTSC专业增强版🔥\"><a href=\"#使用-Office-Tool-Plus-部署Office-2021-LTSC专业增强版🔥\" class=\"headerlink\" title=\"使用 Office Tool Plus 部署Office 2021 LTSC专业增强版🔥\"></a>使用 Office Tool Plus 部署Office 2021 LTSC专业增强版🔥</h5><h6 id=\"开始部署\"><a href=\"#开始部署\" class=\"headerlink\" title=\"开始部署\"></a>开始部署</h6><p>把下载的<code>Office Tool Plus 部署工具</code>压缩包解压后，会得到如下文件, 然后点击<code>Office Tool Plus</code>开始部署<code>Office</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGbibVIHQHX4WeVt1rUANK6YLzfqBfAp57Az8dxQGian2UIaU0311mwvDg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">温馨提示: 如果你的电脑中有其他版本的Office,建议使用这里的工具箱 先卸载掉</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGuvuyqxPdmqlbhhibaPaKRz5pmumuKGcFSsTEPbNLfqw34IKAOttodSw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>选择移除,然后点击开始即可删除电脑中的<code>Office</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGn8XPsqjGNGNE3VPAVRuy4TQxBJzfLYEwoaxf0uM077ia6u4Cz9csrkw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清除许可证</span><br></pre></td></tr></table></figure>\n\n<p>这里你也必须使用<code>Office Tool Plus</code>部署工具清除一下之前所安装的<code>许可证</code></p>\n<p>方法很简单在<code>Office Tool Plus</code>中打开<code>激活</code>选择里面的<code>许可证管理</code>然后再选择<code>清除激活状态</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKI5CuZONUxEqFOWFCMDazQ0vdmhBPfndn0qKCBdhB4cK1Qc9TfoGEA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>继续点击 <code>是</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGVUOdUbWbqUGJNic1KwkX4d6CMYjyazsTstxsQG81JEvL7116eWib2FgQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>这样才能完整的清除掉之前所安装的<code>许可证</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGkwUbaB4S6pIRQncvTSgAHwvS8rdX4tpmvlWs5XoYGfp8vEiaEyA9xeA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>所以在移除之前的<code>Office</code>版本后一定记住要做这一步!</p>\n<p>接下来确认电脑中没有任何其他版本的<code>Office</code>之后，我们就可以点击<code>部署</code>按钮开始部署了</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGDaIrsbOYCxjxl78A3j6KCv93SfnwybSaDml2F6Dv8k4xr4T3luUW9Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h6 id=\"Office-Tool-Plus部署安装-Office-2021-LTSC专业增强版\"><a href=\"#Office-Tool-Plus部署安装-Office-2021-LTSC专业增强版\" class=\"headerlink\" title=\"Office Tool Plus部署安装 Office 2021 LTSC专业增强版\"></a>Office Tool Plus部署安装 Office 2021 LTSC专业增强版</h6><p>在<code>部署设置</code>这一项你可以根据我的个人设置进行<code>基础设置、高级设置、部署设置</code>就可以了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如下图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGmBmw4iaHohrzTv5jCb7ibKSOKQF5LHxy6arVANSbjcNyBdUkicYsc5bJw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>设置好了之后直接点击 <code>开始部署</code> 就可以下载相关文件和自动安装<code>Office 2021</code>了!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGuTE5gibx5nYkxV2P81lwhUDkOckQibucbBdeU1hCyCUcqMX4LIvpACCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">温馨提示: 推荐选择office 2021 LTSC 专业增强版本批量许可证, 其他版本可能安装出错或不容易激活,慎重考虑</span><br></pre></td></tr></table></figure>\n\n<p>这里科普一下 <code>office 2021 LTSC</code>是什么版</p>\n<p><code>office 2021 LTSC</code>版是一种面向长期服务的永久版<code>Office</code>，并且不会有微软不断推送的更新，主要适用于限制联网的设备，生产车间设备或者没有条件联网的设备, 当然个人以及家用也是完全可以的!</p>\n<p>点击开始<code>部署按钮</code>之后,<code>Office Tool Plus</code>会自动安装软件, 在这个过程中会自动联网下载并完成<code>Office</code>的安装, 这个过程根据上网速度的不同所需要的时间也不同 ，所以稍等一下即可!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小提示: 由于零售版采用自动默认安装方式，因此安装时不会出现组件选择和安装位置选择的步骤。</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG4JTyC65hvfxeXr90lrNf7ZO5MGDlscI7Q2ISKCTbdibBm7Q2cxq3eicA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>完成安装!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSP1ArK45ictW1OLWCVuezVNTYD1Muh1z0XasnAR2TW6s1ly6HLWibKtw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h6 id=\"Office-Tool-Plus-激活Office-2021-LTSC专业增强版\"><a href=\"#Office-Tool-Plus-激活Office-2021-LTSC专业增强版\" class=\"headerlink\" title=\"Office Tool Plus 激活Office 2021 LTSC专业增强版\"></a>Office Tool Plus 激活Office 2021 LTSC专业增强版</h6><p>安装完成之后，就可以返回到<code>Office Tool Plus</code>主界面,再点选<code>激活</code>按钮!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG1C4NCvJibTyPv2mKez68w6x9dVsMl3KwgCtYv76ictnew3JpLZ0NJibPw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">激活配置</span><br></pre></td></tr></table></figure>\n\n<p>然后根据下图进行<code>激活配置</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGqjkNKxibX1hict8AVcrtOw7a5s4qBycP4xQAMb314Tfial2ibtBAAPmv1g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>开始自动安装许可证!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGhgeliaIcIFqDPVYgicTEcicljEDcOYcqDm7j2HN0Y21e0AatDpibiaiaQ32Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KMS服务器配置</span><br></pre></td></tr></table></figure>\n\n<p>然后点击<code>KMS管理</code>, 在<code>KMS主机</code>一栏中填写 kms.loli.best, 然后点击保存设置，最后点击<code>激活</code>按钮!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKzXlzictbWJ8blOpGlceLtpThM6zRREibcx7uZa4qRopRpcLBtbpFjicQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>最后你会看到<code> 产品激活成功</code>的字样!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGAC1wRawakXCqsyMuDCuazicPwia0x4fiaiabQicu7N5j7WCjaVnLZk21YNA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h6 id=\"完成-Office-2021-LTSC专业增强版的安装\"><a href=\"#完成-Office-2021-LTSC专业增强版的安装\" class=\"headerlink\" title=\"完成 Office 2021 LTSC专业增强版的安装\"></a>完成 Office 2021 LTSC专业增强版的安装</h6><p>现在我们又可以愉快的 开心的使用<code>Office 2021</code>啦! 搞起来😄</p>\n<p>完美激活<code>Office 2021最新版</code>之后打开界面如下图:<img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGYUiat2ZMRK1P48BqIC8OxUIiaw3f2hEEBU2IfvyH4Uu0vGLhiaWSRRycg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"使用-Office-Tool-Plus-部署-Office-365🔥\"><a href=\"#使用-Office-Tool-Plus-部署-Office-365🔥\" class=\"headerlink\" title=\"使用 Office Tool Plus 部署 Office 365🔥\"></a>使用 Office Tool Plus 部署 Office 365🔥</h5><blockquote>\n<p>概述</p>\n</blockquote>\n<p>如果你喜欢<code>Office 365</code> 也可以使用<code>Office Tool Plus</code>来进行安装和部署</p>\n<p>在这里简单的科普一下什么是<code>Office 365</code></p>\n<p><code>Office 365</code>最大的特点就是<code>在线办公，协同办公，随时同步</code>，<code>onedrive空间大</code>。这些保证了无论你在任何一台设备修改文件，都可以立刻同步到任何一台联网的设备。</p>\n<p><code>Office 365</code>还有一个特点是: 能够随时保持最新版本。</p>\n<p><code>Office 365</code>功能最强大，并且一直在更新 也就是说，微软<code>Office</code> 新推出的功能，都会第一时间在<code>Office 365</code>上更新， 注意一下目前微软官方已经把<code>Office 365</code>已更名为<code>Microsoft 365</code> 你看到的这两个其实是一个东西！</p>\n<p>当然目前微软官方的定价也让很多学生党望而却步:</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG10UQJu9lHKwDcibic9XutUMKDibEudk9BElUgvdgDYiatbibibYicy116OiaUg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>所以这里我们也可以通过<code>Office Tool Plus</code> 的方式，来完成<code>Office 365</code>的安装与激活!</p>\n<p>那么废话不多说了 我们开始部署吧!😁</p>\n<h6 id=\"Office-Tool-Plus部署与安装-Office-365\"><a href=\"#Office-Tool-Plus部署与安装-Office-365\" class=\"headerlink\" title=\"Office Tool Plus部署与安装 Office 365\"></a>Office Tool Plus部署与安装 Office 365</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装前的准备工作</span><br></pre></td></tr></table></figure>\n\n<p>之前我们就提醒过了 如果你的电脑中有其他版本的<code>Office</code>,建议使用<code>Office Tool Plus</code>的工具箱先卸载掉, 否则会出现安装失败和其他错误的情况，并且你也可以使用<code>Office Tool Plus</code>部署工具清除一下之前所安装的<code>许可证</code></p>\n<p>方法很简单在<code>Office Tool Plus</code>中打开<code>激活</code>选择里面的<code>许可证管理</code>然后再选择<code>清除激活状态</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGKI5CuZONUxEqFOWFCMDazQ0vdmhBPfndn0qKCBdhB4cK1Qc9TfoGEA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>继续点击 <code>是</code></p>\n<p>这样才能完整的清除掉之前所安装的<code>许可证</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGkwUbaB4S6pIRQncvTSgAHwvS8rdX4tpmvlWs5XoYGfp8vEiaEyA9xeA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>所以在移除之前的<code>Office</code>版本后一定记住要做这一步!</p>\n<p>那么做完准备工作之后，我们就可以在<code>Office Tool Plus</code>主界面点击<code>部署</code>之后开始部署<code>Office 365</code>了</p>\n<p>在<code>部署设置</code>这一项你也可以根据我的<code>Office 365</code>个人配置进行<code>基础设置、高级设置、部署设置</code>就可以了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG9ruNzrTRftDWEfuzdLwqvZsjibdfTvkBdYXZMmnaPrH5RpmVBsnacYg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后<code>部署配置</code>之后就可以点击 <code>部署</code>按钮了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小提示:文件开始下载，如果弹出提示 【是否校验文件】就点击 (是) 就可以了</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGia9m8lYQdDObKXFk7QWa3Ktwvog0vHZL1VMfEqhWff3iceE4Xv4kPpcA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>这个时候<code>Office Tool Plus</code>工具会自动下载<code>Office 365</code>以及<code>自动安装</code>到本地电脑上!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG2gW5oqqF62ZDx0bic5HriagKpjHMaKVwOB9WYZ8mKgmzGIse81ibwa4Jg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>稍等一会!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGSZhcOraqre5RuXhlwvHPgrWYNgKrepicIZRH7oHIBicCw6hXibChAA5qg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>安装完成!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGcu9iaD0VV5bbib8hODlYCutgAaQ427ibdyQZZTf7qbTtUsMOdqO8JXG3A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h6 id=\"Office-Tool-Plus-激活Office365\"><a href=\"#Office-Tool-Plus-激活Office365\" class=\"headerlink\" title=\"Office Tool Plus 激活Office365\"></a>Office Tool Plus 激活Office365</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">激活配置</span><br></pre></td></tr></table></figure>\n\n<p>最主要的正题来啦，<code>安装是小事 激活是大事!</code></p>\n<p>我们回到<code>Office Tool Plus</code>主界面点击<code>激活</code>按钮</p>\n<p>然后来到<code>许可证管理</code> 选择<code>Office Mondo 2016 批量许可证版</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGf1nJyI3vUphjXD4AT0XOIhnHYicDolDwibdAhAljbAgp0pmRC1vIcJzQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><code>Office Mondo 2016 批量许可证版</code>这个版本的<code>Office</code>和<code>Office 365</code>功能上是差不多的,只是名称不同而已!</p>\n<p>最后点击<code>安装许可证</code> ，再次点击<code>是</code>按钮, 就可以开始安装了!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGfLeruP3VUg1pa5SGZhrDImrbuRgaYEpnZQBibkgFTVDVbWGD08ichiacA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>安装成功后如下图:</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLFb27zUekvaWk3duqTqlyfVoRDDEHbUjUwpA7HpE0FMD72TStIPjMg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KMS服务器配置</span><br></pre></td></tr></table></figure>\n\n<p>然后点击<code>KMS管理</code>, 在<code>KMS主机</code>一栏中填写 kms.loli.beer, 然后点击保存设置，最后点击<code>激活</code>按钮!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGLibRicP96UZ71rhHEBmI17rvgqmIic5kgcicGaAMfl0iazEDpHVdAibNJUSA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>最后你会看到<code> 产品激活成功</code>的字样!</p>\n<h6 id=\"完成Office-365的安装\"><a href=\"#完成Office-365的安装\" class=\"headerlink\" title=\"完成Office 365的安装\"></a>完成Office 365的安装</h6><p>此时已经完全安装好了最新的<code>Office 365</code></p>\n<p>我们可以在激活信息里面查看到:<code>Microsoft Office Mondo 2016</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGTyx17Vt5RnVIXLwYib6ibzsA144Via6fhujicdbNqxL37EEn7Vq6wELUbg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGaq060BQZ6T4ia9YW37pfpiaxsTxzKGuNJcHzzAib0s4jhhqHCicibqjbepw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGGcuRic7iapATJAibOWibgw2O6kkqRDuXaUISysbvmOQURYWUIxJnkl7yng/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>到此所有<code>Office 365</code>的安装已完成!</p>\n<hr>\n<h4 id=\"方式三-Microsoft-365-订阅会员的方式白嫖Office-365🔥\"><a href=\"#方式三-Microsoft-365-订阅会员的方式白嫖Office-365🔥\" class=\"headerlink\" title=\"方式三 Microsoft 365 订阅会员的方式白嫖Office 365🔥\"></a>方式三 Microsoft 365 订阅会员的方式白嫖Office 365🔥</h4><blockquote>\n<p>概述</p>\n</blockquote>\n<p>这是<code>微软官方</code>让用户体验正版的<code>3个月</code>计划, 也就是说免费使用<code>Microsoft 365</code>的机会，其实说白了就是让你使用正版但是又有一定期限!</p>\n<p>这种方式需要你的<code>微软账户</code>申请并加入到<code>Microsoft 365 开发人员计划</code>中就可以了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意事项</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>这种方式是微软官方的操作过程，中途可能会使用到<code>google人机验证</code> 就是需要你会<code>魔法</code>明白<code>魔法</code>吧 就是<code>哈利波特</code>的那种魔法<code>咻咻咻.....!</code>😁</li>\n</ol>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_gif/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGPLaKlahLZdQv1Ppguv1hxmweYLdUdFMK3wnoXUia4xx4iaQsqicoibgyqA/640?wx_fmt=gif&wxfrom=5&wx_lazy=1\" alt=\"图片\"></p>\n<ol>\n<li><p>必须要准备一个<code>微软账户</code>,如果你还没有 就赶紧自行申请，申请地址如下:</p>\n<p><a href=\"https://signup.live.com/\">https://signup.live.com/</a></p>\n</li>\n</ol>\n<p>那么一切准备就绪之后就开始吧!  具体流程如下:</p>\n<h5 id=\"1-打开立即加入-Microsoft-365-开发人员计划-页面\"><a href=\"#1-打开立即加入-Microsoft-365-开发人员计划-页面\" class=\"headerlink\" title=\"1.打开立即加入 Microsoft 365 开发人员计划 页面\"></a>1.打开立即加入 Microsoft 365 开发人员计划 页面</h5><p>地址如下:</p>\n<p><a href=\"https://developer.microsoft.com/zh-cn/microsoft-365/dev-program\">https://developer.microsoft.com/zh-cn/microsoft-365/dev-program</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p>进入之后点击<code>立即加入</code> 接下来会叫你登录你的<code>微软账户</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG1wdpJ5xULxaFZibOBVsJ22iaOM0Z9rsOdIgA2ia9jZALia9hvFPw5wlW4w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"2-填写开发人员基本信息资料\"><a href=\"#2-填写开发人员基本信息资料\" class=\"headerlink\" title=\"2.填写开发人员基本信息资料\"></a>2.填写开发人员基本信息资料</h5><p>按照我给出的方式填写就可以了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">图1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGtdUrqPlmMyvdaBthlTTFrPaFALic6hib1HM63XrvSZkECphcicvbibRWHQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">图2</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">图3</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGNeSe927QcsFgEzGibI30ephrtd0KGe9W6lo2zEHu7w4G8bdomZLQabQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"3-填写E5订阅信息\"><a href=\"#3-填写E5订阅信息\" class=\"headerlink\" title=\"3.填写E5订阅信息\"></a>3.填写E5订阅信息</h5><p>填写好开发者人员信息之后就可以开始 设置<code>E5</code>订阅。</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGOvPPjHCw3cAibibfickdOZ71JE7DI0iaZhAmv9PteCbTWJPrcTk16Zbvjw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>点击<code>设置E5订阅</code>之后会弹出 <code>E5 </code>沙盒设置对话框,  选择<code>可配置沙盒</code> 然后点击下一步!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGJUicicfqzUMchKFjtuYOBv9SpZLT0liclhP3anodKgp7VggWNIJjibUXSQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>接下来就填写<code>用户名</code>和<code>域</code> 你可以随便填，这里的用户名一定不要是使用过的名称</p>\n<p>密码需要<code>同时包含大小写字母</code>和<code>数字</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意:账户和密码一定要记牢 后面会使用到!</span><br><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGbzOib6HXUP0MRoAPxdEp3OKv8ziacOwMnJuV8YRKpibINS8oicYG8fdxibQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>填写好之后点击<code>继续</code></p>\n<h5 id=\"4-手机短信验证\"><a href=\"#4-手机短信验证\" class=\"headerlink\" title=\"4.手机短信验证\"></a>4.手机短信验证</h5><p>接下来就是手机验证，输入你的手机号之后，点击<code>发送代码</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGMEHXKPsBKlz8Iwe4lmrcqGMuRaJkialGTuWEvtA6dPzBjHlLYV8LeCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>随后网页会自动加载出<code>验证码</code>输入框, 把你手机上接收到的<code>验证码</code>输入到 框中就可以点击<code>设置</code>了!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGQ4M6mQWN0ZtEibVtiaYLXQ5ztLprVqTDPtpaTF3ebRSbia6AdIcoCnA7A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小提示</span><br></pre></td></tr></table></figure>\n\n<p>如果你手机没有接收到<code>验证码</code>或者说如果点击<code>发送代码</code>没有任何反应 说明你没有通过<code>魔法</code>来获取 ,<code>魔法</code>上面已经说过了!😁</p>\n<p>最后点击设置 稍等一会…</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGQgaoxz6NXI0y2A6FSic27GdZ01atfa2wWmYcGiap52SBR8b7zFa9yXfQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"5-配置Microsoft-365-admin-center-管理者中心\"><a href=\"#5-配置Microsoft-365-admin-center-管理者中心\" class=\"headerlink\" title=\"5.配置Microsoft 365 admin center 管理者中心\"></a>5.配置Microsoft 365 admin center 管理者中心</h5><p>当<code>立即设置开发人员订阅</code>等待结束之后会跳转到<code>Microsoft 365 开发人员订阅</code>详情页面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGEB3a7RibibxMiby25myiaqWQKNMHnpm4a8sCialHicr4ic76JOrfGcBKr0lUA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后我们要配置一下<code>Microsoft 365 admin center</code>管理者中心的账户权限</p>\n<p><code>地址:</code> <a href=\"https://admin.microsoft.com/\">https://admin.microsoft.com/</a></p>\n<p>打开这个页面，这里又会叫你输入<code>微软账户</code>,这里的<code>微软账户</code>就是刚刚配置的<code>E5开发者账户</code></p>\n<p>也就是格式为: 用户名@域.onmicrosoft.com的这个账户, 密码就是之前所设置的<code>密码</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGWAXJCQzTJBRGhbrAfvgBx2XDcWw2gvdBic3aPeibhJT8cjRsehbUu47w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>进入到 <code>Microsoft 365</code>管理者中心界面, 这里按照我给出的步骤设置即可!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG6z0yeEnjBUQicFEARI9riavbFJibymt6VPvvDG0CmKcA3EJkZ8Aj0T7vA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>点击更改之后，会提示更改成功!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"6-微软官方下载Office-365\"><a href=\"#6-微软官方下载Office-365\" class=\"headerlink\" title=\"6.微软官方下载Office 365\"></a>6.微软官方下载Office 365</h5><p>最后一步就是前往<code>微软Office官方地址</code>下载安装<code>Microsoft 365</code>到电脑上就可以了</p>\n<p><code>下载地址:</code> <a href=\"http://www.office.com/\">www.office.com</a></p>\n<p>如果提示<code>登录账户</code>那么就使用刚刚注册的<code>E5开发者账户</code>来登录, 登录之后会出现如下页面:</p>\n<p>选择<code>安装Office</code>， 再选择<code>Office 365应用</code> 就可以下载官方的<code>Office 365</code>安装程序了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如图</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG2JKn7ay8bQmOiaBD5SGP9BrNyx0wyJB157v3jHvJAez0syB3DG1qgMA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>下载好了之后就直接运行<code>OfficeSetup.exe</code>执行程序开始安装了!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">网速慢的朋友可能下载不了OfficeSetup.exe,我已经把安装包放到网盘 大家自行下载就可以了</span><br></pre></td></tr></table></figure>\n\n<p>在<code>微信公众号</code>后台回复关键字<code>【 office 】</code> 直达传送门, 也可立即获取到微软官方<code>OfficeSetup.exe</code>安装包</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGL395npnczLKvDlj0bfYbTsmR4PsJEYEpn6mAME9E6wpVI4Bh2ypPLA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>开始安装</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG3DNQlcDWFSwrLSbeoWhMICiaVApLZ2OC5BZ1v2fZ844CWwfbKFc3Cjw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>自动下载和安装<code>Office 365</code> 稍等一会…</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG96hL8Hy5aEbjyW7ib7NicIQQNjb3YPsp7TJOgknoSll86yrkZXBlmBIw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>完成安装!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpGgEe47X6JbUnFe8nB07j118tCa1MmibGLpjE2GXj2ayOCNbF1vYUp8ZA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<h5 id=\"7-使用你的E5开发者账户登录Office\"><a href=\"#7-使用你的E5开发者账户登录Office\" class=\"headerlink\" title=\"7.使用你的E5开发者账户登录Office\"></a>7.使用你的E5开发者账户登录Office</h5><p>随便打开一个<code>Office</code>组件 并登录前面注册的<code>E5开发者账号</code>就可以成功激活并免费使用<code>Office 365</code>了</p>\n<p>输入<code>E5开发者账户</code></p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG4UqicsfCaxicklF5dadOhWJQYw4fcrDCwEg0mJvoIEDoic5NpYlavWicrg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入密码</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG5ZD5HvpkiaUelESZib54d70Q5frYJyfzjGj29IIBoA4qHDOO70BrL84g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>然后你的<code>Office 365</code>就可以是完整的激活状态了!</p>\n<p>我们可以在<code>Office</code>的组件账户中可以查看到<code>Microsoft 365 Apps for enterprise(企业应用程序)</code>的字样!</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/TOQE8GPv82g4KcmGesVu5kjickWDqhXpG8MdrE1ugnySnrQafXvXvQfxFXYazQfKppPmCCHM1s7h6K8bKzWu9zw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n"},{"title":"Shell的变量功能","date":"2023-08-25T09:18:58.006Z","description":null,"top_img":false,"_content":"\n## ![大标题的图示](http://cn.linux.vbird.org/image/logo.png)**Shell 的变量功能**\n\n变量是 bash 环境中非常重要的一个玩意儿，我们知道 Linux 是多人多任务的环境，每个人登陆系统都能取得一个 bash ， 每个人都能够使用 bash 下达 mail 这个命令来收受『自己』的邮件，问题是， bash 是如何得知你的邮件信箱是哪个文件？ 这就需要『变量』的帮助啦！所以，你说变量重不重要呢？底下我们将介绍重要的环境变量、变量的取用与配置等数据， 呼呼！动动脑时间又来到啰！^_^\n\n\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**什么是变量？**\n\n那么，什么是『变量』呢？简单的说，就是让某一个特定字符串代表不固定的内容就是了。举个大家在国中都会学到的数学例子， 那就是：『 y = ax + b 』这东西，在等号左边的(y)就是变量，在等号右边的(ax+b)就是变量内容。 要注意的是，左边是未知数，右边是已知数喔！ 讲的更简单一点，我们可以『用一个简单的 \"字眼\" 来取代另一个比较复杂或者是容易变动的数据』。这有什么好处啊？最大的好处就是『方便！』。\n\n\n\n------\n\n- ### 变量的可变性与方便性\n\n\n\n举例来说，我们每个账号的邮件信箱默认是以 MAIL 这个变量来进行存取的， 当 dmtsai 这个使用者登陆时，他便会取得 MAIL 这个变量，而这个变量的内容其实就是 /var/spool/mail/dmtsai， 那如果 vbird 登陆呢？他取得的 MAIL 这个变量的内容其实就是 /var/spool/mail/vbird 。 而我们使用信件读取命令 mail 来读取自己的邮件信箱时，嘿嘿，这支程序可以直接读取 MAIL 这个变量的内容， 就能够自动的分辨出属于自己的信箱信件啰！这样一来，设计程序的设计师就真的很方便的啦！\n\n![程序、变量与不同用户的关系](media/var_01.gif)\n图 2.1.1、程序、变量与不同用户的关系\n\n如上图所示，由于系统已经帮我们规划好 MAIL 这个变量，所以用户只要知道 mail 这个命令如何使用即可， mail 会主动的取用 MAIL 这个变量，就能够如上图所示的取得自己的邮件信箱了！(注意大小写，小写的 mail 是命令， 大写的 MAIL 则是变量名称喔！)\n\n那么使用变量真的比较好吗？这是当然的！想象一个例子，如果 mail 这个命令将 root 收信的邮件信箱 (mailbox) 档名为 /var/spool/mail/root 直接写入程序代码中。那么当 dmtsai 要使用 mail 时，将会取得 /var/spool/mail/root 这个文件的内容！ 不合理吧！所以你就需要帮 dmtsai 也设计一个 mail 的程序，将 /var/spool/mail/dmtsai 写死到 mail 的程序代码当中！ 天吶！那系统要有多少个 mail 命令啊？反过来说，使用变量就变的很简单了！因为你不需要更动到程序代码啊！ 只要将 MAIL 这个变量带入不同的内容即可让所有使用者透过 mail 取得自己的信件！当然简单多了！\n\n\n\n------\n\n- ### 影响 bash 环境操作的变量\n\n某些特定变量会影响到 bash 的环境喔！举例来说，我们前面已经提到过很多次的那个 PATH 变量！ 你能不能在任何目录下运行某个命令，与 PATH 这个变量有很大的关系。例如你下达 ls 这个命令时，系统就是透过 PATH 这个变量里面的内容所记录的路径顺序来搜寻命令的呢！如果在搜寻完 PATH 变量内的路径还找不到 ls 这个命令时， 就会在屏幕上显示『 command not found 』的错误信息了。\n\n如果说的学理一点，那么由于在 Linux System 下面，所有的线程都是需要一个运行码， 而就如同上面提到的，你『真正以 shell 来跟 Linux 沟通，是在正确的登陆 Linux 之后！』这个时候你就有一个 bash 的运行程序，也才可以真正的经由 bash 来跟系统沟通啰！而在进入 shell 之前，也正如同上面提到的，由于系统需要一些变量来提供他数据的存取 (或者是一些环境的配置参数值， 例如是否要显示彩色等等的) ，所以就有一些所谓的『环境变量』 需要来读入系统中了！这些环境变量例如 PATH、HOME、MAIL、SHELL 等等，都是很重要的， 为了区别与自定义变量的不同，环境变量通常以大写字符来表示呢！\n\n\n\n------\n\n- ### 脚本程序设计 (shell script) 的好帮手\n\n这些还都只是系统默认的变量的目的，如果是个人的配置方面的应用呢：例如你要写一个大型的 script 时，有些数据因为可能由于用户习惯的不同而有差异，比如说路径好了，由于该路径在 script 被使用在相当多的地方，如果下次换了一部主机，都要修改 script 里面的所有路径，那么我一定会疯掉！ 这个时候如果使用变量，而将该变量的定义写在最前面，后面相关的路径名称都以变量来取代， 嘿嘿！那么你只要修改一行就等于修改整篇 script 了！方便的很！所以，良好的程序设计师都会善用变量的定义！\n\n![变量应用于 shell script 的示意图](media/var_02.gif)\n图 2.1.2、变量应用于 shell script 的示意图\n\n最后我们就简单的对『什么是变量』作个简单定义好了： 『变量就是以一组文字或符号等，来取代一些配置或者是一串保留的数据！』， 例如：我配置了『myname』就是『VBird』，所以当你读取 myname 这个变量的时候，系统自然就会知道！哈！那就是 VBird 啦！ 那么如何『显示变量』呢？这就需要使用到 echo 这个命令啦！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**变量的取用与配置：echo, 变量配置守则, unset**\n\n说的口沫横飞的，也不知道『变量』与『变量代表的内容』有啥关系？ 那我们就将『变量』的『内容』拿出来给您瞧瞧好了。你可以利用 echo 这个命令来取用变量， 但是，变量在被取用时，前面必须要加上钱字号『 $ 』才行，举例来说，要知道 PATH 的内容，该如何是好？\n\n\n\n\n\n------\n\n- ### 变量的取用: echo\n\n```\n[root@www ~]# echo $variable [root@www ~]# echo $PATH /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin [root@www ~]# echo ${PATH} \n```\n\n变量的取用就如同上面的范例，利用 echo 就能够读出，只是需要在变量名称前面加上 $ ， 或者是以 ${变量} 的方式来取用都可以！当然啦，那个 echo 的功能可是很多的， 我们这里单纯是拿 echo 来读出变量的内容而已，更多的 echo 使用，请自行给他 man echo 吧！ ^_^\n\n例题：请在屏幕上面显示出您的环境变量 HOME 与 MAIL：答：echo $HOME 或者是 echo ${HOME} echo $MAIL 或者是 echo ${MAIL}\n\n\n\n现在我们知道了变量与变量内容之间的相关性了，好了，那么我要如何『配置』或者是『修改』 某个变量的内容啊？很简单啦！用『等号(=)』连接变量与他的内容就好啦！举例来说： 我要将 myname 这个变量名称的内容配置为 VBird ，那么：\n\n```\n[root@www ~]# echo $myname       <==这里并没有任何数据～因为这个变量尚未被配置！是空的！ [root@www ~]# myname=VBird [root@www ~]# echo $myname VBird  <==出现了！因为这个变量已经被配置了！ \n```\n\n瞧！如此一来，这个变量名称 myname 的内容就带有 VBird 这个数据啰～ 而由上面的例子当中，我们也可以知道： 在 bash 当中，当一个变量名称尚未被配置时，默认的内容是『空』的。 另外，变量在配置时，还是需要符合某些规定的，否则会配置失败喔！ 这些守则如下所示啊！\n\n\n\n\n\n------\n\n- ### 变量的配置守则\n\n1. 变量与变量内容以一个等号『=』来连结，如下所示：\n   『myname=VBird』\n\n   \n\n2. 等号两边不能直接接空格符，如下所示为错误：\n   『myname = VBird』或『myname=VBird Tsai』\n\n   \n\n3. 变量名称只能是英文字母与数字，但是开头字符不能是数字，如下为错误：\n   『2myname=VBird』\n\n   \n\n4. 变量内容若有空格符可使用双引号『\"』或单引号『'』将变量内容结合起来，但\n\n   - 双引号内的特殊字符如 $ 等，可以保有原本的特性，如下所示：\n     『var=\"lang is $LANG\"』则『echo $var』可得『lang is en_US』\n   - 单引号内的特殊字符则仅为一般字符 (纯文本)，如下所示：\n     『var='lang is $LANG'』则『echo $var』可得『lang is $LANG』\n\n5. 可用跳脱字符『 \\ 』将特殊符号(如 [Enter], $, \\, 空格符, '等)变成一般字符；\n\n   \n\n6. 在一串命令中，还需要藉由其他的命令提供的信息，可以使用反单引号『`命令`』或 『$(命令)』。特别注意，那个 ` 是键盘上方的数字键 1 左边那个按键，而不是单引号！ 例如想要取得核心版本的配置：\n   『version=$(uname -r)』再『echo $version』可得『2.6.18-128.el5』\n\n   \n\n7. 若该变量为扩增变量内容时，则可用 \"$变量名称\" 或 ${变量} 累加内容，如下所示：\n   『PATH=\"$PATH\":/home/bin』\n\n   \n\n8. 若该变量需要在其他子程序运行，则需要以 export 来使变量变成环境变量：\n   『export PATH』\n\n   \n\n9. 通常大写字符为系统默认变量，自行配置变量可以使用小写字符，方便判断 (纯粹依照使用者兴趣与嗜好) ；\n\n   \n\n10. 取消变量的方法为使用 unset ：『unset 变量名称』例如取消 myname 的配置：\n    『unset myname』\n\n底下让鸟哥举几个例子来让你试看看，就知道怎么配置好你的变量啰！\n\n```\n范例一：配置一变量 name ，且内容为 VBird\n[root@www ~]# 12name=VBird\n-bash: 12name=VBird: command not found  <==屏幕会显示错误！因为不能以数字开头！\n[root@www ~]# name = VBird            <==还是错误！因为有空白！\n[root@www ~]# name=VBird              <==OK 的啦！\n\n范例二：承上题，若变量内容为 VBird's name 呢，就是变量内容含有特殊符号时：\n[root@www ~]# name=VBird's name  \n# 单引号与双引号必须要成对，在上面的配置中仅有一个单引号，因此当你按下 enter 后，\n# 你还可以继续输入变量内容。这与我们所需要的功能不同，失败啦！\n# 记得，失败后要复原请按下 [ctrl]-c 结束！\n[root@www ~]# name=\"VBird's name\"    <==OK 的啦！\n# 命令是由左边向右找→，先遇到的引号先有用，因此如上所示，单引号会失效！\n[root@www ~]# name='VBird's name'    <==失败的啦！\n# 因为前两个单引号已成对，后面就多了一个不成对的单引号了！因此也就失败了！\n[root@www ~]# name=VBird\\'s\\ name     <==OK 的啦！\n# 利用反斜杠 (\\) 跳脱特殊字符，例如单引号与空格键，这也是 OK 的啦！\n\n范例三：我要在 PATH 这个变量当中『累加』:/home/dmtsai/bin 这个目录\n[root@www ~]# PATH=$PATH:/home/dmtsai/bin\n[root@www ~]# PATH=\"$PATH\":/home/dmtsai/bin\n[root@www ~]# PATH=${PATH}:/home/dmtsai/bin\n# 上面这三种格式在 PATH 里头的配置都是 OK 的！但是底下的例子就不见得啰！\n\n范例四：承范例三，我要将 name 的内容多出 \"yes\" 呢？\n[root@www ~]# name=$nameyes  \n# 知道了吧？如果没有双引号，那么变量成了啥？name 的内容是 $nameyes 这个变量！\n# 呵呵！我们可没有配置过 nameyes 这个变量吶！所以，应该是底下这样才对！\n[root@www ~]# name=\"$name\"yes\n[root@www ~]# name=${name}yes  <==以此例较佳！\n\n范例五：如何让我刚刚配置的 name=VBird 可以用在下个 shell 的程序？\n[root@www ~]# name=VBird\n[root@www ~]# bash        <==进入到所谓的子程序\n[root@www ~]# echo $name  <==子程序：再次的 echo 一下；\n       <==嘿嘿！并没有刚刚配置的内容喔！\n[root@www ~]# exit        <==子程序：离开这个子程序\n[root@www ~]# export name\n[root@www ~]# bash        <==进入到所谓的子程序\n[root@www ~]# echo $name  <==子程序：在此运行！\nVBird  <==看吧！出现配置值了！\n[root@www ~]# exit        <==子程序：离开这个子程序\n```\n\n什么是『子程序』呢？就是说，在我目前这个 shell 的情况下，去激活另一个新的 shell ，新的那个 shell 就是子程序啦！在一般的状态下，父程序的自定义变量是无法在子程序内使用的。但是透过 export 将变量变成环境变量后，就能够在子程序底下应用了！很不赖吧！至于程序的相关概念， 我们会在[第十七章程序管理](http://cn.linux.vbird.org/linux_basic/0440processcontrol.php)当中提到的喔！\n\n```\n范例六：如何进入到您目前核心的模块目录？ [root@www ~]# cd /lib/modules/`uname -r`/kernel [root@www ~]# cd /lib/modules/$(uname -r)/kernel \n```\n\n每个 Linux 都能够拥有多个核心版本，且几乎 distribution 的核心版本都不相同。以 CentOS 5.3 (未升级前) 为例，他的默认核心版本是 2.6.18-128.el5 ，所以核心模块目录在 /lib/modules/2.6.18-128.el5/kernel/ 内。 也由于每个 distributions 的这个值都不相同，但是我们却可以利用 uname -r 这个命令先取得版本信息。所以啰，就可以透过上面命令当中的内含命令 `uname -r` 先取得版本输出到 cd ... 那个命令当中，就能够顺利的进入目前核心的驱动程序所放置的目录啰！很方便吧！\n\n其实上面的命令可以说是作了两次动作，亦即是：\n\n1. 先进行反单引号内的动作『uname -r』并得到核心版本为 2.6.18-128.el5\n2. 将上述的结果带入原命令，故得命令为：『cd /lib/modules/2.6.18-128.el5/kernel/』\n\n```\n范例七：取消刚刚配置的 name 这个变量内容 [root@www ~]# unset name \n```\n\n根据上面的案例你可以试试看！就可以了解变量的配置啰！这个是很重要的呦！请勤加练习！ 其中，较为重要的一些特殊符号的使用啰！例如单引号、双引号、跳脱字符、钱字号、反单引号等等，底下的例题想一想吧！\n\n例题：在变量的配置当中，单引号与双引号的用途有何不同？ 答：单引号与双引号的最大不同在于双引号仍然可以保有变量的内容，但单引号内仅能是一般字符 ，而不会有特殊符号。我们以底下的例子做说明：假设您定义了一个变量， name=VBird ，现在想以 name 这个变量的内容定义出 myname 显示 VBird its me 这个内容，要如何订定呢？[root@www ~]# name=VBird [root@www ~]# echo $name VBird [root@www ~]# myname=\"$name its me\" [root@www ~]# echo $myname VBird its me [root@www ~]# myname='$name its me' [root@www ~]# echo $myname $name its me发现了吗？没错！使用了单引号的时候，那么 $name 将失去原有的变量内容，仅为一般字符的显示型态而已！这里必需要特别小心在意！\n\n\n\n例题：在命令下达的过程中，反单引号( )这个符号代表的意义为何？答：在一串命令中，在 之内的命令将会被先运行，而其运行出来的结果将做为外部的输入信息！例如 uname -r 会显示出目前的核心版本，而我们的核心版本在 /lib/modules 里面，因此，你可以先运行 uname -r 找出核心版本，然后再以『 cd 目录』到该目录下，当然也可以运行如同上面范例六的运行内容啰。  另外再举个例子，我们也知道， [locate](http://cn.linux.vbird.org/linux_basic/0220filemanager.php#locate) 命令可以列出所有的相关文件档名，但是，如果我想要知道各个文件的权限呢？举例来说，我想要知道每个 crontab 相关档名的权限：[root@www ~]# ls -l `locate crontab`如此一来，先以 locate 将文件名数据都列出来，再以 ls 命令来处理的意思啦！瞭了吗？ ^_^\n\n\n\n例题：若你有一个常去的工作目录名称为：『/cluster/server/work/taiwan_2005/003/』，如何进行该目录的简化？答：在一般的情况下，如果你想要进入上述的目录得要『cd /cluster/server/work/taiwan_2005/003/』， 以鸟哥自己的案例来说，鸟哥跑数值模式常常会配置很长的目录名称(避免忘记)，但如此一来变换目录就很麻烦。 此时，鸟哥习惯利用底下的方式来降低命令下达错误的问题：[root@www ~]# work=\"/cluster/server/work/taiwan_2005/003/\" [root@www ~]# cd $work未来我想要使用其他目录作为我的模式工作目录时，只要变更 work 这个变量即可！而这个变量又可以在 [bash 的配置文件](http://cn.linux.vbird.org/linux_basic/0320bash_2.php#settings_bashrc)中直接指定，那我每次登陆只要运行『 cd $work 』就能够去到数值模式仿真的工作目录了！是否很方便呢？ ^_^\n\n\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**环境变量的功能**\n\n环境变量可以帮我们达到很多功能～包括家目录的变换啊、提示字符的显示啊、运行文件搜寻的路径啊等等的， 还有很多很多啦！那么，既然环境变量有那么多的功能，问一下，目前我的 shell 环境中， 有多少默认的环境变量啊？我们可以利用两个命令来查阅，分别是 env 与 export 呢！\n\n\n\n\n\n------\n\n- ### 用 env 观察环境变量与常见环境变量说明\n\n```\n范例一：列出目前的 shell 环境下的所有环境变量与其内容。\n[root@www ~]# env\nHOSTNAME=www.vbird.tsai    <== 这部主机的主机名\nTERM=xterm                 <== 这个终端机使用的环境是什么类型\nSHELL=/bin/bash            <== 目前这个环境下，使用的 Shell 是哪一个程序？\nHISTSIZE=1000              <== 『记录命令的笔数』在 CentOS 默认可记录 1000 笔\nUSER=root                  <== 使用者的名称啊！\nLS_COLORS=no=00:fi=00:di=00;34:ln=00;36:pi=40;33:so=00;35:bd=40;33;01:cd=40;33;01:\nor=01;05;37;41:mi=01;05;37;41:ex=00;32:*.cmd=00;32:*.exe=00;32:*.com=00;32:*.btm=0\n0;32:*.bat=00;32:*.sh=00;32:*.csh=00;32:*.tar=00;31:*.tgz=00;31:*.arj=00;31:*.taz=\n00;31:*.lzh=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.bz=00;3\n1:*.tz=00;31:*.rpm=00;31:*.cpio=00;31:*.jpg=00;35:*.gif=00;35:*.bmp=00;35:*.xbm=00\n;35:*.xpm=00;35:*.png=00;35:*.tif=00;35: <== 一些颜色显示\nMAIL=/var/spool/mail/root  <== 这个用户所取用的 mailbox 位置\nPATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:\n/root/bin                  <== 不再多讲啊！是运行文件命令搜寻路径\nINPUTRC=/etc/inputrc       <== 与键盘按键功能有关。可以配置特殊按键！\nPWD=/root                  <== 目前用户所在的工作目录 (利用 pwd 取出！)\nLANG=en_US                 <== 这个与语系有关，底下会再介绍！\nHOME=/root                 <== 这个用户的家目录啊！\n_=/bin/env                 <== 上一次使用的命令的最后一个参数(或命令本身)\n```\n\nenv 是 environment (环境) 的简写啊，上面的例子当中，是列出来所有的环境变量。当然，如果使用 export 也会是一样的内容～ 只不过， export 还有其他额外的功能就是了，我们等一下再提这个 export 命令。 那么上面这些变量有些什么功用呢？底下我们就一个一个来分析分析！\n\n- **HOME**\n  代表用户的家目录。还记得我们可以使用 cd ~ 去到自己的家目录吗？或者利用 cd 就可以直接回到用户家目录了。那就是取用这个变量啦～ 有很多程序都可能会取用到这个变量的值！\n\n  \n\n- **SHELL**\n  告知我们，目前这个环境使用的 SHELL 是哪支程序？ Linux 默认使用 /bin/bash 的啦！\n\n  \n\n- **HISTSIZE**\n  这个与『历史命令』有关，亦即是， 我们曾经下达过的命令可以被系统记录下来，而记录的『笔数』则是由这个值来配置的。\n\n  \n\n- **MAIL**\n  当我们使用 mail 这个命令在收信时，系统会去读取的邮件信箱文件 (mailbox)。\n\n  \n\n- **PATH**\n  就是运行文件搜寻的路径啦～目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由 PATH 的变量内的目录来查询，所以，目录的顺序也是重要的喔。\n\n  \n\n- **LANG**\n  这个重要！就是语系数据啰～很多信息都会用到他， 举例来说，当我们在启动某些 perl 的程序语言文件时，他会主动的去分析语系数据文件， 如果发现有他无法解析的编码语系，可能会产生错误喔！一般来说，我们中文编码通常是 zh_TW.Big5 或者是 zh_TW.UTF-8，这两个编码偏偏不容易被解译出来，所以，有的时候，可能需要修订一下语系数据。 这部分我们会在下个小节做介绍的！\n\n  \n\n- **RANDOM**\n\n  这个玩意儿就是『随机随机数』的变量啦！目前大多数的 distributions 都会有随机数生成器，那就是\n\n   /dev/random\n\n   \n\n  这个文件。 我们可以透过这个随机数文件相关的变量 ($RANDOM) 来随机取得随机数值喔。在 BASH 的环境下，这个 RANDOM 变量的内容，介于 0~32767 之间，所以，你只要 echo $RANDOM 时，系统就会主动的随机取出一个介于 0~32767 的数值。万一我想要使用 0~9 之间的数值呢？呵呵～利用 declare 宣告数值类型， 然后这样做就可以了：\n\n  ```\n  [root@www ~]# declare -i number=$RANDOM*10/32768 ; \n  echo $number \n  8   <== 此时会随机取出 0~9 之间的数值喔！ \n  ```\n  \n  \n\n大致上是有这些环境变量啦～里面有些比较重要的参数，在底下我们都会另外进行一些说明的～\n\n\n\n\n\n------\n\n- ### 用 set 观察所有变量 (含环境变量与自定义变量)\n\nbash 可不只有环境变量喔，还有一些与 bash 操作接口有关的变量，以及用户自己定义的变量存在的。 那么这些变量如何观察呢？这个时候就得要使用 set 这个命令了。 set 除了环境变量之外， 还会将其他在 bash 内的变量通通显示出来哩！信息很多，底下鸟哥仅列出几个重要的内容：\n\n```\n[root@www ~]# set\nBASH=/bin/bash           <== bash 的主程序放置路径\nBASH_VERSINFO=([0]=\"3\" [1]=\"2\" [2]=\"25\" [3]=\"1\" [4]=\"release\" \n[5]=\"i686-redhat-linux-gnu\")      <== bash 的版本啊！\nBASH_VERSION='3.2.25(1)-release'  <== 也是 bash 的版本啊！\nCOLORS=/etc/DIR_COLORS.xterm      <== 使用的颜色纪录文件\nCOLUMNS=115              <== 在目前的终端机环境下，使用的字段有几个字符长度\nHISTFILE=/root/.bash_history      <== 历史命令记录的放置文件，隐藏档\nHISTFILESIZE=1000        <== 存起来(与上个变量有关)的文件之命令的最大纪录笔数。\nHISTSIZE=1000            <== 目前环境下，可记录的历史命令最大笔数。\nHOSTTYPE=i686            <== 主机安装的软件主要类型。我们用的是 i686 兼容机器软件\nIFS=$' \\t\\n'             <== 默认的分隔符\nLINES=35                 <== 目前的终端机下的最大行数\nMACHTYPE=i686-redhat-linux-gnu    <== 安装的机器类型\nMAILCHECK=60             <== 与邮件有关。每 60 秒去扫瞄一次信箱有无新信！\nOLDPWD=/home             <== 上个工作目录。我们可以用 cd - 来取用这个变量。\nOSTYPE=linux-gnu         <== 操作系统的类型！\nPPID=20025               <== 父程序的 PID (会在后续章节才介绍)\nPS1='[\\u@\\h \\W]\\$ '      <== PS1 就厉害了。这个是命令提示字符，也就是我们常见的\n                             [root@www ~]# 或 [dmtsai ~]$ 的配置值啦！可以更动的！\nPS2='> '                 <== 如果你使用跳脱符号 (\\) 第二行以后的提示字符也\nname=VBird               <== 刚刚配置的自定义变量也可以被列出来喔！\n$                        <== 目前这个 shell 所使用的 PID\n?                        <== 刚刚运行完命令的回传值。\n```\n\n一般来说，不论是否为环境变量，只要跟我们目前这个 shell 的操作接口有关的变量， 通常都会被配置为大写字符，也就是说，『基本上，在 Linux 默认的情况中，使用{大写的字母}来配置的变量一般为系统内定需要的变量』。 OK！OK！那么上头那些变量当中，有哪些是比较重要的？大概有这几个吧！\n\n- PS1\n\n  ：(提示字符的配置)\n\n  这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『\n\n  命令提示字符\n\n  』喔！ 当我们每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你自己的习惯』就好了。 你可以用 man bash (\n\n  注3\n\n  )去查询一下 PS1 的相关说明，以理解底下的一些符号意义。\n\n  - \\d ：可显示出『星期 月 日』的日期格式，如：\"Mon Feb 2\"\n  - \\H ：完整的主机名。举例来说，鸟哥的练习机为『www.vbird.tsai』\n  - \\h ：仅取主机名在第一个小数点之前的名字，如鸟哥主机则为『www』后面省略\n  - \\t ：显示时间，为 24 小时格式的『HH:MM:SS』\n  - \\T ：显示时间，为 12 小时格式的『HH:MM:SS』\n  - \\A ：显示时间，为 24 小时格式的『HH:MM』\n  - \\@ ：显示时间，为 12 小时格式的『am/pm』样式\n  - \\u ：目前使用者的账号名称，如『root』；\n  - \\v ：BASH 的版本信息，如鸟哥的测试主板本为 3.2.25(1)，仅取『3.2』显示\n  - \\w ：完整的工作目录名称，由根目录写起的目录名称。但家目录会以 ~ 取代；\n  - \\W ：利用 basename 函数取得工作目录名称，所以仅会列出最后一个目录名。\n  - \\# ：下达的第几个命令。\n  - \\$ ：提示字符，如果是 root 时，提示字符为 # ，否则就是 $ 啰～\n\n  好了，让我们来看看 CentOS 默认的 PS1 内容吧：『[\\u@\\h \\W]\\$ 』，现在你知道那些反斜杠后的数据意义了吧？ 要注意喔！那个反斜杠后的数据为 PS1 的特殊功能，与 bash 的变量配置没关系啦！不要搞混了喔！ 那你现在知道为何你的命令提示字符是：『 [root@www ~]# 』了吧？ 好了，那么假设我想要有类似底下的提示字符：\n\n  > [root@www /home/dmtsai 16:50 #12]#\n\n  那个 # 代表第 12 次下达的命令。那么应该如何配置 PS1 呢？可以这样啊：\n\n  ```\n  [root@www ~ ]# cd /home\n  [root@www home]# PS1='[\\u@\\h \\w \\A #\\#]\\$ '\n  [root@www /home 17:02 #85]# \n  # 看到了吗？提示字符变了！变的很有趣吧！其中，那个 #85 比较有趣，\n  # 如果您再随便输入几次 ls 后，该数字就会添加喔！为啥？上面有说明滴！\n  ```\n\n  \n\n- **$**：(关于本 shell 的 PID)\n\n  钱字号本身也是个变量喔！这个咚咚代表的是『目前这个 Shell 的线程代号』，亦即是所谓的 PID (Process ID)。 更多的程序观念，我们会在第四篇的时候提及。想要知道我们的 shell 的 PID ，就可以用：『 echo $$ 』即可！出现的数字就是你的 PID 号码。\n\n  \n\n- ?\n\n  ：(关于上个运行命令的回传值)\n\n  什么？问号也是一个特殊的变量？没错！在 bash 里面这个变量可重要的很！ 这个变量是：『上一个运行的命令所回传的值』， 上面这句话的重点是『上一个命令』与『回传值』两个地方。当我们运行某些命令时， 这些命令都会回传一个运行后的代码。一般来说，如果成功的运行该命令， 则会回传一个 0 值，如果运行过程发生错误，就会回传『错误代码』才对！一般就是以非为 0 的数值来取代。 我们以底下的例子来看看：\n\n  ```\n  [root@www ~]# echo $SHELL\n  /bin/bash                                  <==可顺利显示！没有错误！\n  [root@www ~]# echo $?\n  0                                          <==因为没问题，所以回传值为 0\n  [root@www ~]# 12name=VBird\n  -bash: 12name=VBird: command not found     <==发生错误了！bash回报有问题\n  [root@www ~]# echo $?\n  127                                        <==因为有问题，回传错误代码(非为0)\n  # 错误代码回传值依据软件而有不同，我们可以利用这个代码来搜寻错误的原因喔！\n  [root@www ~]# echo $?\n  0\n  # 咦！怎么又变成正确了？这是因为 \"?\" 只与『上一个运行命令』有关，\n  # 所以，我们上一个命令是运行『 echo $? 』，当然没有错误，所以是 0 没错！\n  ```\n\n  \n\n- **OSTYPE, HOSTTYPE, MACHTYPE**：(主机硬件与核心的等级)\n\n  我们在[第零章、计算器概论内的 CPU 等级](http://cn.linux.vbird.org/linux_basic/0105computers.php#pc_cpu)说明中谈过 CPU ， 目前个人计算机的 CPU 主要分为 32/64 位，其中 32 位又可分为 i386, i586, i686，而 64 位则称为 x86_64。 由于不同等级的 CPU 命令集不太相同，因此你的软件可能会针对某些 CPU 进行优化，以求取较佳的软件性能。 所以软件就有 i386, i686 及 x86_64 之分。以目前 (2009) 的主流硬件来说，几乎都是 x86_64 的天下！ 但是毕竟旧机器还是非常多，以鸟哥的环境来说，我用 P-III 等级的计算机，所以上头就发现我的等级是 i686 啦！\n\n  要留意的是，较高阶的硬件通常会向下兼容旧有的软件，但较高阶的软件可能无法在旧机器上面安装！ 我们在[第三章](http://cn.linux.vbird.org/linux_basic/0130designlinux.php#beforeinstall_distro)就曾说明过， 这里再强调一次，你可以在 x86_64 的硬件上安装 i386 的 Linux 操作系统，但是你无法在 i686 的硬件上安装 x86_64 的 Linux 操作系统！这点得要牢记在心！\n\n  \n\n\n\n------\n\n- **export**： **自定义变量转成环境变量**\n\n谈了 env 与 set 现在知道有所谓的环境变量与自定义变量，那么这两者之间有啥差异呢？其实这两者的差异在于『 该变量是否会被子程序所继续引用』啦！唔！那么啥是父程序？子程序？ 这就得要了解一下命令的下达行为了。\n\n当你登陆 Linux 并取得一个 bash 之后，你的 bash 就是一个独立的程序，被称为 PID 的就是。 接下来你在这个 bash 底下所下达的任何命令都是由这个 bash 所衍生出来的，那些被下达的命令就被称为子程序了。 我们可以用底下的图示来简单的说明一下父程序与子程序的概念：\n\n![程序相关性示意图](media/ppid.gif)\n图 2.3.1、程序相关性示意图\n\n如上所示，我们在原本的 bash 底下运行另一个 bash ，结果操作的环境接口会跑到第二个 bash 去(就是子程序)， 那原本的 bash 就会在暂停的情况 (睡着了，就是 sleep)。整个命令运行的环境是实线的部分！若要回到原本的 bash 去， 就只有将第二个 bash 结束掉 (下达 exit 或 logout) 才行。更多的程序概念我们会在第四篇谈及，这里只要有这个概念即可。\n\n这个程序概念与变量有啥关系啊？关系可大了！因为子程序仅会继承父程序的环境变量， 子程序不会继承父程序的自定义变量啦！所以你在原本 bash 的自定义变量在进入了子程序后就会消失不见， 一直到你离开子程序并回到原本的父程序后，这个变量才会又出现！\n\n换个角度来想，也就是说，如果我能将自定义变量变成环境变量的话，那不就可以让该变量值继续存在于子程序了？ 呵呵！没错！此时，那个 export 命令就很有用啦！如你想要让该变量内容继续的在子程序中使用，那么就请运行：\n\n```\n[root@www ~]# export 变量名称 \n```\n\n这东西用在『分享自己的变量配置给后来呼叫的文件或其他程序』啦！ 像鸟哥常常在自己的主控文件后面呼叫其他附属文件(类似函式的功能)，但是主控文件与附属文件内都有相同的变量名称， 若一再重复配置时，要修改也很麻烦，此时只要在原本的第一个文件内配置好『 export 变量 』， 后面所呼叫的文件就能够使用这个变量配置了！而不需要重复配置，这非常实用于 shell script 当中喔！ 如果仅下达 export 而没有接变量时，那么此时将会把所有的『环境变量』秀出来喔！例如：\n\n```\n[root@www ~]# export declare -x HISTSIZE=\"1000\" declare -x HOME=\"/root\" declare -x HOSTNAME=\"www.vbird.tsai\" declare -x INPUTRC=\"/etc/inputrc\" declare -x LANG=\"en_US\" declare -x LOGNAME=\"root\" # 后面的鸟哥就都直接省略了！不然....浪费版面～ ^_^ \n```\n\n那如何将环境变量转成自定义变量呢？可以使用本章后续介绍的 [declare](http://cn.linux.vbird.org/linux_basic/0320bash_2.php#declare) 呢！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**影响显示结果的语系变量 (locale)**\n\n还记得我们在[第五章里面提到的语系问题](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_cmd_lang)吗？ 就是当我们使用 man command 的方式去查询某个数据的说明文件时，该说明档的内容可能会因为我们使用的语系不同而产生乱码。 另外，利用 ls 查询文件的时间时，也可能会有乱码出现在时间的部分。那个问题其实就是语系的问题啦。\n\n目前大多数的 Linux distributions 已经都是支持日渐流行的万国码了，也都支持大部分的国家语系。 这有赖于 [i18n (注4)](http://cn.linux.vbird.org/linux_basic/0320bash_2.php#ps4) 支持的帮助呢！ 那么我们的 Linux 到底支持了多少的语系呢？这可以由 locale 这个命令来查询到喔！\n\n```\n[root@www ~]# locale -a\n....(前面省略)....\nzh_TW\nzh_TW.big5     <==大五码的中文编码\nzh_TW.euctw\nzh_TW.utf8     <==万国码的中文编码\nzu_ZA\nzu_ZA.iso88591\nzu_ZA.utf8\n```\n\n正体中文语系至少支持了两种以上的编码，一种是目前还是很常见的 big5 ，另一种则是越来越热门的 utf-8 编码。 那么我们如何修订这些编码呢？其实可以透过底下这些变量的说：\n\n```\n[root@www ~]# locale  <==后面不加任何选项与参数即可！\nLANG=en_US                   <==主语言的环境\nLC_CTYPE=\"en_US\"             <==字符(文字)辨识的编码\nLC_NUMERIC=\"en_US\"           <==数字系统的显示信息\nLC_TIME=\"en_US\"              <==时间系统的显示数据\nLC_COLLATE=\"en_US\"           <==字符串的比较与排序等\nLC_MONETARY=\"en_US\"          <==币值格式的显示等\nLC_MESSAGES=\"en_US\"          <==信息显示的内容，如菜单、错误信息等\nLC_ALL=                      <==整体语系的环境\n....(后面省略)....\n```\n\n基本上，你可以逐一配置每个与语系有关的变量数据，但事实上，如果其他的语系变量都未配置， 且你有配置 LANG 或者是 LC_ALL 时，则其他的语系变量就会被这两个变量所取代！ 这也是为什么我们在 Linux 当中，通常说明仅配置 LANG 这个变量而已，因为他是最主要的配置变量！ 好了，那么你应该要觉得奇怪的是，为什么在 Linux 主机的终端机接口 (tty1 ~ tty6) 的环境下，如果配置『 LANG=zh_TW.big5 』这个配置值生效后，使用 man 或者其他信息输出时， 都会有一堆乱码，尤其是使用 ls -l 这个参数时？\n\n因为在 Linux 主机的终端机接口环境下是无法显示像中文这么复杂的编码文字， 所以就会产生乱码了。也就是如此，我们才会必须要在 tty1 ~ tty6 的环境下， 加装一些中文化接口的软件，才能够看到中文啊！不过，如果你是在 MS Windows 主机以远程联机服务器的软件联机到主机的话，那么，嘿嘿！其实文字接口确实是可以看到中文的。 此时反而你得要在 LANG 配置中文编码才好呢！\n\n你当然可以让每个使用者自己去调整自己喜好的语系，但是整体系统默认的语系定义在哪里呢？ 其实就是在 /etc/sysconfig/i18n 啰！这个文件在 CentOS 5.x 的内容有点像这样：\n\n```\n[root@www ~]# cat /etc/sysconfig/i18n \nLANG=\"zh_TW.UTF-8\" \n```\n\n因为鸟哥在[第四章的安装时](http://cn.linux.vbird.org/linux_basic/0157installcentos5.php)选择的是中文语系安装画面， 所以这个文件默认就会使用中文编码啦！你也可以自行将他改成你想要的语系编码即可。\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**变量的有效范围**\n\n什么？变量也有使用的『范围』？没错啊～我们在上头的 [export](http://cn.linux.vbird.org/linux_basic/0320bash_2.php#export) 命令说明中，就提到了这个概念了。如果在跑程序的时候，有父程序与子程序的不同程序关系时， 则『变量』可否被引用与 export 有关。被 export 后的变量，我们可以称他为『环境变量』！ 环境变量可以被子程序所引用，但是其他的自定义变量内容就不会存在于子程序中。\n\n在学理方面，为什么环境变量的数据可以被子程序所引用呢？这是因为内存配置的关系！理论上是这样的：\n\n- 当启动一个 shell，操作系统会分配一记忆区块给 shell 使用，此内存内之变量可让子程序取用\n- 若在父程序利用 export 功能，可以让自定义变量的内容写到上述的记忆区块当中(环境变量)；\n- 当加载另一个 shell 时 (亦即启动子程序，而离开原本的父程序了)，子 shell 可以将父 shell 的环境变量所在的记忆区块导入自己的环境变量区块当中。\n\n透过这样的关系，我们就可以让某些变量在相关的程序之间存在，以帮助自己更方便的操作环境喔！ 不过要提醒的是，这个『环境变量』与『bash 的操作环境』意思不太一样，举例来说， PS1 并不是环境变量， 但是这个 PS1 会影响到 bash 的接口 (提示字符嘛)！相关性要厘清喔！^_^\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**变量键盘读取、数组与宣告： read, array, declare**\n\n我们上面提到的变量配置功能，都是由命令列直接配置的，那么，可不可以让用户能够经由键盘输入？ 什么意思呢？是否记得某些程序运行的过程当中，会等待使用者输入 \"yes/no\" 之类的信息啊？ 在 bash 里面也有相对应的功能喔！此外，我们还可以宣告这个变量的属性， 例如：数组或者是数字等等的。底下就来看看吧！\n\n\n\n\n\n------\n\n- ### read\n\n要读取来自键盘输入的变量，就是用 read 这个命令了。这个命令最常被用在 shell script 的撰写当中， 想要跟使用者对谈？用这个命令就对了。关于 script 的写法，我们会在第十三章介绍，底下先来瞧一瞧 read 的相关语法吧！\n\n```\n[root@www ~]# read [-pt] variable\n选项与参数：\n-p  ：后面可以接提示字符！\n-t  ：后面可以接等待的『秒数！』这个比较有趣～不会一直等待使用者啦！\n\n范例一：让用户由键盘输入一内容，将该内容变成名为 atest 的变量\n[root@www ~]# read atest\nThis is a test        <==此时光标会等待你输入！请输入左侧文字看看\n[root@www ~]# echo $atest\nThis is a test          <==你刚刚输入的数据已经变成一个变量内容！\n\n范例二：提示使用者 30 秒内输入自己的大名，将该输入字符串作为名为 named 的变量内容\n[root@www ~]# read -p \"Please keyin your name: \" -t 30 named\nPlease keyin your name: VBird Tsai   <==注意看，会有提示字符喔！\n[root@www ~]# echo $named\nVBird Tsai        <==输入的数据又变成一个变量的内容了！\n```\n\nread 之后不加任何参数，直接加上变量名称，那么底下就会主动出现一个空白行等待你的输入(如范例一)。 如果加上 -t 后面接秒数，例如上面的范例二，那么 30 秒之内没有任何动作时， 该命令就会自动略过了～如果是加上 -p ，嘿嘿！在输入的光标前就会有比较多可以用的提示字符给我们参考！ 在命令的下达里面，比较美观啦！ ^_^\n\n\n\n\n\n------\n\n- ### declare / typeset\n\ndeclare 或 typeset 是一样的功能，就是在『宣告变量的类型』。如果使用 declare 后面并没有接任何参数，那么 bash 就会主动的将所有的变量名称与内容通通叫出来，就好像使用 set 一样啦！ 那么 declare 还有什么语法呢？看看先：\n\n```\n[root@www ~]# declare [-aixr] variable\n选项与参数：\n-a  ：将后面名为 variable 的变量定义成为数组 (array) 类型\n-i  ：将后面名为 variable 的变量定义成为整数数字 (integer) 类型\n-x  ：用法与 export 一样，就是将后面的 variable 变成环境变量；\n-r  ：将变量配置成为 readonly 类型，该变量不可被更改内容，也不能 unset\n\n范例一：让变量 sum 进行 100+300+50 的加总结果\n[root@www ~]# sum=100+300+50\n[root@www ~]# echo $sum\n100+300+50  <==咦！怎么没有帮我计算加总？因为这是文字型态的变量属性啊！\n[root@www ~]# declare -i sum=100+300+50\n[root@www ~]# echo $sum\n450         <==瞭乎？？\n```\n\n由于在默认的情况底下， bash 对于变量有几个基本的定义：\n\n- 变量类型默认为『字符串』，所以若不指定变量类型，则 1+2 为一个『字符串』而不是『计算式』。 所以上述第一个运行的结果才会出现那个情况的；\n- bash 环境中的数值运算，默认最多仅能到达整数形态，所以 1/3 结果是 0；\n\n现在你晓得为啥你需要进行变量宣告了吧？如果需要非字符串类型的变量，那就得要进行变量的宣告才行啦！ 底下继续来玩些其他的 declare 功能。\n\n```\n范例二：将 sum 变成环境变量\n[root@www ~]# declare -x sum\n[root@www ~]# export | grep sum\ndeclare -ix sum=\"450\"  <==果然出现了！包括有 i 与 x 的宣告！\n\n范例三：让 sum 变成只读属性，不可更动！\n[root@www ~]# declare -r sum\n[root@www ~]# sum=tesgting\n-bash: sum: readonly variable  <==老天爷～不能改这个变量了！\n\n范例四：让 sum 变成非环境变量的自定义变量吧！\n[root@www ~]# declare +x sum  <== 将 - 变成 + 可以进行『取消』动作\n[root@www ~]# declare -p sum  <== -p 可以单独列出变量的类型\ndeclare -ir sum=\"450\" <== 看吧！只剩下 i, r 的类型，不具有 x 啰！\n```\n\ndeclare 也是个很有用的功能～尤其是当我们需要使用到底下的数组功能时， 他也可以帮我们宣告数组的属性喔！不过，老话一句，数组也是在 shell script 比较常用的啦！ 比较有趣的是，如果你不小心将变量配置为『只读』，通常得要注销再登陆才能复原该变量的类型了！ @_@\n\n\n\n\n\n------\n\n- ### 数组 (array) 变量类型\n\n某些时候，我们必须使用数组来宣告一些变量，这有什么好处啊？在一般人的使用上， 果然是看不出来有什么好处的！不过，如果您曾经写过程序的话，那才会比较了解数组的意义～ 数组对写数值程序的设计师来说，可是不能错过学习的重点之一哩！好！不啰唆～ 那么要如何配置数组的变量与内容呢？在 bash 里头，数组的配置方式是：\n\n> var[index]=content\n\n意思是说，我有一个数组名为 var ，而这个数组的内容为 var[1]=小明， var[2]=大明， var[3]=好明 .... 等等，那个 index 就是一些数字啦，重点是用中刮号 ([ ]) 来配置的。 目前我们 bash 提供的是一维数组。老实说，如果您不必写一些复杂的程序， 那么这个数组的地方，可以先略过，等到有需要再来学习即可！因为要制作出数组， 通常与循环或者其他判断式交互使用才有比较高的存在意义！\n\n```\n范例：配置上面提到的 var[1] ～ var[3] 的变量。\n[root@www ~]# var[1]=\"small min\"\n[root@www ~]# var[2]=\"big min\"\n[root@www ~]# var[3]=\"nice min\"\n[root@www ~]# echo \"${var[1]}, ${var[2]}, ${var[3]}\"\nsmall min, big min, nice min\n```\n\n数组的变量类型比较有趣的地方在于『读取』，一般来说，建议直接以 ${数组} 的方式来读取，比较正确无误的啦！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**与文件系统及程序的限制关系： ulimit**\n\n想象一个状况：我的 Linux 主机里面同时登陆了十个人，这十个人不知怎么搞的， 同时开启了 100 个文件，每个文件的大小约 10MBytes ，请问一下， 我的 Linux 主机的内存要有多大才够？ 10*100*10 = 10000 MBytes = 10GBytes ... 老天爷，这样，系统不挂点才有鬼哩！为了要预防这个情况的发生，所以我们的 bash 是可以『限制用户的某些系统资源』的，包括可以开启的文件数量， 可以使用的 CPU 时间，可以使用的内存总量等等。如何配置？用 ulimit 吧！\n\n```\n\n[root@www ~]# ulimit [-SHacdfltu] [配额]\n选项与参数：\n-H  ：hard limit ，严格的配置，必定不能超过这个配置的数值；\n-S  ：soft limit ，警告的配置，可以超过这个配置值，但是若超过则有警告信息。\n      在配置上，通常 soft 会比 hard 小，举例来说，soft 可配置为 80 而 hard \n      配置为 100，那么你可以使用到 90 (因为没有超过 100)，但介于 80~100 之间时，\n      系统会有警告信息通知你！\n-a  ：后面不接任何选项与参数，可列出所有的限制额度；\n-c  ：当某些程序发生错误时，系统可能会将该程序在内存中的信息写成文件(除错用)，\n      这种文件就被称为核心文件(core file)。此为限制每个核心文件的最大容量。\n-f  ：此 shell 可以创建的最大文件容量(一般可能配置为 2GB)单位为 Kbytes\n-d  ：程序可使用的最大断裂内存(segment)容量；\n-l  ：可用于锁定 (lock) 的内存量\n-t  ：可使用的最大 CPU 时间 (单位为秒)\n-u  ：单一用户可以使用的最大程序(process)数量。\n\n范例一：列出你目前身份(假设为root)的所有限制数据数值\n[root@www ~]# ulimit -a\ncore file size          (blocks, -c) 0          <==只要是 0 就代表没限制\ndata seg size           (kbytes, -d) unlimited\nscheduling priority             (-e) 0\nfile size               (blocks, -f) unlimited  <==可创建的单一文件的大小\npending signals                 (-i) 11774\nmax locked memory       (kbytes, -l) 32\nmax memory size         (kbytes, -m) unlimited\nopen files                      (-n) 1024       <==同时可开启的文件数量\npipe size            (512 bytes, -p) 8\nPOSIX message queues     (bytes, -q) 819200\nreal-time priority              (-r) 0\nstack size              (kbytes, -s) 10240\ncpu time               (seconds, -t) unlimited\nmax user processes              (-u) 11774\nvirtual memory          (kbytes, -v) unlimited\nfile locks                      (-x) unlimited\n\n范例二：限制用户仅能创建 10MBytes 以下的容量的文件\n[root@www ~]# ulimit -f 10240\n[root@www ~]# ulimit -a\nfile size               (blocks, -f) 10240 <==最大量为10240Kbyes，相当10Mbytes\n[root@www ~]# dd if=/dev/zero of=123 bs=1M count=20\nFile size limit exceeded <==尝试创建 20MB 的文件，结果失败了！\n```\n\n还记得我们在[第八章 Linux 磁盘文件系统](http://cn.linux.vbird.org/linux_basic/0230filesystem.php)里面提到过，单一 filesystem 能够支持的单一文件大小与 block 的大小有关。例如 block size 为 1024 byte 时，单一文件可达 16GB 的容量。但是，我们可以用 ulimit 来限制使用者可以创建的文件大小喔！ 利用 ulimit -f 就可以来配置了！例如上面的范例二，要注意单位喔！单位是 Kbytes。 若改天你一直无法创建一个大容量的文件，记得瞧一瞧 ulimit 的信息喔！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**变量内容的删除、取代与替换**\n\n变量除了可以直接配置来修改原本的内容之外，有没有办法透过简单的动作来将变量的内容进行微调呢？ 举例来说，进行变量内容的删除、取代与替换等！是可以的！我们可以透过几个简单的小步骤来进行变量内容的微调喔！ 底下就来试试看！\n\n\n\n\n\n------\n\n- ### 变量内容的删除与取代\n\n变量的内容可以很简单的透过几个咚咚来进行删除喔！我们使用 PATH 这个变量的内容来做测试好了。 请你依序进行底下的几个例子来玩玩，比较容易感受的到鸟哥在这里想要表达的意义：\n\n```\n范例一：先让小写的 path 自定义变量配置的与 PATH 内容相同\n[root@www ~]# path=${PATH}\n[root@www ~]# echo $path\n/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n/usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n\n范例二：假设我不喜欢 kerberos，所以要将前两个目录删除掉，如何显示？\n[root@www ~]# echo ${path#/*kerberos/bin:}\n/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\n```\n\n上面这个范例很有趣的！他的重点可以用底下这张表格来说明：\n\n```\n${variable#/*kerberos/bin:}\n   上面的特殊字体部分是关键词！用在这种删除模式所必须存在的\n\n${variable#/*kerberos/bin:}\n   这就是原本的变量名称，以上面范例二来说，这里就填写 path 这个『变量名称』啦！\n\n${variable#/*kerberos/bin:}\n   这是重点！代表『从变量内容的最前面开始向右删除』，且仅删除最短的那个\n\n${variable#/*kerberos/bin:}\n   代表要被删除的部分，由于 # 代表由前面开始删除，所以这里便由开始的 / 写起。\n   需要注意的是，我们还可以透过通配符 * 来取代 0 到无穷多个任意字符\n\n   以上面范例二的结果来看， path 这个变量被删除的内容如下所示：\n/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n/usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n```\n\n很有趣吧！这样了解了 # 的功能了吗？接下来让我们来看看底下的范例三！\n\n```\n范例三：我想要删除前面所有的目录，仅保留最后一个目录\n[root@www ~]# echo ${path#/*:}\n/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:\n/root/bin     <==这两行其实是同一行啦！\n# 由于一个 # 仅删除掉最短的那个，因此他删除的情况可以用底下的删除线来看：\n# /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n# /usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n\n[root@www ~]# echo ${path##/*:}\n/root/bin\n# 嘿！多加了一个 # 变成 ## 之后，他变成『删除掉最长的那个数据』！亦即是：\n# /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n# /usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n```\n\n非常有趣！不是吗？因为在 PATH 这个变量的内容中，每个目录都是以冒号『:』隔开的， 所以要从头删除掉目录就是介于斜线 (/) 到冒号 (:) 之间的数据！但是 PATH 中不止一个冒号 (:) 啊！ 所以 # 与 ## 就分别代表：\n\n- \\# ：符合取代文字的『最短的』那一个；\n- \\##：符合取代文字的『最长的』那一个\n\n上面谈到的是『从前面开始删除变量内容』，那么如果想要『从后面向前删除变量内容』呢？ 这个时候就得使用百分比 (%) 符号了！来看看范例四怎么做吧！\n\n```\n范例四：我想要删除最后面那个目录，亦即从 : 到 bin 为止的字符串\n[root@www ~]# echo ${path%:*bin}\n/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n/usr/sbin:/usr/bin  <==注意啊！最后面一个目录不见去！\n# 这个 % 符号代表由最后面开始向前删除！所以上面得到的结果其实是来自如下：\n# /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n# /usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n\n范例五：那如果我只想要保留第一个目录呢？\n[root@www ~]# echo ${path%%:*bin}\n/usr/kerberos/sbin\n# 同样的， %% 代表的则是最长的符合字符串，所以结果其实是来自如下：\n# /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n# /usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n```\n\n由于我是想要由变量内容的后面向前面删除，而我这个变量内容最后面的结尾是『/root/bin』， 所以你可以看到上面我删除的数据最终一定是『bin』，亦即是『:*bin』那个 * 代表通配符！ 至于 % 与 %% 的意义其实与 # 及 ## 类似！这样理解否？\n\n了解了删除功能后，接下来谈谈取代吧！继续玩玩范例六啰！\n\n```\n\n范例六：将 path 的变量内容内的 sbin 取代成大写 SBIN：\n[root@www ~]# echo ${path/sbin/SBIN}\n/usr/kerberos/SBIN:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n/usr/sbin:/usr/bin:/root/bin\n# 这个部分就容易理解的多了！关键词在于那两个斜线，两斜线中间的是旧字符串\n# 后面的是新字符串，所以结果就会出现如上述的特殊字体部分啰！\n\n[root@www ~]# echo ${path//sbin/SBIN}\n/usr/kerberos/SBIN:/usr/kerberos/bin:/usr/local/SBIN:/usr/local/bin:/SBIN:/bin:\n/usr/SBIN:/usr/bin:/root/bin\n# 如果是两条斜线，那么就变成所有符合的内容都会被取代喔！\n```\n\n我们将这部份作个总结说明一下：\n\n| 变量配置方式                                         | 说明                                                         |\n| ---------------------------------------------------- | ------------------------------------------------------------ |\n| ${变量#关键词} ${变量##关键词}                       | 若变量内容从头开始的数据符合『关键词』，则将符合的最短数据删除 若变量内容从头开始的数据符合『关键词』，则将符合的最长数据删除 |\n| ${变量%关键词} ${变量%%关键词}                       | 若变量内容从尾向前的数据符合『关键词』，则将符合的最短数据删除 若变量内容从尾向前的数据符合『关键词』，则将符合的最长数据删除 |\n| ${变量/旧字符串/新字符串} ${变量//旧字符串/新字符串} | 若变量内容符合『旧字符串』则『第一个旧字符串会被新字符串取代』 若变量内容符合『旧字符串』则『全部的旧字符串会被新字符串取代』 |\n\n\n\n------\n\n- ### 变量的测试与内容替换\n\n在某些时刻我们常常需要『判断』某个变量是否存在，若变量存在则使用既有的配置，若变量不存在则给予一个常用的配置。 我们举底下的例子来说明好了，看看能不能较容易被你所理解呢！\n\n```\n范例一：测试一下是否存在 username 这个变量，若不存在则给予 username 内容为 root [root@www ~]# echo $username           <==由于出现空白，所以 username 可能不存在，也可能是空字符串 [root@www ~]# username=${username-root} [root@www ~]# echo $username root       <==因为 username 没有配置，所以主动给予名为 root 的内容。 [root@www ~]# username=\"vbird tsai\" <==主动配置 username 的内容 [root@www ~]# username=${username-root} [root@www ~]# echo $username vbird tsai <==因为 username 已经配置了，所以使用旧有的配置而不以 root 取代 \n```\n\n在上面的范例中，重点在于减号『 - 』后面接的关键词！基本上你可以这样理解：\n\n```\nnew_var=${old_var-content}   新的变量，主要用来取代旧变量。新旧变量名称其实常常是一样的 new_var=${old_var-content}   这是本范例中的关键词部分！必须要存在的哩！ new_var=${old_var-content}   旧的变量，被测试的项目！ new_var=${old_var-content}   变量的『内容』，在本范例中，这个部分是在『给予未配置变量的内容』 \n```\n\n不过这还是有点问题！因为 username 可能已经被配置为『空字符串』了！果真如此的话，那你还可以使用底下的范例来给予 username 的内容成为 root 喔！\n\n```\n范例二：若 username 未配置或为空字符串，则将 username 内容配置为 root [root@www ~]# username=\"\" [root@www ~]# username=${username-root} [root@www ~]# echo $username      <==因为 username 被配置为空字符串了！所以当然还是保留为空字符串！ [root@www ~]# username=${username:-root} [root@www ~]# echo $username root  <==加上『 : 』后若变量内容为空或者是未配置，都能够以后面的内容替换！ \n```\n\n在大括号内有没有冒号『 : 』的差别是很大的！加上冒号后，被测试的变量未被配置或者是已被配置为空字符串时， 都能够用后面的内容 (本例中是使用 root 为内容) 来替换与配置！这样可以了解了吗？除了这样的测试之外， 还有其他的测试方法喔！鸟哥将他整理如下：\n\n| **Tips:** 底下的例子当中，那个 var 与 str 为变量，我们想要针对 str 是否有配置来决定 var 的值喔！ 一般来说， str: 代表『str 没配置或为空的字符串时』；至于 str 则仅为『没有该变量』。 | ![鸟哥的图示](http://cn.linux.vbird.org/linux_basic/0320bash_files/vbird_face.gif) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n\n\n| 变量配置方式     | str 没有配置       | str 为空字符串     | str 已配置非为空字符串 |\n| ---------------- | ------------------ | ------------------ | ---------------------- |\n| var=${str-expr}  | var=expr           | var=               | var=$str               |\n| var=${str:-expr} | var=expr           | var=expr           | var=$str               |\n| var=${str+expr}  | var=               | var=expr           | var=expr               |\n| var=${str:+expr} | var=               | var=               | var=expr               |\n| var=${str=expr}  | str=expr var=expr  | str 不变 var=      | str 不变 var=$str      |\n| var=${str:=expr} | str=expr var=expr  | str=expr var=expr  | str 不变 var=$str      |\n| var=${str?expr}  | expr 输出至 stderr | var=               | var=$str               |\n| var=${str:?expr} | expr 输出至 stderr | expr 输出至 stderr | var=$str               |\n\n\n\n根据上面这张表，我们来进行几个范例的练习吧！ ^_^！首先让我们来测试一下，如果旧变量 (str) 不存在时， 我们要给予新变量一个内容，若旧变量存在则新变量内容以旧变量来替换，结果如下：\n\n```\n范例一：测试一下是否存在 username 这个变量，若不存在则给予 username 内容为 root\n[root@www ~]# echo $username\n           <==由于出现空白，所以 username 可能不存在，也可能是空字符串\n[root@www ~]# username=${username-root}\n[root@www ~]# echo $username\nroot       <==因为 username 没有配置，所以主动给予名为 root 的内容。\n[root@www ~]# username=\"vbird tsai\" <==主动配置 username 的内容\n[root@www ~]# username=${username-root}\n[root@www ~]# echo $username\nvbird tsai <==因为 username 已经配置了，所以使用旧有的配置而不以 root 取代\n```\n\n关于减号 (-) 其实上面我们谈过了！这里的测试只是要让你更加了解，这个减号的测试并不会影响到旧变量的内容。 如果你想要将旧变量内容也一起替换掉的话，那么就使用等号 (=) 吧！\n\n```\nnew_var=${old_var-content}\n   新的变量，主要用来取代旧变量。新旧变量名称其实常常是一样的\n\nnew_var=${old_var-content}\n   这是本范例中的关键词部分！必须要存在的哩！\n\nnew_var=${old_var-content}\n   旧的变量，被测试的项目！\n\nnew_var=${old_var-content}\n   变量的『内容』，在本范例中，这个部分是在『给予未配置变量的内容』\n```\n\n那如果我只是想知道，如果旧变量不存在时，整个测试就告知我『有错误』，此时就能够使用问号『 ? 』的帮忙啦！ 底下这个测试练习一下先！\n\n```\n测试：若 str 不存在时，则 var 的测试结果直接显示 \"无此变量\"\n[root@www ~]# unset str; var=${str?无此变量}\n-bash: str: 无此变量    <==因为 str 不存在，所以输出错误信息 \n\n测试：若 str 存在时，则 var 的内容会与 str 相同！\n[root@www ~]# str=\"oldvar\"; var=${str?novar}\n[root@www ~]# echo var=\"$var\", str=\"$str\"\nvar=oldvar, str=oldvar  <==因为 str 存在，所以 var 等于 str 的内容\n```\n\n基本上这种变量的测试也能够透过 shell script 内的 if...then... 来处理， 不过既然 bash 有提供这么简单的方法来测试变量，那我们也可以多学一些嘛！ 不过这种变量测试通常是在程序设计当中比较容易出现，如果这里看不懂就先略过，未来有用到判断变量值时，再回来看看吧！ ^_^","source":"_posts/Linux/Shell的变量功能.md","raw":"---\ntitle: Shell的变量功能\ndate:\ntags: \n- Linux\n- Shell\ncategories:\n- Linux\ndescription:\ntop_img: false\n---\n\n## ![大标题的图示](http://cn.linux.vbird.org/image/logo.png)**Shell 的变量功能**\n\n变量是 bash 环境中非常重要的一个玩意儿，我们知道 Linux 是多人多任务的环境，每个人登陆系统都能取得一个 bash ， 每个人都能够使用 bash 下达 mail 这个命令来收受『自己』的邮件，问题是， bash 是如何得知你的邮件信箱是哪个文件？ 这就需要『变量』的帮助啦！所以，你说变量重不重要呢？底下我们将介绍重要的环境变量、变量的取用与配置等数据， 呼呼！动动脑时间又来到啰！^_^\n\n\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**什么是变量？**\n\n那么，什么是『变量』呢？简单的说，就是让某一个特定字符串代表不固定的内容就是了。举个大家在国中都会学到的数学例子， 那就是：『 y = ax + b 』这东西，在等号左边的(y)就是变量，在等号右边的(ax+b)就是变量内容。 要注意的是，左边是未知数，右边是已知数喔！ 讲的更简单一点，我们可以『用一个简单的 \"字眼\" 来取代另一个比较复杂或者是容易变动的数据』。这有什么好处啊？最大的好处就是『方便！』。\n\n\n\n------\n\n- ### 变量的可变性与方便性\n\n\n\n举例来说，我们每个账号的邮件信箱默认是以 MAIL 这个变量来进行存取的， 当 dmtsai 这个使用者登陆时，他便会取得 MAIL 这个变量，而这个变量的内容其实就是 /var/spool/mail/dmtsai， 那如果 vbird 登陆呢？他取得的 MAIL 这个变量的内容其实就是 /var/spool/mail/vbird 。 而我们使用信件读取命令 mail 来读取自己的邮件信箱时，嘿嘿，这支程序可以直接读取 MAIL 这个变量的内容， 就能够自动的分辨出属于自己的信箱信件啰！这样一来，设计程序的设计师就真的很方便的啦！\n\n![程序、变量与不同用户的关系](media/var_01.gif)\n图 2.1.1、程序、变量与不同用户的关系\n\n如上图所示，由于系统已经帮我们规划好 MAIL 这个变量，所以用户只要知道 mail 这个命令如何使用即可， mail 会主动的取用 MAIL 这个变量，就能够如上图所示的取得自己的邮件信箱了！(注意大小写，小写的 mail 是命令， 大写的 MAIL 则是变量名称喔！)\n\n那么使用变量真的比较好吗？这是当然的！想象一个例子，如果 mail 这个命令将 root 收信的邮件信箱 (mailbox) 档名为 /var/spool/mail/root 直接写入程序代码中。那么当 dmtsai 要使用 mail 时，将会取得 /var/spool/mail/root 这个文件的内容！ 不合理吧！所以你就需要帮 dmtsai 也设计一个 mail 的程序，将 /var/spool/mail/dmtsai 写死到 mail 的程序代码当中！ 天吶！那系统要有多少个 mail 命令啊？反过来说，使用变量就变的很简单了！因为你不需要更动到程序代码啊！ 只要将 MAIL 这个变量带入不同的内容即可让所有使用者透过 mail 取得自己的信件！当然简单多了！\n\n\n\n------\n\n- ### 影响 bash 环境操作的变量\n\n某些特定变量会影响到 bash 的环境喔！举例来说，我们前面已经提到过很多次的那个 PATH 变量！ 你能不能在任何目录下运行某个命令，与 PATH 这个变量有很大的关系。例如你下达 ls 这个命令时，系统就是透过 PATH 这个变量里面的内容所记录的路径顺序来搜寻命令的呢！如果在搜寻完 PATH 变量内的路径还找不到 ls 这个命令时， 就会在屏幕上显示『 command not found 』的错误信息了。\n\n如果说的学理一点，那么由于在 Linux System 下面，所有的线程都是需要一个运行码， 而就如同上面提到的，你『真正以 shell 来跟 Linux 沟通，是在正确的登陆 Linux 之后！』这个时候你就有一个 bash 的运行程序，也才可以真正的经由 bash 来跟系统沟通啰！而在进入 shell 之前，也正如同上面提到的，由于系统需要一些变量来提供他数据的存取 (或者是一些环境的配置参数值， 例如是否要显示彩色等等的) ，所以就有一些所谓的『环境变量』 需要来读入系统中了！这些环境变量例如 PATH、HOME、MAIL、SHELL 等等，都是很重要的， 为了区别与自定义变量的不同，环境变量通常以大写字符来表示呢！\n\n\n\n------\n\n- ### 脚本程序设计 (shell script) 的好帮手\n\n这些还都只是系统默认的变量的目的，如果是个人的配置方面的应用呢：例如你要写一个大型的 script 时，有些数据因为可能由于用户习惯的不同而有差异，比如说路径好了，由于该路径在 script 被使用在相当多的地方，如果下次换了一部主机，都要修改 script 里面的所有路径，那么我一定会疯掉！ 这个时候如果使用变量，而将该变量的定义写在最前面，后面相关的路径名称都以变量来取代， 嘿嘿！那么你只要修改一行就等于修改整篇 script 了！方便的很！所以，良好的程序设计师都会善用变量的定义！\n\n![变量应用于 shell script 的示意图](media/var_02.gif)\n图 2.1.2、变量应用于 shell script 的示意图\n\n最后我们就简单的对『什么是变量』作个简单定义好了： 『变量就是以一组文字或符号等，来取代一些配置或者是一串保留的数据！』， 例如：我配置了『myname』就是『VBird』，所以当你读取 myname 这个变量的时候，系统自然就会知道！哈！那就是 VBird 啦！ 那么如何『显示变量』呢？这就需要使用到 echo 这个命令啦！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**变量的取用与配置：echo, 变量配置守则, unset**\n\n说的口沫横飞的，也不知道『变量』与『变量代表的内容』有啥关系？ 那我们就将『变量』的『内容』拿出来给您瞧瞧好了。你可以利用 echo 这个命令来取用变量， 但是，变量在被取用时，前面必须要加上钱字号『 $ 』才行，举例来说，要知道 PATH 的内容，该如何是好？\n\n\n\n\n\n------\n\n- ### 变量的取用: echo\n\n```\n[root@www ~]# echo $variable [root@www ~]# echo $PATH /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin [root@www ~]# echo ${PATH} \n```\n\n变量的取用就如同上面的范例，利用 echo 就能够读出，只是需要在变量名称前面加上 $ ， 或者是以 ${变量} 的方式来取用都可以！当然啦，那个 echo 的功能可是很多的， 我们这里单纯是拿 echo 来读出变量的内容而已，更多的 echo 使用，请自行给他 man echo 吧！ ^_^\n\n例题：请在屏幕上面显示出您的环境变量 HOME 与 MAIL：答：echo $HOME 或者是 echo ${HOME} echo $MAIL 或者是 echo ${MAIL}\n\n\n\n现在我们知道了变量与变量内容之间的相关性了，好了，那么我要如何『配置』或者是『修改』 某个变量的内容啊？很简单啦！用『等号(=)』连接变量与他的内容就好啦！举例来说： 我要将 myname 这个变量名称的内容配置为 VBird ，那么：\n\n```\n[root@www ~]# echo $myname       <==这里并没有任何数据～因为这个变量尚未被配置！是空的！ [root@www ~]# myname=VBird [root@www ~]# echo $myname VBird  <==出现了！因为这个变量已经被配置了！ \n```\n\n瞧！如此一来，这个变量名称 myname 的内容就带有 VBird 这个数据啰～ 而由上面的例子当中，我们也可以知道： 在 bash 当中，当一个变量名称尚未被配置时，默认的内容是『空』的。 另外，变量在配置时，还是需要符合某些规定的，否则会配置失败喔！ 这些守则如下所示啊！\n\n\n\n\n\n------\n\n- ### 变量的配置守则\n\n1. 变量与变量内容以一个等号『=』来连结，如下所示：\n   『myname=VBird』\n\n   \n\n2. 等号两边不能直接接空格符，如下所示为错误：\n   『myname = VBird』或『myname=VBird Tsai』\n\n   \n\n3. 变量名称只能是英文字母与数字，但是开头字符不能是数字，如下为错误：\n   『2myname=VBird』\n\n   \n\n4. 变量内容若有空格符可使用双引号『\"』或单引号『'』将变量内容结合起来，但\n\n   - 双引号内的特殊字符如 $ 等，可以保有原本的特性，如下所示：\n     『var=\"lang is $LANG\"』则『echo $var』可得『lang is en_US』\n   - 单引号内的特殊字符则仅为一般字符 (纯文本)，如下所示：\n     『var='lang is $LANG'』则『echo $var』可得『lang is $LANG』\n\n5. 可用跳脱字符『 \\ 』将特殊符号(如 [Enter], $, \\, 空格符, '等)变成一般字符；\n\n   \n\n6. 在一串命令中，还需要藉由其他的命令提供的信息，可以使用反单引号『`命令`』或 『$(命令)』。特别注意，那个 ` 是键盘上方的数字键 1 左边那个按键，而不是单引号！ 例如想要取得核心版本的配置：\n   『version=$(uname -r)』再『echo $version』可得『2.6.18-128.el5』\n\n   \n\n7. 若该变量为扩增变量内容时，则可用 \"$变量名称\" 或 ${变量} 累加内容，如下所示：\n   『PATH=\"$PATH\":/home/bin』\n\n   \n\n8. 若该变量需要在其他子程序运行，则需要以 export 来使变量变成环境变量：\n   『export PATH』\n\n   \n\n9. 通常大写字符为系统默认变量，自行配置变量可以使用小写字符，方便判断 (纯粹依照使用者兴趣与嗜好) ；\n\n   \n\n10. 取消变量的方法为使用 unset ：『unset 变量名称』例如取消 myname 的配置：\n    『unset myname』\n\n底下让鸟哥举几个例子来让你试看看，就知道怎么配置好你的变量啰！\n\n```\n范例一：配置一变量 name ，且内容为 VBird\n[root@www ~]# 12name=VBird\n-bash: 12name=VBird: command not found  <==屏幕会显示错误！因为不能以数字开头！\n[root@www ~]# name = VBird            <==还是错误！因为有空白！\n[root@www ~]# name=VBird              <==OK 的啦！\n\n范例二：承上题，若变量内容为 VBird's name 呢，就是变量内容含有特殊符号时：\n[root@www ~]# name=VBird's name  \n# 单引号与双引号必须要成对，在上面的配置中仅有一个单引号，因此当你按下 enter 后，\n# 你还可以继续输入变量内容。这与我们所需要的功能不同，失败啦！\n# 记得，失败后要复原请按下 [ctrl]-c 结束！\n[root@www ~]# name=\"VBird's name\"    <==OK 的啦！\n# 命令是由左边向右找→，先遇到的引号先有用，因此如上所示，单引号会失效！\n[root@www ~]# name='VBird's name'    <==失败的啦！\n# 因为前两个单引号已成对，后面就多了一个不成对的单引号了！因此也就失败了！\n[root@www ~]# name=VBird\\'s\\ name     <==OK 的啦！\n# 利用反斜杠 (\\) 跳脱特殊字符，例如单引号与空格键，这也是 OK 的啦！\n\n范例三：我要在 PATH 这个变量当中『累加』:/home/dmtsai/bin 这个目录\n[root@www ~]# PATH=$PATH:/home/dmtsai/bin\n[root@www ~]# PATH=\"$PATH\":/home/dmtsai/bin\n[root@www ~]# PATH=${PATH}:/home/dmtsai/bin\n# 上面这三种格式在 PATH 里头的配置都是 OK 的！但是底下的例子就不见得啰！\n\n范例四：承范例三，我要将 name 的内容多出 \"yes\" 呢？\n[root@www ~]# name=$nameyes  \n# 知道了吧？如果没有双引号，那么变量成了啥？name 的内容是 $nameyes 这个变量！\n# 呵呵！我们可没有配置过 nameyes 这个变量吶！所以，应该是底下这样才对！\n[root@www ~]# name=\"$name\"yes\n[root@www ~]# name=${name}yes  <==以此例较佳！\n\n范例五：如何让我刚刚配置的 name=VBird 可以用在下个 shell 的程序？\n[root@www ~]# name=VBird\n[root@www ~]# bash        <==进入到所谓的子程序\n[root@www ~]# echo $name  <==子程序：再次的 echo 一下；\n       <==嘿嘿！并没有刚刚配置的内容喔！\n[root@www ~]# exit        <==子程序：离开这个子程序\n[root@www ~]# export name\n[root@www ~]# bash        <==进入到所谓的子程序\n[root@www ~]# echo $name  <==子程序：在此运行！\nVBird  <==看吧！出现配置值了！\n[root@www ~]# exit        <==子程序：离开这个子程序\n```\n\n什么是『子程序』呢？就是说，在我目前这个 shell 的情况下，去激活另一个新的 shell ，新的那个 shell 就是子程序啦！在一般的状态下，父程序的自定义变量是无法在子程序内使用的。但是透过 export 将变量变成环境变量后，就能够在子程序底下应用了！很不赖吧！至于程序的相关概念， 我们会在[第十七章程序管理](http://cn.linux.vbird.org/linux_basic/0440processcontrol.php)当中提到的喔！\n\n```\n范例六：如何进入到您目前核心的模块目录？ [root@www ~]# cd /lib/modules/`uname -r`/kernel [root@www ~]# cd /lib/modules/$(uname -r)/kernel \n```\n\n每个 Linux 都能够拥有多个核心版本，且几乎 distribution 的核心版本都不相同。以 CentOS 5.3 (未升级前) 为例，他的默认核心版本是 2.6.18-128.el5 ，所以核心模块目录在 /lib/modules/2.6.18-128.el5/kernel/ 内。 也由于每个 distributions 的这个值都不相同，但是我们却可以利用 uname -r 这个命令先取得版本信息。所以啰，就可以透过上面命令当中的内含命令 `uname -r` 先取得版本输出到 cd ... 那个命令当中，就能够顺利的进入目前核心的驱动程序所放置的目录啰！很方便吧！\n\n其实上面的命令可以说是作了两次动作，亦即是：\n\n1. 先进行反单引号内的动作『uname -r』并得到核心版本为 2.6.18-128.el5\n2. 将上述的结果带入原命令，故得命令为：『cd /lib/modules/2.6.18-128.el5/kernel/』\n\n```\n范例七：取消刚刚配置的 name 这个变量内容 [root@www ~]# unset name \n```\n\n根据上面的案例你可以试试看！就可以了解变量的配置啰！这个是很重要的呦！请勤加练习！ 其中，较为重要的一些特殊符号的使用啰！例如单引号、双引号、跳脱字符、钱字号、反单引号等等，底下的例题想一想吧！\n\n例题：在变量的配置当中，单引号与双引号的用途有何不同？ 答：单引号与双引号的最大不同在于双引号仍然可以保有变量的内容，但单引号内仅能是一般字符 ，而不会有特殊符号。我们以底下的例子做说明：假设您定义了一个变量， name=VBird ，现在想以 name 这个变量的内容定义出 myname 显示 VBird its me 这个内容，要如何订定呢？[root@www ~]# name=VBird [root@www ~]# echo $name VBird [root@www ~]# myname=\"$name its me\" [root@www ~]# echo $myname VBird its me [root@www ~]# myname='$name its me' [root@www ~]# echo $myname $name its me发现了吗？没错！使用了单引号的时候，那么 $name 将失去原有的变量内容，仅为一般字符的显示型态而已！这里必需要特别小心在意！\n\n\n\n例题：在命令下达的过程中，反单引号( )这个符号代表的意义为何？答：在一串命令中，在 之内的命令将会被先运行，而其运行出来的结果将做为外部的输入信息！例如 uname -r 会显示出目前的核心版本，而我们的核心版本在 /lib/modules 里面，因此，你可以先运行 uname -r 找出核心版本，然后再以『 cd 目录』到该目录下，当然也可以运行如同上面范例六的运行内容啰。  另外再举个例子，我们也知道， [locate](http://cn.linux.vbird.org/linux_basic/0220filemanager.php#locate) 命令可以列出所有的相关文件档名，但是，如果我想要知道各个文件的权限呢？举例来说，我想要知道每个 crontab 相关档名的权限：[root@www ~]# ls -l `locate crontab`如此一来，先以 locate 将文件名数据都列出来，再以 ls 命令来处理的意思啦！瞭了吗？ ^_^\n\n\n\n例题：若你有一个常去的工作目录名称为：『/cluster/server/work/taiwan_2005/003/』，如何进行该目录的简化？答：在一般的情况下，如果你想要进入上述的目录得要『cd /cluster/server/work/taiwan_2005/003/』， 以鸟哥自己的案例来说，鸟哥跑数值模式常常会配置很长的目录名称(避免忘记)，但如此一来变换目录就很麻烦。 此时，鸟哥习惯利用底下的方式来降低命令下达错误的问题：[root@www ~]# work=\"/cluster/server/work/taiwan_2005/003/\" [root@www ~]# cd $work未来我想要使用其他目录作为我的模式工作目录时，只要变更 work 这个变量即可！而这个变量又可以在 [bash 的配置文件](http://cn.linux.vbird.org/linux_basic/0320bash_2.php#settings_bashrc)中直接指定，那我每次登陆只要运行『 cd $work 』就能够去到数值模式仿真的工作目录了！是否很方便呢？ ^_^\n\n\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**环境变量的功能**\n\n环境变量可以帮我们达到很多功能～包括家目录的变换啊、提示字符的显示啊、运行文件搜寻的路径啊等等的， 还有很多很多啦！那么，既然环境变量有那么多的功能，问一下，目前我的 shell 环境中， 有多少默认的环境变量啊？我们可以利用两个命令来查阅，分别是 env 与 export 呢！\n\n\n\n\n\n------\n\n- ### 用 env 观察环境变量与常见环境变量说明\n\n```\n范例一：列出目前的 shell 环境下的所有环境变量与其内容。\n[root@www ~]# env\nHOSTNAME=www.vbird.tsai    <== 这部主机的主机名\nTERM=xterm                 <== 这个终端机使用的环境是什么类型\nSHELL=/bin/bash            <== 目前这个环境下，使用的 Shell 是哪一个程序？\nHISTSIZE=1000              <== 『记录命令的笔数』在 CentOS 默认可记录 1000 笔\nUSER=root                  <== 使用者的名称啊！\nLS_COLORS=no=00:fi=00:di=00;34:ln=00;36:pi=40;33:so=00;35:bd=40;33;01:cd=40;33;01:\nor=01;05;37;41:mi=01;05;37;41:ex=00;32:*.cmd=00;32:*.exe=00;32:*.com=00;32:*.btm=0\n0;32:*.bat=00;32:*.sh=00;32:*.csh=00;32:*.tar=00;31:*.tgz=00;31:*.arj=00;31:*.taz=\n00;31:*.lzh=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.bz=00;3\n1:*.tz=00;31:*.rpm=00;31:*.cpio=00;31:*.jpg=00;35:*.gif=00;35:*.bmp=00;35:*.xbm=00\n;35:*.xpm=00;35:*.png=00;35:*.tif=00;35: <== 一些颜色显示\nMAIL=/var/spool/mail/root  <== 这个用户所取用的 mailbox 位置\nPATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:\n/root/bin                  <== 不再多讲啊！是运行文件命令搜寻路径\nINPUTRC=/etc/inputrc       <== 与键盘按键功能有关。可以配置特殊按键！\nPWD=/root                  <== 目前用户所在的工作目录 (利用 pwd 取出！)\nLANG=en_US                 <== 这个与语系有关，底下会再介绍！\nHOME=/root                 <== 这个用户的家目录啊！\n_=/bin/env                 <== 上一次使用的命令的最后一个参数(或命令本身)\n```\n\nenv 是 environment (环境) 的简写啊，上面的例子当中，是列出来所有的环境变量。当然，如果使用 export 也会是一样的内容～ 只不过， export 还有其他额外的功能就是了，我们等一下再提这个 export 命令。 那么上面这些变量有些什么功用呢？底下我们就一个一个来分析分析！\n\n- **HOME**\n  代表用户的家目录。还记得我们可以使用 cd ~ 去到自己的家目录吗？或者利用 cd 就可以直接回到用户家目录了。那就是取用这个变量啦～ 有很多程序都可能会取用到这个变量的值！\n\n  \n\n- **SHELL**\n  告知我们，目前这个环境使用的 SHELL 是哪支程序？ Linux 默认使用 /bin/bash 的啦！\n\n  \n\n- **HISTSIZE**\n  这个与『历史命令』有关，亦即是， 我们曾经下达过的命令可以被系统记录下来，而记录的『笔数』则是由这个值来配置的。\n\n  \n\n- **MAIL**\n  当我们使用 mail 这个命令在收信时，系统会去读取的邮件信箱文件 (mailbox)。\n\n  \n\n- **PATH**\n  就是运行文件搜寻的路径啦～目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由 PATH 的变量内的目录来查询，所以，目录的顺序也是重要的喔。\n\n  \n\n- **LANG**\n  这个重要！就是语系数据啰～很多信息都会用到他， 举例来说，当我们在启动某些 perl 的程序语言文件时，他会主动的去分析语系数据文件， 如果发现有他无法解析的编码语系，可能会产生错误喔！一般来说，我们中文编码通常是 zh_TW.Big5 或者是 zh_TW.UTF-8，这两个编码偏偏不容易被解译出来，所以，有的时候，可能需要修订一下语系数据。 这部分我们会在下个小节做介绍的！\n\n  \n\n- **RANDOM**\n\n  这个玩意儿就是『随机随机数』的变量啦！目前大多数的 distributions 都会有随机数生成器，那就是\n\n   /dev/random\n\n   \n\n  这个文件。 我们可以透过这个随机数文件相关的变量 ($RANDOM) 来随机取得随机数值喔。在 BASH 的环境下，这个 RANDOM 变量的内容，介于 0~32767 之间，所以，你只要 echo $RANDOM 时，系统就会主动的随机取出一个介于 0~32767 的数值。万一我想要使用 0~9 之间的数值呢？呵呵～利用 declare 宣告数值类型， 然后这样做就可以了：\n\n  ```\n  [root@www ~]# declare -i number=$RANDOM*10/32768 ; \n  echo $number \n  8   <== 此时会随机取出 0~9 之间的数值喔！ \n  ```\n  \n  \n\n大致上是有这些环境变量啦～里面有些比较重要的参数，在底下我们都会另外进行一些说明的～\n\n\n\n\n\n------\n\n- ### 用 set 观察所有变量 (含环境变量与自定义变量)\n\nbash 可不只有环境变量喔，还有一些与 bash 操作接口有关的变量，以及用户自己定义的变量存在的。 那么这些变量如何观察呢？这个时候就得要使用 set 这个命令了。 set 除了环境变量之外， 还会将其他在 bash 内的变量通通显示出来哩！信息很多，底下鸟哥仅列出几个重要的内容：\n\n```\n[root@www ~]# set\nBASH=/bin/bash           <== bash 的主程序放置路径\nBASH_VERSINFO=([0]=\"3\" [1]=\"2\" [2]=\"25\" [3]=\"1\" [4]=\"release\" \n[5]=\"i686-redhat-linux-gnu\")      <== bash 的版本啊！\nBASH_VERSION='3.2.25(1)-release'  <== 也是 bash 的版本啊！\nCOLORS=/etc/DIR_COLORS.xterm      <== 使用的颜色纪录文件\nCOLUMNS=115              <== 在目前的终端机环境下，使用的字段有几个字符长度\nHISTFILE=/root/.bash_history      <== 历史命令记录的放置文件，隐藏档\nHISTFILESIZE=1000        <== 存起来(与上个变量有关)的文件之命令的最大纪录笔数。\nHISTSIZE=1000            <== 目前环境下，可记录的历史命令最大笔数。\nHOSTTYPE=i686            <== 主机安装的软件主要类型。我们用的是 i686 兼容机器软件\nIFS=$' \\t\\n'             <== 默认的分隔符\nLINES=35                 <== 目前的终端机下的最大行数\nMACHTYPE=i686-redhat-linux-gnu    <== 安装的机器类型\nMAILCHECK=60             <== 与邮件有关。每 60 秒去扫瞄一次信箱有无新信！\nOLDPWD=/home             <== 上个工作目录。我们可以用 cd - 来取用这个变量。\nOSTYPE=linux-gnu         <== 操作系统的类型！\nPPID=20025               <== 父程序的 PID (会在后续章节才介绍)\nPS1='[\\u@\\h \\W]\\$ '      <== PS1 就厉害了。这个是命令提示字符，也就是我们常见的\n                             [root@www ~]# 或 [dmtsai ~]$ 的配置值啦！可以更动的！\nPS2='> '                 <== 如果你使用跳脱符号 (\\) 第二行以后的提示字符也\nname=VBird               <== 刚刚配置的自定义变量也可以被列出来喔！\n$                        <== 目前这个 shell 所使用的 PID\n?                        <== 刚刚运行完命令的回传值。\n```\n\n一般来说，不论是否为环境变量，只要跟我们目前这个 shell 的操作接口有关的变量， 通常都会被配置为大写字符，也就是说，『基本上，在 Linux 默认的情况中，使用{大写的字母}来配置的变量一般为系统内定需要的变量』。 OK！OK！那么上头那些变量当中，有哪些是比较重要的？大概有这几个吧！\n\n- PS1\n\n  ：(提示字符的配置)\n\n  这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『\n\n  命令提示字符\n\n  』喔！ 当我们每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你自己的习惯』就好了。 你可以用 man bash (\n\n  注3\n\n  )去查询一下 PS1 的相关说明，以理解底下的一些符号意义。\n\n  - \\d ：可显示出『星期 月 日』的日期格式，如：\"Mon Feb 2\"\n  - \\H ：完整的主机名。举例来说，鸟哥的练习机为『www.vbird.tsai』\n  - \\h ：仅取主机名在第一个小数点之前的名字，如鸟哥主机则为『www』后面省略\n  - \\t ：显示时间，为 24 小时格式的『HH:MM:SS』\n  - \\T ：显示时间，为 12 小时格式的『HH:MM:SS』\n  - \\A ：显示时间，为 24 小时格式的『HH:MM』\n  - \\@ ：显示时间，为 12 小时格式的『am/pm』样式\n  - \\u ：目前使用者的账号名称，如『root』；\n  - \\v ：BASH 的版本信息，如鸟哥的测试主板本为 3.2.25(1)，仅取『3.2』显示\n  - \\w ：完整的工作目录名称，由根目录写起的目录名称。但家目录会以 ~ 取代；\n  - \\W ：利用 basename 函数取得工作目录名称，所以仅会列出最后一个目录名。\n  - \\# ：下达的第几个命令。\n  - \\$ ：提示字符，如果是 root 时，提示字符为 # ，否则就是 $ 啰～\n\n  好了，让我们来看看 CentOS 默认的 PS1 内容吧：『[\\u@\\h \\W]\\$ 』，现在你知道那些反斜杠后的数据意义了吧？ 要注意喔！那个反斜杠后的数据为 PS1 的特殊功能，与 bash 的变量配置没关系啦！不要搞混了喔！ 那你现在知道为何你的命令提示字符是：『 [root@www ~]# 』了吧？ 好了，那么假设我想要有类似底下的提示字符：\n\n  > [root@www /home/dmtsai 16:50 #12]#\n\n  那个 # 代表第 12 次下达的命令。那么应该如何配置 PS1 呢？可以这样啊：\n\n  ```\n  [root@www ~ ]# cd /home\n  [root@www home]# PS1='[\\u@\\h \\w \\A #\\#]\\$ '\n  [root@www /home 17:02 #85]# \n  # 看到了吗？提示字符变了！变的很有趣吧！其中，那个 #85 比较有趣，\n  # 如果您再随便输入几次 ls 后，该数字就会添加喔！为啥？上面有说明滴！\n  ```\n\n  \n\n- **$**：(关于本 shell 的 PID)\n\n  钱字号本身也是个变量喔！这个咚咚代表的是『目前这个 Shell 的线程代号』，亦即是所谓的 PID (Process ID)。 更多的程序观念，我们会在第四篇的时候提及。想要知道我们的 shell 的 PID ，就可以用：『 echo $$ 』即可！出现的数字就是你的 PID 号码。\n\n  \n\n- ?\n\n  ：(关于上个运行命令的回传值)\n\n  什么？问号也是一个特殊的变量？没错！在 bash 里面这个变量可重要的很！ 这个变量是：『上一个运行的命令所回传的值』， 上面这句话的重点是『上一个命令』与『回传值』两个地方。当我们运行某些命令时， 这些命令都会回传一个运行后的代码。一般来说，如果成功的运行该命令， 则会回传一个 0 值，如果运行过程发生错误，就会回传『错误代码』才对！一般就是以非为 0 的数值来取代。 我们以底下的例子来看看：\n\n  ```\n  [root@www ~]# echo $SHELL\n  /bin/bash                                  <==可顺利显示！没有错误！\n  [root@www ~]# echo $?\n  0                                          <==因为没问题，所以回传值为 0\n  [root@www ~]# 12name=VBird\n  -bash: 12name=VBird: command not found     <==发生错误了！bash回报有问题\n  [root@www ~]# echo $?\n  127                                        <==因为有问题，回传错误代码(非为0)\n  # 错误代码回传值依据软件而有不同，我们可以利用这个代码来搜寻错误的原因喔！\n  [root@www ~]# echo $?\n  0\n  # 咦！怎么又变成正确了？这是因为 \"?\" 只与『上一个运行命令』有关，\n  # 所以，我们上一个命令是运行『 echo $? 』，当然没有错误，所以是 0 没错！\n  ```\n\n  \n\n- **OSTYPE, HOSTTYPE, MACHTYPE**：(主机硬件与核心的等级)\n\n  我们在[第零章、计算器概论内的 CPU 等级](http://cn.linux.vbird.org/linux_basic/0105computers.php#pc_cpu)说明中谈过 CPU ， 目前个人计算机的 CPU 主要分为 32/64 位，其中 32 位又可分为 i386, i586, i686，而 64 位则称为 x86_64。 由于不同等级的 CPU 命令集不太相同，因此你的软件可能会针对某些 CPU 进行优化，以求取较佳的软件性能。 所以软件就有 i386, i686 及 x86_64 之分。以目前 (2009) 的主流硬件来说，几乎都是 x86_64 的天下！ 但是毕竟旧机器还是非常多，以鸟哥的环境来说，我用 P-III 等级的计算机，所以上头就发现我的等级是 i686 啦！\n\n  要留意的是，较高阶的硬件通常会向下兼容旧有的软件，但较高阶的软件可能无法在旧机器上面安装！ 我们在[第三章](http://cn.linux.vbird.org/linux_basic/0130designlinux.php#beforeinstall_distro)就曾说明过， 这里再强调一次，你可以在 x86_64 的硬件上安装 i386 的 Linux 操作系统，但是你无法在 i686 的硬件上安装 x86_64 的 Linux 操作系统！这点得要牢记在心！\n\n  \n\n\n\n------\n\n- **export**： **自定义变量转成环境变量**\n\n谈了 env 与 set 现在知道有所谓的环境变量与自定义变量，那么这两者之间有啥差异呢？其实这两者的差异在于『 该变量是否会被子程序所继续引用』啦！唔！那么啥是父程序？子程序？ 这就得要了解一下命令的下达行为了。\n\n当你登陆 Linux 并取得一个 bash 之后，你的 bash 就是一个独立的程序，被称为 PID 的就是。 接下来你在这个 bash 底下所下达的任何命令都是由这个 bash 所衍生出来的，那些被下达的命令就被称为子程序了。 我们可以用底下的图示来简单的说明一下父程序与子程序的概念：\n\n![程序相关性示意图](media/ppid.gif)\n图 2.3.1、程序相关性示意图\n\n如上所示，我们在原本的 bash 底下运行另一个 bash ，结果操作的环境接口会跑到第二个 bash 去(就是子程序)， 那原本的 bash 就会在暂停的情况 (睡着了，就是 sleep)。整个命令运行的环境是实线的部分！若要回到原本的 bash 去， 就只有将第二个 bash 结束掉 (下达 exit 或 logout) 才行。更多的程序概念我们会在第四篇谈及，这里只要有这个概念即可。\n\n这个程序概念与变量有啥关系啊？关系可大了！因为子程序仅会继承父程序的环境变量， 子程序不会继承父程序的自定义变量啦！所以你在原本 bash 的自定义变量在进入了子程序后就会消失不见， 一直到你离开子程序并回到原本的父程序后，这个变量才会又出现！\n\n换个角度来想，也就是说，如果我能将自定义变量变成环境变量的话，那不就可以让该变量值继续存在于子程序了？ 呵呵！没错！此时，那个 export 命令就很有用啦！如你想要让该变量内容继续的在子程序中使用，那么就请运行：\n\n```\n[root@www ~]# export 变量名称 \n```\n\n这东西用在『分享自己的变量配置给后来呼叫的文件或其他程序』啦！ 像鸟哥常常在自己的主控文件后面呼叫其他附属文件(类似函式的功能)，但是主控文件与附属文件内都有相同的变量名称， 若一再重复配置时，要修改也很麻烦，此时只要在原本的第一个文件内配置好『 export 变量 』， 后面所呼叫的文件就能够使用这个变量配置了！而不需要重复配置，这非常实用于 shell script 当中喔！ 如果仅下达 export 而没有接变量时，那么此时将会把所有的『环境变量』秀出来喔！例如：\n\n```\n[root@www ~]# export declare -x HISTSIZE=\"1000\" declare -x HOME=\"/root\" declare -x HOSTNAME=\"www.vbird.tsai\" declare -x INPUTRC=\"/etc/inputrc\" declare -x LANG=\"en_US\" declare -x LOGNAME=\"root\" # 后面的鸟哥就都直接省略了！不然....浪费版面～ ^_^ \n```\n\n那如何将环境变量转成自定义变量呢？可以使用本章后续介绍的 [declare](http://cn.linux.vbird.org/linux_basic/0320bash_2.php#declare) 呢！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**影响显示结果的语系变量 (locale)**\n\n还记得我们在[第五章里面提到的语系问题](http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_cmd_lang)吗？ 就是当我们使用 man command 的方式去查询某个数据的说明文件时，该说明档的内容可能会因为我们使用的语系不同而产生乱码。 另外，利用 ls 查询文件的时间时，也可能会有乱码出现在时间的部分。那个问题其实就是语系的问题啦。\n\n目前大多数的 Linux distributions 已经都是支持日渐流行的万国码了，也都支持大部分的国家语系。 这有赖于 [i18n (注4)](http://cn.linux.vbird.org/linux_basic/0320bash_2.php#ps4) 支持的帮助呢！ 那么我们的 Linux 到底支持了多少的语系呢？这可以由 locale 这个命令来查询到喔！\n\n```\n[root@www ~]# locale -a\n....(前面省略)....\nzh_TW\nzh_TW.big5     <==大五码的中文编码\nzh_TW.euctw\nzh_TW.utf8     <==万国码的中文编码\nzu_ZA\nzu_ZA.iso88591\nzu_ZA.utf8\n```\n\n正体中文语系至少支持了两种以上的编码，一种是目前还是很常见的 big5 ，另一种则是越来越热门的 utf-8 编码。 那么我们如何修订这些编码呢？其实可以透过底下这些变量的说：\n\n```\n[root@www ~]# locale  <==后面不加任何选项与参数即可！\nLANG=en_US                   <==主语言的环境\nLC_CTYPE=\"en_US\"             <==字符(文字)辨识的编码\nLC_NUMERIC=\"en_US\"           <==数字系统的显示信息\nLC_TIME=\"en_US\"              <==时间系统的显示数据\nLC_COLLATE=\"en_US\"           <==字符串的比较与排序等\nLC_MONETARY=\"en_US\"          <==币值格式的显示等\nLC_MESSAGES=\"en_US\"          <==信息显示的内容，如菜单、错误信息等\nLC_ALL=                      <==整体语系的环境\n....(后面省略)....\n```\n\n基本上，你可以逐一配置每个与语系有关的变量数据，但事实上，如果其他的语系变量都未配置， 且你有配置 LANG 或者是 LC_ALL 时，则其他的语系变量就会被这两个变量所取代！ 这也是为什么我们在 Linux 当中，通常说明仅配置 LANG 这个变量而已，因为他是最主要的配置变量！ 好了，那么你应该要觉得奇怪的是，为什么在 Linux 主机的终端机接口 (tty1 ~ tty6) 的环境下，如果配置『 LANG=zh_TW.big5 』这个配置值生效后，使用 man 或者其他信息输出时， 都会有一堆乱码，尤其是使用 ls -l 这个参数时？\n\n因为在 Linux 主机的终端机接口环境下是无法显示像中文这么复杂的编码文字， 所以就会产生乱码了。也就是如此，我们才会必须要在 tty1 ~ tty6 的环境下， 加装一些中文化接口的软件，才能够看到中文啊！不过，如果你是在 MS Windows 主机以远程联机服务器的软件联机到主机的话，那么，嘿嘿！其实文字接口确实是可以看到中文的。 此时反而你得要在 LANG 配置中文编码才好呢！\n\n你当然可以让每个使用者自己去调整自己喜好的语系，但是整体系统默认的语系定义在哪里呢？ 其实就是在 /etc/sysconfig/i18n 啰！这个文件在 CentOS 5.x 的内容有点像这样：\n\n```\n[root@www ~]# cat /etc/sysconfig/i18n \nLANG=\"zh_TW.UTF-8\" \n```\n\n因为鸟哥在[第四章的安装时](http://cn.linux.vbird.org/linux_basic/0157installcentos5.php)选择的是中文语系安装画面， 所以这个文件默认就会使用中文编码啦！你也可以自行将他改成你想要的语系编码即可。\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**变量的有效范围**\n\n什么？变量也有使用的『范围』？没错啊～我们在上头的 [export](http://cn.linux.vbird.org/linux_basic/0320bash_2.php#export) 命令说明中，就提到了这个概念了。如果在跑程序的时候，有父程序与子程序的不同程序关系时， 则『变量』可否被引用与 export 有关。被 export 后的变量，我们可以称他为『环境变量』！ 环境变量可以被子程序所引用，但是其他的自定义变量内容就不会存在于子程序中。\n\n在学理方面，为什么环境变量的数据可以被子程序所引用呢？这是因为内存配置的关系！理论上是这样的：\n\n- 当启动一个 shell，操作系统会分配一记忆区块给 shell 使用，此内存内之变量可让子程序取用\n- 若在父程序利用 export 功能，可以让自定义变量的内容写到上述的记忆区块当中(环境变量)；\n- 当加载另一个 shell 时 (亦即启动子程序，而离开原本的父程序了)，子 shell 可以将父 shell 的环境变量所在的记忆区块导入自己的环境变量区块当中。\n\n透过这样的关系，我们就可以让某些变量在相关的程序之间存在，以帮助自己更方便的操作环境喔！ 不过要提醒的是，这个『环境变量』与『bash 的操作环境』意思不太一样，举例来说， PS1 并不是环境变量， 但是这个 PS1 会影响到 bash 的接口 (提示字符嘛)！相关性要厘清喔！^_^\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**变量键盘读取、数组与宣告： read, array, declare**\n\n我们上面提到的变量配置功能，都是由命令列直接配置的，那么，可不可以让用户能够经由键盘输入？ 什么意思呢？是否记得某些程序运行的过程当中，会等待使用者输入 \"yes/no\" 之类的信息啊？ 在 bash 里面也有相对应的功能喔！此外，我们还可以宣告这个变量的属性， 例如：数组或者是数字等等的。底下就来看看吧！\n\n\n\n\n\n------\n\n- ### read\n\n要读取来自键盘输入的变量，就是用 read 这个命令了。这个命令最常被用在 shell script 的撰写当中， 想要跟使用者对谈？用这个命令就对了。关于 script 的写法，我们会在第十三章介绍，底下先来瞧一瞧 read 的相关语法吧！\n\n```\n[root@www ~]# read [-pt] variable\n选项与参数：\n-p  ：后面可以接提示字符！\n-t  ：后面可以接等待的『秒数！』这个比较有趣～不会一直等待使用者啦！\n\n范例一：让用户由键盘输入一内容，将该内容变成名为 atest 的变量\n[root@www ~]# read atest\nThis is a test        <==此时光标会等待你输入！请输入左侧文字看看\n[root@www ~]# echo $atest\nThis is a test          <==你刚刚输入的数据已经变成一个变量内容！\n\n范例二：提示使用者 30 秒内输入自己的大名，将该输入字符串作为名为 named 的变量内容\n[root@www ~]# read -p \"Please keyin your name: \" -t 30 named\nPlease keyin your name: VBird Tsai   <==注意看，会有提示字符喔！\n[root@www ~]# echo $named\nVBird Tsai        <==输入的数据又变成一个变量的内容了！\n```\n\nread 之后不加任何参数，直接加上变量名称，那么底下就会主动出现一个空白行等待你的输入(如范例一)。 如果加上 -t 后面接秒数，例如上面的范例二，那么 30 秒之内没有任何动作时， 该命令就会自动略过了～如果是加上 -p ，嘿嘿！在输入的光标前就会有比较多可以用的提示字符给我们参考！ 在命令的下达里面，比较美观啦！ ^_^\n\n\n\n\n\n------\n\n- ### declare / typeset\n\ndeclare 或 typeset 是一样的功能，就是在『宣告变量的类型』。如果使用 declare 后面并没有接任何参数，那么 bash 就会主动的将所有的变量名称与内容通通叫出来，就好像使用 set 一样啦！ 那么 declare 还有什么语法呢？看看先：\n\n```\n[root@www ~]# declare [-aixr] variable\n选项与参数：\n-a  ：将后面名为 variable 的变量定义成为数组 (array) 类型\n-i  ：将后面名为 variable 的变量定义成为整数数字 (integer) 类型\n-x  ：用法与 export 一样，就是将后面的 variable 变成环境变量；\n-r  ：将变量配置成为 readonly 类型，该变量不可被更改内容，也不能 unset\n\n范例一：让变量 sum 进行 100+300+50 的加总结果\n[root@www ~]# sum=100+300+50\n[root@www ~]# echo $sum\n100+300+50  <==咦！怎么没有帮我计算加总？因为这是文字型态的变量属性啊！\n[root@www ~]# declare -i sum=100+300+50\n[root@www ~]# echo $sum\n450         <==瞭乎？？\n```\n\n由于在默认的情况底下， bash 对于变量有几个基本的定义：\n\n- 变量类型默认为『字符串』，所以若不指定变量类型，则 1+2 为一个『字符串』而不是『计算式』。 所以上述第一个运行的结果才会出现那个情况的；\n- bash 环境中的数值运算，默认最多仅能到达整数形态，所以 1/3 结果是 0；\n\n现在你晓得为啥你需要进行变量宣告了吧？如果需要非字符串类型的变量，那就得要进行变量的宣告才行啦！ 底下继续来玩些其他的 declare 功能。\n\n```\n范例二：将 sum 变成环境变量\n[root@www ~]# declare -x sum\n[root@www ~]# export | grep sum\ndeclare -ix sum=\"450\"  <==果然出现了！包括有 i 与 x 的宣告！\n\n范例三：让 sum 变成只读属性，不可更动！\n[root@www ~]# declare -r sum\n[root@www ~]# sum=tesgting\n-bash: sum: readonly variable  <==老天爷～不能改这个变量了！\n\n范例四：让 sum 变成非环境变量的自定义变量吧！\n[root@www ~]# declare +x sum  <== 将 - 变成 + 可以进行『取消』动作\n[root@www ~]# declare -p sum  <== -p 可以单独列出变量的类型\ndeclare -ir sum=\"450\" <== 看吧！只剩下 i, r 的类型，不具有 x 啰！\n```\n\ndeclare 也是个很有用的功能～尤其是当我们需要使用到底下的数组功能时， 他也可以帮我们宣告数组的属性喔！不过，老话一句，数组也是在 shell script 比较常用的啦！ 比较有趣的是，如果你不小心将变量配置为『只读』，通常得要注销再登陆才能复原该变量的类型了！ @_@\n\n\n\n\n\n------\n\n- ### 数组 (array) 变量类型\n\n某些时候，我们必须使用数组来宣告一些变量，这有什么好处啊？在一般人的使用上， 果然是看不出来有什么好处的！不过，如果您曾经写过程序的话，那才会比较了解数组的意义～ 数组对写数值程序的设计师来说，可是不能错过学习的重点之一哩！好！不啰唆～ 那么要如何配置数组的变量与内容呢？在 bash 里头，数组的配置方式是：\n\n> var[index]=content\n\n意思是说，我有一个数组名为 var ，而这个数组的内容为 var[1]=小明， var[2]=大明， var[3]=好明 .... 等等，那个 index 就是一些数字啦，重点是用中刮号 ([ ]) 来配置的。 目前我们 bash 提供的是一维数组。老实说，如果您不必写一些复杂的程序， 那么这个数组的地方，可以先略过，等到有需要再来学习即可！因为要制作出数组， 通常与循环或者其他判断式交互使用才有比较高的存在意义！\n\n```\n范例：配置上面提到的 var[1] ～ var[3] 的变量。\n[root@www ~]# var[1]=\"small min\"\n[root@www ~]# var[2]=\"big min\"\n[root@www ~]# var[3]=\"nice min\"\n[root@www ~]# echo \"${var[1]}, ${var[2]}, ${var[3]}\"\nsmall min, big min, nice min\n```\n\n数组的变量类型比较有趣的地方在于『读取』，一般来说，建议直接以 ${数组} 的方式来读取，比较正确无误的啦！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**与文件系统及程序的限制关系： ulimit**\n\n想象一个状况：我的 Linux 主机里面同时登陆了十个人，这十个人不知怎么搞的， 同时开启了 100 个文件，每个文件的大小约 10MBytes ，请问一下， 我的 Linux 主机的内存要有多大才够？ 10*100*10 = 10000 MBytes = 10GBytes ... 老天爷，这样，系统不挂点才有鬼哩！为了要预防这个情况的发生，所以我们的 bash 是可以『限制用户的某些系统资源』的，包括可以开启的文件数量， 可以使用的 CPU 时间，可以使用的内存总量等等。如何配置？用 ulimit 吧！\n\n```\n\n[root@www ~]# ulimit [-SHacdfltu] [配额]\n选项与参数：\n-H  ：hard limit ，严格的配置，必定不能超过这个配置的数值；\n-S  ：soft limit ，警告的配置，可以超过这个配置值，但是若超过则有警告信息。\n      在配置上，通常 soft 会比 hard 小，举例来说，soft 可配置为 80 而 hard \n      配置为 100，那么你可以使用到 90 (因为没有超过 100)，但介于 80~100 之间时，\n      系统会有警告信息通知你！\n-a  ：后面不接任何选项与参数，可列出所有的限制额度；\n-c  ：当某些程序发生错误时，系统可能会将该程序在内存中的信息写成文件(除错用)，\n      这种文件就被称为核心文件(core file)。此为限制每个核心文件的最大容量。\n-f  ：此 shell 可以创建的最大文件容量(一般可能配置为 2GB)单位为 Kbytes\n-d  ：程序可使用的最大断裂内存(segment)容量；\n-l  ：可用于锁定 (lock) 的内存量\n-t  ：可使用的最大 CPU 时间 (单位为秒)\n-u  ：单一用户可以使用的最大程序(process)数量。\n\n范例一：列出你目前身份(假设为root)的所有限制数据数值\n[root@www ~]# ulimit -a\ncore file size          (blocks, -c) 0          <==只要是 0 就代表没限制\ndata seg size           (kbytes, -d) unlimited\nscheduling priority             (-e) 0\nfile size               (blocks, -f) unlimited  <==可创建的单一文件的大小\npending signals                 (-i) 11774\nmax locked memory       (kbytes, -l) 32\nmax memory size         (kbytes, -m) unlimited\nopen files                      (-n) 1024       <==同时可开启的文件数量\npipe size            (512 bytes, -p) 8\nPOSIX message queues     (bytes, -q) 819200\nreal-time priority              (-r) 0\nstack size              (kbytes, -s) 10240\ncpu time               (seconds, -t) unlimited\nmax user processes              (-u) 11774\nvirtual memory          (kbytes, -v) unlimited\nfile locks                      (-x) unlimited\n\n范例二：限制用户仅能创建 10MBytes 以下的容量的文件\n[root@www ~]# ulimit -f 10240\n[root@www ~]# ulimit -a\nfile size               (blocks, -f) 10240 <==最大量为10240Kbyes，相当10Mbytes\n[root@www ~]# dd if=/dev/zero of=123 bs=1M count=20\nFile size limit exceeded <==尝试创建 20MB 的文件，结果失败了！\n```\n\n还记得我们在[第八章 Linux 磁盘文件系统](http://cn.linux.vbird.org/linux_basic/0230filesystem.php)里面提到过，单一 filesystem 能够支持的单一文件大小与 block 的大小有关。例如 block size 为 1024 byte 时，单一文件可达 16GB 的容量。但是，我们可以用 ulimit 来限制使用者可以创建的文件大小喔！ 利用 ulimit -f 就可以来配置了！例如上面的范例二，要注意单位喔！单位是 Kbytes。 若改天你一直无法创建一个大容量的文件，记得瞧一瞧 ulimit 的信息喔！\n\n------\n\n## ![小标题的图示](http://cn.linux.vbird.org/image/logo.png)**变量内容的删除、取代与替换**\n\n变量除了可以直接配置来修改原本的内容之外，有没有办法透过简单的动作来将变量的内容进行微调呢？ 举例来说，进行变量内容的删除、取代与替换等！是可以的！我们可以透过几个简单的小步骤来进行变量内容的微调喔！ 底下就来试试看！\n\n\n\n\n\n------\n\n- ### 变量内容的删除与取代\n\n变量的内容可以很简单的透过几个咚咚来进行删除喔！我们使用 PATH 这个变量的内容来做测试好了。 请你依序进行底下的几个例子来玩玩，比较容易感受的到鸟哥在这里想要表达的意义：\n\n```\n范例一：先让小写的 path 自定义变量配置的与 PATH 内容相同\n[root@www ~]# path=${PATH}\n[root@www ~]# echo $path\n/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n/usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n\n范例二：假设我不喜欢 kerberos，所以要将前两个目录删除掉，如何显示？\n[root@www ~]# echo ${path#/*kerberos/bin:}\n/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\n```\n\n上面这个范例很有趣的！他的重点可以用底下这张表格来说明：\n\n```\n${variable#/*kerberos/bin:}\n   上面的特殊字体部分是关键词！用在这种删除模式所必须存在的\n\n${variable#/*kerberos/bin:}\n   这就是原本的变量名称，以上面范例二来说，这里就填写 path 这个『变量名称』啦！\n\n${variable#/*kerberos/bin:}\n   这是重点！代表『从变量内容的最前面开始向右删除』，且仅删除最短的那个\n\n${variable#/*kerberos/bin:}\n   代表要被删除的部分，由于 # 代表由前面开始删除，所以这里便由开始的 / 写起。\n   需要注意的是，我们还可以透过通配符 * 来取代 0 到无穷多个任意字符\n\n   以上面范例二的结果来看， path 这个变量被删除的内容如下所示：\n/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n/usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n```\n\n很有趣吧！这样了解了 # 的功能了吗？接下来让我们来看看底下的范例三！\n\n```\n范例三：我想要删除前面所有的目录，仅保留最后一个目录\n[root@www ~]# echo ${path#/*:}\n/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:\n/root/bin     <==这两行其实是同一行啦！\n# 由于一个 # 仅删除掉最短的那个，因此他删除的情况可以用底下的删除线来看：\n# /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n# /usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n\n[root@www ~]# echo ${path##/*:}\n/root/bin\n# 嘿！多加了一个 # 变成 ## 之后，他变成『删除掉最长的那个数据』！亦即是：\n# /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n# /usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n```\n\n非常有趣！不是吗？因为在 PATH 这个变量的内容中，每个目录都是以冒号『:』隔开的， 所以要从头删除掉目录就是介于斜线 (/) 到冒号 (:) 之间的数据！但是 PATH 中不止一个冒号 (:) 啊！ 所以 # 与 ## 就分别代表：\n\n- \\# ：符合取代文字的『最短的』那一个；\n- \\##：符合取代文字的『最长的』那一个\n\n上面谈到的是『从前面开始删除变量内容』，那么如果想要『从后面向前删除变量内容』呢？ 这个时候就得使用百分比 (%) 符号了！来看看范例四怎么做吧！\n\n```\n范例四：我想要删除最后面那个目录，亦即从 : 到 bin 为止的字符串\n[root@www ~]# echo ${path%:*bin}\n/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n/usr/sbin:/usr/bin  <==注意啊！最后面一个目录不见去！\n# 这个 % 符号代表由最后面开始向前删除！所以上面得到的结果其实是来自如下：\n# /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n# /usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n\n范例五：那如果我只想要保留第一个目录呢？\n[root@www ~]# echo ${path%%:*bin}\n/usr/kerberos/sbin\n# 同样的， %% 代表的则是最长的符合字符串，所以结果其实是来自如下：\n# /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n# /usr/sbin:/usr/bin:/root/bin  <==这两行其实是同一行啦！\n```\n\n由于我是想要由变量内容的后面向前面删除，而我这个变量内容最后面的结尾是『/root/bin』， 所以你可以看到上面我删除的数据最终一定是『bin』，亦即是『:*bin』那个 * 代表通配符！ 至于 % 与 %% 的意义其实与 # 及 ## 类似！这样理解否？\n\n了解了删除功能后，接下来谈谈取代吧！继续玩玩范例六啰！\n\n```\n\n范例六：将 path 的变量内容内的 sbin 取代成大写 SBIN：\n[root@www ~]# echo ${path/sbin/SBIN}\n/usr/kerberos/SBIN:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:\n/usr/sbin:/usr/bin:/root/bin\n# 这个部分就容易理解的多了！关键词在于那两个斜线，两斜线中间的是旧字符串\n# 后面的是新字符串，所以结果就会出现如上述的特殊字体部分啰！\n\n[root@www ~]# echo ${path//sbin/SBIN}\n/usr/kerberos/SBIN:/usr/kerberos/bin:/usr/local/SBIN:/usr/local/bin:/SBIN:/bin:\n/usr/SBIN:/usr/bin:/root/bin\n# 如果是两条斜线，那么就变成所有符合的内容都会被取代喔！\n```\n\n我们将这部份作个总结说明一下：\n\n| 变量配置方式                                         | 说明                                                         |\n| ---------------------------------------------------- | ------------------------------------------------------------ |\n| ${变量#关键词} ${变量##关键词}                       | 若变量内容从头开始的数据符合『关键词』，则将符合的最短数据删除 若变量内容从头开始的数据符合『关键词』，则将符合的最长数据删除 |\n| ${变量%关键词} ${变量%%关键词}                       | 若变量内容从尾向前的数据符合『关键词』，则将符合的最短数据删除 若变量内容从尾向前的数据符合『关键词』，则将符合的最长数据删除 |\n| ${变量/旧字符串/新字符串} ${变量//旧字符串/新字符串} | 若变量内容符合『旧字符串』则『第一个旧字符串会被新字符串取代』 若变量内容符合『旧字符串』则『全部的旧字符串会被新字符串取代』 |\n\n\n\n------\n\n- ### 变量的测试与内容替换\n\n在某些时刻我们常常需要『判断』某个变量是否存在，若变量存在则使用既有的配置，若变量不存在则给予一个常用的配置。 我们举底下的例子来说明好了，看看能不能较容易被你所理解呢！\n\n```\n范例一：测试一下是否存在 username 这个变量，若不存在则给予 username 内容为 root [root@www ~]# echo $username           <==由于出现空白，所以 username 可能不存在，也可能是空字符串 [root@www ~]# username=${username-root} [root@www ~]# echo $username root       <==因为 username 没有配置，所以主动给予名为 root 的内容。 [root@www ~]# username=\"vbird tsai\" <==主动配置 username 的内容 [root@www ~]# username=${username-root} [root@www ~]# echo $username vbird tsai <==因为 username 已经配置了，所以使用旧有的配置而不以 root 取代 \n```\n\n在上面的范例中，重点在于减号『 - 』后面接的关键词！基本上你可以这样理解：\n\n```\nnew_var=${old_var-content}   新的变量，主要用来取代旧变量。新旧变量名称其实常常是一样的 new_var=${old_var-content}   这是本范例中的关键词部分！必须要存在的哩！ new_var=${old_var-content}   旧的变量，被测试的项目！ new_var=${old_var-content}   变量的『内容』，在本范例中，这个部分是在『给予未配置变量的内容』 \n```\n\n不过这还是有点问题！因为 username 可能已经被配置为『空字符串』了！果真如此的话，那你还可以使用底下的范例来给予 username 的内容成为 root 喔！\n\n```\n范例二：若 username 未配置或为空字符串，则将 username 内容配置为 root [root@www ~]# username=\"\" [root@www ~]# username=${username-root} [root@www ~]# echo $username      <==因为 username 被配置为空字符串了！所以当然还是保留为空字符串！ [root@www ~]# username=${username:-root} [root@www ~]# echo $username root  <==加上『 : 』后若变量内容为空或者是未配置，都能够以后面的内容替换！ \n```\n\n在大括号内有没有冒号『 : 』的差别是很大的！加上冒号后，被测试的变量未被配置或者是已被配置为空字符串时， 都能够用后面的内容 (本例中是使用 root 为内容) 来替换与配置！这样可以了解了吗？除了这样的测试之外， 还有其他的测试方法喔！鸟哥将他整理如下：\n\n| **Tips:** 底下的例子当中，那个 var 与 str 为变量，我们想要针对 str 是否有配置来决定 var 的值喔！ 一般来说， str: 代表『str 没配置或为空的字符串时』；至于 str 则仅为『没有该变量』。 | ![鸟哥的图示](http://cn.linux.vbird.org/linux_basic/0320bash_files/vbird_face.gif) |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n|                                                              |                                                              |\n\n\n\n| 变量配置方式     | str 没有配置       | str 为空字符串     | str 已配置非为空字符串 |\n| ---------------- | ------------------ | ------------------ | ---------------------- |\n| var=${str-expr}  | var=expr           | var=               | var=$str               |\n| var=${str:-expr} | var=expr           | var=expr           | var=$str               |\n| var=${str+expr}  | var=               | var=expr           | var=expr               |\n| var=${str:+expr} | var=               | var=               | var=expr               |\n| var=${str=expr}  | str=expr var=expr  | str 不变 var=      | str 不变 var=$str      |\n| var=${str:=expr} | str=expr var=expr  | str=expr var=expr  | str 不变 var=$str      |\n| var=${str?expr}  | expr 输出至 stderr | var=               | var=$str               |\n| var=${str:?expr} | expr 输出至 stderr | expr 输出至 stderr | var=$str               |\n\n\n\n根据上面这张表，我们来进行几个范例的练习吧！ ^_^！首先让我们来测试一下，如果旧变量 (str) 不存在时， 我们要给予新变量一个内容，若旧变量存在则新变量内容以旧变量来替换，结果如下：\n\n```\n范例一：测试一下是否存在 username 这个变量，若不存在则给予 username 内容为 root\n[root@www ~]# echo $username\n           <==由于出现空白，所以 username 可能不存在，也可能是空字符串\n[root@www ~]# username=${username-root}\n[root@www ~]# echo $username\nroot       <==因为 username 没有配置，所以主动给予名为 root 的内容。\n[root@www ~]# username=\"vbird tsai\" <==主动配置 username 的内容\n[root@www ~]# username=${username-root}\n[root@www ~]# echo $username\nvbird tsai <==因为 username 已经配置了，所以使用旧有的配置而不以 root 取代\n```\n\n关于减号 (-) 其实上面我们谈过了！这里的测试只是要让你更加了解，这个减号的测试并不会影响到旧变量的内容。 如果你想要将旧变量内容也一起替换掉的话，那么就使用等号 (=) 吧！\n\n```\nnew_var=${old_var-content}\n   新的变量，主要用来取代旧变量。新旧变量名称其实常常是一样的\n\nnew_var=${old_var-content}\n   这是本范例中的关键词部分！必须要存在的哩！\n\nnew_var=${old_var-content}\n   旧的变量，被测试的项目！\n\nnew_var=${old_var-content}\n   变量的『内容』，在本范例中，这个部分是在『给予未配置变量的内容』\n```\n\n那如果我只是想知道，如果旧变量不存在时，整个测试就告知我『有错误』，此时就能够使用问号『 ? 』的帮忙啦！ 底下这个测试练习一下先！\n\n```\n测试：若 str 不存在时，则 var 的测试结果直接显示 \"无此变量\"\n[root@www ~]# unset str; var=${str?无此变量}\n-bash: str: 无此变量    <==因为 str 不存在，所以输出错误信息 \n\n测试：若 str 存在时，则 var 的内容会与 str 相同！\n[root@www ~]# str=\"oldvar\"; var=${str?novar}\n[root@www ~]# echo var=\"$var\", str=\"$str\"\nvar=oldvar, str=oldvar  <==因为 str 存在，所以 var 等于 str 的内容\n```\n\n基本上这种变量的测试也能够透过 shell script 内的 if...then... 来处理， 不过既然 bash 有提供这么简单的方法来测试变量，那我们也可以多学一些嘛！ 不过这种变量测试通常是在程序设计当中比较容易出现，如果这里看不懂就先略过，未来有用到判断变量值时，再回来看看吧！ ^_^","slug":"Linux/Shell的变量功能","published":1,"updated":"2023-08-25T09:21:17.316Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67a003mgcr771d3akyk","content":"<h2 id=\"Shell-的变量功能\"><a href=\"#Shell-的变量功能\" class=\"headerlink\" title=\"Shell 的变量功能\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"大标题的图示\"><strong>Shell 的变量功能</strong></h2><p>变量是 bash 环境中非常重要的一个玩意儿，我们知道 Linux 是多人多任务的环境，每个人登陆系统都能取得一个 bash ， 每个人都能够使用 bash 下达 mail 这个命令来收受『自己』的邮件，问题是， bash 是如何得知你的邮件信箱是哪个文件？ 这就需要『变量』的帮助啦！所以，你说变量重不重要呢？底下我们将介绍重要的环境变量、变量的取用与配置等数据， 呼呼！动动脑时间又来到啰！^_^</p>\n<hr>\n<h2 id=\"什么是变量？\"><a href=\"#什么是变量？\" class=\"headerlink\" title=\"什么是变量？\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>什么是变量？</strong></h2><p>那么，什么是『变量』呢？简单的说，就是让某一个特定字符串代表不固定的内容就是了。举个大家在国中都会学到的数学例子， 那就是：『 y &#x3D; ax + b 』这东西，在等号左边的(y)就是变量，在等号右边的(ax+b)就是变量内容。 要注意的是，左边是未知数，右边是已知数喔！ 讲的更简单一点，我们可以『用一个简单的 “字眼” 来取代另一个比较复杂或者是容易变动的数据』。这有什么好处啊？最大的好处就是『方便！』。</p>\n<hr>\n<ul>\n<li><h3 id=\"变量的可变性与方便性\"><a href=\"#变量的可变性与方便性\" class=\"headerlink\" title=\"变量的可变性与方便性\"></a>变量的可变性与方便性</h3></li>\n</ul>\n<p>举例来说，我们每个账号的邮件信箱默认是以 MAIL 这个变量来进行存取的， 当 dmtsai 这个使用者登陆时，他便会取得 MAIL 这个变量，而这个变量的内容其实就是 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;dmtsai， 那如果 vbird 登陆呢？他取得的 MAIL 这个变量的内容其实就是 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;vbird 。 而我们使用信件读取命令 mail 来读取自己的邮件信箱时，嘿嘿，这支程序可以直接读取 MAIL 这个变量的内容， 就能够自动的分辨出属于自己的信箱信件啰！这样一来，设计程序的设计师就真的很方便的啦！</p>\n<p><img src=\"/media/var_01.gif\" alt=\"程序、变量与不同用户的关系\"><br>图 2.1.1、程序、变量与不同用户的关系</p>\n<p>如上图所示，由于系统已经帮我们规划好 MAIL 这个变量，所以用户只要知道 mail 这个命令如何使用即可， mail 会主动的取用 MAIL 这个变量，就能够如上图所示的取得自己的邮件信箱了！(注意大小写，小写的 mail 是命令， 大写的 MAIL 则是变量名称喔！)</p>\n<p>那么使用变量真的比较好吗？这是当然的！想象一个例子，如果 mail 这个命令将 root 收信的邮件信箱 (mailbox) 档名为 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root 直接写入程序代码中。那么当 dmtsai 要使用 mail 时，将会取得 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root 这个文件的内容！ 不合理吧！所以你就需要帮 dmtsai 也设计一个 mail 的程序，将 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;dmtsai 写死到 mail 的程序代码当中！ 天吶！那系统要有多少个 mail 命令啊？反过来说，使用变量就变的很简单了！因为你不需要更动到程序代码啊！ 只要将 MAIL 这个变量带入不同的内容即可让所有使用者透过 mail 取得自己的信件！当然简单多了！</p>\n<hr>\n<ul>\n<li><h3 id=\"影响-bash-环境操作的变量\"><a href=\"#影响-bash-环境操作的变量\" class=\"headerlink\" title=\"影响 bash 环境操作的变量\"></a>影响 bash 环境操作的变量</h3></li>\n</ul>\n<p>某些特定变量会影响到 bash 的环境喔！举例来说，我们前面已经提到过很多次的那个 PATH 变量！ 你能不能在任何目录下运行某个命令，与 PATH 这个变量有很大的关系。例如你下达 ls 这个命令时，系统就是透过 PATH 这个变量里面的内容所记录的路径顺序来搜寻命令的呢！如果在搜寻完 PATH 变量内的路径还找不到 ls 这个命令时， 就会在屏幕上显示『 command not found 』的错误信息了。</p>\n<p>如果说的学理一点，那么由于在 Linux System 下面，所有的线程都是需要一个运行码， 而就如同上面提到的，你『真正以 shell 来跟 Linux 沟通，是在正确的登陆 Linux 之后！』这个时候你就有一个 bash 的运行程序，也才可以真正的经由 bash 来跟系统沟通啰！而在进入 shell 之前，也正如同上面提到的，由于系统需要一些变量来提供他数据的存取 (或者是一些环境的配置参数值， 例如是否要显示彩色等等的) ，所以就有一些所谓的『环境变量』 需要来读入系统中了！这些环境变量例如 PATH、HOME、MAIL、SHELL 等等，都是很重要的， 为了区别与自定义变量的不同，环境变量通常以大写字符来表示呢！</p>\n<hr>\n<ul>\n<li><h3 id=\"脚本程序设计-shell-script-的好帮手\"><a href=\"#脚本程序设计-shell-script-的好帮手\" class=\"headerlink\" title=\"脚本程序设计 (shell script) 的好帮手\"></a>脚本程序设计 (shell script) 的好帮手</h3></li>\n</ul>\n<p>这些还都只是系统默认的变量的目的，如果是个人的配置方面的应用呢：例如你要写一个大型的 script 时，有些数据因为可能由于用户习惯的不同而有差异，比如说路径好了，由于该路径在 script 被使用在相当多的地方，如果下次换了一部主机，都要修改 script 里面的所有路径，那么我一定会疯掉！ 这个时候如果使用变量，而将该变量的定义写在最前面，后面相关的路径名称都以变量来取代， 嘿嘿！那么你只要修改一行就等于修改整篇 script 了！方便的很！所以，良好的程序设计师都会善用变量的定义！</p>\n<p><img src=\"/media/var_02.gif\" alt=\"变量应用于 shell script 的示意图\"><br>图 2.1.2、变量应用于 shell script 的示意图</p>\n<p>最后我们就简单的对『什么是变量』作个简单定义好了： 『变量就是以一组文字或符号等，来取代一些配置或者是一串保留的数据！』， 例如：我配置了『myname』就是『VBird』，所以当你读取 myname 这个变量的时候，系统自然就会知道！哈！那就是 VBird 啦！ 那么如何『显示变量』呢？这就需要使用到 echo 这个命令啦！</p>\n<hr>\n<h2 id=\"变量的取用与配置：echo-变量配置守则-unset\"><a href=\"#变量的取用与配置：echo-变量配置守则-unset\" class=\"headerlink\" title=\"变量的取用与配置：echo, 变量配置守则, unset\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>变量的取用与配置：echo, 变量配置守则, unset</strong></h2><p>说的口沫横飞的，也不知道『变量』与『变量代表的内容』有啥关系？ 那我们就将『变量』的『内容』拿出来给您瞧瞧好了。你可以利用 echo 这个命令来取用变量， 但是，变量在被取用时，前面必须要加上钱字号『 $ 』才行，举例来说，要知道 PATH 的内容，该如何是好？</p>\n<hr>\n<ul>\n<li><h3 id=\"变量的取用-echo\"><a href=\"#变量的取用-echo\" class=\"headerlink\" title=\"变量的取用: echo\"></a>变量的取用: echo</h3></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# echo $variable [root@www ~]# echo $PATH /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin [root@www ~]# echo $&#123;PATH&#125; </span><br></pre></td></tr></table></figure>\n\n<p>变量的取用就如同上面的范例，利用 echo 就能够读出，只是需要在变量名称前面加上 $ ， 或者是以 ${变量} 的方式来取用都可以！当然啦，那个 echo 的功能可是很多的， 我们这里单纯是拿 echo 来读出变量的内容而已，更多的 echo 使用，请自行给他 man echo 吧！ ^_^</p>\n<p>例题：请在屏幕上面显示出您的环境变量 HOME 与 MAIL：答：echo $HOME 或者是 echo ${HOME} echo $MAIL 或者是 echo ${MAIL}</p>\n<p>现在我们知道了变量与变量内容之间的相关性了，好了，那么我要如何『配置』或者是『修改』 某个变量的内容啊？很简单啦！用『等号(&#x3D;)』连接变量与他的内容就好啦！举例来说： 我要将 myname 这个变量名称的内容配置为 VBird ，那么：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# echo $myname       &lt;==这里并没有任何数据～因为这个变量尚未被配置！是空的！ [root@www ~]# myname=VBird [root@www ~]# echo $myname VBird  &lt;==出现了！因为这个变量已经被配置了！ </span><br></pre></td></tr></table></figure>\n\n<p>瞧！如此一来，这个变量名称 myname 的内容就带有 VBird 这个数据啰～ 而由上面的例子当中，我们也可以知道： 在 bash 当中，当一个变量名称尚未被配置时，默认的内容是『空』的。 另外，变量在配置时，还是需要符合某些规定的，否则会配置失败喔！ 这些守则如下所示啊！</p>\n<hr>\n<ul>\n<li><h3 id=\"变量的配置守则\"><a href=\"#变量的配置守则\" class=\"headerlink\" title=\"变量的配置守则\"></a>变量的配置守则</h3></li>\n</ul>\n<ol>\n<li><p>变量与变量内容以一个等号『&#x3D;』来连结，如下所示：<br>『myname&#x3D;VBird』</p>\n</li>\n<li><p>等号两边不能直接接空格符，如下所示为错误：<br>『myname &#x3D; VBird』或『myname&#x3D;VBird Tsai』</p>\n</li>\n<li><p>变量名称只能是英文字母与数字，但是开头字符不能是数字，如下为错误：<br>『2myname&#x3D;VBird』</p>\n</li>\n<li><p>变量内容若有空格符可使用双引号『”』或单引号『’』将变量内容结合起来，但</p>\n<ul>\n<li>双引号内的特殊字符如 $ 等，可以保有原本的特性，如下所示：<br>『var&#x3D;”lang is $LANG”』则『echo $var』可得『lang is en_US』</li>\n<li>单引号内的特殊字符则仅为一般字符 (纯文本)，如下所示：<br>『var&#x3D;’lang is $LANG’』则『echo $var』可得『lang is $LANG』</li>\n</ul>\n</li>\n<li><p>可用跳脱字符『 \\ 』将特殊符号(如 [Enter], $, , 空格符, ‘等)变成一般字符；</p>\n</li>\n<li><p>在一串命令中，还需要藉由其他的命令提供的信息，可以使用反单引号『<code>命令</code>』或 『$(命令)』。特别注意，那个 &#96; 是键盘上方的数字键 1 左边那个按键，而不是单引号！ 例如想要取得核心版本的配置：<br>『version&#x3D;$(uname -r)』再『echo $version』可得『2.6.18-128.el5』</p>\n</li>\n<li><p>若该变量为扩增变量内容时，则可用 “$变量名称” 或 ${变量} 累加内容，如下所示：<br>『PATH&#x3D;”$PATH”:&#x2F;home&#x2F;bin』</p>\n</li>\n<li><p>若该变量需要在其他子程序运行，则需要以 export 来使变量变成环境变量：<br>『export PATH』</p>\n</li>\n<li><p>通常大写字符为系统默认变量，自行配置变量可以使用小写字符，方便判断 (纯粹依照使用者兴趣与嗜好) ；</p>\n</li>\n<li><p>取消变量的方法为使用 unset ：『unset 变量名称』例如取消 myname 的配置：<br>『unset myname』</p>\n</li>\n</ol>\n<p>底下让鸟哥举几个例子来让你试看看，就知道怎么配置好你的变量啰！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：配置一变量 name ，且内容为 VBird</span><br><span class=\"line\">[root@www ~]# 12name=VBird</span><br><span class=\"line\">-bash: 12name=VBird: command not found  &lt;==屏幕会显示错误！因为不能以数字开头！</span><br><span class=\"line\">[root@www ~]# name = VBird            &lt;==还是错误！因为有空白！</span><br><span class=\"line\">[root@www ~]# name=VBird              &lt;==OK 的啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：承上题，若变量内容为 VBird&#x27;s name 呢，就是变量内容含有特殊符号时：</span><br><span class=\"line\">[root@www ~]# name=VBird&#x27;s name  </span><br><span class=\"line\"># 单引号与双引号必须要成对，在上面的配置中仅有一个单引号，因此当你按下 enter 后，</span><br><span class=\"line\"># 你还可以继续输入变量内容。这与我们所需要的功能不同，失败啦！</span><br><span class=\"line\"># 记得，失败后要复原请按下 [ctrl]-c 结束！</span><br><span class=\"line\">[root@www ~]# name=&quot;VBird&#x27;s name&quot;    &lt;==OK 的啦！</span><br><span class=\"line\"># 命令是由左边向右找→，先遇到的引号先有用，因此如上所示，单引号会失效！</span><br><span class=\"line\">[root@www ~]# name=&#x27;VBird&#x27;s name&#x27;    &lt;==失败的啦！</span><br><span class=\"line\"># 因为前两个单引号已成对，后面就多了一个不成对的单引号了！因此也就失败了！</span><br><span class=\"line\">[root@www ~]# name=VBird\\&#x27;s\\ name     &lt;==OK 的啦！</span><br><span class=\"line\"># 利用反斜杠 (\\) 跳脱特殊字符，例如单引号与空格键，这也是 OK 的啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例三：我要在 PATH 这个变量当中『累加』:/home/dmtsai/bin 这个目录</span><br><span class=\"line\">[root@www ~]# PATH=$PATH:/home/dmtsai/bin</span><br><span class=\"line\">[root@www ~]# PATH=&quot;$PATH&quot;:/home/dmtsai/bin</span><br><span class=\"line\">[root@www ~]# PATH=$&#123;PATH&#125;:/home/dmtsai/bin</span><br><span class=\"line\"># 上面这三种格式在 PATH 里头的配置都是 OK 的！但是底下的例子就不见得啰！</span><br><span class=\"line\"></span><br><span class=\"line\">范例四：承范例三，我要将 name 的内容多出 &quot;yes&quot; 呢？</span><br><span class=\"line\">[root@www ~]# name=$nameyes  </span><br><span class=\"line\"># 知道了吧？如果没有双引号，那么变量成了啥？name 的内容是 $nameyes 这个变量！</span><br><span class=\"line\"># 呵呵！我们可没有配置过 nameyes 这个变量吶！所以，应该是底下这样才对！</span><br><span class=\"line\">[root@www ~]# name=&quot;$name&quot;yes</span><br><span class=\"line\">[root@www ~]# name=$&#123;name&#125;yes  &lt;==以此例较佳！</span><br><span class=\"line\"></span><br><span class=\"line\">范例五：如何让我刚刚配置的 name=VBird 可以用在下个 shell 的程序？</span><br><span class=\"line\">[root@www ~]# name=VBird</span><br><span class=\"line\">[root@www ~]# bash        &lt;==进入到所谓的子程序</span><br><span class=\"line\">[root@www ~]# echo $name  &lt;==子程序：再次的 echo 一下；</span><br><span class=\"line\">       &lt;==嘿嘿！并没有刚刚配置的内容喔！</span><br><span class=\"line\">[root@www ~]# exit        &lt;==子程序：离开这个子程序</span><br><span class=\"line\">[root@www ~]# export name</span><br><span class=\"line\">[root@www ~]# bash        &lt;==进入到所谓的子程序</span><br><span class=\"line\">[root@www ~]# echo $name  &lt;==子程序：在此运行！</span><br><span class=\"line\">VBird  &lt;==看吧！出现配置值了！</span><br><span class=\"line\">[root@www ~]# exit        &lt;==子程序：离开这个子程序</span><br></pre></td></tr></table></figure>\n\n<p>什么是『子程序』呢？就是说，在我目前这个 shell 的情况下，去激活另一个新的 shell ，新的那个 shell 就是子程序啦！在一般的状态下，父程序的自定义变量是无法在子程序内使用的。但是透过 export 将变量变成环境变量后，就能够在子程序底下应用了！很不赖吧！至于程序的相关概念， 我们会在<a href=\"http://cn.linux.vbird.org/linux_basic/0440processcontrol.php\">第十七章程序管理</a>当中提到的喔！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例六：如何进入到您目前核心的模块目录？ [root@www ~]# cd /lib/modules/`uname -r`/kernel [root@www ~]# cd /lib/modules/$(uname -r)/kernel </span><br></pre></td></tr></table></figure>\n\n<p>每个 Linux 都能够拥有多个核心版本，且几乎 distribution 的核心版本都不相同。以 CentOS 5.3 (未升级前) 为例，他的默认核心版本是 2.6.18-128.el5 ，所以核心模块目录在 &#x2F;lib&#x2F;modules&#x2F;2.6.18-128.el5&#x2F;kernel&#x2F; 内。 也由于每个 distributions 的这个值都不相同，但是我们却可以利用 uname -r 这个命令先取得版本信息。所以啰，就可以透过上面命令当中的内含命令 <code>uname -r</code> 先取得版本输出到 cd … 那个命令当中，就能够顺利的进入目前核心的驱动程序所放置的目录啰！很方便吧！</p>\n<p>其实上面的命令可以说是作了两次动作，亦即是：</p>\n<ol>\n<li>先进行反单引号内的动作『uname -r』并得到核心版本为 2.6.18-128.el5</li>\n<li>将上述的结果带入原命令，故得命令为：『cd &#x2F;lib&#x2F;modules&#x2F;2.6.18-128.el5&#x2F;kernel&#x2F;』</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例七：取消刚刚配置的 name 这个变量内容 [root@www ~]# unset name </span><br></pre></td></tr></table></figure>\n\n<p>根据上面的案例你可以试试看！就可以了解变量的配置啰！这个是很重要的呦！请勤加练习！ 其中，较为重要的一些特殊符号的使用啰！例如单引号、双引号、跳脱字符、钱字号、反单引号等等，底下的例题想一想吧！</p>\n<p>例题：在变量的配置当中，单引号与双引号的用途有何不同？ 答：单引号与双引号的最大不同在于双引号仍然可以保有变量的内容，但单引号内仅能是一般字符 ，而不会有特殊符号。我们以底下的例子做说明：假设您定义了一个变量， name&#x3D;VBird ，现在想以 name 这个变量的内容定义出 myname 显示 VBird its me 这个内容，要如何订定呢？[root@www ~]# name&#x3D;VBird [root@www ~]# echo $name VBird [root@www ~]# myname&#x3D;”$name its me” [root@www ~]# echo $myname VBird its me [root@www ~]# myname&#x3D;’$name its me’ [root@www ~]# echo $myname $name its me发现了吗？没错！使用了单引号的时候，那么 $name 将失去原有的变量内容，仅为一般字符的显示型态而已！这里必需要特别小心在意！</p>\n<p>例题：在命令下达的过程中，反单引号( )这个符号代表的意义为何？答：在一串命令中，在 之内的命令将会被先运行，而其运行出来的结果将做为外部的输入信息！例如 uname -r 会显示出目前的核心版本，而我们的核心版本在 &#x2F;lib&#x2F;modules 里面，因此，你可以先运行 uname -r 找出核心版本，然后再以『 cd 目录』到该目录下，当然也可以运行如同上面范例六的运行内容啰。  另外再举个例子，我们也知道， <a href=\"http://cn.linux.vbird.org/linux_basic/0220filemanager.php#locate\">locate</a> 命令可以列出所有的相关文件档名，但是，如果我想要知道各个文件的权限呢？举例来说，我想要知道每个 crontab 相关档名的权限：[root@www ~]# ls -l <code>locate crontab</code>如此一来，先以 locate 将文件名数据都列出来，再以 ls 命令来处理的意思啦！瞭了吗？ ^_^</p>\n<p>例题：若你有一个常去的工作目录名称为：『&#x2F;cluster&#x2F;server&#x2F;work&#x2F;taiwan_2005&#x2F;003&#x2F;』，如何进行该目录的简化？答：在一般的情况下，如果你想要进入上述的目录得要『cd &#x2F;cluster&#x2F;server&#x2F;work&#x2F;taiwan_2005&#x2F;003&#x2F;』， 以鸟哥自己的案例来说，鸟哥跑数值模式常常会配置很长的目录名称(避免忘记)，但如此一来变换目录就很麻烦。 此时，鸟哥习惯利用底下的方式来降低命令下达错误的问题：[root@www ~]# work&#x3D;”&#x2F;cluster&#x2F;server&#x2F;work&#x2F;taiwan_2005&#x2F;003&#x2F;“ [root@www ~]# cd $work未来我想要使用其他目录作为我的模式工作目录时，只要变更 work 这个变量即可！而这个变量又可以在 <a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_2.php#settings_bashrc\">bash 的配置文件</a>中直接指定，那我每次登陆只要运行『 cd $work 』就能够去到数值模式仿真的工作目录了！是否很方便呢？ ^_^</p>\n<hr>\n<h2 id=\"环境变量的功能\"><a href=\"#环境变量的功能\" class=\"headerlink\" title=\"环境变量的功能\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>环境变量的功能</strong></h2><p>环境变量可以帮我们达到很多功能～包括家目录的变换啊、提示字符的显示啊、运行文件搜寻的路径啊等等的， 还有很多很多啦！那么，既然环境变量有那么多的功能，问一下，目前我的 shell 环境中， 有多少默认的环境变量啊？我们可以利用两个命令来查阅，分别是 env 与 export 呢！</p>\n<hr>\n<ul>\n<li><h3 id=\"用-env-观察环境变量与常见环境变量说明\"><a href=\"#用-env-观察环境变量与常见环境变量说明\" class=\"headerlink\" title=\"用 env 观察环境变量与常见环境变量说明\"></a>用 env 观察环境变量与常见环境变量说明</h3></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：列出目前的 shell 环境下的所有环境变量与其内容。</span><br><span class=\"line\">[root@www ~]# env</span><br><span class=\"line\">HOSTNAME=www.vbird.tsai    &lt;== 这部主机的主机名</span><br><span class=\"line\">TERM=xterm                 &lt;== 这个终端机使用的环境是什么类型</span><br><span class=\"line\">SHELL=/bin/bash            &lt;== 目前这个环境下，使用的 Shell 是哪一个程序？</span><br><span class=\"line\">HISTSIZE=1000              &lt;== 『记录命令的笔数』在 CentOS 默认可记录 1000 笔</span><br><span class=\"line\">USER=root                  &lt;== 使用者的名称啊！</span><br><span class=\"line\">LS_COLORS=no=00:fi=00:di=00;34:ln=00;36:pi=40;33:so=00;35:bd=40;33;01:cd=40;33;01:</span><br><span class=\"line\">or=01;05;37;41:mi=01;05;37;41:ex=00;32:*.cmd=00;32:*.exe=00;32:*.com=00;32:*.btm=0</span><br><span class=\"line\">0;32:*.bat=00;32:*.sh=00;32:*.csh=00;32:*.tar=00;31:*.tgz=00;31:*.arj=00;31:*.taz=</span><br><span class=\"line\">00;31:*.lzh=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.bz=00;3</span><br><span class=\"line\">1:*.tz=00;31:*.rpm=00;31:*.cpio=00;31:*.jpg=00;35:*.gif=00;35:*.bmp=00;35:*.xbm=00</span><br><span class=\"line\">;35:*.xpm=00;35:*.png=00;35:*.tif=00;35: &lt;== 一些颜色显示</span><br><span class=\"line\">MAIL=/var/spool/mail/root  &lt;== 这个用户所取用的 mailbox 位置</span><br><span class=\"line\">PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:</span><br><span class=\"line\">/root/bin                  &lt;== 不再多讲啊！是运行文件命令搜寻路径</span><br><span class=\"line\">INPUTRC=/etc/inputrc       &lt;== 与键盘按键功能有关。可以配置特殊按键！</span><br><span class=\"line\">PWD=/root                  &lt;== 目前用户所在的工作目录 (利用 pwd 取出！)</span><br><span class=\"line\">LANG=en_US                 &lt;== 这个与语系有关，底下会再介绍！</span><br><span class=\"line\">HOME=/root                 &lt;== 这个用户的家目录啊！</span><br><span class=\"line\">_=/bin/env                 &lt;== 上一次使用的命令的最后一个参数(或命令本身)</span><br></pre></td></tr></table></figure>\n\n<p>env 是 environment (环境) 的简写啊，上面的例子当中，是列出来所有的环境变量。当然，如果使用 export 也会是一样的内容～ 只不过， export 还有其他额外的功能就是了，我们等一下再提这个 export 命令。 那么上面这些变量有些什么功用呢？底下我们就一个一个来分析分析！</p>\n<ul>\n<li><p><strong>HOME</strong><br>代表用户的家目录。还记得我们可以使用 cd ~ 去到自己的家目录吗？或者利用 cd 就可以直接回到用户家目录了。那就是取用这个变量啦～ 有很多程序都可能会取用到这个变量的值！</p>\n</li>\n<li><p><strong>SHELL</strong><br>告知我们，目前这个环境使用的 SHELL 是哪支程序？ Linux 默认使用 &#x2F;bin&#x2F;bash 的啦！</p>\n</li>\n<li><p><strong>HISTSIZE</strong><br>这个与『历史命令』有关，亦即是， 我们曾经下达过的命令可以被系统记录下来，而记录的『笔数』则是由这个值来配置的。</p>\n</li>\n<li><p><strong>MAIL</strong><br>当我们使用 mail 这个命令在收信时，系统会去读取的邮件信箱文件 (mailbox)。</p>\n</li>\n<li><p><strong>PATH</strong><br>就是运行文件搜寻的路径啦～目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由 PATH 的变量内的目录来查询，所以，目录的顺序也是重要的喔。</p>\n</li>\n<li><p><strong>LANG</strong><br>这个重要！就是语系数据啰～很多信息都会用到他， 举例来说，当我们在启动某些 perl 的程序语言文件时，他会主动的去分析语系数据文件， 如果发现有他无法解析的编码语系，可能会产生错误喔！一般来说，我们中文编码通常是 zh_TW.Big5 或者是 zh_TW.UTF-8，这两个编码偏偏不容易被解译出来，所以，有的时候，可能需要修订一下语系数据。 这部分我们会在下个小节做介绍的！</p>\n</li>\n<li><p><strong>RANDOM</strong></p>\n<p>这个玩意儿就是『随机随机数』的变量啦！目前大多数的 distributions 都会有随机数生成器，那就是</p>\n<p> &#x2F;dev&#x2F;random</p>\n<p>这个文件。 我们可以透过这个随机数文件相关的变量 ($RANDOM) 来随机取得随机数值喔。在 BASH 的环境下，这个 RANDOM 变量的内容，介于 0<del>32767 之间，所以，你只要 echo $RANDOM 时，系统就会主动的随机取出一个介于 0</del>32767 的数值。万一我想要使用 0~9 之间的数值呢？呵呵～利用 declare 宣告数值类型， 然后这样做就可以了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# declare -i number=$RANDOM*10/32768 ; </span><br><span class=\"line\">echo $number </span><br><span class=\"line\">8   &lt;== 此时会随机取出 0~9 之间的数值喔！ </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>大致上是有这些环境变量啦～里面有些比较重要的参数，在底下我们都会另外进行一些说明的～</p>\n<hr>\n<ul>\n<li><h3 id=\"用-set-观察所有变量-含环境变量与自定义变量\"><a href=\"#用-set-观察所有变量-含环境变量与自定义变量\" class=\"headerlink\" title=\"用 set 观察所有变量 (含环境变量与自定义变量)\"></a>用 set 观察所有变量 (含环境变量与自定义变量)</h3></li>\n</ul>\n<p>bash 可不只有环境变量喔，还有一些与 bash 操作接口有关的变量，以及用户自己定义的变量存在的。 那么这些变量如何观察呢？这个时候就得要使用 set 这个命令了。 set 除了环境变量之外， 还会将其他在 bash 内的变量通通显示出来哩！信息很多，底下鸟哥仅列出几个重要的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# set</span><br><span class=\"line\">BASH=/bin/bash           &lt;== bash 的主程序放置路径</span><br><span class=\"line\">BASH_VERSINFO=([0]=&quot;3&quot; [1]=&quot;2&quot; [2]=&quot;25&quot; [3]=&quot;1&quot; [4]=&quot;release&quot; </span><br><span class=\"line\">[5]=&quot;i686-redhat-linux-gnu&quot;)      &lt;== bash 的版本啊！</span><br><span class=\"line\">BASH_VERSION=&#x27;3.2.25(1)-release&#x27;  &lt;== 也是 bash 的版本啊！</span><br><span class=\"line\">COLORS=/etc/DIR_COLORS.xterm      &lt;== 使用的颜色纪录文件</span><br><span class=\"line\">COLUMNS=115              &lt;== 在目前的终端机环境下，使用的字段有几个字符长度</span><br><span class=\"line\">HISTFILE=/root/.bash_history      &lt;== 历史命令记录的放置文件，隐藏档</span><br><span class=\"line\">HISTFILESIZE=1000        &lt;== 存起来(与上个变量有关)的文件之命令的最大纪录笔数。</span><br><span class=\"line\">HISTSIZE=1000            &lt;== 目前环境下，可记录的历史命令最大笔数。</span><br><span class=\"line\">HOSTTYPE=i686            &lt;== 主机安装的软件主要类型。我们用的是 i686 兼容机器软件</span><br><span class=\"line\">IFS=$&#x27; \\t\\n&#x27;             &lt;== 默认的分隔符</span><br><span class=\"line\">LINES=35                 &lt;== 目前的终端机下的最大行数</span><br><span class=\"line\">MACHTYPE=i686-redhat-linux-gnu    &lt;== 安装的机器类型</span><br><span class=\"line\">MAILCHECK=60             &lt;== 与邮件有关。每 60 秒去扫瞄一次信箱有无新信！</span><br><span class=\"line\">OLDPWD=/home             &lt;== 上个工作目录。我们可以用 cd - 来取用这个变量。</span><br><span class=\"line\">OSTYPE=linux-gnu         &lt;== 操作系统的类型！</span><br><span class=\"line\">PPID=20025               &lt;== 父程序的 PID (会在后续章节才介绍)</span><br><span class=\"line\">PS1=&#x27;[\\u@\\h \\W]\\$ &#x27;      &lt;== PS1 就厉害了。这个是命令提示字符，也就是我们常见的</span><br><span class=\"line\">                             [root@www ~]# 或 [dmtsai ~]$ 的配置值啦！可以更动的！</span><br><span class=\"line\">PS2=&#x27;&gt; &#x27;                 &lt;== 如果你使用跳脱符号 (\\) 第二行以后的提示字符也</span><br><span class=\"line\">name=VBird               &lt;== 刚刚配置的自定义变量也可以被列出来喔！</span><br><span class=\"line\">$                        &lt;== 目前这个 shell 所使用的 PID</span><br><span class=\"line\">?                        &lt;== 刚刚运行完命令的回传值。</span><br></pre></td></tr></table></figure>\n\n<p>一般来说，不论是否为环境变量，只要跟我们目前这个 shell 的操作接口有关的变量， 通常都会被配置为大写字符，也就是说，『基本上，在 Linux 默认的情况中，使用{大写的字母}来配置的变量一般为系统内定需要的变量』。 OK！OK！那么上头那些变量当中，有哪些是比较重要的？大概有这几个吧！</p>\n<ul>\n<li><p>PS1</p>\n<p>：(提示字符的配置)</p>\n<p>这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『</p>\n<p>命令提示字符</p>\n<p>』喔！ 当我们每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你自己的习惯』就好了。 你可以用 man bash (</p>\n<p>注3</p>\n<p>)去查询一下 PS1 的相关说明，以理解底下的一些符号意义。</p>\n<ul>\n<li>\\d ：可显示出『星期 月 日』的日期格式，如：”Mon Feb 2”</li>\n<li>\\H ：完整的主机名。举例来说，鸟哥的练习机为『<a href=\"http://www.vbird.tsai』/\">www.vbird.tsai』</a></li>\n<li>\\h ：仅取主机名在第一个小数点之前的名字，如鸟哥主机则为『www』后面省略</li>\n<li>\\t ：显示时间，为 24 小时格式的『HH:MM:SS』</li>\n<li>\\T ：显示时间，为 12 小时格式的『HH:MM:SS』</li>\n<li>\\A ：显示时间，为 24 小时格式的『HH:MM』</li>\n<li>@ ：显示时间，为 12 小时格式的『am&#x2F;pm』样式</li>\n<li>\\u ：目前使用者的账号名称，如『root』；</li>\n<li>\\v ：BASH 的版本信息，如鸟哥的测试主板本为 3.2.25(1)，仅取『3.2』显示</li>\n<li>\\w ：完整的工作目录名称，由根目录写起的目录名称。但家目录会以 ~ 取代；</li>\n<li>\\W ：利用 basename 函数取得工作目录名称，所以仅会列出最后一个目录名。</li>\n<li># ：下达的第几个命令。</li>\n<li>$ ：提示字符，如果是 root 时，提示字符为 # ，否则就是 $ 啰～</li>\n</ul>\n<p>好了，让我们来看看 CentOS 默认的 PS1 内容吧：『[\\u@\\h \\W]$ 』，现在你知道那些反斜杠后的数据意义了吧？ 要注意喔！那个反斜杠后的数据为 PS1 的特殊功能，与 bash 的变量配置没关系啦！不要搞混了喔！ 那你现在知道为何你的命令提示字符是：『 [root@www ~]# 』了吧？ 好了，那么假设我想要有类似底下的提示字符：</p>\n<blockquote>\n<p>[root@www &#x2F;home&#x2F;dmtsai 16:50 #12]#</p>\n</blockquote>\n<p>那个 # 代表第 12 次下达的命令。那么应该如何配置 PS1 呢？可以这样啊：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~ ]# cd /home</span><br><span class=\"line\">[root@www home]# PS1=&#x27;[\\u@\\h \\w \\A #\\#]\\$ &#x27;</span><br><span class=\"line\">[root@www /home 17:02 #85]# </span><br><span class=\"line\"># 看到了吗？提示字符变了！变的很有趣吧！其中，那个 #85 比较有趣，</span><br><span class=\"line\"># 如果您再随便输入几次 ls 后，该数字就会添加喔！为啥？上面有说明滴！</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>**$**：(关于本 shell 的 PID)</p>\n<p>钱字号本身也是个变量喔！这个咚咚代表的是『目前这个 Shell 的线程代号』，亦即是所谓的 PID (Process ID)。 更多的程序观念，我们会在第四篇的时候提及。想要知道我们的 shell 的 PID ，就可以用：『 echo $$ 』即可！出现的数字就是你的 PID 号码。</p>\n</li>\n<li><p>?</p>\n<p>：(关于上个运行命令的回传值)</p>\n<p>什么？问号也是一个特殊的变量？没错！在 bash 里面这个变量可重要的很！ 这个变量是：『上一个运行的命令所回传的值』， 上面这句话的重点是『上一个命令』与『回传值』两个地方。当我们运行某些命令时， 这些命令都会回传一个运行后的代码。一般来说，如果成功的运行该命令， 则会回传一个 0 值，如果运行过程发生错误，就会回传『错误代码』才对！一般就是以非为 0 的数值来取代。 我们以底下的例子来看看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# echo $SHELL</span><br><span class=\"line\">/bin/bash                                  &lt;==可顺利显示！没有错误！</span><br><span class=\"line\">[root@www ~]# echo $?</span><br><span class=\"line\">0                                          &lt;==因为没问题，所以回传值为 0</span><br><span class=\"line\">[root@www ~]# 12name=VBird</span><br><span class=\"line\">-bash: 12name=VBird: command not found     &lt;==发生错误了！bash回报有问题</span><br><span class=\"line\">[root@www ~]# echo $?</span><br><span class=\"line\">127                                        &lt;==因为有问题，回传错误代码(非为0)</span><br><span class=\"line\"># 错误代码回传值依据软件而有不同，我们可以利用这个代码来搜寻错误的原因喔！</span><br><span class=\"line\">[root@www ~]# echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\"># 咦！怎么又变成正确了？这是因为 &quot;?&quot; 只与『上一个运行命令』有关，</span><br><span class=\"line\"># 所以，我们上一个命令是运行『 echo $? 』，当然没有错误，所以是 0 没错！</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>OSTYPE, HOSTTYPE, MACHTYPE</strong>：(主机硬件与核心的等级)</p>\n<p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0105computers.php#pc_cpu\">第零章、计算器概论内的 CPU 等级</a>说明中谈过 CPU ， 目前个人计算机的 CPU 主要分为 32&#x2F;64 位，其中 32 位又可分为 i386, i586, i686，而 64 位则称为 x86_64。 由于不同等级的 CPU 命令集不太相同，因此你的软件可能会针对某些 CPU 进行优化，以求取较佳的软件性能。 所以软件就有 i386, i686 及 x86_64 之分。以目前 (2009) 的主流硬件来说，几乎都是 x86_64 的天下！ 但是毕竟旧机器还是非常多，以鸟哥的环境来说，我用 P-III 等级的计算机，所以上头就发现我的等级是 i686 啦！</p>\n<p>要留意的是，较高阶的硬件通常会向下兼容旧有的软件，但较高阶的软件可能无法在旧机器上面安装！ 我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0130designlinux.php#beforeinstall_distro\">第三章</a>就曾说明过， 这里再强调一次，你可以在 x86_64 的硬件上安装 i386 的 Linux 操作系统，但是你无法在 i686 的硬件上安装 x86_64 的 Linux 操作系统！这点得要牢记在心！</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>export</strong>： <strong>自定义变量转成环境变量</strong></li>\n</ul>\n<p>谈了 env 与 set 现在知道有所谓的环境变量与自定义变量，那么这两者之间有啥差异呢？其实这两者的差异在于『 该变量是否会被子程序所继续引用』啦！唔！那么啥是父程序？子程序？ 这就得要了解一下命令的下达行为了。</p>\n<p>当你登陆 Linux 并取得一个 bash 之后，你的 bash 就是一个独立的程序，被称为 PID 的就是。 接下来你在这个 bash 底下所下达的任何命令都是由这个 bash 所衍生出来的，那些被下达的命令就被称为子程序了。 我们可以用底下的图示来简单的说明一下父程序与子程序的概念：</p>\n<p><img src=\"/media/ppid.gif\" alt=\"程序相关性示意图\"><br>图 2.3.1、程序相关性示意图</p>\n<p>如上所示，我们在原本的 bash 底下运行另一个 bash ，结果操作的环境接口会跑到第二个 bash 去(就是子程序)， 那原本的 bash 就会在暂停的情况 (睡着了，就是 sleep)。整个命令运行的环境是实线的部分！若要回到原本的 bash 去， 就只有将第二个 bash 结束掉 (下达 exit 或 logout) 才行。更多的程序概念我们会在第四篇谈及，这里只要有这个概念即可。</p>\n<p>这个程序概念与变量有啥关系啊？关系可大了！因为子程序仅会继承父程序的环境变量， 子程序不会继承父程序的自定义变量啦！所以你在原本 bash 的自定义变量在进入了子程序后就会消失不见， 一直到你离开子程序并回到原本的父程序后，这个变量才会又出现！</p>\n<p>换个角度来想，也就是说，如果我能将自定义变量变成环境变量的话，那不就可以让该变量值继续存在于子程序了？ 呵呵！没错！此时，那个 export 命令就很有用啦！如你想要让该变量内容继续的在子程序中使用，那么就请运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# export 变量名称 </span><br></pre></td></tr></table></figure>\n\n<p>这东西用在『分享自己的变量配置给后来呼叫的文件或其他程序』啦！ 像鸟哥常常在自己的主控文件后面呼叫其他附属文件(类似函式的功能)，但是主控文件与附属文件内都有相同的变量名称， 若一再重复配置时，要修改也很麻烦，此时只要在原本的第一个文件内配置好『 export 变量 』， 后面所呼叫的文件就能够使用这个变量配置了！而不需要重复配置，这非常实用于 shell script 当中喔！ 如果仅下达 export 而没有接变量时，那么此时将会把所有的『环境变量』秀出来喔！例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# export declare -x HISTSIZE=&quot;1000&quot; declare -x HOME=&quot;/root&quot; declare -x HOSTNAME=&quot;www.vbird.tsai&quot; declare -x INPUTRC=&quot;/etc/inputrc&quot; declare -x LANG=&quot;en_US&quot; declare -x LOGNAME=&quot;root&quot; # 后面的鸟哥就都直接省略了！不然....浪费版面～ ^_^ </span><br></pre></td></tr></table></figure>\n\n<p>那如何将环境变量转成自定义变量呢？可以使用本章后续介绍的 <a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_2.php#declare\">declare</a> 呢！</p>\n<hr>\n<h2 id=\"影响显示结果的语系变量-locale\"><a href=\"#影响显示结果的语系变量-locale\" class=\"headerlink\" title=\"影响显示结果的语系变量 (locale)\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>影响显示结果的语系变量 (locale)</strong></h2><p>还记得我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_cmd_lang\">第五章里面提到的语系问题</a>吗？ 就是当我们使用 man command 的方式去查询某个数据的说明文件时，该说明档的内容可能会因为我们使用的语系不同而产生乱码。 另外，利用 ls 查询文件的时间时，也可能会有乱码出现在时间的部分。那个问题其实就是语系的问题啦。</p>\n<p>目前大多数的 Linux distributions 已经都是支持日渐流行的万国码了，也都支持大部分的国家语系。 这有赖于 <a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_2.php#ps4\">i18n (注4)</a> 支持的帮助呢！ 那么我们的 Linux 到底支持了多少的语系呢？这可以由 locale 这个命令来查询到喔！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# locale -a</span><br><span class=\"line\">....(前面省略)....</span><br><span class=\"line\">zh_TW</span><br><span class=\"line\">zh_TW.big5     &lt;==大五码的中文编码</span><br><span class=\"line\">zh_TW.euctw</span><br><span class=\"line\">zh_TW.utf8     &lt;==万国码的中文编码</span><br><span class=\"line\">zu_ZA</span><br><span class=\"line\">zu_ZA.iso88591</span><br><span class=\"line\">zu_ZA.utf8</span><br></pre></td></tr></table></figure>\n\n<p>正体中文语系至少支持了两种以上的编码，一种是目前还是很常见的 big5 ，另一种则是越来越热门的 utf-8 编码。 那么我们如何修订这些编码呢？其实可以透过底下这些变量的说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# locale  &lt;==后面不加任何选项与参数即可！</span><br><span class=\"line\">LANG=en_US                   &lt;==主语言的环境</span><br><span class=\"line\">LC_CTYPE=&quot;en_US&quot;             &lt;==字符(文字)辨识的编码</span><br><span class=\"line\">LC_NUMERIC=&quot;en_US&quot;           &lt;==数字系统的显示信息</span><br><span class=\"line\">LC_TIME=&quot;en_US&quot;              &lt;==时间系统的显示数据</span><br><span class=\"line\">LC_COLLATE=&quot;en_US&quot;           &lt;==字符串的比较与排序等</span><br><span class=\"line\">LC_MONETARY=&quot;en_US&quot;          &lt;==币值格式的显示等</span><br><span class=\"line\">LC_MESSAGES=&quot;en_US&quot;          &lt;==信息显示的内容，如菜单、错误信息等</span><br><span class=\"line\">LC_ALL=                      &lt;==整体语系的环境</span><br><span class=\"line\">....(后面省略)....</span><br></pre></td></tr></table></figure>\n\n<p>基本上，你可以逐一配置每个与语系有关的变量数据，但事实上，如果其他的语系变量都未配置， 且你有配置 LANG 或者是 LC_ALL 时，则其他的语系变量就会被这两个变量所取代！ 这也是为什么我们在 Linux 当中，通常说明仅配置 LANG 这个变量而已，因为他是最主要的配置变量！ 好了，那么你应该要觉得奇怪的是，为什么在 Linux 主机的终端机接口 (tty1 ~ tty6) 的环境下，如果配置『 LANG&#x3D;zh_TW.big5 』这个配置值生效后，使用 man 或者其他信息输出时， 都会有一堆乱码，尤其是使用 ls -l 这个参数时？</p>\n<p>因为在 Linux 主机的终端机接口环境下是无法显示像中文这么复杂的编码文字， 所以就会产生乱码了。也就是如此，我们才会必须要在 tty1 ~ tty6 的环境下， 加装一些中文化接口的软件，才能够看到中文啊！不过，如果你是在 MS Windows 主机以远程联机服务器的软件联机到主机的话，那么，嘿嘿！其实文字接口确实是可以看到中文的。 此时反而你得要在 LANG 配置中文编码才好呢！</p>\n<p>你当然可以让每个使用者自己去调整自己喜好的语系，但是整体系统默认的语系定义在哪里呢？ 其实就是在 &#x2F;etc&#x2F;sysconfig&#x2F;i18n 啰！这个文件在 CentOS 5.x 的内容有点像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# cat /etc/sysconfig/i18n </span><br><span class=\"line\">LANG=&quot;zh_TW.UTF-8&quot; </span><br></pre></td></tr></table></figure>\n\n<p>因为鸟哥在<a href=\"http://cn.linux.vbird.org/linux_basic/0157installcentos5.php\">第四章的安装时</a>选择的是中文语系安装画面， 所以这个文件默认就会使用中文编码啦！你也可以自行将他改成你想要的语系编码即可。</p>\n<hr>\n<h2 id=\"变量的有效范围\"><a href=\"#变量的有效范围\" class=\"headerlink\" title=\"变量的有效范围\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>变量的有效范围</strong></h2><p>什么？变量也有使用的『范围』？没错啊～我们在上头的 <a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_2.php#export\">export</a> 命令说明中，就提到了这个概念了。如果在跑程序的时候，有父程序与子程序的不同程序关系时， 则『变量』可否被引用与 export 有关。被 export 后的变量，我们可以称他为『环境变量』！ 环境变量可以被子程序所引用，但是其他的自定义变量内容就不会存在于子程序中。</p>\n<p>在学理方面，为什么环境变量的数据可以被子程序所引用呢？这是因为内存配置的关系！理论上是这样的：</p>\n<ul>\n<li>当启动一个 shell，操作系统会分配一记忆区块给 shell 使用，此内存内之变量可让子程序取用</li>\n<li>若在父程序利用 export 功能，可以让自定义变量的内容写到上述的记忆区块当中(环境变量)；</li>\n<li>当加载另一个 shell 时 (亦即启动子程序，而离开原本的父程序了)，子 shell 可以将父 shell 的环境变量所在的记忆区块导入自己的环境变量区块当中。</li>\n</ul>\n<p>透过这样的关系，我们就可以让某些变量在相关的程序之间存在，以帮助自己更方便的操作环境喔！ 不过要提醒的是，这个『环境变量』与『bash 的操作环境』意思不太一样，举例来说， PS1 并不是环境变量， 但是这个 PS1 会影响到 bash 的接口 (提示字符嘛)！相关性要厘清喔！^_^</p>\n<hr>\n<h2 id=\"变量键盘读取、数组与宣告：-read-array-declare\"><a href=\"#变量键盘读取、数组与宣告：-read-array-declare\" class=\"headerlink\" title=\"变量键盘读取、数组与宣告： read, array, declare\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>变量键盘读取、数组与宣告： read, array, declare</strong></h2><p>我们上面提到的变量配置功能，都是由命令列直接配置的，那么，可不可以让用户能够经由键盘输入？ 什么意思呢？是否记得某些程序运行的过程当中，会等待使用者输入 “yes&#x2F;no” 之类的信息啊？ 在 bash 里面也有相对应的功能喔！此外，我们还可以宣告这个变量的属性， 例如：数组或者是数字等等的。底下就来看看吧！</p>\n<hr>\n<ul>\n<li><h3 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h3></li>\n</ul>\n<p>要读取来自键盘输入的变量，就是用 read 这个命令了。这个命令最常被用在 shell script 的撰写当中， 想要跟使用者对谈？用这个命令就对了。关于 script 的写法，我们会在第十三章介绍，底下先来瞧一瞧 read 的相关语法吧！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# read [-pt] variable</span><br><span class=\"line\">选项与参数：</span><br><span class=\"line\">-p  ：后面可以接提示字符！</span><br><span class=\"line\">-t  ：后面可以接等待的『秒数！』这个比较有趣～不会一直等待使用者啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例一：让用户由键盘输入一内容，将该内容变成名为 atest 的变量</span><br><span class=\"line\">[root@www ~]# read atest</span><br><span class=\"line\">This is a test        &lt;==此时光标会等待你输入！请输入左侧文字看看</span><br><span class=\"line\">[root@www ~]# echo $atest</span><br><span class=\"line\">This is a test          &lt;==你刚刚输入的数据已经变成一个变量内容！</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：提示使用者 30 秒内输入自己的大名，将该输入字符串作为名为 named 的变量内容</span><br><span class=\"line\">[root@www ~]# read -p &quot;Please keyin your name: &quot; -t 30 named</span><br><span class=\"line\">Please keyin your name: VBird Tsai   &lt;==注意看，会有提示字符喔！</span><br><span class=\"line\">[root@www ~]# echo $named</span><br><span class=\"line\">VBird Tsai        &lt;==输入的数据又变成一个变量的内容了！</span><br></pre></td></tr></table></figure>\n\n<p>read 之后不加任何参数，直接加上变量名称，那么底下就会主动出现一个空白行等待你的输入(如范例一)。 如果加上 -t 后面接秒数，例如上面的范例二，那么 30 秒之内没有任何动作时， 该命令就会自动略过了～如果是加上 -p ，嘿嘿！在输入的光标前就会有比较多可以用的提示字符给我们参考！ 在命令的下达里面，比较美观啦！ ^_^</p>\n<hr>\n<ul>\n<li><h3 id=\"declare-typeset\"><a href=\"#declare-typeset\" class=\"headerlink\" title=\"declare &#x2F; typeset\"></a>declare &#x2F; typeset</h3></li>\n</ul>\n<p>declare 或 typeset 是一样的功能，就是在『宣告变量的类型』。如果使用 declare 后面并没有接任何参数，那么 bash 就会主动的将所有的变量名称与内容通通叫出来，就好像使用 set 一样啦！ 那么 declare 还有什么语法呢？看看先：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# declare [-aixr] variable</span><br><span class=\"line\">选项与参数：</span><br><span class=\"line\">-a  ：将后面名为 variable 的变量定义成为数组 (array) 类型</span><br><span class=\"line\">-i  ：将后面名为 variable 的变量定义成为整数数字 (integer) 类型</span><br><span class=\"line\">-x  ：用法与 export 一样，就是将后面的 variable 变成环境变量；</span><br><span class=\"line\">-r  ：将变量配置成为 readonly 类型，该变量不可被更改内容，也不能 unset</span><br><span class=\"line\"></span><br><span class=\"line\">范例一：让变量 sum 进行 100+300+50 的加总结果</span><br><span class=\"line\">[root@www ~]# sum=100+300+50</span><br><span class=\"line\">[root@www ~]# echo $sum</span><br><span class=\"line\">100+300+50  &lt;==咦！怎么没有帮我计算加总？因为这是文字型态的变量属性啊！</span><br><span class=\"line\">[root@www ~]# declare -i sum=100+300+50</span><br><span class=\"line\">[root@www ~]# echo $sum</span><br><span class=\"line\">450         &lt;==瞭乎？？</span><br></pre></td></tr></table></figure>\n\n<p>由于在默认的情况底下， bash 对于变量有几个基本的定义：</p>\n<ul>\n<li>变量类型默认为『字符串』，所以若不指定变量类型，则 1+2 为一个『字符串』而不是『计算式』。 所以上述第一个运行的结果才会出现那个情况的；</li>\n<li>bash 环境中的数值运算，默认最多仅能到达整数形态，所以 1&#x2F;3 结果是 0；</li>\n</ul>\n<p>现在你晓得为啥你需要进行变量宣告了吧？如果需要非字符串类型的变量，那就得要进行变量的宣告才行啦！ 底下继续来玩些其他的 declare 功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例二：将 sum 变成环境变量</span><br><span class=\"line\">[root@www ~]# declare -x sum</span><br><span class=\"line\">[root@www ~]# export | grep sum</span><br><span class=\"line\">declare -ix sum=&quot;450&quot;  &lt;==果然出现了！包括有 i 与 x 的宣告！</span><br><span class=\"line\"></span><br><span class=\"line\">范例三：让 sum 变成只读属性，不可更动！</span><br><span class=\"line\">[root@www ~]# declare -r sum</span><br><span class=\"line\">[root@www ~]# sum=tesgting</span><br><span class=\"line\">-bash: sum: readonly variable  &lt;==老天爷～不能改这个变量了！</span><br><span class=\"line\"></span><br><span class=\"line\">范例四：让 sum 变成非环境变量的自定义变量吧！</span><br><span class=\"line\">[root@www ~]# declare +x sum  &lt;== 将 - 变成 + 可以进行『取消』动作</span><br><span class=\"line\">[root@www ~]# declare -p sum  &lt;== -p 可以单独列出变量的类型</span><br><span class=\"line\">declare -ir sum=&quot;450&quot; &lt;== 看吧！只剩下 i, r 的类型，不具有 x 啰！</span><br></pre></td></tr></table></figure>\n\n<p>declare 也是个很有用的功能～尤其是当我们需要使用到底下的数组功能时， 他也可以帮我们宣告数组的属性喔！不过，老话一句，数组也是在 shell script 比较常用的啦！ 比较有趣的是，如果你不小心将变量配置为『只读』，通常得要注销再登陆才能复原该变量的类型了！ @_@</p>\n<hr>\n<ul>\n<li><h3 id=\"数组-array-变量类型\"><a href=\"#数组-array-变量类型\" class=\"headerlink\" title=\"数组 (array) 变量类型\"></a>数组 (array) 变量类型</h3></li>\n</ul>\n<p>某些时候，我们必须使用数组来宣告一些变量，这有什么好处啊？在一般人的使用上， 果然是看不出来有什么好处的！不过，如果您曾经写过程序的话，那才会比较了解数组的意义～ 数组对写数值程序的设计师来说，可是不能错过学习的重点之一哩！好！不啰唆～ 那么要如何配置数组的变量与内容呢？在 bash 里头，数组的配置方式是：</p>\n<blockquote>\n<p>var[index]&#x3D;content</p>\n</blockquote>\n<p>意思是说，我有一个数组名为 var ，而这个数组的内容为 var[1]&#x3D;小明， var[2]&#x3D;大明， var[3]&#x3D;好明 …. 等等，那个 index 就是一些数字啦，重点是用中刮号 ([ ]) 来配置的。 目前我们 bash 提供的是一维数组。老实说，如果您不必写一些复杂的程序， 那么这个数组的地方，可以先略过，等到有需要再来学习即可！因为要制作出数组， 通常与循环或者其他判断式交互使用才有比较高的存在意义！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例：配置上面提到的 var[1] ～ var[3] 的变量。</span><br><span class=\"line\">[root@www ~]# var[1]=&quot;small min&quot;</span><br><span class=\"line\">[root@www ~]# var[2]=&quot;big min&quot;</span><br><span class=\"line\">[root@www ~]# var[3]=&quot;nice min&quot;</span><br><span class=\"line\">[root@www ~]# echo &quot;$&#123;var[1]&#125;, $&#123;var[2]&#125;, $&#123;var[3]&#125;&quot;</span><br><span class=\"line\">small min, big min, nice min</span><br></pre></td></tr></table></figure>\n\n<p>数组的变量类型比较有趣的地方在于『读取』，一般来说，建议直接以 ${数组} 的方式来读取，比较正确无误的啦！</p>\n<hr>\n<h2 id=\"与文件系统及程序的限制关系：-ulimit\"><a href=\"#与文件系统及程序的限制关系：-ulimit\" class=\"headerlink\" title=\"与文件系统及程序的限制关系： ulimit\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>与文件系统及程序的限制关系： ulimit</strong></h2><p>想象一个状况：我的 Linux 主机里面同时登陆了十个人，这十个人不知怎么搞的， 同时开启了 100 个文件，每个文件的大小约 10MBytes ，请问一下， 我的 Linux 主机的内存要有多大才够？ 10<em>100</em>10 &#x3D; 10000 MBytes &#x3D; 10GBytes … 老天爷，这样，系统不挂点才有鬼哩！为了要预防这个情况的发生，所以我们的 bash 是可以『限制用户的某些系统资源』的，包括可以开启的文件数量， 可以使用的 CPU 时间，可以使用的内存总量等等。如何配置？用 ulimit 吧！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@www ~]# ulimit [-SHacdfltu] [配额]</span><br><span class=\"line\">选项与参数：</span><br><span class=\"line\">-H  ：hard limit ，严格的配置，必定不能超过这个配置的数值；</span><br><span class=\"line\">-S  ：soft limit ，警告的配置，可以超过这个配置值，但是若超过则有警告信息。</span><br><span class=\"line\">      在配置上，通常 soft 会比 hard 小，举例来说，soft 可配置为 80 而 hard </span><br><span class=\"line\">      配置为 100，那么你可以使用到 90 (因为没有超过 100)，但介于 80~100 之间时，</span><br><span class=\"line\">      系统会有警告信息通知你！</span><br><span class=\"line\">-a  ：后面不接任何选项与参数，可列出所有的限制额度；</span><br><span class=\"line\">-c  ：当某些程序发生错误时，系统可能会将该程序在内存中的信息写成文件(除错用)，</span><br><span class=\"line\">      这种文件就被称为核心文件(core file)。此为限制每个核心文件的最大容量。</span><br><span class=\"line\">-f  ：此 shell 可以创建的最大文件容量(一般可能配置为 2GB)单位为 Kbytes</span><br><span class=\"line\">-d  ：程序可使用的最大断裂内存(segment)容量；</span><br><span class=\"line\">-l  ：可用于锁定 (lock) 的内存量</span><br><span class=\"line\">-t  ：可使用的最大 CPU 时间 (单位为秒)</span><br><span class=\"line\">-u  ：单一用户可以使用的最大程序(process)数量。</span><br><span class=\"line\"></span><br><span class=\"line\">范例一：列出你目前身份(假设为root)的所有限制数据数值</span><br><span class=\"line\">[root@www ~]# ulimit -a</span><br><span class=\"line\">core file size          (blocks, -c) 0          &lt;==只要是 0 就代表没限制</span><br><span class=\"line\">data seg size           (kbytes, -d) unlimited</span><br><span class=\"line\">scheduling priority             (-e) 0</span><br><span class=\"line\">file size               (blocks, -f) unlimited  &lt;==可创建的单一文件的大小</span><br><span class=\"line\">pending signals                 (-i) 11774</span><br><span class=\"line\">max locked memory       (kbytes, -l) 32</span><br><span class=\"line\">max memory size         (kbytes, -m) unlimited</span><br><span class=\"line\">open files                      (-n) 1024       &lt;==同时可开启的文件数量</span><br><span class=\"line\">pipe size            (512 bytes, -p) 8</span><br><span class=\"line\">POSIX message queues     (bytes, -q) 819200</span><br><span class=\"line\">real-time priority              (-r) 0</span><br><span class=\"line\">stack size              (kbytes, -s) 10240</span><br><span class=\"line\">cpu time               (seconds, -t) unlimited</span><br><span class=\"line\">max user processes              (-u) 11774</span><br><span class=\"line\">virtual memory          (kbytes, -v) unlimited</span><br><span class=\"line\">file locks                      (-x) unlimited</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：限制用户仅能创建 10MBytes 以下的容量的文件</span><br><span class=\"line\">[root@www ~]# ulimit -f 10240</span><br><span class=\"line\">[root@www ~]# ulimit -a</span><br><span class=\"line\">file size               (blocks, -f) 10240 &lt;==最大量为10240Kbyes，相当10Mbytes</span><br><span class=\"line\">[root@www ~]# dd if=/dev/zero of=123 bs=1M count=20</span><br><span class=\"line\">File size limit exceeded &lt;==尝试创建 20MB 的文件，结果失败了！</span><br></pre></td></tr></table></figure>\n\n<p>还记得我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0230filesystem.php\">第八章 Linux 磁盘文件系统</a>里面提到过，单一 filesystem 能够支持的单一文件大小与 block 的大小有关。例如 block size 为 1024 byte 时，单一文件可达 16GB 的容量。但是，我们可以用 ulimit 来限制使用者可以创建的文件大小喔！ 利用 ulimit -f 就可以来配置了！例如上面的范例二，要注意单位喔！单位是 Kbytes。 若改天你一直无法创建一个大容量的文件，记得瞧一瞧 ulimit 的信息喔！</p>\n<hr>\n<h2 id=\"变量内容的删除、取代与替换\"><a href=\"#变量内容的删除、取代与替换\" class=\"headerlink\" title=\"变量内容的删除、取代与替换\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>变量内容的删除、取代与替换</strong></h2><p>变量除了可以直接配置来修改原本的内容之外，有没有办法透过简单的动作来将变量的内容进行微调呢？ 举例来说，进行变量内容的删除、取代与替换等！是可以的！我们可以透过几个简单的小步骤来进行变量内容的微调喔！ 底下就来试试看！</p>\n<hr>\n<ul>\n<li><h3 id=\"变量内容的删除与取代\"><a href=\"#变量内容的删除与取代\" class=\"headerlink\" title=\"变量内容的删除与取代\"></a>变量内容的删除与取代</h3></li>\n</ul>\n<p>变量的内容可以很简单的透过几个咚咚来进行删除喔！我们使用 PATH 这个变量的内容来做测试好了。 请你依序进行底下的几个例子来玩玩，比较容易感受的到鸟哥在这里想要表达的意义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：先让小写的 path 自定义变量配置的与 PATH 内容相同</span><br><span class=\"line\">[root@www ~]# path=$&#123;PATH&#125;</span><br><span class=\"line\">[root@www ~]# echo $path</span><br><span class=\"line\">/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\">/usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：假设我不喜欢 kerberos，所以要将前两个目录删除掉，如何显示？</span><br><span class=\"line\">[root@www ~]# echo $&#123;path#/*kerberos/bin:&#125;</span><br><span class=\"line\">/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure>\n\n<p>上面这个范例很有趣的！他的重点可以用底下这张表格来说明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;variable#/*kerberos/bin:&#125;</span><br><span class=\"line\">   上面的特殊字体部分是关键词！用在这种删除模式所必须存在的</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;variable#/*kerberos/bin:&#125;</span><br><span class=\"line\">   这就是原本的变量名称，以上面范例二来说，这里就填写 path 这个『变量名称』啦！</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;variable#/*kerberos/bin:&#125;</span><br><span class=\"line\">   这是重点！代表『从变量内容的最前面开始向右删除』，且仅删除最短的那个</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;variable#/*kerberos/bin:&#125;</span><br><span class=\"line\">   代表要被删除的部分，由于 # 代表由前面开始删除，所以这里便由开始的 / 写起。</span><br><span class=\"line\">   需要注意的是，我们还可以透过通配符 * 来取代 0 到无穷多个任意字符</span><br><span class=\"line\"></span><br><span class=\"line\">   以上面范例二的结果来看， path 这个变量被删除的内容如下所示：</span><br><span class=\"line\">/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\">/usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br></pre></td></tr></table></figure>\n\n<p>很有趣吧！这样了解了 # 的功能了吗？接下来让我们来看看底下的范例三！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例三：我想要删除前面所有的目录，仅保留最后一个目录</span><br><span class=\"line\">[root@www ~]# echo $&#123;path#/*:&#125;</span><br><span class=\"line\">/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:</span><br><span class=\"line\">/root/bin     &lt;==这两行其实是同一行啦！</span><br><span class=\"line\"># 由于一个 # 仅删除掉最短的那个，因此他删除的情况可以用底下的删除线来看：</span><br><span class=\"line\"># /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\"># /usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br><span class=\"line\"></span><br><span class=\"line\">[root@www ~]# echo $&#123;path##/*:&#125;</span><br><span class=\"line\">/root/bin</span><br><span class=\"line\"># 嘿！多加了一个 # 变成 ## 之后，他变成『删除掉最长的那个数据』！亦即是：</span><br><span class=\"line\"># /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\"># /usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br></pre></td></tr></table></figure>\n\n<p>非常有趣！不是吗？因为在 PATH 这个变量的内容中，每个目录都是以冒号『:』隔开的， 所以要从头删除掉目录就是介于斜线 (&#x2F;) 到冒号 (:) 之间的数据！但是 PATH 中不止一个冒号 (:) 啊！ 所以 # 与 ## 就分别代表：</p>\n<ul>\n<li># ：符合取代文字的『最短的』那一个；</li>\n<li>##：符合取代文字的『最长的』那一个</li>\n</ul>\n<p>上面谈到的是『从前面开始删除变量内容』，那么如果想要『从后面向前删除变量内容』呢？ 这个时候就得使用百分比 (%) 符号了！来看看范例四怎么做吧！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例四：我想要删除最后面那个目录，亦即从 : 到 bin 为止的字符串</span><br><span class=\"line\">[root@www ~]# echo $&#123;path%:*bin&#125;</span><br><span class=\"line\">/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\">/usr/sbin:/usr/bin  &lt;==注意啊！最后面一个目录不见去！</span><br><span class=\"line\"># 这个 % 符号代表由最后面开始向前删除！所以上面得到的结果其实是来自如下：</span><br><span class=\"line\"># /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\"># /usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例五：那如果我只想要保留第一个目录呢？</span><br><span class=\"line\">[root@www ~]# echo $&#123;path%%:*bin&#125;</span><br><span class=\"line\">/usr/kerberos/sbin</span><br><span class=\"line\"># 同样的， %% 代表的则是最长的符合字符串，所以结果其实是来自如下：</span><br><span class=\"line\"># /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\"># /usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br></pre></td></tr></table></figure>\n\n<p>由于我是想要由变量内容的后面向前面删除，而我这个变量内容最后面的结尾是『&#x2F;root&#x2F;bin』， 所以你可以看到上面我删除的数据最终一定是『bin』，亦即是『:*bin』那个 * 代表通配符！ 至于 % 与 %% 的意义其实与 # 及 ## 类似！这样理解否？</p>\n<p>了解了删除功能后，接下来谈谈取代吧！继续玩玩范例六啰！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">范例六：将 path 的变量内容内的 sbin 取代成大写 SBIN：</span><br><span class=\"line\">[root@www ~]# echo $&#123;path/sbin/SBIN&#125;</span><br><span class=\"line\">/usr/kerberos/SBIN:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\">/usr/sbin:/usr/bin:/root/bin</span><br><span class=\"line\"># 这个部分就容易理解的多了！关键词在于那两个斜线，两斜线中间的是旧字符串</span><br><span class=\"line\"># 后面的是新字符串，所以结果就会出现如上述的特殊字体部分啰！</span><br><span class=\"line\"></span><br><span class=\"line\">[root@www ~]# echo $&#123;path//sbin/SBIN&#125;</span><br><span class=\"line\">/usr/kerberos/SBIN:/usr/kerberos/bin:/usr/local/SBIN:/usr/local/bin:/SBIN:/bin:</span><br><span class=\"line\">/usr/SBIN:/usr/bin:/root/bin</span><br><span class=\"line\"># 如果是两条斜线，那么就变成所有符合的内容都会被取代喔！</span><br></pre></td></tr></table></figure>\n\n<p>我们将这部份作个总结说明一下：</p>\n<table>\n<thead>\n<tr>\n<th>变量配置方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>${变量#关键词} ${变量##关键词}</td>\n<td>若变量内容从头开始的数据符合『关键词』，则将符合的最短数据删除 若变量内容从头开始的数据符合『关键词』，则将符合的最长数据删除</td>\n</tr>\n<tr>\n<td>${变量%关键词} ${变量%%关键词}</td>\n<td>若变量内容从尾向前的数据符合『关键词』，则将符合的最短数据删除 若变量内容从尾向前的数据符合『关键词』，则将符合的最长数据删除</td>\n</tr>\n<tr>\n<td>${变量&#x2F;旧字符串&#x2F;新字符串} ${变量&#x2F;&#x2F;旧字符串&#x2F;新字符串}</td>\n<td>若变量内容符合『旧字符串』则『第一个旧字符串会被新字符串取代』 若变量内容符合『旧字符串』则『全部的旧字符串会被新字符串取代』</td>\n</tr>\n</tbody></table>\n<hr>\n<ul>\n<li><h3 id=\"变量的测试与内容替换\"><a href=\"#变量的测试与内容替换\" class=\"headerlink\" title=\"变量的测试与内容替换\"></a>变量的测试与内容替换</h3></li>\n</ul>\n<p>在某些时刻我们常常需要『判断』某个变量是否存在，若变量存在则使用既有的配置，若变量不存在则给予一个常用的配置。 我们举底下的例子来说明好了，看看能不能较容易被你所理解呢！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：测试一下是否存在 username 这个变量，若不存在则给予 username 内容为 root [root@www ~]# echo $username           &lt;==由于出现空白，所以 username 可能不存在，也可能是空字符串 [root@www ~]# username=$&#123;username-root&#125; [root@www ~]# echo $username root       &lt;==因为 username 没有配置，所以主动给予名为 root 的内容。 [root@www ~]# username=&quot;vbird tsai&quot; &lt;==主动配置 username 的内容 [root@www ~]# username=$&#123;username-root&#125; [root@www ~]# echo $username vbird tsai &lt;==因为 username 已经配置了，所以使用旧有的配置而不以 root 取代 </span><br></pre></td></tr></table></figure>\n\n<p>在上面的范例中，重点在于减号『 - 』后面接的关键词！基本上你可以这样理解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_var=$&#123;old_var-content&#125;   新的变量，主要用来取代旧变量。新旧变量名称其实常常是一样的 new_var=$&#123;old_var-content&#125;   这是本范例中的关键词部分！必须要存在的哩！ new_var=$&#123;old_var-content&#125;   旧的变量，被测试的项目！ new_var=$&#123;old_var-content&#125;   变量的『内容』，在本范例中，这个部分是在『给予未配置变量的内容』 </span><br></pre></td></tr></table></figure>\n\n<p>不过这还是有点问题！因为 username 可能已经被配置为『空字符串』了！果真如此的话，那你还可以使用底下的范例来给予 username 的内容成为 root 喔！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例二：若 username 未配置或为空字符串，则将 username 内容配置为 root [root@www ~]# username=&quot;&quot; [root@www ~]# username=$&#123;username-root&#125; [root@www ~]# echo $username      &lt;==因为 username 被配置为空字符串了！所以当然还是保留为空字符串！ [root@www ~]# username=$&#123;username:-root&#125; [root@www ~]# echo $username root  &lt;==加上『 : 』后若变量内容为空或者是未配置，都能够以后面的内容替换！ </span><br></pre></td></tr></table></figure>\n\n<p>在大括号内有没有冒号『 : 』的差别是很大的！加上冒号后，被测试的变量未被配置或者是已被配置为空字符串时， 都能够用后面的内容 (本例中是使用 root 为内容) 来替换与配置！这样可以了解了吗？除了这样的测试之外， 还有其他的测试方法喔！鸟哥将他整理如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>Tips:</strong> 底下的例子当中，那个 var 与 str 为变量，我们想要针对 str 是否有配置来决定 var 的值喔！ 一般来说， str: 代表『str 没配置或为空的字符串时』；至于 str 则仅为『没有该变量』。</th>\n<th><img src=\"http://cn.linux.vbird.org/linux_basic/0320bash_files/vbird_face.gif\" alt=\"鸟哥的图示\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>变量配置方式</th>\n<th>str 没有配置</th>\n<th>str 为空字符串</th>\n<th>str 已配置非为空字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var&#x3D;${str-expr}</td>\n<td>var&#x3D;expr</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str:-expr}</td>\n<td>var&#x3D;expr</td>\n<td>var&#x3D;expr</td>\n<td>var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str+expr}</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;expr</td>\n<td>var&#x3D;expr</td>\n</tr>\n<tr>\n<td>var&#x3D;${str:+expr}</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;expr</td>\n</tr>\n<tr>\n<td>var&#x3D;${str&#x3D;expr}</td>\n<td>str&#x3D;expr var&#x3D;expr</td>\n<td>str 不变 var&#x3D;</td>\n<td>str 不变 var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str:&#x3D;expr}</td>\n<td>str&#x3D;expr var&#x3D;expr</td>\n<td>str&#x3D;expr var&#x3D;expr</td>\n<td>str 不变 var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str?expr}</td>\n<td>expr 输出至 stderr</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str:?expr}</td>\n<td>expr 输出至 stderr</td>\n<td>expr 输出至 stderr</td>\n<td>var&#x3D;$str</td>\n</tr>\n</tbody></table>\n<p>根据上面这张表，我们来进行几个范例的练习吧！ ^_^！首先让我们来测试一下，如果旧变量 (str) 不存在时， 我们要给予新变量一个内容，若旧变量存在则新变量内容以旧变量来替换，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：测试一下是否存在 username 这个变量，若不存在则给予 username 内容为 root</span><br><span class=\"line\">[root@www ~]# echo $username</span><br><span class=\"line\">           &lt;==由于出现空白，所以 username 可能不存在，也可能是空字符串</span><br><span class=\"line\">[root@www ~]# username=$&#123;username-root&#125;</span><br><span class=\"line\">[root@www ~]# echo $username</span><br><span class=\"line\">root       &lt;==因为 username 没有配置，所以主动给予名为 root 的内容。</span><br><span class=\"line\">[root@www ~]# username=&quot;vbird tsai&quot; &lt;==主动配置 username 的内容</span><br><span class=\"line\">[root@www ~]# username=$&#123;username-root&#125;</span><br><span class=\"line\">[root@www ~]# echo $username</span><br><span class=\"line\">vbird tsai &lt;==因为 username 已经配置了，所以使用旧有的配置而不以 root 取代</span><br></pre></td></tr></table></figure>\n\n<p>关于减号 (-) 其实上面我们谈过了！这里的测试只是要让你更加了解，这个减号的测试并不会影响到旧变量的内容。 如果你想要将旧变量内容也一起替换掉的话，那么就使用等号 (&#x3D;) 吧！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_var=$&#123;old_var-content&#125;</span><br><span class=\"line\">   新的变量，主要用来取代旧变量。新旧变量名称其实常常是一样的</span><br><span class=\"line\"></span><br><span class=\"line\">new_var=$&#123;old_var-content&#125;</span><br><span class=\"line\">   这是本范例中的关键词部分！必须要存在的哩！</span><br><span class=\"line\"></span><br><span class=\"line\">new_var=$&#123;old_var-content&#125;</span><br><span class=\"line\">   旧的变量，被测试的项目！</span><br><span class=\"line\"></span><br><span class=\"line\">new_var=$&#123;old_var-content&#125;</span><br><span class=\"line\">   变量的『内容』，在本范例中，这个部分是在『给予未配置变量的内容』</span><br></pre></td></tr></table></figure>\n\n<p>那如果我只是想知道，如果旧变量不存在时，整个测试就告知我『有错误』，此时就能够使用问号『 ? 』的帮忙啦！ 底下这个测试练习一下先！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">测试：若 str 不存在时，则 var 的测试结果直接显示 &quot;无此变量&quot;</span><br><span class=\"line\">[root@www ~]# unset str; var=$&#123;str?无此变量&#125;</span><br><span class=\"line\">-bash: str: 无此变量    &lt;==因为 str 不存在，所以输出错误信息 </span><br><span class=\"line\"></span><br><span class=\"line\">测试：若 str 存在时，则 var 的内容会与 str 相同！</span><br><span class=\"line\">[root@www ~]# str=&quot;oldvar&quot;; var=$&#123;str?novar&#125;</span><br><span class=\"line\">[root@www ~]# echo var=&quot;$var&quot;, str=&quot;$str&quot;</span><br><span class=\"line\">var=oldvar, str=oldvar  &lt;==因为 str 存在，所以 var 等于 str 的内容</span><br></pre></td></tr></table></figure>\n\n<p>基本上这种变量的测试也能够透过 shell script 内的 if…then… 来处理， 不过既然 bash 有提供这么简单的方法来测试变量，那我们也可以多学一些嘛！ 不过这种变量测试通常是在程序设计当中比较容易出现，如果这里看不懂就先略过，未来有用到判断变量值时，再回来看看吧！ ^_^</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-7.png","cover_type":"img","excerpt":"","more":"<h2 id=\"Shell-的变量功能\"><a href=\"#Shell-的变量功能\" class=\"headerlink\" title=\"Shell 的变量功能\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"大标题的图示\"><strong>Shell 的变量功能</strong></h2><p>变量是 bash 环境中非常重要的一个玩意儿，我们知道 Linux 是多人多任务的环境，每个人登陆系统都能取得一个 bash ， 每个人都能够使用 bash 下达 mail 这个命令来收受『自己』的邮件，问题是， bash 是如何得知你的邮件信箱是哪个文件？ 这就需要『变量』的帮助啦！所以，你说变量重不重要呢？底下我们将介绍重要的环境变量、变量的取用与配置等数据， 呼呼！动动脑时间又来到啰！^_^</p>\n<hr>\n<h2 id=\"什么是变量？\"><a href=\"#什么是变量？\" class=\"headerlink\" title=\"什么是变量？\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>什么是变量？</strong></h2><p>那么，什么是『变量』呢？简单的说，就是让某一个特定字符串代表不固定的内容就是了。举个大家在国中都会学到的数学例子， 那就是：『 y &#x3D; ax + b 』这东西，在等号左边的(y)就是变量，在等号右边的(ax+b)就是变量内容。 要注意的是，左边是未知数，右边是已知数喔！ 讲的更简单一点，我们可以『用一个简单的 “字眼” 来取代另一个比较复杂或者是容易变动的数据』。这有什么好处啊？最大的好处就是『方便！』。</p>\n<hr>\n<ul>\n<li><h3 id=\"变量的可变性与方便性\"><a href=\"#变量的可变性与方便性\" class=\"headerlink\" title=\"变量的可变性与方便性\"></a>变量的可变性与方便性</h3></li>\n</ul>\n<p>举例来说，我们每个账号的邮件信箱默认是以 MAIL 这个变量来进行存取的， 当 dmtsai 这个使用者登陆时，他便会取得 MAIL 这个变量，而这个变量的内容其实就是 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;dmtsai， 那如果 vbird 登陆呢？他取得的 MAIL 这个变量的内容其实就是 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;vbird 。 而我们使用信件读取命令 mail 来读取自己的邮件信箱时，嘿嘿，这支程序可以直接读取 MAIL 这个变量的内容， 就能够自动的分辨出属于自己的信箱信件啰！这样一来，设计程序的设计师就真的很方便的啦！</p>\n<p><img src=\"/media/var_01.gif\" alt=\"程序、变量与不同用户的关系\"><br>图 2.1.1、程序、变量与不同用户的关系</p>\n<p>如上图所示，由于系统已经帮我们规划好 MAIL 这个变量，所以用户只要知道 mail 这个命令如何使用即可， mail 会主动的取用 MAIL 这个变量，就能够如上图所示的取得自己的邮件信箱了！(注意大小写，小写的 mail 是命令， 大写的 MAIL 则是变量名称喔！)</p>\n<p>那么使用变量真的比较好吗？这是当然的！想象一个例子，如果 mail 这个命令将 root 收信的邮件信箱 (mailbox) 档名为 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root 直接写入程序代码中。那么当 dmtsai 要使用 mail 时，将会取得 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;root 这个文件的内容！ 不合理吧！所以你就需要帮 dmtsai 也设计一个 mail 的程序，将 &#x2F;var&#x2F;spool&#x2F;mail&#x2F;dmtsai 写死到 mail 的程序代码当中！ 天吶！那系统要有多少个 mail 命令啊？反过来说，使用变量就变的很简单了！因为你不需要更动到程序代码啊！ 只要将 MAIL 这个变量带入不同的内容即可让所有使用者透过 mail 取得自己的信件！当然简单多了！</p>\n<hr>\n<ul>\n<li><h3 id=\"影响-bash-环境操作的变量\"><a href=\"#影响-bash-环境操作的变量\" class=\"headerlink\" title=\"影响 bash 环境操作的变量\"></a>影响 bash 环境操作的变量</h3></li>\n</ul>\n<p>某些特定变量会影响到 bash 的环境喔！举例来说，我们前面已经提到过很多次的那个 PATH 变量！ 你能不能在任何目录下运行某个命令，与 PATH 这个变量有很大的关系。例如你下达 ls 这个命令时，系统就是透过 PATH 这个变量里面的内容所记录的路径顺序来搜寻命令的呢！如果在搜寻完 PATH 变量内的路径还找不到 ls 这个命令时， 就会在屏幕上显示『 command not found 』的错误信息了。</p>\n<p>如果说的学理一点，那么由于在 Linux System 下面，所有的线程都是需要一个运行码， 而就如同上面提到的，你『真正以 shell 来跟 Linux 沟通，是在正确的登陆 Linux 之后！』这个时候你就有一个 bash 的运行程序，也才可以真正的经由 bash 来跟系统沟通啰！而在进入 shell 之前，也正如同上面提到的，由于系统需要一些变量来提供他数据的存取 (或者是一些环境的配置参数值， 例如是否要显示彩色等等的) ，所以就有一些所谓的『环境变量』 需要来读入系统中了！这些环境变量例如 PATH、HOME、MAIL、SHELL 等等，都是很重要的， 为了区别与自定义变量的不同，环境变量通常以大写字符来表示呢！</p>\n<hr>\n<ul>\n<li><h3 id=\"脚本程序设计-shell-script-的好帮手\"><a href=\"#脚本程序设计-shell-script-的好帮手\" class=\"headerlink\" title=\"脚本程序设计 (shell script) 的好帮手\"></a>脚本程序设计 (shell script) 的好帮手</h3></li>\n</ul>\n<p>这些还都只是系统默认的变量的目的，如果是个人的配置方面的应用呢：例如你要写一个大型的 script 时，有些数据因为可能由于用户习惯的不同而有差异，比如说路径好了，由于该路径在 script 被使用在相当多的地方，如果下次换了一部主机，都要修改 script 里面的所有路径，那么我一定会疯掉！ 这个时候如果使用变量，而将该变量的定义写在最前面，后面相关的路径名称都以变量来取代， 嘿嘿！那么你只要修改一行就等于修改整篇 script 了！方便的很！所以，良好的程序设计师都会善用变量的定义！</p>\n<p><img src=\"/media/var_02.gif\" alt=\"变量应用于 shell script 的示意图\"><br>图 2.1.2、变量应用于 shell script 的示意图</p>\n<p>最后我们就简单的对『什么是变量』作个简单定义好了： 『变量就是以一组文字或符号等，来取代一些配置或者是一串保留的数据！』， 例如：我配置了『myname』就是『VBird』，所以当你读取 myname 这个变量的时候，系统自然就会知道！哈！那就是 VBird 啦！ 那么如何『显示变量』呢？这就需要使用到 echo 这个命令啦！</p>\n<hr>\n<h2 id=\"变量的取用与配置：echo-变量配置守则-unset\"><a href=\"#变量的取用与配置：echo-变量配置守则-unset\" class=\"headerlink\" title=\"变量的取用与配置：echo, 变量配置守则, unset\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>变量的取用与配置：echo, 变量配置守则, unset</strong></h2><p>说的口沫横飞的，也不知道『变量』与『变量代表的内容』有啥关系？ 那我们就将『变量』的『内容』拿出来给您瞧瞧好了。你可以利用 echo 这个命令来取用变量， 但是，变量在被取用时，前面必须要加上钱字号『 $ 』才行，举例来说，要知道 PATH 的内容，该如何是好？</p>\n<hr>\n<ul>\n<li><h3 id=\"变量的取用-echo\"><a href=\"#变量的取用-echo\" class=\"headerlink\" title=\"变量的取用: echo\"></a>变量的取用: echo</h3></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# echo $variable [root@www ~]# echo $PATH /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin [root@www ~]# echo $&#123;PATH&#125; </span><br></pre></td></tr></table></figure>\n\n<p>变量的取用就如同上面的范例，利用 echo 就能够读出，只是需要在变量名称前面加上 $ ， 或者是以 ${变量} 的方式来取用都可以！当然啦，那个 echo 的功能可是很多的， 我们这里单纯是拿 echo 来读出变量的内容而已，更多的 echo 使用，请自行给他 man echo 吧！ ^_^</p>\n<p>例题：请在屏幕上面显示出您的环境变量 HOME 与 MAIL：答：echo $HOME 或者是 echo ${HOME} echo $MAIL 或者是 echo ${MAIL}</p>\n<p>现在我们知道了变量与变量内容之间的相关性了，好了，那么我要如何『配置』或者是『修改』 某个变量的内容啊？很简单啦！用『等号(&#x3D;)』连接变量与他的内容就好啦！举例来说： 我要将 myname 这个变量名称的内容配置为 VBird ，那么：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# echo $myname       &lt;==这里并没有任何数据～因为这个变量尚未被配置！是空的！ [root@www ~]# myname=VBird [root@www ~]# echo $myname VBird  &lt;==出现了！因为这个变量已经被配置了！ </span><br></pre></td></tr></table></figure>\n\n<p>瞧！如此一来，这个变量名称 myname 的内容就带有 VBird 这个数据啰～ 而由上面的例子当中，我们也可以知道： 在 bash 当中，当一个变量名称尚未被配置时，默认的内容是『空』的。 另外，变量在配置时，还是需要符合某些规定的，否则会配置失败喔！ 这些守则如下所示啊！</p>\n<hr>\n<ul>\n<li><h3 id=\"变量的配置守则\"><a href=\"#变量的配置守则\" class=\"headerlink\" title=\"变量的配置守则\"></a>变量的配置守则</h3></li>\n</ul>\n<ol>\n<li><p>变量与变量内容以一个等号『&#x3D;』来连结，如下所示：<br>『myname&#x3D;VBird』</p>\n</li>\n<li><p>等号两边不能直接接空格符，如下所示为错误：<br>『myname &#x3D; VBird』或『myname&#x3D;VBird Tsai』</p>\n</li>\n<li><p>变量名称只能是英文字母与数字，但是开头字符不能是数字，如下为错误：<br>『2myname&#x3D;VBird』</p>\n</li>\n<li><p>变量内容若有空格符可使用双引号『”』或单引号『’』将变量内容结合起来，但</p>\n<ul>\n<li>双引号内的特殊字符如 $ 等，可以保有原本的特性，如下所示：<br>『var&#x3D;”lang is $LANG”』则『echo $var』可得『lang is en_US』</li>\n<li>单引号内的特殊字符则仅为一般字符 (纯文本)，如下所示：<br>『var&#x3D;’lang is $LANG’』则『echo $var』可得『lang is $LANG』</li>\n</ul>\n</li>\n<li><p>可用跳脱字符『 \\ 』将特殊符号(如 [Enter], $, , 空格符, ‘等)变成一般字符；</p>\n</li>\n<li><p>在一串命令中，还需要藉由其他的命令提供的信息，可以使用反单引号『<code>命令</code>』或 『$(命令)』。特别注意，那个 &#96; 是键盘上方的数字键 1 左边那个按键，而不是单引号！ 例如想要取得核心版本的配置：<br>『version&#x3D;$(uname -r)』再『echo $version』可得『2.6.18-128.el5』</p>\n</li>\n<li><p>若该变量为扩增变量内容时，则可用 “$变量名称” 或 ${变量} 累加内容，如下所示：<br>『PATH&#x3D;”$PATH”:&#x2F;home&#x2F;bin』</p>\n</li>\n<li><p>若该变量需要在其他子程序运行，则需要以 export 来使变量变成环境变量：<br>『export PATH』</p>\n</li>\n<li><p>通常大写字符为系统默认变量，自行配置变量可以使用小写字符，方便判断 (纯粹依照使用者兴趣与嗜好) ；</p>\n</li>\n<li><p>取消变量的方法为使用 unset ：『unset 变量名称』例如取消 myname 的配置：<br>『unset myname』</p>\n</li>\n</ol>\n<p>底下让鸟哥举几个例子来让你试看看，就知道怎么配置好你的变量啰！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：配置一变量 name ，且内容为 VBird</span><br><span class=\"line\">[root@www ~]# 12name=VBird</span><br><span class=\"line\">-bash: 12name=VBird: command not found  &lt;==屏幕会显示错误！因为不能以数字开头！</span><br><span class=\"line\">[root@www ~]# name = VBird            &lt;==还是错误！因为有空白！</span><br><span class=\"line\">[root@www ~]# name=VBird              &lt;==OK 的啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：承上题，若变量内容为 VBird&#x27;s name 呢，就是变量内容含有特殊符号时：</span><br><span class=\"line\">[root@www ~]# name=VBird&#x27;s name  </span><br><span class=\"line\"># 单引号与双引号必须要成对，在上面的配置中仅有一个单引号，因此当你按下 enter 后，</span><br><span class=\"line\"># 你还可以继续输入变量内容。这与我们所需要的功能不同，失败啦！</span><br><span class=\"line\"># 记得，失败后要复原请按下 [ctrl]-c 结束！</span><br><span class=\"line\">[root@www ~]# name=&quot;VBird&#x27;s name&quot;    &lt;==OK 的啦！</span><br><span class=\"line\"># 命令是由左边向右找→，先遇到的引号先有用，因此如上所示，单引号会失效！</span><br><span class=\"line\">[root@www ~]# name=&#x27;VBird&#x27;s name&#x27;    &lt;==失败的啦！</span><br><span class=\"line\"># 因为前两个单引号已成对，后面就多了一个不成对的单引号了！因此也就失败了！</span><br><span class=\"line\">[root@www ~]# name=VBird\\&#x27;s\\ name     &lt;==OK 的啦！</span><br><span class=\"line\"># 利用反斜杠 (\\) 跳脱特殊字符，例如单引号与空格键，这也是 OK 的啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例三：我要在 PATH 这个变量当中『累加』:/home/dmtsai/bin 这个目录</span><br><span class=\"line\">[root@www ~]# PATH=$PATH:/home/dmtsai/bin</span><br><span class=\"line\">[root@www ~]# PATH=&quot;$PATH&quot;:/home/dmtsai/bin</span><br><span class=\"line\">[root@www ~]# PATH=$&#123;PATH&#125;:/home/dmtsai/bin</span><br><span class=\"line\"># 上面这三种格式在 PATH 里头的配置都是 OK 的！但是底下的例子就不见得啰！</span><br><span class=\"line\"></span><br><span class=\"line\">范例四：承范例三，我要将 name 的内容多出 &quot;yes&quot; 呢？</span><br><span class=\"line\">[root@www ~]# name=$nameyes  </span><br><span class=\"line\"># 知道了吧？如果没有双引号，那么变量成了啥？name 的内容是 $nameyes 这个变量！</span><br><span class=\"line\"># 呵呵！我们可没有配置过 nameyes 这个变量吶！所以，应该是底下这样才对！</span><br><span class=\"line\">[root@www ~]# name=&quot;$name&quot;yes</span><br><span class=\"line\">[root@www ~]# name=$&#123;name&#125;yes  &lt;==以此例较佳！</span><br><span class=\"line\"></span><br><span class=\"line\">范例五：如何让我刚刚配置的 name=VBird 可以用在下个 shell 的程序？</span><br><span class=\"line\">[root@www ~]# name=VBird</span><br><span class=\"line\">[root@www ~]# bash        &lt;==进入到所谓的子程序</span><br><span class=\"line\">[root@www ~]# echo $name  &lt;==子程序：再次的 echo 一下；</span><br><span class=\"line\">       &lt;==嘿嘿！并没有刚刚配置的内容喔！</span><br><span class=\"line\">[root@www ~]# exit        &lt;==子程序：离开这个子程序</span><br><span class=\"line\">[root@www ~]# export name</span><br><span class=\"line\">[root@www ~]# bash        &lt;==进入到所谓的子程序</span><br><span class=\"line\">[root@www ~]# echo $name  &lt;==子程序：在此运行！</span><br><span class=\"line\">VBird  &lt;==看吧！出现配置值了！</span><br><span class=\"line\">[root@www ~]# exit        &lt;==子程序：离开这个子程序</span><br></pre></td></tr></table></figure>\n\n<p>什么是『子程序』呢？就是说，在我目前这个 shell 的情况下，去激活另一个新的 shell ，新的那个 shell 就是子程序啦！在一般的状态下，父程序的自定义变量是无法在子程序内使用的。但是透过 export 将变量变成环境变量后，就能够在子程序底下应用了！很不赖吧！至于程序的相关概念， 我们会在<a href=\"http://cn.linux.vbird.org/linux_basic/0440processcontrol.php\">第十七章程序管理</a>当中提到的喔！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例六：如何进入到您目前核心的模块目录？ [root@www ~]# cd /lib/modules/`uname -r`/kernel [root@www ~]# cd /lib/modules/$(uname -r)/kernel </span><br></pre></td></tr></table></figure>\n\n<p>每个 Linux 都能够拥有多个核心版本，且几乎 distribution 的核心版本都不相同。以 CentOS 5.3 (未升级前) 为例，他的默认核心版本是 2.6.18-128.el5 ，所以核心模块目录在 &#x2F;lib&#x2F;modules&#x2F;2.6.18-128.el5&#x2F;kernel&#x2F; 内。 也由于每个 distributions 的这个值都不相同，但是我们却可以利用 uname -r 这个命令先取得版本信息。所以啰，就可以透过上面命令当中的内含命令 <code>uname -r</code> 先取得版本输出到 cd … 那个命令当中，就能够顺利的进入目前核心的驱动程序所放置的目录啰！很方便吧！</p>\n<p>其实上面的命令可以说是作了两次动作，亦即是：</p>\n<ol>\n<li>先进行反单引号内的动作『uname -r』并得到核心版本为 2.6.18-128.el5</li>\n<li>将上述的结果带入原命令，故得命令为：『cd &#x2F;lib&#x2F;modules&#x2F;2.6.18-128.el5&#x2F;kernel&#x2F;』</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例七：取消刚刚配置的 name 这个变量内容 [root@www ~]# unset name </span><br></pre></td></tr></table></figure>\n\n<p>根据上面的案例你可以试试看！就可以了解变量的配置啰！这个是很重要的呦！请勤加练习！ 其中，较为重要的一些特殊符号的使用啰！例如单引号、双引号、跳脱字符、钱字号、反单引号等等，底下的例题想一想吧！</p>\n<p>例题：在变量的配置当中，单引号与双引号的用途有何不同？ 答：单引号与双引号的最大不同在于双引号仍然可以保有变量的内容，但单引号内仅能是一般字符 ，而不会有特殊符号。我们以底下的例子做说明：假设您定义了一个变量， name&#x3D;VBird ，现在想以 name 这个变量的内容定义出 myname 显示 VBird its me 这个内容，要如何订定呢？[root@www ~]# name&#x3D;VBird [root@www ~]# echo $name VBird [root@www ~]# myname&#x3D;”$name its me” [root@www ~]# echo $myname VBird its me [root@www ~]# myname&#x3D;’$name its me’ [root@www ~]# echo $myname $name its me发现了吗？没错！使用了单引号的时候，那么 $name 将失去原有的变量内容，仅为一般字符的显示型态而已！这里必需要特别小心在意！</p>\n<p>例题：在命令下达的过程中，反单引号( )这个符号代表的意义为何？答：在一串命令中，在 之内的命令将会被先运行，而其运行出来的结果将做为外部的输入信息！例如 uname -r 会显示出目前的核心版本，而我们的核心版本在 &#x2F;lib&#x2F;modules 里面，因此，你可以先运行 uname -r 找出核心版本，然后再以『 cd 目录』到该目录下，当然也可以运行如同上面范例六的运行内容啰。  另外再举个例子，我们也知道， <a href=\"http://cn.linux.vbird.org/linux_basic/0220filemanager.php#locate\">locate</a> 命令可以列出所有的相关文件档名，但是，如果我想要知道各个文件的权限呢？举例来说，我想要知道每个 crontab 相关档名的权限：[root@www ~]# ls -l <code>locate crontab</code>如此一来，先以 locate 将文件名数据都列出来，再以 ls 命令来处理的意思啦！瞭了吗？ ^_^</p>\n<p>例题：若你有一个常去的工作目录名称为：『&#x2F;cluster&#x2F;server&#x2F;work&#x2F;taiwan_2005&#x2F;003&#x2F;』，如何进行该目录的简化？答：在一般的情况下，如果你想要进入上述的目录得要『cd &#x2F;cluster&#x2F;server&#x2F;work&#x2F;taiwan_2005&#x2F;003&#x2F;』， 以鸟哥自己的案例来说，鸟哥跑数值模式常常会配置很长的目录名称(避免忘记)，但如此一来变换目录就很麻烦。 此时，鸟哥习惯利用底下的方式来降低命令下达错误的问题：[root@www ~]# work&#x3D;”&#x2F;cluster&#x2F;server&#x2F;work&#x2F;taiwan_2005&#x2F;003&#x2F;“ [root@www ~]# cd $work未来我想要使用其他目录作为我的模式工作目录时，只要变更 work 这个变量即可！而这个变量又可以在 <a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_2.php#settings_bashrc\">bash 的配置文件</a>中直接指定，那我每次登陆只要运行『 cd $work 』就能够去到数值模式仿真的工作目录了！是否很方便呢？ ^_^</p>\n<hr>\n<h2 id=\"环境变量的功能\"><a href=\"#环境变量的功能\" class=\"headerlink\" title=\"环境变量的功能\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>环境变量的功能</strong></h2><p>环境变量可以帮我们达到很多功能～包括家目录的变换啊、提示字符的显示啊、运行文件搜寻的路径啊等等的， 还有很多很多啦！那么，既然环境变量有那么多的功能，问一下，目前我的 shell 环境中， 有多少默认的环境变量啊？我们可以利用两个命令来查阅，分别是 env 与 export 呢！</p>\n<hr>\n<ul>\n<li><h3 id=\"用-env-观察环境变量与常见环境变量说明\"><a href=\"#用-env-观察环境变量与常见环境变量说明\" class=\"headerlink\" title=\"用 env 观察环境变量与常见环境变量说明\"></a>用 env 观察环境变量与常见环境变量说明</h3></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：列出目前的 shell 环境下的所有环境变量与其内容。</span><br><span class=\"line\">[root@www ~]# env</span><br><span class=\"line\">HOSTNAME=www.vbird.tsai    &lt;== 这部主机的主机名</span><br><span class=\"line\">TERM=xterm                 &lt;== 这个终端机使用的环境是什么类型</span><br><span class=\"line\">SHELL=/bin/bash            &lt;== 目前这个环境下，使用的 Shell 是哪一个程序？</span><br><span class=\"line\">HISTSIZE=1000              &lt;== 『记录命令的笔数』在 CentOS 默认可记录 1000 笔</span><br><span class=\"line\">USER=root                  &lt;== 使用者的名称啊！</span><br><span class=\"line\">LS_COLORS=no=00:fi=00:di=00;34:ln=00;36:pi=40;33:so=00;35:bd=40;33;01:cd=40;33;01:</span><br><span class=\"line\">or=01;05;37;41:mi=01;05;37;41:ex=00;32:*.cmd=00;32:*.exe=00;32:*.com=00;32:*.btm=0</span><br><span class=\"line\">0;32:*.bat=00;32:*.sh=00;32:*.csh=00;32:*.tar=00;31:*.tgz=00;31:*.arj=00;31:*.taz=</span><br><span class=\"line\">00;31:*.lzh=00;31:*.zip=00;31:*.z=00;31:*.Z=00;31:*.gz=00;31:*.bz2=00;31:*.bz=00;3</span><br><span class=\"line\">1:*.tz=00;31:*.rpm=00;31:*.cpio=00;31:*.jpg=00;35:*.gif=00;35:*.bmp=00;35:*.xbm=00</span><br><span class=\"line\">;35:*.xpm=00;35:*.png=00;35:*.tif=00;35: &lt;== 一些颜色显示</span><br><span class=\"line\">MAIL=/var/spool/mail/root  &lt;== 这个用户所取用的 mailbox 位置</span><br><span class=\"line\">PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:</span><br><span class=\"line\">/root/bin                  &lt;== 不再多讲啊！是运行文件命令搜寻路径</span><br><span class=\"line\">INPUTRC=/etc/inputrc       &lt;== 与键盘按键功能有关。可以配置特殊按键！</span><br><span class=\"line\">PWD=/root                  &lt;== 目前用户所在的工作目录 (利用 pwd 取出！)</span><br><span class=\"line\">LANG=en_US                 &lt;== 这个与语系有关，底下会再介绍！</span><br><span class=\"line\">HOME=/root                 &lt;== 这个用户的家目录啊！</span><br><span class=\"line\">_=/bin/env                 &lt;== 上一次使用的命令的最后一个参数(或命令本身)</span><br></pre></td></tr></table></figure>\n\n<p>env 是 environment (环境) 的简写啊，上面的例子当中，是列出来所有的环境变量。当然，如果使用 export 也会是一样的内容～ 只不过， export 还有其他额外的功能就是了，我们等一下再提这个 export 命令。 那么上面这些变量有些什么功用呢？底下我们就一个一个来分析分析！</p>\n<ul>\n<li><p><strong>HOME</strong><br>代表用户的家目录。还记得我们可以使用 cd ~ 去到自己的家目录吗？或者利用 cd 就可以直接回到用户家目录了。那就是取用这个变量啦～ 有很多程序都可能会取用到这个变量的值！</p>\n</li>\n<li><p><strong>SHELL</strong><br>告知我们，目前这个环境使用的 SHELL 是哪支程序？ Linux 默认使用 &#x2F;bin&#x2F;bash 的啦！</p>\n</li>\n<li><p><strong>HISTSIZE</strong><br>这个与『历史命令』有关，亦即是， 我们曾经下达过的命令可以被系统记录下来，而记录的『笔数』则是由这个值来配置的。</p>\n</li>\n<li><p><strong>MAIL</strong><br>当我们使用 mail 这个命令在收信时，系统会去读取的邮件信箱文件 (mailbox)。</p>\n</li>\n<li><p><strong>PATH</strong><br>就是运行文件搜寻的路径啦～目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由 PATH 的变量内的目录来查询，所以，目录的顺序也是重要的喔。</p>\n</li>\n<li><p><strong>LANG</strong><br>这个重要！就是语系数据啰～很多信息都会用到他， 举例来说，当我们在启动某些 perl 的程序语言文件时，他会主动的去分析语系数据文件， 如果发现有他无法解析的编码语系，可能会产生错误喔！一般来说，我们中文编码通常是 zh_TW.Big5 或者是 zh_TW.UTF-8，这两个编码偏偏不容易被解译出来，所以，有的时候，可能需要修订一下语系数据。 这部分我们会在下个小节做介绍的！</p>\n</li>\n<li><p><strong>RANDOM</strong></p>\n<p>这个玩意儿就是『随机随机数』的变量啦！目前大多数的 distributions 都会有随机数生成器，那就是</p>\n<p> &#x2F;dev&#x2F;random</p>\n<p>这个文件。 我们可以透过这个随机数文件相关的变量 ($RANDOM) 来随机取得随机数值喔。在 BASH 的环境下，这个 RANDOM 变量的内容，介于 0<del>32767 之间，所以，你只要 echo $RANDOM 时，系统就会主动的随机取出一个介于 0</del>32767 的数值。万一我想要使用 0~9 之间的数值呢？呵呵～利用 declare 宣告数值类型， 然后这样做就可以了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# declare -i number=$RANDOM*10/32768 ; </span><br><span class=\"line\">echo $number </span><br><span class=\"line\">8   &lt;== 此时会随机取出 0~9 之间的数值喔！ </span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>大致上是有这些环境变量啦～里面有些比较重要的参数，在底下我们都会另外进行一些说明的～</p>\n<hr>\n<ul>\n<li><h3 id=\"用-set-观察所有变量-含环境变量与自定义变量\"><a href=\"#用-set-观察所有变量-含环境变量与自定义变量\" class=\"headerlink\" title=\"用 set 观察所有变量 (含环境变量与自定义变量)\"></a>用 set 观察所有变量 (含环境变量与自定义变量)</h3></li>\n</ul>\n<p>bash 可不只有环境变量喔，还有一些与 bash 操作接口有关的变量，以及用户自己定义的变量存在的。 那么这些变量如何观察呢？这个时候就得要使用 set 这个命令了。 set 除了环境变量之外， 还会将其他在 bash 内的变量通通显示出来哩！信息很多，底下鸟哥仅列出几个重要的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# set</span><br><span class=\"line\">BASH=/bin/bash           &lt;== bash 的主程序放置路径</span><br><span class=\"line\">BASH_VERSINFO=([0]=&quot;3&quot; [1]=&quot;2&quot; [2]=&quot;25&quot; [3]=&quot;1&quot; [4]=&quot;release&quot; </span><br><span class=\"line\">[5]=&quot;i686-redhat-linux-gnu&quot;)      &lt;== bash 的版本啊！</span><br><span class=\"line\">BASH_VERSION=&#x27;3.2.25(1)-release&#x27;  &lt;== 也是 bash 的版本啊！</span><br><span class=\"line\">COLORS=/etc/DIR_COLORS.xterm      &lt;== 使用的颜色纪录文件</span><br><span class=\"line\">COLUMNS=115              &lt;== 在目前的终端机环境下，使用的字段有几个字符长度</span><br><span class=\"line\">HISTFILE=/root/.bash_history      &lt;== 历史命令记录的放置文件，隐藏档</span><br><span class=\"line\">HISTFILESIZE=1000        &lt;== 存起来(与上个变量有关)的文件之命令的最大纪录笔数。</span><br><span class=\"line\">HISTSIZE=1000            &lt;== 目前环境下，可记录的历史命令最大笔数。</span><br><span class=\"line\">HOSTTYPE=i686            &lt;== 主机安装的软件主要类型。我们用的是 i686 兼容机器软件</span><br><span class=\"line\">IFS=$&#x27; \\t\\n&#x27;             &lt;== 默认的分隔符</span><br><span class=\"line\">LINES=35                 &lt;== 目前的终端机下的最大行数</span><br><span class=\"line\">MACHTYPE=i686-redhat-linux-gnu    &lt;== 安装的机器类型</span><br><span class=\"line\">MAILCHECK=60             &lt;== 与邮件有关。每 60 秒去扫瞄一次信箱有无新信！</span><br><span class=\"line\">OLDPWD=/home             &lt;== 上个工作目录。我们可以用 cd - 来取用这个变量。</span><br><span class=\"line\">OSTYPE=linux-gnu         &lt;== 操作系统的类型！</span><br><span class=\"line\">PPID=20025               &lt;== 父程序的 PID (会在后续章节才介绍)</span><br><span class=\"line\">PS1=&#x27;[\\u@\\h \\W]\\$ &#x27;      &lt;== PS1 就厉害了。这个是命令提示字符，也就是我们常见的</span><br><span class=\"line\">                             [root@www ~]# 或 [dmtsai ~]$ 的配置值啦！可以更动的！</span><br><span class=\"line\">PS2=&#x27;&gt; &#x27;                 &lt;== 如果你使用跳脱符号 (\\) 第二行以后的提示字符也</span><br><span class=\"line\">name=VBird               &lt;== 刚刚配置的自定义变量也可以被列出来喔！</span><br><span class=\"line\">$                        &lt;== 目前这个 shell 所使用的 PID</span><br><span class=\"line\">?                        &lt;== 刚刚运行完命令的回传值。</span><br></pre></td></tr></table></figure>\n\n<p>一般来说，不论是否为环境变量，只要跟我们目前这个 shell 的操作接口有关的变量， 通常都会被配置为大写字符，也就是说，『基本上，在 Linux 默认的情况中，使用{大写的字母}来配置的变量一般为系统内定需要的变量』。 OK！OK！那么上头那些变量当中，有哪些是比较重要的？大概有这几个吧！</p>\n<ul>\n<li><p>PS1</p>\n<p>：(提示字符的配置)</p>\n<p>这是 PS1 (数字的 1 不是英文字母)，这个东西就是我们的『</p>\n<p>命令提示字符</p>\n<p>』喔！ 当我们每次按下 [Enter] 按键去运行某个命令后，最后要再次出现提示字符时， 就会主动去读取这个变量值了。上头 PS1 内显示的是一些特殊符号，这些特殊符号可以显示不同的信息， 每个 distributions 的 bash 默认的 PS1 变量内容可能有些许的差异，不要紧，『习惯你自己的习惯』就好了。 你可以用 man bash (</p>\n<p>注3</p>\n<p>)去查询一下 PS1 的相关说明，以理解底下的一些符号意义。</p>\n<ul>\n<li>\\d ：可显示出『星期 月 日』的日期格式，如：”Mon Feb 2”</li>\n<li>\\H ：完整的主机名。举例来说，鸟哥的练习机为『<a href=\"http://www.vbird.tsai』/\">www.vbird.tsai』</a></li>\n<li>\\h ：仅取主机名在第一个小数点之前的名字，如鸟哥主机则为『www』后面省略</li>\n<li>\\t ：显示时间，为 24 小时格式的『HH:MM:SS』</li>\n<li>\\T ：显示时间，为 12 小时格式的『HH:MM:SS』</li>\n<li>\\A ：显示时间，为 24 小时格式的『HH:MM』</li>\n<li>@ ：显示时间，为 12 小时格式的『am&#x2F;pm』样式</li>\n<li>\\u ：目前使用者的账号名称，如『root』；</li>\n<li>\\v ：BASH 的版本信息，如鸟哥的测试主板本为 3.2.25(1)，仅取『3.2』显示</li>\n<li>\\w ：完整的工作目录名称，由根目录写起的目录名称。但家目录会以 ~ 取代；</li>\n<li>\\W ：利用 basename 函数取得工作目录名称，所以仅会列出最后一个目录名。</li>\n<li># ：下达的第几个命令。</li>\n<li>$ ：提示字符，如果是 root 时，提示字符为 # ，否则就是 $ 啰～</li>\n</ul>\n<p>好了，让我们来看看 CentOS 默认的 PS1 内容吧：『[\\u@\\h \\W]$ 』，现在你知道那些反斜杠后的数据意义了吧？ 要注意喔！那个反斜杠后的数据为 PS1 的特殊功能，与 bash 的变量配置没关系啦！不要搞混了喔！ 那你现在知道为何你的命令提示字符是：『 [root@www ~]# 』了吧？ 好了，那么假设我想要有类似底下的提示字符：</p>\n<blockquote>\n<p>[root@www &#x2F;home&#x2F;dmtsai 16:50 #12]#</p>\n</blockquote>\n<p>那个 # 代表第 12 次下达的命令。那么应该如何配置 PS1 呢？可以这样啊：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~ ]# cd /home</span><br><span class=\"line\">[root@www home]# PS1=&#x27;[\\u@\\h \\w \\A #\\#]\\$ &#x27;</span><br><span class=\"line\">[root@www /home 17:02 #85]# </span><br><span class=\"line\"># 看到了吗？提示字符变了！变的很有趣吧！其中，那个 #85 比较有趣，</span><br><span class=\"line\"># 如果您再随便输入几次 ls 后，该数字就会添加喔！为啥？上面有说明滴！</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>**$**：(关于本 shell 的 PID)</p>\n<p>钱字号本身也是个变量喔！这个咚咚代表的是『目前这个 Shell 的线程代号』，亦即是所谓的 PID (Process ID)。 更多的程序观念，我们会在第四篇的时候提及。想要知道我们的 shell 的 PID ，就可以用：『 echo $$ 』即可！出现的数字就是你的 PID 号码。</p>\n</li>\n<li><p>?</p>\n<p>：(关于上个运行命令的回传值)</p>\n<p>什么？问号也是一个特殊的变量？没错！在 bash 里面这个变量可重要的很！ 这个变量是：『上一个运行的命令所回传的值』， 上面这句话的重点是『上一个命令』与『回传值』两个地方。当我们运行某些命令时， 这些命令都会回传一个运行后的代码。一般来说，如果成功的运行该命令， 则会回传一个 0 值，如果运行过程发生错误，就会回传『错误代码』才对！一般就是以非为 0 的数值来取代。 我们以底下的例子来看看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# echo $SHELL</span><br><span class=\"line\">/bin/bash                                  &lt;==可顺利显示！没有错误！</span><br><span class=\"line\">[root@www ~]# echo $?</span><br><span class=\"line\">0                                          &lt;==因为没问题，所以回传值为 0</span><br><span class=\"line\">[root@www ~]# 12name=VBird</span><br><span class=\"line\">-bash: 12name=VBird: command not found     &lt;==发生错误了！bash回报有问题</span><br><span class=\"line\">[root@www ~]# echo $?</span><br><span class=\"line\">127                                        &lt;==因为有问题，回传错误代码(非为0)</span><br><span class=\"line\"># 错误代码回传值依据软件而有不同，我们可以利用这个代码来搜寻错误的原因喔！</span><br><span class=\"line\">[root@www ~]# echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\"># 咦！怎么又变成正确了？这是因为 &quot;?&quot; 只与『上一个运行命令』有关，</span><br><span class=\"line\"># 所以，我们上一个命令是运行『 echo $? 』，当然没有错误，所以是 0 没错！</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>OSTYPE, HOSTTYPE, MACHTYPE</strong>：(主机硬件与核心的等级)</p>\n<p>我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0105computers.php#pc_cpu\">第零章、计算器概论内的 CPU 等级</a>说明中谈过 CPU ， 目前个人计算机的 CPU 主要分为 32&#x2F;64 位，其中 32 位又可分为 i386, i586, i686，而 64 位则称为 x86_64。 由于不同等级的 CPU 命令集不太相同，因此你的软件可能会针对某些 CPU 进行优化，以求取较佳的软件性能。 所以软件就有 i386, i686 及 x86_64 之分。以目前 (2009) 的主流硬件来说，几乎都是 x86_64 的天下！ 但是毕竟旧机器还是非常多，以鸟哥的环境来说，我用 P-III 等级的计算机，所以上头就发现我的等级是 i686 啦！</p>\n<p>要留意的是，较高阶的硬件通常会向下兼容旧有的软件，但较高阶的软件可能无法在旧机器上面安装！ 我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0130designlinux.php#beforeinstall_distro\">第三章</a>就曾说明过， 这里再强调一次，你可以在 x86_64 的硬件上安装 i386 的 Linux 操作系统，但是你无法在 i686 的硬件上安装 x86_64 的 Linux 操作系统！这点得要牢记在心！</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>export</strong>： <strong>自定义变量转成环境变量</strong></li>\n</ul>\n<p>谈了 env 与 set 现在知道有所谓的环境变量与自定义变量，那么这两者之间有啥差异呢？其实这两者的差异在于『 该变量是否会被子程序所继续引用』啦！唔！那么啥是父程序？子程序？ 这就得要了解一下命令的下达行为了。</p>\n<p>当你登陆 Linux 并取得一个 bash 之后，你的 bash 就是一个独立的程序，被称为 PID 的就是。 接下来你在这个 bash 底下所下达的任何命令都是由这个 bash 所衍生出来的，那些被下达的命令就被称为子程序了。 我们可以用底下的图示来简单的说明一下父程序与子程序的概念：</p>\n<p><img src=\"/media/ppid.gif\" alt=\"程序相关性示意图\"><br>图 2.3.1、程序相关性示意图</p>\n<p>如上所示，我们在原本的 bash 底下运行另一个 bash ，结果操作的环境接口会跑到第二个 bash 去(就是子程序)， 那原本的 bash 就会在暂停的情况 (睡着了，就是 sleep)。整个命令运行的环境是实线的部分！若要回到原本的 bash 去， 就只有将第二个 bash 结束掉 (下达 exit 或 logout) 才行。更多的程序概念我们会在第四篇谈及，这里只要有这个概念即可。</p>\n<p>这个程序概念与变量有啥关系啊？关系可大了！因为子程序仅会继承父程序的环境变量， 子程序不会继承父程序的自定义变量啦！所以你在原本 bash 的自定义变量在进入了子程序后就会消失不见， 一直到你离开子程序并回到原本的父程序后，这个变量才会又出现！</p>\n<p>换个角度来想，也就是说，如果我能将自定义变量变成环境变量的话，那不就可以让该变量值继续存在于子程序了？ 呵呵！没错！此时，那个 export 命令就很有用啦！如你想要让该变量内容继续的在子程序中使用，那么就请运行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# export 变量名称 </span><br></pre></td></tr></table></figure>\n\n<p>这东西用在『分享自己的变量配置给后来呼叫的文件或其他程序』啦！ 像鸟哥常常在自己的主控文件后面呼叫其他附属文件(类似函式的功能)，但是主控文件与附属文件内都有相同的变量名称， 若一再重复配置时，要修改也很麻烦，此时只要在原本的第一个文件内配置好『 export 变量 』， 后面所呼叫的文件就能够使用这个变量配置了！而不需要重复配置，这非常实用于 shell script 当中喔！ 如果仅下达 export 而没有接变量时，那么此时将会把所有的『环境变量』秀出来喔！例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# export declare -x HISTSIZE=&quot;1000&quot; declare -x HOME=&quot;/root&quot; declare -x HOSTNAME=&quot;www.vbird.tsai&quot; declare -x INPUTRC=&quot;/etc/inputrc&quot; declare -x LANG=&quot;en_US&quot; declare -x LOGNAME=&quot;root&quot; # 后面的鸟哥就都直接省略了！不然....浪费版面～ ^_^ </span><br></pre></td></tr></table></figure>\n\n<p>那如何将环境变量转成自定义变量呢？可以使用本章后续介绍的 <a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_2.php#declare\">declare</a> 呢！</p>\n<hr>\n<h2 id=\"影响显示结果的语系变量-locale\"><a href=\"#影响显示结果的语系变量-locale\" class=\"headerlink\" title=\"影响显示结果的语系变量 (locale)\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>影响显示结果的语系变量 (locale)</strong></h2><p>还记得我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0160startlinux.php#cmd_cmd_lang\">第五章里面提到的语系问题</a>吗？ 就是当我们使用 man command 的方式去查询某个数据的说明文件时，该说明档的内容可能会因为我们使用的语系不同而产生乱码。 另外，利用 ls 查询文件的时间时，也可能会有乱码出现在时间的部分。那个问题其实就是语系的问题啦。</p>\n<p>目前大多数的 Linux distributions 已经都是支持日渐流行的万国码了，也都支持大部分的国家语系。 这有赖于 <a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_2.php#ps4\">i18n (注4)</a> 支持的帮助呢！ 那么我们的 Linux 到底支持了多少的语系呢？这可以由 locale 这个命令来查询到喔！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# locale -a</span><br><span class=\"line\">....(前面省略)....</span><br><span class=\"line\">zh_TW</span><br><span class=\"line\">zh_TW.big5     &lt;==大五码的中文编码</span><br><span class=\"line\">zh_TW.euctw</span><br><span class=\"line\">zh_TW.utf8     &lt;==万国码的中文编码</span><br><span class=\"line\">zu_ZA</span><br><span class=\"line\">zu_ZA.iso88591</span><br><span class=\"line\">zu_ZA.utf8</span><br></pre></td></tr></table></figure>\n\n<p>正体中文语系至少支持了两种以上的编码，一种是目前还是很常见的 big5 ，另一种则是越来越热门的 utf-8 编码。 那么我们如何修订这些编码呢？其实可以透过底下这些变量的说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# locale  &lt;==后面不加任何选项与参数即可！</span><br><span class=\"line\">LANG=en_US                   &lt;==主语言的环境</span><br><span class=\"line\">LC_CTYPE=&quot;en_US&quot;             &lt;==字符(文字)辨识的编码</span><br><span class=\"line\">LC_NUMERIC=&quot;en_US&quot;           &lt;==数字系统的显示信息</span><br><span class=\"line\">LC_TIME=&quot;en_US&quot;              &lt;==时间系统的显示数据</span><br><span class=\"line\">LC_COLLATE=&quot;en_US&quot;           &lt;==字符串的比较与排序等</span><br><span class=\"line\">LC_MONETARY=&quot;en_US&quot;          &lt;==币值格式的显示等</span><br><span class=\"line\">LC_MESSAGES=&quot;en_US&quot;          &lt;==信息显示的内容，如菜单、错误信息等</span><br><span class=\"line\">LC_ALL=                      &lt;==整体语系的环境</span><br><span class=\"line\">....(后面省略)....</span><br></pre></td></tr></table></figure>\n\n<p>基本上，你可以逐一配置每个与语系有关的变量数据，但事实上，如果其他的语系变量都未配置， 且你有配置 LANG 或者是 LC_ALL 时，则其他的语系变量就会被这两个变量所取代！ 这也是为什么我们在 Linux 当中，通常说明仅配置 LANG 这个变量而已，因为他是最主要的配置变量！ 好了，那么你应该要觉得奇怪的是，为什么在 Linux 主机的终端机接口 (tty1 ~ tty6) 的环境下，如果配置『 LANG&#x3D;zh_TW.big5 』这个配置值生效后，使用 man 或者其他信息输出时， 都会有一堆乱码，尤其是使用 ls -l 这个参数时？</p>\n<p>因为在 Linux 主机的终端机接口环境下是无法显示像中文这么复杂的编码文字， 所以就会产生乱码了。也就是如此，我们才会必须要在 tty1 ~ tty6 的环境下， 加装一些中文化接口的软件，才能够看到中文啊！不过，如果你是在 MS Windows 主机以远程联机服务器的软件联机到主机的话，那么，嘿嘿！其实文字接口确实是可以看到中文的。 此时反而你得要在 LANG 配置中文编码才好呢！</p>\n<p>你当然可以让每个使用者自己去调整自己喜好的语系，但是整体系统默认的语系定义在哪里呢？ 其实就是在 &#x2F;etc&#x2F;sysconfig&#x2F;i18n 啰！这个文件在 CentOS 5.x 的内容有点像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# cat /etc/sysconfig/i18n </span><br><span class=\"line\">LANG=&quot;zh_TW.UTF-8&quot; </span><br></pre></td></tr></table></figure>\n\n<p>因为鸟哥在<a href=\"http://cn.linux.vbird.org/linux_basic/0157installcentos5.php\">第四章的安装时</a>选择的是中文语系安装画面， 所以这个文件默认就会使用中文编码啦！你也可以自行将他改成你想要的语系编码即可。</p>\n<hr>\n<h2 id=\"变量的有效范围\"><a href=\"#变量的有效范围\" class=\"headerlink\" title=\"变量的有效范围\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>变量的有效范围</strong></h2><p>什么？变量也有使用的『范围』？没错啊～我们在上头的 <a href=\"http://cn.linux.vbird.org/linux_basic/0320bash_2.php#export\">export</a> 命令说明中，就提到了这个概念了。如果在跑程序的时候，有父程序与子程序的不同程序关系时， 则『变量』可否被引用与 export 有关。被 export 后的变量，我们可以称他为『环境变量』！ 环境变量可以被子程序所引用，但是其他的自定义变量内容就不会存在于子程序中。</p>\n<p>在学理方面，为什么环境变量的数据可以被子程序所引用呢？这是因为内存配置的关系！理论上是这样的：</p>\n<ul>\n<li>当启动一个 shell，操作系统会分配一记忆区块给 shell 使用，此内存内之变量可让子程序取用</li>\n<li>若在父程序利用 export 功能，可以让自定义变量的内容写到上述的记忆区块当中(环境变量)；</li>\n<li>当加载另一个 shell 时 (亦即启动子程序，而离开原本的父程序了)，子 shell 可以将父 shell 的环境变量所在的记忆区块导入自己的环境变量区块当中。</li>\n</ul>\n<p>透过这样的关系，我们就可以让某些变量在相关的程序之间存在，以帮助自己更方便的操作环境喔！ 不过要提醒的是，这个『环境变量』与『bash 的操作环境』意思不太一样，举例来说， PS1 并不是环境变量， 但是这个 PS1 会影响到 bash 的接口 (提示字符嘛)！相关性要厘清喔！^_^</p>\n<hr>\n<h2 id=\"变量键盘读取、数组与宣告：-read-array-declare\"><a href=\"#变量键盘读取、数组与宣告：-read-array-declare\" class=\"headerlink\" title=\"变量键盘读取、数组与宣告： read, array, declare\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>变量键盘读取、数组与宣告： read, array, declare</strong></h2><p>我们上面提到的变量配置功能，都是由命令列直接配置的，那么，可不可以让用户能够经由键盘输入？ 什么意思呢？是否记得某些程序运行的过程当中，会等待使用者输入 “yes&#x2F;no” 之类的信息啊？ 在 bash 里面也有相对应的功能喔！此外，我们还可以宣告这个变量的属性， 例如：数组或者是数字等等的。底下就来看看吧！</p>\n<hr>\n<ul>\n<li><h3 id=\"read\"><a href=\"#read\" class=\"headerlink\" title=\"read\"></a>read</h3></li>\n</ul>\n<p>要读取来自键盘输入的变量，就是用 read 这个命令了。这个命令最常被用在 shell script 的撰写当中， 想要跟使用者对谈？用这个命令就对了。关于 script 的写法，我们会在第十三章介绍，底下先来瞧一瞧 read 的相关语法吧！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# read [-pt] variable</span><br><span class=\"line\">选项与参数：</span><br><span class=\"line\">-p  ：后面可以接提示字符！</span><br><span class=\"line\">-t  ：后面可以接等待的『秒数！』这个比较有趣～不会一直等待使用者啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例一：让用户由键盘输入一内容，将该内容变成名为 atest 的变量</span><br><span class=\"line\">[root@www ~]# read atest</span><br><span class=\"line\">This is a test        &lt;==此时光标会等待你输入！请输入左侧文字看看</span><br><span class=\"line\">[root@www ~]# echo $atest</span><br><span class=\"line\">This is a test          &lt;==你刚刚输入的数据已经变成一个变量内容！</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：提示使用者 30 秒内输入自己的大名，将该输入字符串作为名为 named 的变量内容</span><br><span class=\"line\">[root@www ~]# read -p &quot;Please keyin your name: &quot; -t 30 named</span><br><span class=\"line\">Please keyin your name: VBird Tsai   &lt;==注意看，会有提示字符喔！</span><br><span class=\"line\">[root@www ~]# echo $named</span><br><span class=\"line\">VBird Tsai        &lt;==输入的数据又变成一个变量的内容了！</span><br></pre></td></tr></table></figure>\n\n<p>read 之后不加任何参数，直接加上变量名称，那么底下就会主动出现一个空白行等待你的输入(如范例一)。 如果加上 -t 后面接秒数，例如上面的范例二，那么 30 秒之内没有任何动作时， 该命令就会自动略过了～如果是加上 -p ，嘿嘿！在输入的光标前就会有比较多可以用的提示字符给我们参考！ 在命令的下达里面，比较美观啦！ ^_^</p>\n<hr>\n<ul>\n<li><h3 id=\"declare-typeset\"><a href=\"#declare-typeset\" class=\"headerlink\" title=\"declare &#x2F; typeset\"></a>declare &#x2F; typeset</h3></li>\n</ul>\n<p>declare 或 typeset 是一样的功能，就是在『宣告变量的类型』。如果使用 declare 后面并没有接任何参数，那么 bash 就会主动的将所有的变量名称与内容通通叫出来，就好像使用 set 一样啦！ 那么 declare 还有什么语法呢？看看先：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# declare [-aixr] variable</span><br><span class=\"line\">选项与参数：</span><br><span class=\"line\">-a  ：将后面名为 variable 的变量定义成为数组 (array) 类型</span><br><span class=\"line\">-i  ：将后面名为 variable 的变量定义成为整数数字 (integer) 类型</span><br><span class=\"line\">-x  ：用法与 export 一样，就是将后面的 variable 变成环境变量；</span><br><span class=\"line\">-r  ：将变量配置成为 readonly 类型，该变量不可被更改内容，也不能 unset</span><br><span class=\"line\"></span><br><span class=\"line\">范例一：让变量 sum 进行 100+300+50 的加总结果</span><br><span class=\"line\">[root@www ~]# sum=100+300+50</span><br><span class=\"line\">[root@www ~]# echo $sum</span><br><span class=\"line\">100+300+50  &lt;==咦！怎么没有帮我计算加总？因为这是文字型态的变量属性啊！</span><br><span class=\"line\">[root@www ~]# declare -i sum=100+300+50</span><br><span class=\"line\">[root@www ~]# echo $sum</span><br><span class=\"line\">450         &lt;==瞭乎？？</span><br></pre></td></tr></table></figure>\n\n<p>由于在默认的情况底下， bash 对于变量有几个基本的定义：</p>\n<ul>\n<li>变量类型默认为『字符串』，所以若不指定变量类型，则 1+2 为一个『字符串』而不是『计算式』。 所以上述第一个运行的结果才会出现那个情况的；</li>\n<li>bash 环境中的数值运算，默认最多仅能到达整数形态，所以 1&#x2F;3 结果是 0；</li>\n</ul>\n<p>现在你晓得为啥你需要进行变量宣告了吧？如果需要非字符串类型的变量，那就得要进行变量的宣告才行啦！ 底下继续来玩些其他的 declare 功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例二：将 sum 变成环境变量</span><br><span class=\"line\">[root@www ~]# declare -x sum</span><br><span class=\"line\">[root@www ~]# export | grep sum</span><br><span class=\"line\">declare -ix sum=&quot;450&quot;  &lt;==果然出现了！包括有 i 与 x 的宣告！</span><br><span class=\"line\"></span><br><span class=\"line\">范例三：让 sum 变成只读属性，不可更动！</span><br><span class=\"line\">[root@www ~]# declare -r sum</span><br><span class=\"line\">[root@www ~]# sum=tesgting</span><br><span class=\"line\">-bash: sum: readonly variable  &lt;==老天爷～不能改这个变量了！</span><br><span class=\"line\"></span><br><span class=\"line\">范例四：让 sum 变成非环境变量的自定义变量吧！</span><br><span class=\"line\">[root@www ~]# declare +x sum  &lt;== 将 - 变成 + 可以进行『取消』动作</span><br><span class=\"line\">[root@www ~]# declare -p sum  &lt;== -p 可以单独列出变量的类型</span><br><span class=\"line\">declare -ir sum=&quot;450&quot; &lt;== 看吧！只剩下 i, r 的类型，不具有 x 啰！</span><br></pre></td></tr></table></figure>\n\n<p>declare 也是个很有用的功能～尤其是当我们需要使用到底下的数组功能时， 他也可以帮我们宣告数组的属性喔！不过，老话一句，数组也是在 shell script 比较常用的啦！ 比较有趣的是，如果你不小心将变量配置为『只读』，通常得要注销再登陆才能复原该变量的类型了！ @_@</p>\n<hr>\n<ul>\n<li><h3 id=\"数组-array-变量类型\"><a href=\"#数组-array-变量类型\" class=\"headerlink\" title=\"数组 (array) 变量类型\"></a>数组 (array) 变量类型</h3></li>\n</ul>\n<p>某些时候，我们必须使用数组来宣告一些变量，这有什么好处啊？在一般人的使用上， 果然是看不出来有什么好处的！不过，如果您曾经写过程序的话，那才会比较了解数组的意义～ 数组对写数值程序的设计师来说，可是不能错过学习的重点之一哩！好！不啰唆～ 那么要如何配置数组的变量与内容呢？在 bash 里头，数组的配置方式是：</p>\n<blockquote>\n<p>var[index]&#x3D;content</p>\n</blockquote>\n<p>意思是说，我有一个数组名为 var ，而这个数组的内容为 var[1]&#x3D;小明， var[2]&#x3D;大明， var[3]&#x3D;好明 …. 等等，那个 index 就是一些数字啦，重点是用中刮号 ([ ]) 来配置的。 目前我们 bash 提供的是一维数组。老实说，如果您不必写一些复杂的程序， 那么这个数组的地方，可以先略过，等到有需要再来学习即可！因为要制作出数组， 通常与循环或者其他判断式交互使用才有比较高的存在意义！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例：配置上面提到的 var[1] ～ var[3] 的变量。</span><br><span class=\"line\">[root@www ~]# var[1]=&quot;small min&quot;</span><br><span class=\"line\">[root@www ~]# var[2]=&quot;big min&quot;</span><br><span class=\"line\">[root@www ~]# var[3]=&quot;nice min&quot;</span><br><span class=\"line\">[root@www ~]# echo &quot;$&#123;var[1]&#125;, $&#123;var[2]&#125;, $&#123;var[3]&#125;&quot;</span><br><span class=\"line\">small min, big min, nice min</span><br></pre></td></tr></table></figure>\n\n<p>数组的变量类型比较有趣的地方在于『读取』，一般来说，建议直接以 ${数组} 的方式来读取，比较正确无误的啦！</p>\n<hr>\n<h2 id=\"与文件系统及程序的限制关系：-ulimit\"><a href=\"#与文件系统及程序的限制关系：-ulimit\" class=\"headerlink\" title=\"与文件系统及程序的限制关系： ulimit\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>与文件系统及程序的限制关系： ulimit</strong></h2><p>想象一个状况：我的 Linux 主机里面同时登陆了十个人，这十个人不知怎么搞的， 同时开启了 100 个文件，每个文件的大小约 10MBytes ，请问一下， 我的 Linux 主机的内存要有多大才够？ 10<em>100</em>10 &#x3D; 10000 MBytes &#x3D; 10GBytes … 老天爷，这样，系统不挂点才有鬼哩！为了要预防这个情况的发生，所以我们的 bash 是可以『限制用户的某些系统资源』的，包括可以开启的文件数量， 可以使用的 CPU 时间，可以使用的内存总量等等。如何配置？用 ulimit 吧！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[root@www ~]# ulimit [-SHacdfltu] [配额]</span><br><span class=\"line\">选项与参数：</span><br><span class=\"line\">-H  ：hard limit ，严格的配置，必定不能超过这个配置的数值；</span><br><span class=\"line\">-S  ：soft limit ，警告的配置，可以超过这个配置值，但是若超过则有警告信息。</span><br><span class=\"line\">      在配置上，通常 soft 会比 hard 小，举例来说，soft 可配置为 80 而 hard </span><br><span class=\"line\">      配置为 100，那么你可以使用到 90 (因为没有超过 100)，但介于 80~100 之间时，</span><br><span class=\"line\">      系统会有警告信息通知你！</span><br><span class=\"line\">-a  ：后面不接任何选项与参数，可列出所有的限制额度；</span><br><span class=\"line\">-c  ：当某些程序发生错误时，系统可能会将该程序在内存中的信息写成文件(除错用)，</span><br><span class=\"line\">      这种文件就被称为核心文件(core file)。此为限制每个核心文件的最大容量。</span><br><span class=\"line\">-f  ：此 shell 可以创建的最大文件容量(一般可能配置为 2GB)单位为 Kbytes</span><br><span class=\"line\">-d  ：程序可使用的最大断裂内存(segment)容量；</span><br><span class=\"line\">-l  ：可用于锁定 (lock) 的内存量</span><br><span class=\"line\">-t  ：可使用的最大 CPU 时间 (单位为秒)</span><br><span class=\"line\">-u  ：单一用户可以使用的最大程序(process)数量。</span><br><span class=\"line\"></span><br><span class=\"line\">范例一：列出你目前身份(假设为root)的所有限制数据数值</span><br><span class=\"line\">[root@www ~]# ulimit -a</span><br><span class=\"line\">core file size          (blocks, -c) 0          &lt;==只要是 0 就代表没限制</span><br><span class=\"line\">data seg size           (kbytes, -d) unlimited</span><br><span class=\"line\">scheduling priority             (-e) 0</span><br><span class=\"line\">file size               (blocks, -f) unlimited  &lt;==可创建的单一文件的大小</span><br><span class=\"line\">pending signals                 (-i) 11774</span><br><span class=\"line\">max locked memory       (kbytes, -l) 32</span><br><span class=\"line\">max memory size         (kbytes, -m) unlimited</span><br><span class=\"line\">open files                      (-n) 1024       &lt;==同时可开启的文件数量</span><br><span class=\"line\">pipe size            (512 bytes, -p) 8</span><br><span class=\"line\">POSIX message queues     (bytes, -q) 819200</span><br><span class=\"line\">real-time priority              (-r) 0</span><br><span class=\"line\">stack size              (kbytes, -s) 10240</span><br><span class=\"line\">cpu time               (seconds, -t) unlimited</span><br><span class=\"line\">max user processes              (-u) 11774</span><br><span class=\"line\">virtual memory          (kbytes, -v) unlimited</span><br><span class=\"line\">file locks                      (-x) unlimited</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：限制用户仅能创建 10MBytes 以下的容量的文件</span><br><span class=\"line\">[root@www ~]# ulimit -f 10240</span><br><span class=\"line\">[root@www ~]# ulimit -a</span><br><span class=\"line\">file size               (blocks, -f) 10240 &lt;==最大量为10240Kbyes，相当10Mbytes</span><br><span class=\"line\">[root@www ~]# dd if=/dev/zero of=123 bs=1M count=20</span><br><span class=\"line\">File size limit exceeded &lt;==尝试创建 20MB 的文件，结果失败了！</span><br></pre></td></tr></table></figure>\n\n<p>还记得我们在<a href=\"http://cn.linux.vbird.org/linux_basic/0230filesystem.php\">第八章 Linux 磁盘文件系统</a>里面提到过，单一 filesystem 能够支持的单一文件大小与 block 的大小有关。例如 block size 为 1024 byte 时，单一文件可达 16GB 的容量。但是，我们可以用 ulimit 来限制使用者可以创建的文件大小喔！ 利用 ulimit -f 就可以来配置了！例如上面的范例二，要注意单位喔！单位是 Kbytes。 若改天你一直无法创建一个大容量的文件，记得瞧一瞧 ulimit 的信息喔！</p>\n<hr>\n<h2 id=\"变量内容的删除、取代与替换\"><a href=\"#变量内容的删除、取代与替换\" class=\"headerlink\" title=\"变量内容的删除、取代与替换\"></a><img src=\"http://cn.linux.vbird.org/image/logo.png\" alt=\"小标题的图示\"><strong>变量内容的删除、取代与替换</strong></h2><p>变量除了可以直接配置来修改原本的内容之外，有没有办法透过简单的动作来将变量的内容进行微调呢？ 举例来说，进行变量内容的删除、取代与替换等！是可以的！我们可以透过几个简单的小步骤来进行变量内容的微调喔！ 底下就来试试看！</p>\n<hr>\n<ul>\n<li><h3 id=\"变量内容的删除与取代\"><a href=\"#变量内容的删除与取代\" class=\"headerlink\" title=\"变量内容的删除与取代\"></a>变量内容的删除与取代</h3></li>\n</ul>\n<p>变量的内容可以很简单的透过几个咚咚来进行删除喔！我们使用 PATH 这个变量的内容来做测试好了。 请你依序进行底下的几个例子来玩玩，比较容易感受的到鸟哥在这里想要表达的意义：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：先让小写的 path 自定义变量配置的与 PATH 内容相同</span><br><span class=\"line\">[root@www ~]# path=$&#123;PATH&#125;</span><br><span class=\"line\">[root@www ~]# echo $path</span><br><span class=\"line\">/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\">/usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例二：假设我不喜欢 kerberos，所以要将前两个目录删除掉，如何显示？</span><br><span class=\"line\">[root@www ~]# echo $&#123;path#/*kerberos/bin:&#125;</span><br><span class=\"line\">/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure>\n\n<p>上面这个范例很有趣的！他的重点可以用底下这张表格来说明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;variable#/*kerberos/bin:&#125;</span><br><span class=\"line\">   上面的特殊字体部分是关键词！用在这种删除模式所必须存在的</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;variable#/*kerberos/bin:&#125;</span><br><span class=\"line\">   这就是原本的变量名称，以上面范例二来说，这里就填写 path 这个『变量名称』啦！</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;variable#/*kerberos/bin:&#125;</span><br><span class=\"line\">   这是重点！代表『从变量内容的最前面开始向右删除』，且仅删除最短的那个</span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;variable#/*kerberos/bin:&#125;</span><br><span class=\"line\">   代表要被删除的部分，由于 # 代表由前面开始删除，所以这里便由开始的 / 写起。</span><br><span class=\"line\">   需要注意的是，我们还可以透过通配符 * 来取代 0 到无穷多个任意字符</span><br><span class=\"line\"></span><br><span class=\"line\">   以上面范例二的结果来看， path 这个变量被删除的内容如下所示：</span><br><span class=\"line\">/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\">/usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br></pre></td></tr></table></figure>\n\n<p>很有趣吧！这样了解了 # 的功能了吗？接下来让我们来看看底下的范例三！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例三：我想要删除前面所有的目录，仅保留最后一个目录</span><br><span class=\"line\">[root@www ~]# echo $&#123;path#/*:&#125;</span><br><span class=\"line\">/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:</span><br><span class=\"line\">/root/bin     &lt;==这两行其实是同一行啦！</span><br><span class=\"line\"># 由于一个 # 仅删除掉最短的那个，因此他删除的情况可以用底下的删除线来看：</span><br><span class=\"line\"># /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\"># /usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br><span class=\"line\"></span><br><span class=\"line\">[root@www ~]# echo $&#123;path##/*:&#125;</span><br><span class=\"line\">/root/bin</span><br><span class=\"line\"># 嘿！多加了一个 # 变成 ## 之后，他变成『删除掉最长的那个数据』！亦即是：</span><br><span class=\"line\"># /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\"># /usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br></pre></td></tr></table></figure>\n\n<p>非常有趣！不是吗？因为在 PATH 这个变量的内容中，每个目录都是以冒号『:』隔开的， 所以要从头删除掉目录就是介于斜线 (&#x2F;) 到冒号 (:) 之间的数据！但是 PATH 中不止一个冒号 (:) 啊！ 所以 # 与 ## 就分别代表：</p>\n<ul>\n<li># ：符合取代文字的『最短的』那一个；</li>\n<li>##：符合取代文字的『最长的』那一个</li>\n</ul>\n<p>上面谈到的是『从前面开始删除变量内容』，那么如果想要『从后面向前删除变量内容』呢？ 这个时候就得使用百分比 (%) 符号了！来看看范例四怎么做吧！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例四：我想要删除最后面那个目录，亦即从 : 到 bin 为止的字符串</span><br><span class=\"line\">[root@www ~]# echo $&#123;path%:*bin&#125;</span><br><span class=\"line\">/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\">/usr/sbin:/usr/bin  &lt;==注意啊！最后面一个目录不见去！</span><br><span class=\"line\"># 这个 % 符号代表由最后面开始向前删除！所以上面得到的结果其实是来自如下：</span><br><span class=\"line\"># /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\"># /usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br><span class=\"line\"></span><br><span class=\"line\">范例五：那如果我只想要保留第一个目录呢？</span><br><span class=\"line\">[root@www ~]# echo $&#123;path%%:*bin&#125;</span><br><span class=\"line\">/usr/kerberos/sbin</span><br><span class=\"line\"># 同样的， %% 代表的则是最长的符合字符串，所以结果其实是来自如下：</span><br><span class=\"line\"># /usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\"># /usr/sbin:/usr/bin:/root/bin  &lt;==这两行其实是同一行啦！</span><br></pre></td></tr></table></figure>\n\n<p>由于我是想要由变量内容的后面向前面删除，而我这个变量内容最后面的结尾是『&#x2F;root&#x2F;bin』， 所以你可以看到上面我删除的数据最终一定是『bin』，亦即是『:*bin』那个 * 代表通配符！ 至于 % 与 %% 的意义其实与 # 及 ## 类似！这样理解否？</p>\n<p>了解了删除功能后，接下来谈谈取代吧！继续玩玩范例六啰！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">范例六：将 path 的变量内容内的 sbin 取代成大写 SBIN：</span><br><span class=\"line\">[root@www ~]# echo $&#123;path/sbin/SBIN&#125;</span><br><span class=\"line\">/usr/kerberos/SBIN:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:</span><br><span class=\"line\">/usr/sbin:/usr/bin:/root/bin</span><br><span class=\"line\"># 这个部分就容易理解的多了！关键词在于那两个斜线，两斜线中间的是旧字符串</span><br><span class=\"line\"># 后面的是新字符串，所以结果就会出现如上述的特殊字体部分啰！</span><br><span class=\"line\"></span><br><span class=\"line\">[root@www ~]# echo $&#123;path//sbin/SBIN&#125;</span><br><span class=\"line\">/usr/kerberos/SBIN:/usr/kerberos/bin:/usr/local/SBIN:/usr/local/bin:/SBIN:/bin:</span><br><span class=\"line\">/usr/SBIN:/usr/bin:/root/bin</span><br><span class=\"line\"># 如果是两条斜线，那么就变成所有符合的内容都会被取代喔！</span><br></pre></td></tr></table></figure>\n\n<p>我们将这部份作个总结说明一下：</p>\n<table>\n<thead>\n<tr>\n<th>变量配置方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>${变量#关键词} ${变量##关键词}</td>\n<td>若变量内容从头开始的数据符合『关键词』，则将符合的最短数据删除 若变量内容从头开始的数据符合『关键词』，则将符合的最长数据删除</td>\n</tr>\n<tr>\n<td>${变量%关键词} ${变量%%关键词}</td>\n<td>若变量内容从尾向前的数据符合『关键词』，则将符合的最短数据删除 若变量内容从尾向前的数据符合『关键词』，则将符合的最长数据删除</td>\n</tr>\n<tr>\n<td>${变量&#x2F;旧字符串&#x2F;新字符串} ${变量&#x2F;&#x2F;旧字符串&#x2F;新字符串}</td>\n<td>若变量内容符合『旧字符串』则『第一个旧字符串会被新字符串取代』 若变量内容符合『旧字符串』则『全部的旧字符串会被新字符串取代』</td>\n</tr>\n</tbody></table>\n<hr>\n<ul>\n<li><h3 id=\"变量的测试与内容替换\"><a href=\"#变量的测试与内容替换\" class=\"headerlink\" title=\"变量的测试与内容替换\"></a>变量的测试与内容替换</h3></li>\n</ul>\n<p>在某些时刻我们常常需要『判断』某个变量是否存在，若变量存在则使用既有的配置，若变量不存在则给予一个常用的配置。 我们举底下的例子来说明好了，看看能不能较容易被你所理解呢！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：测试一下是否存在 username 这个变量，若不存在则给予 username 内容为 root [root@www ~]# echo $username           &lt;==由于出现空白，所以 username 可能不存在，也可能是空字符串 [root@www ~]# username=$&#123;username-root&#125; [root@www ~]# echo $username root       &lt;==因为 username 没有配置，所以主动给予名为 root 的内容。 [root@www ~]# username=&quot;vbird tsai&quot; &lt;==主动配置 username 的内容 [root@www ~]# username=$&#123;username-root&#125; [root@www ~]# echo $username vbird tsai &lt;==因为 username 已经配置了，所以使用旧有的配置而不以 root 取代 </span><br></pre></td></tr></table></figure>\n\n<p>在上面的范例中，重点在于减号『 - 』后面接的关键词！基本上你可以这样理解：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_var=$&#123;old_var-content&#125;   新的变量，主要用来取代旧变量。新旧变量名称其实常常是一样的 new_var=$&#123;old_var-content&#125;   这是本范例中的关键词部分！必须要存在的哩！ new_var=$&#123;old_var-content&#125;   旧的变量，被测试的项目！ new_var=$&#123;old_var-content&#125;   变量的『内容』，在本范例中，这个部分是在『给予未配置变量的内容』 </span><br></pre></td></tr></table></figure>\n\n<p>不过这还是有点问题！因为 username 可能已经被配置为『空字符串』了！果真如此的话，那你还可以使用底下的范例来给予 username 的内容成为 root 喔！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例二：若 username 未配置或为空字符串，则将 username 内容配置为 root [root@www ~]# username=&quot;&quot; [root@www ~]# username=$&#123;username-root&#125; [root@www ~]# echo $username      &lt;==因为 username 被配置为空字符串了！所以当然还是保留为空字符串！ [root@www ~]# username=$&#123;username:-root&#125; [root@www ~]# echo $username root  &lt;==加上『 : 』后若变量内容为空或者是未配置，都能够以后面的内容替换！ </span><br></pre></td></tr></table></figure>\n\n<p>在大括号内有没有冒号『 : 』的差别是很大的！加上冒号后，被测试的变量未被配置或者是已被配置为空字符串时， 都能够用后面的内容 (本例中是使用 root 为内容) 来替换与配置！这样可以了解了吗？除了这样的测试之外， 还有其他的测试方法喔！鸟哥将他整理如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>Tips:</strong> 底下的例子当中，那个 var 与 str 为变量，我们想要针对 str 是否有配置来决定 var 的值喔！ 一般来说， str: 代表『str 没配置或为空的字符串时』；至于 str 则仅为『没有该变量』。</th>\n<th><img src=\"http://cn.linux.vbird.org/linux_basic/0320bash_files/vbird_face.gif\" alt=\"鸟哥的图示\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>变量配置方式</th>\n<th>str 没有配置</th>\n<th>str 为空字符串</th>\n<th>str 已配置非为空字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var&#x3D;${str-expr}</td>\n<td>var&#x3D;expr</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str:-expr}</td>\n<td>var&#x3D;expr</td>\n<td>var&#x3D;expr</td>\n<td>var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str+expr}</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;expr</td>\n<td>var&#x3D;expr</td>\n</tr>\n<tr>\n<td>var&#x3D;${str:+expr}</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;expr</td>\n</tr>\n<tr>\n<td>var&#x3D;${str&#x3D;expr}</td>\n<td>str&#x3D;expr var&#x3D;expr</td>\n<td>str 不变 var&#x3D;</td>\n<td>str 不变 var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str:&#x3D;expr}</td>\n<td>str&#x3D;expr var&#x3D;expr</td>\n<td>str&#x3D;expr var&#x3D;expr</td>\n<td>str 不变 var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str?expr}</td>\n<td>expr 输出至 stderr</td>\n<td>var&#x3D;</td>\n<td>var&#x3D;$str</td>\n</tr>\n<tr>\n<td>var&#x3D;${str:?expr}</td>\n<td>expr 输出至 stderr</td>\n<td>expr 输出至 stderr</td>\n<td>var&#x3D;$str</td>\n</tr>\n</tbody></table>\n<p>根据上面这张表，我们来进行几个范例的练习吧！ ^_^！首先让我们来测试一下，如果旧变量 (str) 不存在时， 我们要给予新变量一个内容，若旧变量存在则新变量内容以旧变量来替换，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">范例一：测试一下是否存在 username 这个变量，若不存在则给予 username 内容为 root</span><br><span class=\"line\">[root@www ~]# echo $username</span><br><span class=\"line\">           &lt;==由于出现空白，所以 username 可能不存在，也可能是空字符串</span><br><span class=\"line\">[root@www ~]# username=$&#123;username-root&#125;</span><br><span class=\"line\">[root@www ~]# echo $username</span><br><span class=\"line\">root       &lt;==因为 username 没有配置，所以主动给予名为 root 的内容。</span><br><span class=\"line\">[root@www ~]# username=&quot;vbird tsai&quot; &lt;==主动配置 username 的内容</span><br><span class=\"line\">[root@www ~]# username=$&#123;username-root&#125;</span><br><span class=\"line\">[root@www ~]# echo $username</span><br><span class=\"line\">vbird tsai &lt;==因为 username 已经配置了，所以使用旧有的配置而不以 root 取代</span><br></pre></td></tr></table></figure>\n\n<p>关于减号 (-) 其实上面我们谈过了！这里的测试只是要让你更加了解，这个减号的测试并不会影响到旧变量的内容。 如果你想要将旧变量内容也一起替换掉的话，那么就使用等号 (&#x3D;) 吧！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new_var=$&#123;old_var-content&#125;</span><br><span class=\"line\">   新的变量，主要用来取代旧变量。新旧变量名称其实常常是一样的</span><br><span class=\"line\"></span><br><span class=\"line\">new_var=$&#123;old_var-content&#125;</span><br><span class=\"line\">   这是本范例中的关键词部分！必须要存在的哩！</span><br><span class=\"line\"></span><br><span class=\"line\">new_var=$&#123;old_var-content&#125;</span><br><span class=\"line\">   旧的变量，被测试的项目！</span><br><span class=\"line\"></span><br><span class=\"line\">new_var=$&#123;old_var-content&#125;</span><br><span class=\"line\">   变量的『内容』，在本范例中，这个部分是在『给予未配置变量的内容』</span><br></pre></td></tr></table></figure>\n\n<p>那如果我只是想知道，如果旧变量不存在时，整个测试就告知我『有错误』，此时就能够使用问号『 ? 』的帮忙啦！ 底下这个测试练习一下先！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">测试：若 str 不存在时，则 var 的测试结果直接显示 &quot;无此变量&quot;</span><br><span class=\"line\">[root@www ~]# unset str; var=$&#123;str?无此变量&#125;</span><br><span class=\"line\">-bash: str: 无此变量    &lt;==因为 str 不存在，所以输出错误信息 </span><br><span class=\"line\"></span><br><span class=\"line\">测试：若 str 存在时，则 var 的内容会与 str 相同！</span><br><span class=\"line\">[root@www ~]# str=&quot;oldvar&quot;; var=$&#123;str?novar&#125;</span><br><span class=\"line\">[root@www ~]# echo var=&quot;$var&quot;, str=&quot;$str&quot;</span><br><span class=\"line\">var=oldvar, str=oldvar  &lt;==因为 str 存在，所以 var 等于 str 的内容</span><br></pre></td></tr></table></figure>\n\n<p>基本上这种变量的测试也能够透过 shell script 内的 if…then… 来处理， 不过既然 bash 有提供这么简单的方法来测试变量，那我们也可以多学一些嘛！ 不过这种变量测试通常是在程序设计当中比较容易出现，如果这里看不懂就先略过，未来有用到判断变量值时，再回来看看吧！ ^_^</p>\n"},{"title":"Git Command","date":"2023-08-25T08:54:21.181Z","description":null,"top_img":false,"_content":"\n# Git Command\n\n[参考教程]: https://www.liaoxuefeng.com/wiki/896043488029600\n\n> `git clone` 默认是克隆`Head`指向的`master`分支，如果是多分支，我们可以单个克隆分支项目。\n>\n> 1.只克隆单分支（非master）：\n>\n>  \tgit clone -b 分支名 https://xxx.git\n>\n> 2.克隆所有分支（多分支）\n>\n>  \tcd project  //切换到指定目录\n>  \tgit clone https://xxx.git //克隆项目（默认master分支）\n>\n> ​\tgit branch -a  //列出远程跟踪及本地分支\n\n## 1.安装并设置地址\n\n```shell\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n\n\n## 2.创建版本库\n\n```shell\n$ mkdir learngit\n$ cd learngit\n$ pwd\n/Users/michael/learngit\n\n$ git init\n```\n\n\n\n## 3.版本管理\n\n- ### 添加文件\n\n\n```shell\n$ git add readme.txt\n$ git commit -m \"wrote a readme file\"\n```\n\n\n\n- ### 查看工作区状态\n\n\n```shell\n$ git status\n```\n\n\n\n- ### 查看提交日志\n\n\n```shell\n$ git log\n```\n\n\n\n- ### 查看历史命令\n\n\n```shell\n$ git reflog\n```\n\n\n\n- ### 版本间穿梭\n\n\n```shell\n$ git reset --hard commit_id\n```\n\nexpmple:\n\n​\tgit reset --hard HEAD^\n\n​\tgit reset --hard 1094a\n\n\n\n- ### 撤销修改\n\n\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，或者删除了工作区某个文件，用命令\n\n```shell\n$ git checkout -- <file>\n```\n\n`git checkout`其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\n\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步\n\n```shell\n$ git reset HEAD <file>\n$ git checkout -- <file>\n```\n\n`git reset`命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用`HEAD`时，表示最新的版本。\n\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考[版本间穿梭](#版本间穿梭)一节，不过前提是没有推送到远程库。\n\n\n\n- ### 删除文件\n\n\n```shell\n$ git rm <file>\n$ git commit -m \"remove test.txt\"\n```\n\n\n\n## 4.远程仓库\n\n- #### 第1步：\n\n\n创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有`id_rsa`和`id_rsa.pub`这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n```shell\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n\n\n- #### 第2步：\n\n\n登陆GitHub，打开“Account settings”，“SSH Keys”页面。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴`id_rsa.pub`文件的内容\n\n\n\n- #### 第3步：\n\n\n登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库\n\n\n\n- #### 第4步：\n\n\n根据GitHub的提示，在本地的`learngit`仓库下运行命令（请千万注意，把上面的`michaelliao`替换成你自己的GitHub账户名）：\n\n```shell\n$ git remote add origin git@github.com:michaelliao/learngit.git\n```\n\n\n\n### 上传远程库\n\n- #### 第5步：\n\n\n就可以把本地库的所有内容推送到远程库上（添加后，远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库）：\n\n```shell\n$ git push -u origin master\nCounting objects: 20, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.\nTotal 20 (delta 5), reused 0 (delta 0)\nremote: Resolving deltas: 100% (5/5), done.\nTo github.com:michaelliao/learngit.git\n * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n```\n\n把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支`master`推送到远程。\n\n由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令：\n\n```shell\n$ git push origin master\n```\n\n\n\n### 删除远程库\n\n如果添加的时候地址写错了，或者就是想删除远程库，可以用`git remote rm <name>`命令。使用前，建议先用`git remote -v`查看远程库信息：\n\n```shell\n$ git remote -v\norigin  git@github.com:michaelliao/learn-git.git (fetch)\norigin  git@github.com:michaelliao/learn-git.git (push)\n```\n\n然后，根据名字删除，比如删除`origin`：\n\n```shell\n$ git remote rm origin\n```\n\n此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。\n\n\n\n## 5.分支管理\n\n### 查看分支\n\n```shell\ngit branch\n```\n\n### 创建分支\n\n```shell\ngit branch <name>\n```\n\n### 切换分支\n\n```shell\ngit checkout <name> \nor\ngit switch <name>\n```\n\n### 创建+切换分支\n\n```shell\ngit checkout -b <name>\nor\ngit switch -c <name>\n```\n\n### 合并某分支到当前分支\n\n```shell\ngit merge <name>\n```\n\n### 删除分支\n\n```shell\ngit branch -d <name>\n```\n\n可以通过`git branch -D <name>`强行删除\n\n### 用带参数的`git log`也可以看到分支的合并情况\n\n```shell\ngit log --graph --pretty=oneline --abbrev-commit\n```\n\n\n\n## 6.多人协作\n\n### 查看远程库信息\n\n```shell\ngit remote -v\n```\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n### 从本地推送分支\n\n```shell\ngit push origin branch-name\n```\n\n如果推送失败,先用`git pull`抓取远程的新提交\n\n### 在本地创建和远程分支对应的分支\n\n```shell\ngit checkout -b branch-name origin/branch-name\n```\n\n本地和远程分支的名称最好一致\n\n### 建立本地分支和远程分支的关联\n\n```shell\ngit branch --set-upstream-to <branch-name> origin/<branch-name>\n```\n\n### 多人协作的工作模式\n\n1. 首先，可以试图用`git push origin <branch-name>`推送自己的修改；\n2. 如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；\n3. 如果合并有冲突，则解决冲突，并在本地提交；\n4. 没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！\n\n如果`git pull`提示`no tracking information`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream-to <branch-name> origin/<branch-name>`\n\n\n\n## 7.标签管理\n\n### 创建标签\n\n```shell\n$ git tag <tagname>\n```\n\n默认标签是打在最新提交的commit上的,也可以指定一个commit id\n\n```shell\n$ git tag v0.9 f52c633\n```\n\n### 创建带有说明的标签\n\n用`-a`指定标签名，`-m`指定说明文字\n\n```shell\n$ git tag -a v0.1 -m \"version 0.1 released\" 1094adb\n```\n\n### 查看所有标签\n\n```shell\n$ git tag\nv1.0\n```\n\n### 查看标签信息\n\n标签不是按时间顺序列出，而是按字母排序的。`git show <tagname>`\n\n```shell\n$ git show v0.9\ncommit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 21:56:54 2018 +0800\n\n    add merge\n\ndiff --git a/readme.txt b/readme.txt\n...\n```\n\n### 删除标签\n\n```shell\n$ git tag -d <tagname>\n```\n\n### 推送标签到远程\n\n```shell\n$ git push origin <tagname>\n```\n\n一次性推送全部尚未推送到远程的本地标签\n\n```shell\n$ git push origin --tags\n```\n\n### 删除远程标签\n\n```shell\n$ git tag -d <tagname>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //删除一个本地标签\n$ git push origin :refs/tags/<tagname>\t\t\t\t\t\t\t//删除一个远程标签\n```\n\n","source":"_posts/command/Git_Command.md","raw":"---\ntitle: Git Command\ndate:\ntags: \n- Git\ncategories:\n- command\ndescription:\ntop_img: false\n\n---\n\n# Git Command\n\n[参考教程]: https://www.liaoxuefeng.com/wiki/896043488029600\n\n> `git clone` 默认是克隆`Head`指向的`master`分支，如果是多分支，我们可以单个克隆分支项目。\n>\n> 1.只克隆单分支（非master）：\n>\n>  \tgit clone -b 分支名 https://xxx.git\n>\n> 2.克隆所有分支（多分支）\n>\n>  \tcd project  //切换到指定目录\n>  \tgit clone https://xxx.git //克隆项目（默认master分支）\n>\n> ​\tgit branch -a  //列出远程跟踪及本地分支\n\n## 1.安装并设置地址\n\n```shell\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n\n\n## 2.创建版本库\n\n```shell\n$ mkdir learngit\n$ cd learngit\n$ pwd\n/Users/michael/learngit\n\n$ git init\n```\n\n\n\n## 3.版本管理\n\n- ### 添加文件\n\n\n```shell\n$ git add readme.txt\n$ git commit -m \"wrote a readme file\"\n```\n\n\n\n- ### 查看工作区状态\n\n\n```shell\n$ git status\n```\n\n\n\n- ### 查看提交日志\n\n\n```shell\n$ git log\n```\n\n\n\n- ### 查看历史命令\n\n\n```shell\n$ git reflog\n```\n\n\n\n- ### 版本间穿梭\n\n\n```shell\n$ git reset --hard commit_id\n```\n\nexpmple:\n\n​\tgit reset --hard HEAD^\n\n​\tgit reset --hard 1094a\n\n\n\n- ### 撤销修改\n\n\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，或者删除了工作区某个文件，用命令\n\n```shell\n$ git checkout -- <file>\n```\n\n`git checkout`其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。\n\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步\n\n```shell\n$ git reset HEAD <file>\n$ git checkout -- <file>\n```\n\n`git reset`命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用`HEAD`时，表示最新的版本。\n\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考[版本间穿梭](#版本间穿梭)一节，不过前提是没有推送到远程库。\n\n\n\n- ### 删除文件\n\n\n```shell\n$ git rm <file>\n$ git commit -m \"remove test.txt\"\n```\n\n\n\n## 4.远程仓库\n\n- #### 第1步：\n\n\n创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有`id_rsa`和`id_rsa.pub`这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n```shell\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n\n\n- #### 第2步：\n\n\n登陆GitHub，打开“Account settings”，“SSH Keys”页面。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴`id_rsa.pub`文件的内容\n\n\n\n- #### 第3步：\n\n\n登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库\n\n\n\n- #### 第4步：\n\n\n根据GitHub的提示，在本地的`learngit`仓库下运行命令（请千万注意，把上面的`michaelliao`替换成你自己的GitHub账户名）：\n\n```shell\n$ git remote add origin git@github.com:michaelliao/learngit.git\n```\n\n\n\n### 上传远程库\n\n- #### 第5步：\n\n\n就可以把本地库的所有内容推送到远程库上（添加后，远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库）：\n\n```shell\n$ git push -u origin master\nCounting objects: 20, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.\nTotal 20 (delta 5), reused 0 (delta 0)\nremote: Resolving deltas: 100% (5/5), done.\nTo github.com:michaelliao/learngit.git\n * [new branch]      master -> master\nBranch 'master' set up to track remote branch 'master' from 'origin'.\n```\n\n把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支`master`推送到远程。\n\n由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令：\n\n```shell\n$ git push origin master\n```\n\n\n\n### 删除远程库\n\n如果添加的时候地址写错了，或者就是想删除远程库，可以用`git remote rm <name>`命令。使用前，建议先用`git remote -v`查看远程库信息：\n\n```shell\n$ git remote -v\norigin  git@github.com:michaelliao/learn-git.git (fetch)\norigin  git@github.com:michaelliao/learn-git.git (push)\n```\n\n然后，根据名字删除，比如删除`origin`：\n\n```shell\n$ git remote rm origin\n```\n\n此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。\n\n\n\n## 5.分支管理\n\n### 查看分支\n\n```shell\ngit branch\n```\n\n### 创建分支\n\n```shell\ngit branch <name>\n```\n\n### 切换分支\n\n```shell\ngit checkout <name> \nor\ngit switch <name>\n```\n\n### 创建+切换分支\n\n```shell\ngit checkout -b <name>\nor\ngit switch -c <name>\n```\n\n### 合并某分支到当前分支\n\n```shell\ngit merge <name>\n```\n\n### 删除分支\n\n```shell\ngit branch -d <name>\n```\n\n可以通过`git branch -D <name>`强行删除\n\n### 用带参数的`git log`也可以看到分支的合并情况\n\n```shell\ngit log --graph --pretty=oneline --abbrev-commit\n```\n\n\n\n## 6.多人协作\n\n### 查看远程库信息\n\n```shell\ngit remote -v\n```\n\n本地新建的分支如果不推送到远程，对其他人就是不可见的；\n\n### 从本地推送分支\n\n```shell\ngit push origin branch-name\n```\n\n如果推送失败,先用`git pull`抓取远程的新提交\n\n### 在本地创建和远程分支对应的分支\n\n```shell\ngit checkout -b branch-name origin/branch-name\n```\n\n本地和远程分支的名称最好一致\n\n### 建立本地分支和远程分支的关联\n\n```shell\ngit branch --set-upstream-to <branch-name> origin/<branch-name>\n```\n\n### 多人协作的工作模式\n\n1. 首先，可以试图用`git push origin <branch-name>`推送自己的修改；\n2. 如果推送失败，则因为远程分支比你的本地更新，需要先用`git pull`试图合并；\n3. 如果合并有冲突，则解决冲突，并在本地提交；\n4. 没有冲突或者解决掉冲突后，再用`git push origin <branch-name>`推送就能成功！\n\n如果`git pull`提示`no tracking information`，则说明本地分支和远程分支的链接关系没有创建，用命令`git branch --set-upstream-to <branch-name> origin/<branch-name>`\n\n\n\n## 7.标签管理\n\n### 创建标签\n\n```shell\n$ git tag <tagname>\n```\n\n默认标签是打在最新提交的commit上的,也可以指定一个commit id\n\n```shell\n$ git tag v0.9 f52c633\n```\n\n### 创建带有说明的标签\n\n用`-a`指定标签名，`-m`指定说明文字\n\n```shell\n$ git tag -a v0.1 -m \"version 0.1 released\" 1094adb\n```\n\n### 查看所有标签\n\n```shell\n$ git tag\nv1.0\n```\n\n### 查看标签信息\n\n标签不是按时间顺序列出，而是按字母排序的。`git show <tagname>`\n\n```shell\n$ git show v0.9\ncommit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)\nAuthor: Michael Liao <askxuefeng@gmail.com>\nDate:   Fri May 18 21:56:54 2018 +0800\n\n    add merge\n\ndiff --git a/readme.txt b/readme.txt\n...\n```\n\n### 删除标签\n\n```shell\n$ git tag -d <tagname>\n```\n\n### 推送标签到远程\n\n```shell\n$ git push origin <tagname>\n```\n\n一次性推送全部尚未推送到远程的本地标签\n\n```shell\n$ git push origin --tags\n```\n\n### 删除远程标签\n\n```shell\n$ git tag -d <tagname>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //删除一个本地标签\n$ git push origin :refs/tags/<tagname>\t\t\t\t\t\t\t//删除一个远程标签\n```\n\n","slug":"command/Git_Command","published":1,"updated":"2023-08-25T09:04:03.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67b003qgcr74dvu8zle","content":"<h1 id=\"Git-Command\"><a href=\"#Git-Command\" class=\"headerlink\" title=\"Git Command\"></a>Git Command</h1><blockquote>\n<p><code>git clone</code> 默认是克隆<code>Head</code>指向的<code>master</code>分支，如果是多分支，我们可以单个克隆分支项目。</p>\n<p>1.只克隆单分支（非master）：</p>\n<pre><code> git clone -b 分支名 https://xxx.git\n</code></pre>\n<p>2.克隆所有分支（多分支）</p>\n<pre><code> cd project  //切换到指定目录\n git clone https://xxx.git //克隆项目（默认master分支）\n</code></pre>\n<p>​\tgit branch -a  &#x2F;&#x2F;列出远程跟踪及本地分支</p>\n</blockquote>\n<h2 id=\"1-安装并设置地址\"><a href=\"#1-安装并设置地址\" class=\"headerlink\" title=\"1.安装并设置地址\"></a>1.安装并设置地址</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --global user.email <span class=\"string\">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-创建版本库\"><a href=\"#2-创建版本库\" class=\"headerlink\" title=\"2.创建版本库\"></a>2.创建版本库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> learngit</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> learngit</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/Users/michael/learngit</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git init</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-版本管理\"><a href=\"#3-版本管理\" class=\"headerlink\" title=\"3.版本管理\"></a>3.版本管理</h2><ul>\n<li><h3 id=\"添加文件\"><a href=\"#添加文件\" class=\"headerlink\" title=\"添加文件\"></a>添加文件</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add readme.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;wrote a readme file&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h3 id=\"查看工作区状态\"><a href=\"#查看工作区状态\" class=\"headerlink\" title=\"查看工作区状态\"></a>查看工作区状态</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git status</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h3 id=\"查看提交日志\"><a href=\"#查看提交日志\" class=\"headerlink\" title=\"查看提交日志\"></a>查看提交日志</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h3 id=\"查看历史命令\"><a href=\"#查看历史命令\" class=\"headerlink\" title=\"查看历史命令\"></a>查看历史命令</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reflog</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h3 id=\"版本间穿梭\"><a href=\"#版本间穿梭\" class=\"headerlink\" title=\"版本间穿梭\"></a>版本间穿梭</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reset --hard commit_id</span></span><br></pre></td></tr></table></figure>\n\n<p>expmple:</p>\n<p>​\tgit reset –hard HEAD^</p>\n<p>​\tgit reset –hard 1094a</p>\n<ul>\n<li><h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3></li>\n</ul>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，或者删除了工作区某个文件，用命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout -- &lt;file&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\n<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reset HEAD &lt;file&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout -- &lt;file&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p>\n<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href=\"#%E7%89%88%E6%9C%AC%E9%97%B4%E7%A9%BF%E6%A2%AD\">版本间穿梭</a>一节，不过前提是没有推送到远程库。</p>\n<ul>\n<li><h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> &lt;file&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;remove test.txt&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-远程仓库\"><a href=\"#4-远程仓库\" class=\"headerlink\" title=\"4.远程仓库\"></a>4.远程仓库</h2><ul>\n<li><h4 id=\"第1步：\"><a href=\"#第1步：\" class=\"headerlink\" title=\"第1步：\"></a>第1步：</h4></li>\n</ul>\n<p>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"第2步：\"><a href=\"#第2步：\" class=\"headerlink\" title=\"第2步：\"></a>第2步：</h4></li>\n</ul>\n<p>登陆GitHub，打开“Account settings”，“SSH Keys”页面。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容</p>\n<ul>\n<li><h4 id=\"第3步：\"><a href=\"#第3步：\" class=\"headerlink\" title=\"第3步：\"></a>第3步：</h4></li>\n</ul>\n<p>登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库</p>\n<ul>\n<li><h4 id=\"第4步：\"><a href=\"#第4步：\" class=\"headerlink\" title=\"第4步：\"></a>第4步：</h4></li>\n</ul>\n<p>根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令（请千万注意，把上面的<code>michaelliao</code>替换成你自己的GitHub账户名）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote add origin git@github.com:michaelliao/learngit.git</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"上传远程库\"><a href=\"#上传远程库\" class=\"headerlink\" title=\"上传远程库\"></a>上传远程库</h3><ul>\n<li><h4 id=\"第5步：\"><a href=\"#第5步：\" class=\"headerlink\" title=\"第5步：\"></a>第5步：</h4></li>\n</ul>\n<p>就可以把本地库的所有内容推送到远程库上（添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push -u origin master</span></span><br><span class=\"line\">Counting objects: 20, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (15/15), done.</span><br><span class=\"line\">Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.</span><br><span class=\"line\">Total 20 (delta 5), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (5/5), done.</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;origin&#x27;.</span><br></pre></td></tr></table></figure>\n\n<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin master</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除远程库\"><a href=\"#删除远程库\" class=\"headerlink\" title=\"删除远程库\"></a>删除远程库</h3><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote -v</span></span><br><span class=\"line\">origin  git@github.com:michaelliao/learn-git.git (fetch)</span><br><span class=\"line\">origin  git@github.com:michaelliao/learn-git.git (push)</span><br></pre></td></tr></table></figure>\n\n<p>然后，根据名字删除，比如删除<code>origin</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote <span class=\"built_in\">rm</span> origin</span></span><br></pre></td></tr></table></figure>\n\n<p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p>\n<h2 id=\"5-分支管理\"><a href=\"#5-分支管理\" class=\"headerlink\" title=\"5.分支管理\"></a>5.分支管理</h2><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;name&gt; </span><br><span class=\"line\">or</span><br><span class=\"line\">git switch &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-切换分支\"><a href=\"#创建-切换分支\" class=\"headerlink\" title=\"创建+切换分支\"></a>创建+切换分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;name&gt;</span><br><span class=\"line\">or</span><br><span class=\"line\">git switch -c &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并某分支到当前分支\"><a href=\"#合并某分支到当前分支\" class=\"headerlink\" title=\"合并某分支到当前分支\"></a>合并某分支到当前分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过<code>git branch -D &lt;name&gt;</code>强行删除</p>\n<h3 id=\"用带参数的git-log也可以看到分支的合并情况\"><a href=\"#用带参数的git-log也可以看到分支的合并情况\" class=\"headerlink\" title=\"用带参数的git log也可以看到分支的合并情况\"></a>用带参数的<code>git log</code>也可以看到分支的合并情况</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-多人协作\"><a href=\"#6-多人协作\" class=\"headerlink\" title=\"6.多人协作\"></a>6.多人协作</h2><h3 id=\"查看远程库信息\"><a href=\"#查看远程库信息\" class=\"headerlink\" title=\"查看远程库信息\"></a>查看远程库信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<h3 id=\"从本地推送分支\"><a href=\"#从本地推送分支\" class=\"headerlink\" title=\"从本地推送分支\"></a>从本地推送分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch-name</span><br></pre></td></tr></table></figure>\n\n<p>如果推送失败,先用<code>git pull</code>抓取远程的新提交</p>\n<h3 id=\"在本地创建和远程分支对应的分支\"><a href=\"#在本地创建和远程分支对应的分支\" class=\"headerlink\" title=\"在本地创建和远程分支对应的分支\"></a>在本地创建和远程分支对应的分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch-name origin/branch-name</span><br></pre></td></tr></table></figure>\n\n<p>本地和远程分支的名称最好一致</p>\n<h3 id=\"建立本地分支和远程分支的关联\"><a href=\"#建立本地分支和远程分支的关联\" class=\"headerlink\" title=\"建立本地分支和远程分支的关联\"></a>建立本地分支和远程分支的关联</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多人协作的工作模式\"><a href=\"#多人协作的工作模式\" class=\"headerlink\" title=\"多人协作的工作模式\"></a>多人协作的工作模式</h3><ol>\n<li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li>\n</ol>\n<p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code></p>\n<h2 id=\"7-标签管理\"><a href=\"#7-标签管理\" class=\"headerlink\" title=\"7.标签管理\"></a>7.标签管理</h2><h3 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认标签是打在最新提交的commit上的,也可以指定一个commit id</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag v0.9 f52c633</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建带有说明的标签\"><a href=\"#创建带有说明的标签\" class=\"headerlink\" title=\"创建带有说明的标签\"></a>创建带有说明的标签</h3><p>用<code>-a</code>指定标签名，<code>-m</code>指定说明文字</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag -a v0.1 -m <span class=\"string\">&quot;version 0.1 released&quot;</span> 1094adb</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看所有标签\"><a href=\"#查看所有标签\" class=\"headerlink\" title=\"查看所有标签\"></a>查看所有标签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag</span></span><br><span class=\"line\">v1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看标签信息\"><a href=\"#查看标签信息\" class=\"headerlink\" title=\"查看标签信息\"></a>查看标签信息</h3><p>标签不是按时间顺序列出，而是按字母排序的。<code>git show &lt;tagname&gt;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git show v0.9</span></span><br><span class=\"line\">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add merge</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a>删除标签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag -d &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"推送标签到远程\"><a href=\"#推送标签到远程\" class=\"headerlink\" title=\"推送标签到远程\"></a>推送标签到远程</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一次性推送全部尚未推送到远程的本地标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin --tags</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag -d &lt;tagname&gt;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //删除一个本地标签</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin :refs/tags/&lt;tagname&gt;\t\t\t\t\t\t\t//删除一个远程标签</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-8.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Git-Command\"><a href=\"#Git-Command\" class=\"headerlink\" title=\"Git Command\"></a>Git Command</h1><blockquote>\n<p><code>git clone</code> 默认是克隆<code>Head</code>指向的<code>master</code>分支，如果是多分支，我们可以单个克隆分支项目。</p>\n<p>1.只克隆单分支（非master）：</p>\n<pre><code> git clone -b 分支名 https://xxx.git\n</code></pre>\n<p>2.克隆所有分支（多分支）</p>\n<pre><code> cd project  //切换到指定目录\n git clone https://xxx.git //克隆项目（默认master分支）\n</code></pre>\n<p>​\tgit branch -a  &#x2F;&#x2F;列出远程跟踪及本地分支</p>\n</blockquote>\n<h2 id=\"1-安装并设置地址\"><a href=\"#1-安装并设置地址\" class=\"headerlink\" title=\"1.安装并设置地址\"></a>1.安装并设置地址</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git config --global user.email <span class=\"string\">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-创建版本库\"><a href=\"#2-创建版本库\" class=\"headerlink\" title=\"2.创建版本库\"></a>2.创建版本库</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">mkdir</span> learngit</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> learngit</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">pwd</span></span></span><br><span class=\"line\">/Users/michael/learngit</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git init</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-版本管理\"><a href=\"#3-版本管理\" class=\"headerlink\" title=\"3.版本管理\"></a>3.版本管理</h2><ul>\n<li><h3 id=\"添加文件\"><a href=\"#添加文件\" class=\"headerlink\" title=\"添加文件\"></a>添加文件</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add readme.txt</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;wrote a readme file&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h3 id=\"查看工作区状态\"><a href=\"#查看工作区状态\" class=\"headerlink\" title=\"查看工作区状态\"></a>查看工作区状态</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git status</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h3 id=\"查看提交日志\"><a href=\"#查看提交日志\" class=\"headerlink\" title=\"查看提交日志\"></a>查看提交日志</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h3 id=\"查看历史命令\"><a href=\"#查看历史命令\" class=\"headerlink\" title=\"查看历史命令\"></a>查看历史命令</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reflog</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h3 id=\"版本间穿梭\"><a href=\"#版本间穿梭\" class=\"headerlink\" title=\"版本间穿梭\"></a>版本间穿梭</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reset --hard commit_id</span></span><br></pre></td></tr></table></figure>\n\n<p>expmple:</p>\n<p>​\tgit reset –hard HEAD^</p>\n<p>​\tgit reset –hard 1094a</p>\n<ul>\n<li><h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3></li>\n</ul>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，或者删除了工作区某个文件，用命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout -- &lt;file&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>\n<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reset HEAD &lt;file&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout -- &lt;file&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p>\n<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href=\"#%E7%89%88%E6%9C%AC%E9%97%B4%E7%A9%BF%E6%A2%AD\">版本间穿梭</a>一节，不过前提是没有推送到远程库。</p>\n<ul>\n<li><h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">rm</span> &lt;file&gt;</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m <span class=\"string\">&quot;remove test.txt&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-远程仓库\"><a href=\"#4-远程仓库\" class=\"headerlink\" title=\"4.远程仓库\"></a>4.远程仓库</h2><ul>\n<li><h4 id=\"第1步：\"><a href=\"#第1步：\" class=\"headerlink\" title=\"第1步：\"></a>第1步：</h4></li>\n</ul>\n<p>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"string\">&quot;youremail@example.com&quot;</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"第2步：\"><a href=\"#第2步：\" class=\"headerlink\" title=\"第2步：\"></a>第2步：</h4></li>\n</ul>\n<p>登陆GitHub，打开“Account settings”，“SSH Keys”页面。然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容</p>\n<ul>\n<li><h4 id=\"第3步：\"><a href=\"#第3步：\" class=\"headerlink\" title=\"第3步：\"></a>第3步：</h4></li>\n</ul>\n<p>登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库</p>\n<ul>\n<li><h4 id=\"第4步：\"><a href=\"#第4步：\" class=\"headerlink\" title=\"第4步：\"></a>第4步：</h4></li>\n</ul>\n<p>根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令（请千万注意，把上面的<code>michaelliao</code>替换成你自己的GitHub账户名）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote add origin git@github.com:michaelliao/learngit.git</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"上传远程库\"><a href=\"#上传远程库\" class=\"headerlink\" title=\"上传远程库\"></a>上传远程库</h3><ul>\n<li><h4 id=\"第5步：\"><a href=\"#第5步：\" class=\"headerlink\" title=\"第5步：\"></a>第5步：</h4></li>\n</ul>\n<p>就可以把本地库的所有内容推送到远程库上（添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push -u origin master</span></span><br><span class=\"line\">Counting objects: 20, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (15/15), done.</span><br><span class=\"line\">Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.</span><br><span class=\"line\">Total 20 (delta 5), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (5/5), done.</span><br><span class=\"line\">To github.com:michaelliao/learngit.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;origin&#x27;.</span><br></pre></td></tr></table></figure>\n\n<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>\n<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin master</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除远程库\"><a href=\"#删除远程库\" class=\"headerlink\" title=\"删除远程库\"></a>删除远程库</h3><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote -v</span></span><br><span class=\"line\">origin  git@github.com:michaelliao/learn-git.git (fetch)</span><br><span class=\"line\">origin  git@github.com:michaelliao/learn-git.git (push)</span><br></pre></td></tr></table></figure>\n\n<p>然后，根据名字删除，比如删除<code>origin</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git remote <span class=\"built_in\">rm</span> origin</span></span><br></pre></td></tr></table></figure>\n\n<p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p>\n<h2 id=\"5-分支管理\"><a href=\"#5-分支管理\" class=\"headerlink\" title=\"5.分支管理\"></a>5.分支管理</h2><h3 id=\"查看分支\"><a href=\"#查看分支\" class=\"headerlink\" title=\"查看分支\"></a>查看分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;name&gt; </span><br><span class=\"line\">or</span><br><span class=\"line\">git switch &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-切换分支\"><a href=\"#创建-切换分支\" class=\"headerlink\" title=\"创建+切换分支\"></a>创建+切换分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;name&gt;</span><br><span class=\"line\">or</span><br><span class=\"line\">git switch -c &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"合并某分支到当前分支\"><a href=\"#合并某分支到当前分支\" class=\"headerlink\" title=\"合并某分支到当前分支\"></a>合并某分支到当前分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过<code>git branch -D &lt;name&gt;</code>强行删除</p>\n<h3 id=\"用带参数的git-log也可以看到分支的合并情况\"><a href=\"#用带参数的git-log也可以看到分支的合并情况\" class=\"headerlink\" title=\"用带参数的git log也可以看到分支的合并情况\"></a>用带参数的<code>git log</code>也可以看到分支的合并情况</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-多人协作\"><a href=\"#6-多人协作\" class=\"headerlink\" title=\"6.多人协作\"></a>6.多人协作</h2><h3 id=\"查看远程库信息\"><a href=\"#查看远程库信息\" class=\"headerlink\" title=\"查看远程库信息\"></a>查看远程库信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>\n<h3 id=\"从本地推送分支\"><a href=\"#从本地推送分支\" class=\"headerlink\" title=\"从本地推送分支\"></a>从本地推送分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin branch-name</span><br></pre></td></tr></table></figure>\n\n<p>如果推送失败,先用<code>git pull</code>抓取远程的新提交</p>\n<h3 id=\"在本地创建和远程分支对应的分支\"><a href=\"#在本地创建和远程分支对应的分支\" class=\"headerlink\" title=\"在本地创建和远程分支对应的分支\"></a>在本地创建和远程分支对应的分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch-name origin/branch-name</span><br></pre></td></tr></table></figure>\n\n<p>本地和远程分支的名称最好一致</p>\n<h3 id=\"建立本地分支和远程分支的关联\"><a href=\"#建立本地分支和远程分支的关联\" class=\"headerlink\" title=\"建立本地分支和远程分支的关联\"></a>建立本地分支和远程分支的关联</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多人协作的工作模式\"><a href=\"#多人协作的工作模式\" class=\"headerlink\" title=\"多人协作的工作模式\"></a>多人协作的工作模式</h3><ol>\n<li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li>\n</ol>\n<p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code></p>\n<h2 id=\"7-标签管理\"><a href=\"#7-标签管理\" class=\"headerlink\" title=\"7.标签管理\"></a>7.标签管理</h2><h3 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认标签是打在最新提交的commit上的,也可以指定一个commit id</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag v0.9 f52c633</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建带有说明的标签\"><a href=\"#创建带有说明的标签\" class=\"headerlink\" title=\"创建带有说明的标签\"></a>创建带有说明的标签</h3><p>用<code>-a</code>指定标签名，<code>-m</code>指定说明文字</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag -a v0.1 -m <span class=\"string\">&quot;version 0.1 released&quot;</span> 1094adb</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看所有标签\"><a href=\"#查看所有标签\" class=\"headerlink\" title=\"查看所有标签\"></a>查看所有标签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag</span></span><br><span class=\"line\">v1.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看标签信息\"><a href=\"#查看标签信息\" class=\"headerlink\" title=\"查看标签信息\"></a>查看标签信息</h3><p>标签不是按时间顺序列出，而是按字母排序的。<code>git show &lt;tagname&gt;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git show v0.9</span></span><br><span class=\"line\">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class=\"line\">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class=\"line\">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add merge</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a>删除标签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag -d &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"推送标签到远程\"><a href=\"#推送标签到远程\" class=\"headerlink\" title=\"推送标签到远程\"></a>推送标签到远程</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin &lt;tagname&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>一次性推送全部尚未推送到远程的本地标签</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin --tags</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git tag -d &lt;tagname&gt;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //删除一个本地标签</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push origin :refs/tags/&lt;tagname&gt;\t\t\t\t\t\t\t//删除一个远程标签</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"LIO-SAM运行","date":"2023-08-25T08:54:21.185Z","description":null,"top_img":false,"_content":"\n# LIO-SAM运行\n\n## part1：数据集运行\n\n### 1.环境变量\n\n```shell\nsource devel/setup.bash\n```\n\n### 2.启动lio-sam功能包\n\n```shell\nroslaunch lio_sam run.launch\n```\n\n### 3.播放数据集\n\n```shell\nrosbag play outdoor.bag\n```\n\n\n\n## part2：实测运行\n\n### 1.打开config文件夹下的参数文件params，修改imu和点云话题\n\n![10 sam:  \\# Topics  pointCloudTopic: \"/points raw\"  \\# pointCloudTopic: \"/velodyne_points\"  imuTopic: \"/imu/data\"  \\# imuTopic: \"imu correct\"  \\# imuTopic: \"imu raw\"  odomTopic: \"odometry/imu\"  gpsTopic: \"odometry/gpsz\"  \\# Point cloud data  \\# IMIJ data  \\# IMIJ pre-preintegration odometry, same frequency as IMIJ  \\# GPS odometry topic from navsat, see module navsat.launch file ](media/e26b16e4dfa08f27a6be90000c53f58e.png)\n\n\n\n### 2.修改imu矫正参数\n\n![\\#IMU Settings  imuAccNoise: 1.9740799873834897e-02  imuGyrNoise: 2,3704854385698929+03  imuAccBiasN: 4.3015781912824339+04  imuGyrBiasN: 2.6685224155471368+05  imuGravity: 9.80511  imuRPYWeight: 0.01  imuAccNoise: 3,9939570888238808+03  imuGyrNoise: 1.5636343949698187e-03  imuAccBiasN: 6,4356659353532566+05  imuGyrBiasN: 3.5640318696367613e-05  imuGravity: 9.80511  imuRPYWeight: 0.01 ](media/d46f4d8198bf146ef7995d5708b2b454.png)\n\n\n\n### 3.修改激光雷达到imu标定参数\n\n![[png]](media/dbebbbdaf4c6e4278a0ac2e62db89a81.png)\n\n\n\n### 4.添加环境变量\n\n```shell\nsource devel/setup.bash\n```\n\n\n\n### 5.启动xsens\n\n```shell\nsudo chmod 777 /dev/ttyUSB\\*\nroslaunch xsens_mti_driver xsens_mti_node.launch\n```\n\n\n\n### 6.启动激光雷达\n\n```shell\nroslaunch velodyne_pointcloud velodyne_vlp16.launch\n```\n\n\n\n### 7.启动LIO-SAM\n\n```shell\nroslaunch lio_sam run.launch\n```\n\n\n","source":"_posts/command/LIO-SAM运行.md","raw":"---\ntitle: LIO-SAM运行\ndate:\ntags: \n- LIO-SAM\ncategories:\n- command\ndescription:\ntop_img: false\n\n---\n\n# LIO-SAM运行\n\n## part1：数据集运行\n\n### 1.环境变量\n\n```shell\nsource devel/setup.bash\n```\n\n### 2.启动lio-sam功能包\n\n```shell\nroslaunch lio_sam run.launch\n```\n\n### 3.播放数据集\n\n```shell\nrosbag play outdoor.bag\n```\n\n\n\n## part2：实测运行\n\n### 1.打开config文件夹下的参数文件params，修改imu和点云话题\n\n![10 sam:  \\# Topics  pointCloudTopic: \"/points raw\"  \\# pointCloudTopic: \"/velodyne_points\"  imuTopic: \"/imu/data\"  \\# imuTopic: \"imu correct\"  \\# imuTopic: \"imu raw\"  odomTopic: \"odometry/imu\"  gpsTopic: \"odometry/gpsz\"  \\# Point cloud data  \\# IMIJ data  \\# IMIJ pre-preintegration odometry, same frequency as IMIJ  \\# GPS odometry topic from navsat, see module navsat.launch file ](media/e26b16e4dfa08f27a6be90000c53f58e.png)\n\n\n\n### 2.修改imu矫正参数\n\n![\\#IMU Settings  imuAccNoise: 1.9740799873834897e-02  imuGyrNoise: 2,3704854385698929+03  imuAccBiasN: 4.3015781912824339+04  imuGyrBiasN: 2.6685224155471368+05  imuGravity: 9.80511  imuRPYWeight: 0.01  imuAccNoise: 3,9939570888238808+03  imuGyrNoise: 1.5636343949698187e-03  imuAccBiasN: 6,4356659353532566+05  imuGyrBiasN: 3.5640318696367613e-05  imuGravity: 9.80511  imuRPYWeight: 0.01 ](media/d46f4d8198bf146ef7995d5708b2b454.png)\n\n\n\n### 3.修改激光雷达到imu标定参数\n\n![[png]](media/dbebbbdaf4c6e4278a0ac2e62db89a81.png)\n\n\n\n### 4.添加环境变量\n\n```shell\nsource devel/setup.bash\n```\n\n\n\n### 5.启动xsens\n\n```shell\nsudo chmod 777 /dev/ttyUSB\\*\nroslaunch xsens_mti_driver xsens_mti_node.launch\n```\n\n\n\n### 6.启动激光雷达\n\n```shell\nroslaunch velodyne_pointcloud velodyne_vlp16.launch\n```\n\n\n\n### 7.启动LIO-SAM\n\n```shell\nroslaunch lio_sam run.launch\n```\n\n\n","slug":"command/LIO-SAM运行","published":1,"updated":"2023-08-25T09:04:38.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67b003ugcr7ft0le0mq","content":"<h1 id=\"LIO-SAM运行\"><a href=\"#LIO-SAM运行\" class=\"headerlink\" title=\"LIO-SAM运行\"></a>LIO-SAM运行</h1><h2 id=\"part1：数据集运行\"><a href=\"#part1：数据集运行\" class=\"headerlink\" title=\"part1：数据集运行\"></a>part1：数据集运行</h2><h3 id=\"1-环境变量\"><a href=\"#1-环境变量\" class=\"headerlink\" title=\"1.环境变量\"></a>1.环境变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source devel/setup.bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-启动lio-sam功能包\"><a href=\"#2-启动lio-sam功能包\" class=\"headerlink\" title=\"2.启动lio-sam功能包\"></a>2.启动lio-sam功能包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch lio_sam run.launch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-播放数据集\"><a href=\"#3-播放数据集\" class=\"headerlink\" title=\"3.播放数据集\"></a>3.播放数据集</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosbag play outdoor.bag</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"part2：实测运行\"><a href=\"#part2：实测运行\" class=\"headerlink\" title=\"part2：实测运行\"></a>part2：实测运行</h2><h3 id=\"1-打开config文件夹下的参数文件params，修改imu和点云话题\"><a href=\"#1-打开config文件夹下的参数文件params，修改imu和点云话题\" class=\"headerlink\" title=\"1.打开config文件夹下的参数文件params，修改imu和点云话题\"></a>1.打开config文件夹下的参数文件params，修改imu和点云话题</h3><p><img src=\"/media/e26b16e4dfa08f27a6be90000c53f58e.png\" alt=\"10 sam:  \\# Topics  pointCloudTopic: &quot;/points raw&quot;  \\# pointCloudTopic: &quot;/velodyne_points&quot;  imuTopic: &quot;/imu/data&quot;  \\# imuTopic: &quot;imu correct&quot;  \\# imuTopic: &quot;imu raw&quot;  odomTopic: &quot;odometry/imu&quot;  gpsTopic: &quot;odometry/gpsz&quot;  \\# Point cloud data  \\# IMIJ data  \\# IMIJ pre-preintegration odometry, same frequency as IMIJ  \\# GPS odometry topic from navsat, see module navsat.launch file \"></p>\n<h3 id=\"2-修改imu矫正参数\"><a href=\"#2-修改imu矫正参数\" class=\"headerlink\" title=\"2.修改imu矫正参数\"></a>2.修改imu矫正参数</h3><p><img src=\"/media/d46f4d8198bf146ef7995d5708b2b454.png\" alt=\"\\#IMU Settings  imuAccNoise: 1.9740799873834897e-02  imuGyrNoise: 2,3704854385698929+03  imuAccBiasN: 4.3015781912824339+04  imuGyrBiasN: 2.6685224155471368+05  imuGravity: 9.80511  imuRPYWeight: 0.01  imuAccNoise: 3,9939570888238808+03  imuGyrNoise: 1.5636343949698187e-03  imuAccBiasN: 6,4356659353532566+05  imuGyrBiasN: 3.5640318696367613e-05  imuGravity: 9.80511  imuRPYWeight: 0.01 \"></p>\n<h3 id=\"3-修改激光雷达到imu标定参数\"><a href=\"#3-修改激光雷达到imu标定参数\" class=\"headerlink\" title=\"3.修改激光雷达到imu标定参数\"></a>3.修改激光雷达到imu标定参数</h3><p><img src=\"/media/dbebbbdaf4c6e4278a0ac2e62db89a81.png\" alt=\"[png]\"></p>\n<h3 id=\"4-添加环境变量\"><a href=\"#4-添加环境变量\" class=\"headerlink\" title=\"4.添加环境变量\"></a>4.添加环境变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source devel/setup.bash</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-启动xsens\"><a href=\"#5-启动xsens\" class=\"headerlink\" title=\"5.启动xsens\"></a>5.启动xsens</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 777 /dev/ttyUSB\\*</span><br><span class=\"line\">roslaunch xsens_mti_driver xsens_mti_node.launch</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-启动激光雷达\"><a href=\"#6-启动激光雷达\" class=\"headerlink\" title=\"6.启动激光雷达\"></a>6.启动激光雷达</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch velodyne_pointcloud velodyne_vlp16.launch</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-启动LIO-SAM\"><a href=\"#7-启动LIO-SAM\" class=\"headerlink\" title=\"7.启动LIO-SAM\"></a>7.启动LIO-SAM</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch lio_sam run.launch</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":"<h1 id=\"LIO-SAM运行\"><a href=\"#LIO-SAM运行\" class=\"headerlink\" title=\"LIO-SAM运行\"></a>LIO-SAM运行</h1><h2 id=\"part1：数据集运行\"><a href=\"#part1：数据集运行\" class=\"headerlink\" title=\"part1：数据集运行\"></a>part1：数据集运行</h2><h3 id=\"1-环境变量\"><a href=\"#1-环境变量\" class=\"headerlink\" title=\"1.环境变量\"></a>1.环境变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source devel/setup.bash</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-启动lio-sam功能包\"><a href=\"#2-启动lio-sam功能包\" class=\"headerlink\" title=\"2.启动lio-sam功能包\"></a>2.启动lio-sam功能包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch lio_sam run.launch</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-播放数据集\"><a href=\"#3-播放数据集\" class=\"headerlink\" title=\"3.播放数据集\"></a>3.播放数据集</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosbag play outdoor.bag</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"part2：实测运行\"><a href=\"#part2：实测运行\" class=\"headerlink\" title=\"part2：实测运行\"></a>part2：实测运行</h2><h3 id=\"1-打开config文件夹下的参数文件params，修改imu和点云话题\"><a href=\"#1-打开config文件夹下的参数文件params，修改imu和点云话题\" class=\"headerlink\" title=\"1.打开config文件夹下的参数文件params，修改imu和点云话题\"></a>1.打开config文件夹下的参数文件params，修改imu和点云话题</h3><p><img src=\"/media/e26b16e4dfa08f27a6be90000c53f58e.png\" alt=\"10 sam:  \\# Topics  pointCloudTopic: &quot;/points raw&quot;  \\# pointCloudTopic: &quot;/velodyne_points&quot;  imuTopic: &quot;/imu/data&quot;  \\# imuTopic: &quot;imu correct&quot;  \\# imuTopic: &quot;imu raw&quot;  odomTopic: &quot;odometry/imu&quot;  gpsTopic: &quot;odometry/gpsz&quot;  \\# Point cloud data  \\# IMIJ data  \\# IMIJ pre-preintegration odometry, same frequency as IMIJ  \\# GPS odometry topic from navsat, see module navsat.launch file \"></p>\n<h3 id=\"2-修改imu矫正参数\"><a href=\"#2-修改imu矫正参数\" class=\"headerlink\" title=\"2.修改imu矫正参数\"></a>2.修改imu矫正参数</h3><p><img src=\"/media/d46f4d8198bf146ef7995d5708b2b454.png\" alt=\"\\#IMU Settings  imuAccNoise: 1.9740799873834897e-02  imuGyrNoise: 2,3704854385698929+03  imuAccBiasN: 4.3015781912824339+04  imuGyrBiasN: 2.6685224155471368+05  imuGravity: 9.80511  imuRPYWeight: 0.01  imuAccNoise: 3,9939570888238808+03  imuGyrNoise: 1.5636343949698187e-03  imuAccBiasN: 6,4356659353532566+05  imuGyrBiasN: 3.5640318696367613e-05  imuGravity: 9.80511  imuRPYWeight: 0.01 \"></p>\n<h3 id=\"3-修改激光雷达到imu标定参数\"><a href=\"#3-修改激光雷达到imu标定参数\" class=\"headerlink\" title=\"3.修改激光雷达到imu标定参数\"></a>3.修改激光雷达到imu标定参数</h3><p><img src=\"/media/dbebbbdaf4c6e4278a0ac2e62db89a81.png\" alt=\"[png]\"></p>\n<h3 id=\"4-添加环境变量\"><a href=\"#4-添加环境变量\" class=\"headerlink\" title=\"4.添加环境变量\"></a>4.添加环境变量</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source devel/setup.bash</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-启动xsens\"><a href=\"#5-启动xsens\" class=\"headerlink\" title=\"5.启动xsens\"></a>5.启动xsens</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod 777 /dev/ttyUSB\\*</span><br><span class=\"line\">roslaunch xsens_mti_driver xsens_mti_node.launch</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-启动激光雷达\"><a href=\"#6-启动激光雷达\" class=\"headerlink\" title=\"6.启动激光雷达\"></a>6.启动激光雷达</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch velodyne_pointcloud velodyne_vlp16.launch</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-启动LIO-SAM\"><a href=\"#7-启动LIO-SAM\" class=\"headerlink\" title=\"7.启动LIO-SAM\"></a>7.启动LIO-SAM</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch lio_sam run.launch</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Orb-slam2运行","date":"2023-08-25T08:54:21.187Z","description":null,"top_img":false,"_content":"\n# Orb-slam2运行\n\n## **part1：运行数据集**\n\n### **1.Monocular**\n\n- #### Tum:\n\n\n```shell\n./Examples/Monocular/mono_tum Vocabulary/ORBvoc.txt Examples/Monocular/TUMX.yaml PATH_TO_SEQUENCE_FOLDER\n```\n\n\n\n- #### KITTI:\n\n\n```shell\n./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER\n```\n\n\n\n- #### EURoc:\n\n\n```\n./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE_FOLDER/mav0/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt\n```\n\n\n\n### **2.Stereo**\n\n- #### KITTI:\n\n\n```shell\n./Examples/Stereo/stereo_kitti Vocabulary/ORBvoc.txt Examples/Stereo/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER\n```\n\n\n\n- #### EuRoc:\n\n\n```shell\n./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/mav0/cam0/data PATH_TO_SEQUENCE/mav0/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt\n```\n\n\n\n### **3.RGBD**\n\n- #### TUM:\n\n\n```shell\n./Examples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUMX.yaml PATH_TO_SEQUENCE_FOLDER ASSOCIATIONS_FILE\n```\n\n\n\n## **part2：zed实测**\n\n```shell\nroslaunch zed_wrapper zed.launch\n\nrosrun ORB_SLAM2 Stereo Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml false /camera/left/image_raw:=/zed2/zed_node/left/image_rect_color /camera/right/image_raw:=/zed2/zed_node/right/image_rect_color\n```\n\n#### **or**\n\n例如把/ORB_SLAM2/Examples/ROS/ORB_SLAM2/src目录下的ros_stereo.cc建立一个新的文件，比如说叫ros_zed_stereo_rect.cc\n\n把代码复制过去，只需要更改\n\n```shell\nmessage_filters::Subscriber\\<sensor_msgs::Image\\> left_sub(nh, \"/zed2/zed_node/left/image_rect_color\", 1);\n\nmessage_filters::Subscriber\\<sensor_msgs::Image\\> right_sub(nh, \"/zed2/zed_node/right/image_rect_color\",1);\n```\n\n然后修改CmakeLists.txt，加入：\n\n#Node for ZED camera\n\n```shell\nrosbuild_add_executable(zed_Stereo_rect src/ros_zed_stereo_rect.cc)\n\ntarget_link_libraries(zed_Stereo_rect \\${LIBS})\n```\n\n重新编译\n\n```shell\n./build_ros.sh\n```\n\n编译成功后运行\n\n```shell\nroslaunch zed_wrapper zed.launch\n\nrosrun ORB_SLAM2 zed_Stereo_rect Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml\n```\n\n#yaml文件可以替换成标定之后的zed参数文件","source":"_posts/command/Orb-slam2运行.md","raw":"---\ntitle: Orb-slam2运行\ndate:\ntags: \n- ORB-SLAM\ncategories:\n- command\ndescription:\ntop_img: false\n\n---\n\n# Orb-slam2运行\n\n## **part1：运行数据集**\n\n### **1.Monocular**\n\n- #### Tum:\n\n\n```shell\n./Examples/Monocular/mono_tum Vocabulary/ORBvoc.txt Examples/Monocular/TUMX.yaml PATH_TO_SEQUENCE_FOLDER\n```\n\n\n\n- #### KITTI:\n\n\n```shell\n./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER\n```\n\n\n\n- #### EURoc:\n\n\n```\n./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE_FOLDER/mav0/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt\n```\n\n\n\n### **2.Stereo**\n\n- #### KITTI:\n\n\n```shell\n./Examples/Stereo/stereo_kitti Vocabulary/ORBvoc.txt Examples/Stereo/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER\n```\n\n\n\n- #### EuRoc:\n\n\n```shell\n./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/mav0/cam0/data PATH_TO_SEQUENCE/mav0/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt\n```\n\n\n\n### **3.RGBD**\n\n- #### TUM:\n\n\n```shell\n./Examples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUMX.yaml PATH_TO_SEQUENCE_FOLDER ASSOCIATIONS_FILE\n```\n\n\n\n## **part2：zed实测**\n\n```shell\nroslaunch zed_wrapper zed.launch\n\nrosrun ORB_SLAM2 Stereo Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml false /camera/left/image_raw:=/zed2/zed_node/left/image_rect_color /camera/right/image_raw:=/zed2/zed_node/right/image_rect_color\n```\n\n#### **or**\n\n例如把/ORB_SLAM2/Examples/ROS/ORB_SLAM2/src目录下的ros_stereo.cc建立一个新的文件，比如说叫ros_zed_stereo_rect.cc\n\n把代码复制过去，只需要更改\n\n```shell\nmessage_filters::Subscriber\\<sensor_msgs::Image\\> left_sub(nh, \"/zed2/zed_node/left/image_rect_color\", 1);\n\nmessage_filters::Subscriber\\<sensor_msgs::Image\\> right_sub(nh, \"/zed2/zed_node/right/image_rect_color\",1);\n```\n\n然后修改CmakeLists.txt，加入：\n\n#Node for ZED camera\n\n```shell\nrosbuild_add_executable(zed_Stereo_rect src/ros_zed_stereo_rect.cc)\n\ntarget_link_libraries(zed_Stereo_rect \\${LIBS})\n```\n\n重新编译\n\n```shell\n./build_ros.sh\n```\n\n编译成功后运行\n\n```shell\nroslaunch zed_wrapper zed.launch\n\nrosrun ORB_SLAM2 zed_Stereo_rect Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml\n```\n\n#yaml文件可以替换成标定之后的zed参数文件","slug":"command/Orb-slam2运行","published":1,"updated":"2023-08-25T09:05:16.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67c003ygcr736fcapy1","content":"<h1 id=\"Orb-slam2运行\"><a href=\"#Orb-slam2运行\" class=\"headerlink\" title=\"Orb-slam2运行\"></a>Orb-slam2运行</h1><h2 id=\"part1：运行数据集\"><a href=\"#part1：运行数据集\" class=\"headerlink\" title=\"part1：运行数据集\"></a><strong>part1：运行数据集</strong></h2><h3 id=\"1-Monocular\"><a href=\"#1-Monocular\" class=\"headerlink\" title=\"1.Monocular\"></a><strong>1.Monocular</strong></h3><ul>\n<li><h4 id=\"Tum\"><a href=\"#Tum\" class=\"headerlink\" title=\"Tum:\"></a>Tum:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Monocular/mono_tum Vocabulary/ORBvoc.txt Examples/Monocular/TUMX.yaml PATH_TO_SEQUENCE_FOLDER</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"KITTI\"><a href=\"#KITTI\" class=\"headerlink\" title=\"KITTI:\"></a>KITTI:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"EURoc\"><a href=\"#EURoc\" class=\"headerlink\" title=\"EURoc:\"></a>EURoc:</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE_FOLDER/mav0/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-Stereo\"><a href=\"#2-Stereo\" class=\"headerlink\" title=\"2.Stereo\"></a><strong>2.Stereo</strong></h3><ul>\n<li><h4 id=\"KITTI-1\"><a href=\"#KITTI-1\" class=\"headerlink\" title=\"KITTI:\"></a>KITTI:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Stereo/stereo_kitti Vocabulary/ORBvoc.txt Examples/Stereo/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"EuRoc\"><a href=\"#EuRoc\" class=\"headerlink\" title=\"EuRoc:\"></a>EuRoc:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/mav0/cam0/data PATH_TO_SEQUENCE/mav0/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-RGBD\"><a href=\"#3-RGBD\" class=\"headerlink\" title=\"3.RGBD\"></a><strong>3.RGBD</strong></h3><ul>\n<li><h4 id=\"TUM\"><a href=\"#TUM\" class=\"headerlink\" title=\"TUM:\"></a>TUM:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUMX.yaml PATH_TO_SEQUENCE_FOLDER ASSOCIATIONS_FILE</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"part2：zed实测\"><a href=\"#part2：zed实测\" class=\"headerlink\" title=\"part2：zed实测\"></a><strong>part2：zed实测</strong></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch zed_wrapper zed.launch</span><br><span class=\"line\"></span><br><span class=\"line\">rosrun ORB_SLAM2 Stereo Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml false /camera/left/image_raw:=/zed2/zed_node/left/image_rect_color /camera/right/image_raw:=/zed2/zed_node/right/image_rect_color</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"or\"><a href=\"#or\" class=\"headerlink\" title=\"or\"></a><strong>or</strong></h4><p>例如把&#x2F;ORB_SLAM2&#x2F;Examples&#x2F;ROS&#x2F;ORB_SLAM2&#x2F;src目录下的ros_stereo.cc建立一个新的文件，比如说叫ros_zed_stereo_rect.cc</p>\n<p>把代码复制过去，只需要更改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message_filters::Subscriber\\&lt;sensor_msgs::Image\\&gt; left_sub(nh, &quot;/zed2/zed_node/left/image_rect_color&quot;, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">message_filters::Subscriber\\&lt;sensor_msgs::Image\\&gt; right_sub(nh, &quot;/zed2/zed_node/right/image_rect_color&quot;,1);</span><br></pre></td></tr></table></figure>\n\n<p>然后修改CmakeLists.txt，加入：</p>\n<p>#Node for ZED camera</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosbuild_add_executable(zed_Stereo_rect src/ros_zed_stereo_rect.cc)</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(zed_Stereo_rect \\$&#123;LIBS&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>重新编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./build_ros.sh</span><br></pre></td></tr></table></figure>\n\n<p>编译成功后运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch zed_wrapper zed.launch</span><br><span class=\"line\"></span><br><span class=\"line\">rosrun ORB_SLAM2 zed_Stereo_rect Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml</span><br></pre></td></tr></table></figure>\n\n<p>#yaml文件可以替换成标定之后的zed参数文件</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Orb-slam2运行\"><a href=\"#Orb-slam2运行\" class=\"headerlink\" title=\"Orb-slam2运行\"></a>Orb-slam2运行</h1><h2 id=\"part1：运行数据集\"><a href=\"#part1：运行数据集\" class=\"headerlink\" title=\"part1：运行数据集\"></a><strong>part1：运行数据集</strong></h2><h3 id=\"1-Monocular\"><a href=\"#1-Monocular\" class=\"headerlink\" title=\"1.Monocular\"></a><strong>1.Monocular</strong></h3><ul>\n<li><h4 id=\"Tum\"><a href=\"#Tum\" class=\"headerlink\" title=\"Tum:\"></a>Tum:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Monocular/mono_tum Vocabulary/ORBvoc.txt Examples/Monocular/TUMX.yaml PATH_TO_SEQUENCE_FOLDER</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"KITTI\"><a href=\"#KITTI\" class=\"headerlink\" title=\"KITTI:\"></a>KITTI:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Monocular/mono_kitti Vocabulary/ORBvoc.txt Examples/Monocular/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"EURoc\"><a href=\"#EURoc\" class=\"headerlink\" title=\"EURoc:\"></a>EURoc:</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Monocular/mono_euroc Vocabulary/ORBvoc.txt Examples/Monocular/EuRoC.yaml PATH_TO_SEQUENCE_FOLDER/mav0/cam0/data Examples/Monocular/EuRoC_TimeStamps/SEQUENCE.txt</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-Stereo\"><a href=\"#2-Stereo\" class=\"headerlink\" title=\"2.Stereo\"></a><strong>2.Stereo</strong></h3><ul>\n<li><h4 id=\"KITTI-1\"><a href=\"#KITTI-1\" class=\"headerlink\" title=\"KITTI:\"></a>KITTI:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Stereo/stereo_kitti Vocabulary/ORBvoc.txt Examples/Stereo/KITTIX.yaml PATH_TO_DATASET_FOLDER/dataset/sequences/SEQUENCE_NUMBER</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><h4 id=\"EuRoc\"><a href=\"#EuRoc\" class=\"headerlink\" title=\"EuRoc:\"></a>EuRoc:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/Stereo/stereo_euroc Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml PATH_TO_SEQUENCE/mav0/cam0/data PATH_TO_SEQUENCE/mav0/cam1/data Examples/Stereo/EuRoC_TimeStamps/SEQUENCE.txt</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-RGBD\"><a href=\"#3-RGBD\" class=\"headerlink\" title=\"3.RGBD\"></a><strong>3.RGBD</strong></h3><ul>\n<li><h4 id=\"TUM\"><a href=\"#TUM\" class=\"headerlink\" title=\"TUM:\"></a>TUM:</h4></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Examples/RGB-D/rgbd_tum Vocabulary/ORBvoc.txt Examples/RGB-D/TUMX.yaml PATH_TO_SEQUENCE_FOLDER ASSOCIATIONS_FILE</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"part2：zed实测\"><a href=\"#part2：zed实测\" class=\"headerlink\" title=\"part2：zed实测\"></a><strong>part2：zed实测</strong></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch zed_wrapper zed.launch</span><br><span class=\"line\"></span><br><span class=\"line\">rosrun ORB_SLAM2 Stereo Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml false /camera/left/image_raw:=/zed2/zed_node/left/image_rect_color /camera/right/image_raw:=/zed2/zed_node/right/image_rect_color</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"or\"><a href=\"#or\" class=\"headerlink\" title=\"or\"></a><strong>or</strong></h4><p>例如把&#x2F;ORB_SLAM2&#x2F;Examples&#x2F;ROS&#x2F;ORB_SLAM2&#x2F;src目录下的ros_stereo.cc建立一个新的文件，比如说叫ros_zed_stereo_rect.cc</p>\n<p>把代码复制过去，只需要更改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message_filters::Subscriber\\&lt;sensor_msgs::Image\\&gt; left_sub(nh, &quot;/zed2/zed_node/left/image_rect_color&quot;, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">message_filters::Subscriber\\&lt;sensor_msgs::Image\\&gt; right_sub(nh, &quot;/zed2/zed_node/right/image_rect_color&quot;,1);</span><br></pre></td></tr></table></figure>\n\n<p>然后修改CmakeLists.txt，加入：</p>\n<p>#Node for ZED camera</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosbuild_add_executable(zed_Stereo_rect src/ros_zed_stereo_rect.cc)</span><br><span class=\"line\"></span><br><span class=\"line\">target_link_libraries(zed_Stereo_rect \\$&#123;LIBS&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>重新编译</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./build_ros.sh</span><br></pre></td></tr></table></figure>\n\n<p>编译成功后运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch zed_wrapper zed.launch</span><br><span class=\"line\"></span><br><span class=\"line\">rosrun ORB_SLAM2 zed_Stereo_rect Vocabulary/ORBvoc.txt Examples/Stereo/EuRoC.yaml</span><br></pre></td></tr></table></figure>\n\n<p>#yaml文件可以替换成标定之后的zed参数文件</p>\n"},{"title":"Ubuntu-xavier","date":"2023-08-25T08:54:21.189Z","description":null,"top_img":false,"_content":"\n# Ubuntu-xavier\n\n## 1.查看NVIDIA jetson相关参数\n\n```shell\nsudo jtop\n```\n\n\n\n## 2.更改xavier风扇转速\n\n```shell\nsudo gedit /sys/devices/pwm-fan/target_pwm\n```\n\n\n\n## 3.待更新","source":"_posts/command/Ubuntu-xavier.md","raw":"---\ntitle: Ubuntu-xavier\ndate:\ntags: \n- Xavier\ncategories:\n- command\ndescription:\ntop_img: false\n\n---\n\n# Ubuntu-xavier\n\n## 1.查看NVIDIA jetson相关参数\n\n```shell\nsudo jtop\n```\n\n\n\n## 2.更改xavier风扇转速\n\n```shell\nsudo gedit /sys/devices/pwm-fan/target_pwm\n```\n\n\n\n## 3.待更新","slug":"command/Ubuntu-xavier","published":1,"updated":"2023-08-25T09:05:54.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67c0042gcr7aneefvgi","content":"<h1 id=\"Ubuntu-xavier\"><a href=\"#Ubuntu-xavier\" class=\"headerlink\" title=\"Ubuntu-xavier\"></a>Ubuntu-xavier</h1><h2 id=\"1-查看NVIDIA-jetson相关参数\"><a href=\"#1-查看NVIDIA-jetson相关参数\" class=\"headerlink\" title=\"1.查看NVIDIA jetson相关参数\"></a>1.查看NVIDIA jetson相关参数</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo jtop</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-更改xavier风扇转速\"><a href=\"#2-更改xavier风扇转速\" class=\"headerlink\" title=\"2.更改xavier风扇转速\"></a>2.更改xavier风扇转速</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /sys/devices/pwm-fan/target_pwm</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-待更新\"><a href=\"#3-待更新\" class=\"headerlink\" title=\"3.待更新\"></a>3.待更新</h2>","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-8.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Ubuntu-xavier\"><a href=\"#Ubuntu-xavier\" class=\"headerlink\" title=\"Ubuntu-xavier\"></a>Ubuntu-xavier</h1><h2 id=\"1-查看NVIDIA-jetson相关参数\"><a href=\"#1-查看NVIDIA-jetson相关参数\" class=\"headerlink\" title=\"1.查看NVIDIA jetson相关参数\"></a>1.查看NVIDIA jetson相关参数</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo jtop</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-更改xavier风扇转速\"><a href=\"#2-更改xavier风扇转速\" class=\"headerlink\" title=\"2.更改xavier风扇转速\"></a>2.更改xavier风扇转速</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /sys/devices/pwm-fan/target_pwm</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-待更新\"><a href=\"#3-待更新\" class=\"headerlink\" title=\"3.待更新\"></a>3.待更新</h2>"},{"title":"Git中submodule的使用","date":"2023-08-25T08:54:21.184Z","description":null,"top_img":false,"_content":"\n# Git中submodule的使用\n\n## 背景\n\n面对比较复杂的项目，我们有可能会将代码根据功能拆解成不同的子模块。主项目对子模块有依赖关系，却又并不关心子模块的内部开发流程细节。\n\n这种情况下，通常不会把所有源码都放在同一个 Git 仓库中。\n\n有一种比较简单的方式，是在当前工作目录下，将子模块文件夹加入到 `.gitignore` 文件内容中，这样主项目就能够无视子项目的存在。这样做有一个弊端就是，使用主项目的人需要有一个先验知识：需要在当前目录下放置一份某版本的子模块代码。\n\n还有另外一种方式可供借鉴，可以使用 Git 的 `submodule` 功能，也是这篇文章的主题。\n\n实际上 Git 工具的 `submodule` 功能就是建立了当前项目与子模块之间的依赖关系：`子模块路径`、`子模块的远程仓库`、`子模块的版本号`。\n\n## 使用流程\n\n假定我们有两个项目：`project-main` 和 `project-sub-1`，其中 `project-main` 表示主项目，而 `project-sub-1` 表示子模块项目。\n\n其中 `project-main` 的远程仓库地址为 `https://github.com/username/project-main.git`，而 `project-sub-1` 的远程仓库地址为 `https://github.com/username/project-sub-1.git`。\n\n接下来，我们希望在 `project-main` 中添加 `project-sub-1` ，而又保持 `project-sub-1` 自身独立的版本控制。\n\n\n\n### **1.创建 submodule**\n\n使用 `git submodule add <submodule_url>` 命令可以在项目中创建一个子模块。\n\n进入项目 `project-main` ，输入：\n\n> ➜ project-main git:(master) git submodule add [https://github.com/username/project-sub-1.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git)\n> 正克隆到 '/path/to/project-main/project-sub-1'...\n> remote: Enumerating objects: 3, done.\n> remote: Counting objects: 100% (3/3), done.\n> remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\n> 展开对象中: 100% (3/3), 完成.\n\n此时项目仓库中会多出两个文件：`.gitmodules` 和 `project-sub-1` 。\n\n前者的内容是这样的，事实上就是子模块的相关信息；而后者那个文件，实际上保存的是子模块当前版本的版本号信息。\n\n> [submodule \"project-sub-1\"]\n> path = project-sub-1\n> url = [https://github.com/username/project-sub-1.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git)\n\n如果此前项目中已经存在 `.gitmodules` 文件，则会在文件内容中多出上述三行记录。\n\n事实上，此时在 `.git/config` 文件中也会多出一些信息，在 `.git/modules` 文件夹下也会多出一份内容。\n\n通常此时可以使用 `git commit -m \"add submodule xxx\"` 提交一次，表示引入了某个子模块。提交后，在主项目仓库中，会显示出子模块文件夹，并带上其所在仓库的版本号。\n\n![img](media/v2-8b77b08acc39bfc9cb569116ff6905e2_720w.webp)\n\n\n\n### **2.获取 submodule**\n\n上述步骤在创建子模块的过程中，会自动将相关代码克隆到对应路径，但对于后续使用者而言，对于主项目使用普通的 `clone` 操作并不会拉取到子模块中的实际代码。\n\n使用以下命令进行克隆，完成后 `project-main/project-sub-1` 文件夹是空的：\n\n> cd /path/to/temp\n> git clone [https://github.com/username/project-main.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-main.git)\n\n\n\n如果希望子模块代码也获取到，一种方式是在克隆主项目的时候带上参数 `--recurse-submodules`，这样会递归地将项目中所有子模块的代码拉取。\n\n> cd /path/to/temp2\n> git clone [https://github.com/username/project-main.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-main.git) --recurse-submodules\n\n此时 `project-main/project-sub-1` 文件夹是有内容的，并且固定在某个 Git 提交的版本上。\n\n另外一种可行的方式是，在当前主项目中执行：\n\n> git submodule init\n> git submodule update\n\n则会根据主项目的配置信息，拉取更新子模块中的代码。\n\n一般使用更多的是，递归得将子项目中目录拉去下来\n\n> git submodule update --init --recursive\n\n\n\n### **3.子模块内容的更新**\n\n对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。\n\n对于主项目而言，子模块的内容发生变动时，通常有三种情况：\n\n1）当前项目下子模块文件夹内的内容发生了未跟踪的内容变动；\n\n2）当前项目下子模块文件夹内的内容发生了版本变化；\n\n3）当前项目下子模块文件夹内的内容没变，远程有更新；\n\n\n\n> \\> 情况1：子模块有未跟踪的内容变动\n\n对于第1种情况，通常是在开发环境中，直接修改子模块文件夹中的代码导致的。\n\n此时在主项目中使用 `git status` 能够看到关于子模块尚未暂存以备提交的变更，但是于主项目而言是无能为力的，使用 `git add/commit` 对其也不会产生影响。\n\n> ➜ project-main git:(master) git status\n> 位于分支 master\n> 您的分支与上游分支 'origin/master' 一致。\n> 尚未暂存以备提交的变更：\n> （使用 \"git add <文件>...\" 更新要提交的内容）\n> （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n> （提交或丢弃子模组中未跟踪或修改的内容）\n> 修改： project-sub-1 (未跟踪的内容)\n> 修改尚未加入提交（使用 \"git add\" 和/或 \"git commit -a\"）\n\n在此情景下，通常需要进入子模块文件夹，按照子模块内部的版本控制体系提交代码。\n\n当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。\n\n\n\n> \\> 情况2：子模块有版本变化\n\n当子模块版本变化时，在主项目中使用 `git status` 查看仓库状态时，会显示子模块有新的提交：\n\n> ➜ project-main git:(master) ✗ git status\n> 位于分支 master\n> 您的分支与上游分支 'origin/master' 一致。\n> 尚未暂存以备提交的变更：\n> （使用 \"git add <文件>...\" 更新要提交的内容）\n> （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n> 修改： project-sub-1 (新提交)\n> 修改尚未加入提交（使用 \"git add\" 和/或 \"git commit -a\"）\n\n在这种情况下，可以使用 `git add/commit` 将其添加到主项目的代码提交中，实际的改动就是那个子模块 `文件` 所表示的版本信息：\n\n> git diff HEAD HEAD^\n> diff --git a/project-sub-1 b/project-sub-1\n> index ace9770..7097c48 160000\n> --- a/project-sub-1\n> +++ b/project-sub-1\n> @@ -1 +1 @@\n> -Subproject commit ace977071f94f4f88935f9bb9a33ac0f8b4ba935\n> +Subproject commit 7097c4887798b71cee360e99815f7dbd1aa17eb4\n\n通常当子项目更新后，主项目修改其所依赖的版本时，会产生类似这种情景的 commit 提交信息。\n\n\n\n> \\> 情况3：子模块远程有更新\n\n通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。\n\n在这种情况下，主项目是比较茫然的。\n\n之前曾经提到，主项目可以使用 `git submodule update` 更新子模块的代码，但那是指 `当前主项目文件夹下的子模块目录内容` 与 `当前主项目记录的子模块版本` 不一致时，会参考后者进行更新。\n\n但如今这种情况下，后者 `当前主项目记录的子模块版本` 还没有变化，在主项目看来当前情况一切正常。\n\n此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。\n\n通常流程是：\n\n> cd project-sub-1\n> git pull origin master\n\n子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。\n\n当主项目的子项目特别多时，可能会不太方便，此时可以使用 `git submodule` 的一个命令 `foreach` 执行：\n\n> git submodule foreach 'git pull origin master'\n\n\n\n> \\> 情况汇总\n\n终上所述，可知在不同场景下子模块的更新方式如下：\n\n- 对于子模块，只需要管理好自己的版本，并推送到远程分支即可；\n- 对于父模块，若子模块版本信息未提交，需要更新子模块目录下的代码，并执行 `commit` 操作提交子模块版本信息；\n- 对于父模块，若子模块版本信息已提交，需要使用 `git submodule update` （git submodule update --init --recursive），Git 会自动根据子模块版本信息更新所有子模块目录的相关代码。\n\n\n\n> **4.删除子模块**\n\n网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 `.gitmodules`、`.git/config` 和 `.git/modules` 内容。包含了一大堆类似`git rm --cached <sub-module>`、`rm -rf <sub-moduel>`、`rm .gitmodules` 和 `git rm --cached` 之类的代码。\n\n实际上这是一种比较野的做法，不建议使用。\n\n根据官方文档的说明，应该使用 `git submodule deinit` 命令卸载一个子模块。这个命令如果添加上参数 `--force`，则子模块工作区内即使有本地的修改，也会被移除。\n\n> git submodule deinit project-sub-1\n> git rm project-sub-1\n\n执行 `git submodule deinit project-sub-1` 命令的实际效果，是自动在 `.git/config` 中删除了以下内容：\n\n> [submodule \"project-sub-1\"]\n> url = [https://github.com/username/project-sub-1.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git)\n\n执行 `git rm project-sub-1` 的效果，是移除了 `project-sub-1` 文件夹，并自动在 `.gitmodules` 中删除了以下内容：\n\n> [submodule \"project-sub-1\"]\n> path = project-sub-1\n> url = [https://github.com/username/project-sub-1.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git)\n\n此时，主项目中关于子模块的信息基本已经删除（虽然貌似 `.git/modules` 目录下还有残余）：\n\n> ➜ project-main git:(master) ✗ gs\n> 位于分支 master\n> 您的分支与上游分支 'origin/master' 一致。\n> 要提交的变更：\n> （使用 \"git reset HEAD <文件>...\" 以取消暂存）\n> 修改： .gitmodules\n> 删除： project-sub-1\n\n可以提交代码：\n\n> git commit -m \"delete submodule project-sub-1\"\n\n至此完成对子模块的删除。\n\n\n\n## 总结\n\n当项目比较复杂，部分代码希望独立为子模块进行版本控制时，可以使用 `git submodule` 功能。\n\n使用 `git submodule` 功能时，主项目仓库并不会包含子模块的文件，只会保留一份子模块的配置信息及版本信息，作为主项目版本管理的一部分。\n\n本篇文章简单介绍了 `git submodule` 的添加和删除，以及项目开发过程中主项目与子模块不同状态时刻的操作方式。","source":"_posts/command/Git中submodule的使用.md","raw":"---\ntitle: Git中submodule的使用\ndate:\ntags: \n- Git\ncategories:\n- command\ndescription:\ntop_img: false\n\n---\n\n# Git中submodule的使用\n\n## 背景\n\n面对比较复杂的项目，我们有可能会将代码根据功能拆解成不同的子模块。主项目对子模块有依赖关系，却又并不关心子模块的内部开发流程细节。\n\n这种情况下，通常不会把所有源码都放在同一个 Git 仓库中。\n\n有一种比较简单的方式，是在当前工作目录下，将子模块文件夹加入到 `.gitignore` 文件内容中，这样主项目就能够无视子项目的存在。这样做有一个弊端就是，使用主项目的人需要有一个先验知识：需要在当前目录下放置一份某版本的子模块代码。\n\n还有另外一种方式可供借鉴，可以使用 Git 的 `submodule` 功能，也是这篇文章的主题。\n\n实际上 Git 工具的 `submodule` 功能就是建立了当前项目与子模块之间的依赖关系：`子模块路径`、`子模块的远程仓库`、`子模块的版本号`。\n\n## 使用流程\n\n假定我们有两个项目：`project-main` 和 `project-sub-1`，其中 `project-main` 表示主项目，而 `project-sub-1` 表示子模块项目。\n\n其中 `project-main` 的远程仓库地址为 `https://github.com/username/project-main.git`，而 `project-sub-1` 的远程仓库地址为 `https://github.com/username/project-sub-1.git`。\n\n接下来，我们希望在 `project-main` 中添加 `project-sub-1` ，而又保持 `project-sub-1` 自身独立的版本控制。\n\n\n\n### **1.创建 submodule**\n\n使用 `git submodule add <submodule_url>` 命令可以在项目中创建一个子模块。\n\n进入项目 `project-main` ，输入：\n\n> ➜ project-main git:(master) git submodule add [https://github.com/username/project-sub-1.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git)\n> 正克隆到 '/path/to/project-main/project-sub-1'...\n> remote: Enumerating objects: 3, done.\n> remote: Counting objects: 100% (3/3), done.\n> remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\n> 展开对象中: 100% (3/3), 完成.\n\n此时项目仓库中会多出两个文件：`.gitmodules` 和 `project-sub-1` 。\n\n前者的内容是这样的，事实上就是子模块的相关信息；而后者那个文件，实际上保存的是子模块当前版本的版本号信息。\n\n> [submodule \"project-sub-1\"]\n> path = project-sub-1\n> url = [https://github.com/username/project-sub-1.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git)\n\n如果此前项目中已经存在 `.gitmodules` 文件，则会在文件内容中多出上述三行记录。\n\n事实上，此时在 `.git/config` 文件中也会多出一些信息，在 `.git/modules` 文件夹下也会多出一份内容。\n\n通常此时可以使用 `git commit -m \"add submodule xxx\"` 提交一次，表示引入了某个子模块。提交后，在主项目仓库中，会显示出子模块文件夹，并带上其所在仓库的版本号。\n\n![img](media/v2-8b77b08acc39bfc9cb569116ff6905e2_720w.webp)\n\n\n\n### **2.获取 submodule**\n\n上述步骤在创建子模块的过程中，会自动将相关代码克隆到对应路径，但对于后续使用者而言，对于主项目使用普通的 `clone` 操作并不会拉取到子模块中的实际代码。\n\n使用以下命令进行克隆，完成后 `project-main/project-sub-1` 文件夹是空的：\n\n> cd /path/to/temp\n> git clone [https://github.com/username/project-main.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-main.git)\n\n\n\n如果希望子模块代码也获取到，一种方式是在克隆主项目的时候带上参数 `--recurse-submodules`，这样会递归地将项目中所有子模块的代码拉取。\n\n> cd /path/to/temp2\n> git clone [https://github.com/username/project-main.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-main.git) --recurse-submodules\n\n此时 `project-main/project-sub-1` 文件夹是有内容的，并且固定在某个 Git 提交的版本上。\n\n另外一种可行的方式是，在当前主项目中执行：\n\n> git submodule init\n> git submodule update\n\n则会根据主项目的配置信息，拉取更新子模块中的代码。\n\n一般使用更多的是，递归得将子项目中目录拉去下来\n\n> git submodule update --init --recursive\n\n\n\n### **3.子模块内容的更新**\n\n对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。\n\n对于主项目而言，子模块的内容发生变动时，通常有三种情况：\n\n1）当前项目下子模块文件夹内的内容发生了未跟踪的内容变动；\n\n2）当前项目下子模块文件夹内的内容发生了版本变化；\n\n3）当前项目下子模块文件夹内的内容没变，远程有更新；\n\n\n\n> \\> 情况1：子模块有未跟踪的内容变动\n\n对于第1种情况，通常是在开发环境中，直接修改子模块文件夹中的代码导致的。\n\n此时在主项目中使用 `git status` 能够看到关于子模块尚未暂存以备提交的变更，但是于主项目而言是无能为力的，使用 `git add/commit` 对其也不会产生影响。\n\n> ➜ project-main git:(master) git status\n> 位于分支 master\n> 您的分支与上游分支 'origin/master' 一致。\n> 尚未暂存以备提交的变更：\n> （使用 \"git add <文件>...\" 更新要提交的内容）\n> （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n> （提交或丢弃子模组中未跟踪或修改的内容）\n> 修改： project-sub-1 (未跟踪的内容)\n> 修改尚未加入提交（使用 \"git add\" 和/或 \"git commit -a\"）\n\n在此情景下，通常需要进入子模块文件夹，按照子模块内部的版本控制体系提交代码。\n\n当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。\n\n\n\n> \\> 情况2：子模块有版本变化\n\n当子模块版本变化时，在主项目中使用 `git status` 查看仓库状态时，会显示子模块有新的提交：\n\n> ➜ project-main git:(master) ✗ git status\n> 位于分支 master\n> 您的分支与上游分支 'origin/master' 一致。\n> 尚未暂存以备提交的变更：\n> （使用 \"git add <文件>...\" 更新要提交的内容）\n> （使用 \"git checkout -- <文件>...\" 丢弃工作区的改动）\n> 修改： project-sub-1 (新提交)\n> 修改尚未加入提交（使用 \"git add\" 和/或 \"git commit -a\"）\n\n在这种情况下，可以使用 `git add/commit` 将其添加到主项目的代码提交中，实际的改动就是那个子模块 `文件` 所表示的版本信息：\n\n> git diff HEAD HEAD^\n> diff --git a/project-sub-1 b/project-sub-1\n> index ace9770..7097c48 160000\n> --- a/project-sub-1\n> +++ b/project-sub-1\n> @@ -1 +1 @@\n> -Subproject commit ace977071f94f4f88935f9bb9a33ac0f8b4ba935\n> +Subproject commit 7097c4887798b71cee360e99815f7dbd1aa17eb4\n\n通常当子项目更新后，主项目修改其所依赖的版本时，会产生类似这种情景的 commit 提交信息。\n\n\n\n> \\> 情况3：子模块远程有更新\n\n通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。\n\n在这种情况下，主项目是比较茫然的。\n\n之前曾经提到，主项目可以使用 `git submodule update` 更新子模块的代码，但那是指 `当前主项目文件夹下的子模块目录内容` 与 `当前主项目记录的子模块版本` 不一致时，会参考后者进行更新。\n\n但如今这种情况下，后者 `当前主项目记录的子模块版本` 还没有变化，在主项目看来当前情况一切正常。\n\n此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。\n\n通常流程是：\n\n> cd project-sub-1\n> git pull origin master\n\n子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。\n\n当主项目的子项目特别多时，可能会不太方便，此时可以使用 `git submodule` 的一个命令 `foreach` 执行：\n\n> git submodule foreach 'git pull origin master'\n\n\n\n> \\> 情况汇总\n\n终上所述，可知在不同场景下子模块的更新方式如下：\n\n- 对于子模块，只需要管理好自己的版本，并推送到远程分支即可；\n- 对于父模块，若子模块版本信息未提交，需要更新子模块目录下的代码，并执行 `commit` 操作提交子模块版本信息；\n- 对于父模块，若子模块版本信息已提交，需要使用 `git submodule update` （git submodule update --init --recursive），Git 会自动根据子模块版本信息更新所有子模块目录的相关代码。\n\n\n\n> **4.删除子模块**\n\n网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 `.gitmodules`、`.git/config` 和 `.git/modules` 内容。包含了一大堆类似`git rm --cached <sub-module>`、`rm -rf <sub-moduel>`、`rm .gitmodules` 和 `git rm --cached` 之类的代码。\n\n实际上这是一种比较野的做法，不建议使用。\n\n根据官方文档的说明，应该使用 `git submodule deinit` 命令卸载一个子模块。这个命令如果添加上参数 `--force`，则子模块工作区内即使有本地的修改，也会被移除。\n\n> git submodule deinit project-sub-1\n> git rm project-sub-1\n\n执行 `git submodule deinit project-sub-1` 命令的实际效果，是自动在 `.git/config` 中删除了以下内容：\n\n> [submodule \"project-sub-1\"]\n> url = [https://github.com/username/project-sub-1.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git)\n\n执行 `git rm project-sub-1` 的效果，是移除了 `project-sub-1` 文件夹，并自动在 `.gitmodules` 中删除了以下内容：\n\n> [submodule \"project-sub-1\"]\n> path = project-sub-1\n> url = [https://github.com/username/project-sub-1.git](https://link.zhihu.com/?target=https%3A//github.com/username/project-sub-1.git)\n\n此时，主项目中关于子模块的信息基本已经删除（虽然貌似 `.git/modules` 目录下还有残余）：\n\n> ➜ project-main git:(master) ✗ gs\n> 位于分支 master\n> 您的分支与上游分支 'origin/master' 一致。\n> 要提交的变更：\n> （使用 \"git reset HEAD <文件>...\" 以取消暂存）\n> 修改： .gitmodules\n> 删除： project-sub-1\n\n可以提交代码：\n\n> git commit -m \"delete submodule project-sub-1\"\n\n至此完成对子模块的删除。\n\n\n\n## 总结\n\n当项目比较复杂，部分代码希望独立为子模块进行版本控制时，可以使用 `git submodule` 功能。\n\n使用 `git submodule` 功能时，主项目仓库并不会包含子模块的文件，只会保留一份子模块的配置信息及版本信息，作为主项目版本管理的一部分。\n\n本篇文章简单介绍了 `git submodule` 的添加和删除，以及项目开发过程中主项目与子模块不同状态时刻的操作方式。","slug":"command/Git中submodule的使用","published":1,"updated":"2023-08-25T09:04:21.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67d0045gcr7gdyz6omf","content":"<h1 id=\"Git中submodule的使用\"><a href=\"#Git中submodule的使用\" class=\"headerlink\" title=\"Git中submodule的使用\"></a>Git中submodule的使用</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>面对比较复杂的项目，我们有可能会将代码根据功能拆解成不同的子模块。主项目对子模块有依赖关系，却又并不关心子模块的内部开发流程细节。</p>\n<p>这种情况下，通常不会把所有源码都放在同一个 Git 仓库中。</p>\n<p>有一种比较简单的方式，是在当前工作目录下，将子模块文件夹加入到 <code>.gitignore</code> 文件内容中，这样主项目就能够无视子项目的存在。这样做有一个弊端就是，使用主项目的人需要有一个先验知识：需要在当前目录下放置一份某版本的子模块代码。</p>\n<p>还有另外一种方式可供借鉴，可以使用 Git 的 <code>submodule</code> 功能，也是这篇文章的主题。</p>\n<p>实际上 Git 工具的 <code>submodule</code> 功能就是建立了当前项目与子模块之间的依赖关系：<code>子模块路径</code>、<code>子模块的远程仓库</code>、<code>子模块的版本号</code>。</p>\n<h2 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h2><p>假定我们有两个项目：<code>project-main</code> 和 <code>project-sub-1</code>，其中 <code>project-main</code> 表示主项目，而 <code>project-sub-1</code> 表示子模块项目。</p>\n<p>其中 <code>project-main</code> 的远程仓库地址为 <code>https://github.com/username/project-main.git</code>，而 <code>project-sub-1</code> 的远程仓库地址为 <code>https://github.com/username/project-sub-1.git</code>。</p>\n<p>接下来，我们希望在 <code>project-main</code> 中添加 <code>project-sub-1</code> ，而又保持 <code>project-sub-1</code> 自身独立的版本控制。</p>\n<h3 id=\"1-创建-submodule\"><a href=\"#1-创建-submodule\" class=\"headerlink\" title=\"1.创建 submodule\"></a><strong>1.创建 submodule</strong></h3><p>使用 <code>git submodule add &lt;submodule_url&gt;</code> 命令可以在项目中创建一个子模块。</p>\n<p>进入项目 <code>project-main</code> ，输入：</p>\n<blockquote>\n<p>➜ project-main git:(master) git submodule add <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-sub-1.git\">https://github.com/username/project-sub-1.git</a><br>正克隆到 ‘&#x2F;path&#x2F;to&#x2F;project-main&#x2F;project-sub-1’…<br>remote: Enumerating objects: 3, done.<br>remote: Counting objects: 100% (3&#x2F;3), done.<br>remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0<br>展开对象中: 100% (3&#x2F;3), 完成.</p>\n</blockquote>\n<p>此时项目仓库中会多出两个文件：<code>.gitmodules</code> 和 <code>project-sub-1</code> 。</p>\n<p>前者的内容是这样的，事实上就是子模块的相关信息；而后者那个文件，实际上保存的是子模块当前版本的版本号信息。</p>\n<blockquote>\n<p>[submodule “project-sub-1”]<br>path &#x3D; project-sub-1<br>url &#x3D; <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-sub-1.git\">https://github.com/username/project-sub-1.git</a></p>\n</blockquote>\n<p>如果此前项目中已经存在 <code>.gitmodules</code> 文件，则会在文件内容中多出上述三行记录。</p>\n<p>事实上，此时在 <code>.git/config</code> 文件中也会多出一些信息，在 <code>.git/modules</code> 文件夹下也会多出一份内容。</p>\n<p>通常此时可以使用 <code>git commit -m &quot;add submodule xxx&quot;</code> 提交一次，表示引入了某个子模块。提交后，在主项目仓库中，会显示出子模块文件夹，并带上其所在仓库的版本号。</p>\n<p><img src=\"/media/v2-8b77b08acc39bfc9cb569116ff6905e2_720w.webp\" alt=\"img\"></p>\n<h3 id=\"2-获取-submodule\"><a href=\"#2-获取-submodule\" class=\"headerlink\" title=\"2.获取 submodule\"></a><strong>2.获取 submodule</strong></h3><p>上述步骤在创建子模块的过程中，会自动将相关代码克隆到对应路径，但对于后续使用者而言，对于主项目使用普通的 <code>clone</code> 操作并不会拉取到子模块中的实际代码。</p>\n<p>使用以下命令进行克隆，完成后 <code>project-main/project-sub-1</code> 文件夹是空的：</p>\n<blockquote>\n<p>cd &#x2F;path&#x2F;to&#x2F;temp<br>git clone <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-main.git\">https://github.com/username/project-main.git</a></p>\n</blockquote>\n<p>如果希望子模块代码也获取到，一种方式是在克隆主项目的时候带上参数 <code>--recurse-submodules</code>，这样会递归地将项目中所有子模块的代码拉取。</p>\n<blockquote>\n<p>cd &#x2F;path&#x2F;to&#x2F;temp2<br>git clone <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-main.git\">https://github.com/username/project-main.git</a> –recurse-submodules</p>\n</blockquote>\n<p>此时 <code>project-main/project-sub-1</code> 文件夹是有内容的，并且固定在某个 Git 提交的版本上。</p>\n<p>另外一种可行的方式是，在当前主项目中执行：</p>\n<blockquote>\n<p>git submodule init<br>git submodule update</p>\n</blockquote>\n<p>则会根据主项目的配置信息，拉取更新子模块中的代码。</p>\n<p>一般使用更多的是，递归得将子项目中目录拉去下来</p>\n<blockquote>\n<p>git submodule update –init –recursive</p>\n</blockquote>\n<h3 id=\"3-子模块内容的更新\"><a href=\"#3-子模块内容的更新\" class=\"headerlink\" title=\"3.子模块内容的更新\"></a><strong>3.子模块内容的更新</strong></h3><p>对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。</p>\n<p>对于主项目而言，子模块的内容发生变动时，通常有三种情况：</p>\n<p>1）当前项目下子模块文件夹内的内容发生了未跟踪的内容变动；</p>\n<p>2）当前项目下子模块文件夹内的内容发生了版本变化；</p>\n<p>3）当前项目下子模块文件夹内的内容没变，远程有更新；</p>\n<blockquote>\n<p>&gt; 情况1：子模块有未跟踪的内容变动</p>\n</blockquote>\n<p>对于第1种情况，通常是在开发环境中，直接修改子模块文件夹中的代码导致的。</p>\n<p>此时在主项目中使用 <code>git status</code> 能够看到关于子模块尚未暂存以备提交的变更，但是于主项目而言是无能为力的，使用 <code>git add/commit</code> 对其也不会产生影响。</p>\n<blockquote>\n<p>➜ project-main git:(master) git status<br>位于分支 master<br>您的分支与上游分支 ‘origin&#x2F;master’ 一致。<br>尚未暂存以备提交的变更：<br>（使用 “git add &lt;文件&gt;…” 更新要提交的内容）<br>（使用 “git checkout – &lt;文件&gt;…” 丢弃工作区的改动）<br>（提交或丢弃子模组中未跟踪或修改的内容）<br>修改： project-sub-1 (未跟踪的内容)<br>修改尚未加入提交（使用 “git add” 和&#x2F;或 “git commit -a”）</p>\n</blockquote>\n<p>在此情景下，通常需要进入子模块文件夹，按照子模块内部的版本控制体系提交代码。</p>\n<p>当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。</p>\n<blockquote>\n<p>&gt; 情况2：子模块有版本变化</p>\n</blockquote>\n<p>当子模块版本变化时，在主项目中使用 <code>git status</code> 查看仓库状态时，会显示子模块有新的提交：</p>\n<blockquote>\n<p>➜ project-main git:(master) ✗ git status<br>位于分支 master<br>您的分支与上游分支 ‘origin&#x2F;master’ 一致。<br>尚未暂存以备提交的变更：<br>（使用 “git add &lt;文件&gt;…” 更新要提交的内容）<br>（使用 “git checkout – &lt;文件&gt;…” 丢弃工作区的改动）<br>修改： project-sub-1 (新提交)<br>修改尚未加入提交（使用 “git add” 和&#x2F;或 “git commit -a”）</p>\n</blockquote>\n<p>在这种情况下，可以使用 <code>git add/commit</code> 将其添加到主项目的代码提交中，实际的改动就是那个子模块 <code>文件</code> 所表示的版本信息：</p>\n<blockquote>\n<p>git diff HEAD HEAD^<br>diff –git a&#x2F;project-sub-1 b&#x2F;project-sub-1<br>index ace9770..7097c48 160000<br>— a&#x2F;project-sub-1<br>+++ b&#x2F;project-sub-1<br>@@ -1 +1 @@<br>-Subproject commit ace977071f94f4f88935f9bb9a33ac0f8b4ba935<br>+Subproject commit 7097c4887798b71cee360e99815f7dbd1aa17eb4</p>\n</blockquote>\n<p>通常当子项目更新后，主项目修改其所依赖的版本时，会产生类似这种情景的 commit 提交信息。</p>\n<blockquote>\n<p>&gt; 情况3：子模块远程有更新</p>\n</blockquote>\n<p>通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。</p>\n<p>在这种情况下，主项目是比较茫然的。</p>\n<p>之前曾经提到，主项目可以使用 <code>git submodule update</code> 更新子模块的代码，但那是指 <code>当前主项目文件夹下的子模块目录内容</code> 与 <code>当前主项目记录的子模块版本</code> 不一致时，会参考后者进行更新。</p>\n<p>但如今这种情况下，后者 <code>当前主项目记录的子模块版本</code> 还没有变化，在主项目看来当前情况一切正常。</p>\n<p>此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。</p>\n<p>通常流程是：</p>\n<blockquote>\n<p>cd project-sub-1<br>git pull origin master</p>\n</blockquote>\n<p>子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。</p>\n<p>当主项目的子项目特别多时，可能会不太方便，此时可以使用 <code>git submodule</code> 的一个命令 <code>foreach</code> 执行：</p>\n<blockquote>\n<p>git submodule foreach ‘git pull origin master’</p>\n</blockquote>\n<blockquote>\n<p>&gt; 情况汇总</p>\n</blockquote>\n<p>终上所述，可知在不同场景下子模块的更新方式如下：</p>\n<ul>\n<li>对于子模块，只需要管理好自己的版本，并推送到远程分支即可；</li>\n<li>对于父模块，若子模块版本信息未提交，需要更新子模块目录下的代码，并执行 <code>commit</code> 操作提交子模块版本信息；</li>\n<li>对于父模块，若子模块版本信息已提交，需要使用 <code>git submodule update</code> （git submodule update –init –recursive），Git 会自动根据子模块版本信息更新所有子模块目录的相关代码。</li>\n</ul>\n<blockquote>\n<p><strong>4.删除子模块</strong></p>\n</blockquote>\n<p>网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 <code>.gitmodules</code>、<code>.git/config</code> 和 <code>.git/modules</code> 内容。包含了一大堆类似<code>git rm --cached &lt;sub-module&gt;</code>、<code>rm -rf &lt;sub-moduel&gt;</code>、<code>rm .gitmodules</code> 和 <code>git rm --cached</code> 之类的代码。</p>\n<p>实际上这是一种比较野的做法，不建议使用。</p>\n<p>根据官方文档的说明，应该使用 <code>git submodule deinit</code> 命令卸载一个子模块。这个命令如果添加上参数 <code>--force</code>，则子模块工作区内即使有本地的修改，也会被移除。</p>\n<blockquote>\n<p>git submodule deinit project-sub-1<br>git rm project-sub-1</p>\n</blockquote>\n<p>执行 <code>git submodule deinit project-sub-1</code> 命令的实际效果，是自动在 <code>.git/config</code> 中删除了以下内容：</p>\n<blockquote>\n<p>[submodule “project-sub-1”]<br>url &#x3D; <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-sub-1.git\">https://github.com/username/project-sub-1.git</a></p>\n</blockquote>\n<p>执行 <code>git rm project-sub-1</code> 的效果，是移除了 <code>project-sub-1</code> 文件夹，并自动在 <code>.gitmodules</code> 中删除了以下内容：</p>\n<blockquote>\n<p>[submodule “project-sub-1”]<br>path &#x3D; project-sub-1<br>url &#x3D; <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-sub-1.git\">https://github.com/username/project-sub-1.git</a></p>\n</blockquote>\n<p>此时，主项目中关于子模块的信息基本已经删除（虽然貌似 <code>.git/modules</code> 目录下还有残余）：</p>\n<blockquote>\n<p>➜ project-main git:(master) ✗ gs<br>位于分支 master<br>您的分支与上游分支 ‘origin&#x2F;master’ 一致。<br>要提交的变更：<br>（使用 “git reset HEAD &lt;文件&gt;…” 以取消暂存）<br>修改： .gitmodules<br>删除： project-sub-1</p>\n</blockquote>\n<p>可以提交代码：</p>\n<blockquote>\n<p>git commit -m “delete submodule project-sub-1”</p>\n</blockquote>\n<p>至此完成对子模块的删除。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当项目比较复杂，部分代码希望独立为子模块进行版本控制时，可以使用 <code>git submodule</code> 功能。</p>\n<p>使用 <code>git submodule</code> 功能时，主项目仓库并不会包含子模块的文件，只会保留一份子模块的配置信息及版本信息，作为主项目版本管理的一部分。</p>\n<p>本篇文章简单介绍了 <code>git submodule</code> 的添加和删除，以及项目开发过程中主项目与子模块不同状态时刻的操作方式。</p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-9.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Git中submodule的使用\"><a href=\"#Git中submodule的使用\" class=\"headerlink\" title=\"Git中submodule的使用\"></a>Git中submodule的使用</h1><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>面对比较复杂的项目，我们有可能会将代码根据功能拆解成不同的子模块。主项目对子模块有依赖关系，却又并不关心子模块的内部开发流程细节。</p>\n<p>这种情况下，通常不会把所有源码都放在同一个 Git 仓库中。</p>\n<p>有一种比较简单的方式，是在当前工作目录下，将子模块文件夹加入到 <code>.gitignore</code> 文件内容中，这样主项目就能够无视子项目的存在。这样做有一个弊端就是，使用主项目的人需要有一个先验知识：需要在当前目录下放置一份某版本的子模块代码。</p>\n<p>还有另外一种方式可供借鉴，可以使用 Git 的 <code>submodule</code> 功能，也是这篇文章的主题。</p>\n<p>实际上 Git 工具的 <code>submodule</code> 功能就是建立了当前项目与子模块之间的依赖关系：<code>子模块路径</code>、<code>子模块的远程仓库</code>、<code>子模块的版本号</code>。</p>\n<h2 id=\"使用流程\"><a href=\"#使用流程\" class=\"headerlink\" title=\"使用流程\"></a>使用流程</h2><p>假定我们有两个项目：<code>project-main</code> 和 <code>project-sub-1</code>，其中 <code>project-main</code> 表示主项目，而 <code>project-sub-1</code> 表示子模块项目。</p>\n<p>其中 <code>project-main</code> 的远程仓库地址为 <code>https://github.com/username/project-main.git</code>，而 <code>project-sub-1</code> 的远程仓库地址为 <code>https://github.com/username/project-sub-1.git</code>。</p>\n<p>接下来，我们希望在 <code>project-main</code> 中添加 <code>project-sub-1</code> ，而又保持 <code>project-sub-1</code> 自身独立的版本控制。</p>\n<h3 id=\"1-创建-submodule\"><a href=\"#1-创建-submodule\" class=\"headerlink\" title=\"1.创建 submodule\"></a><strong>1.创建 submodule</strong></h3><p>使用 <code>git submodule add &lt;submodule_url&gt;</code> 命令可以在项目中创建一个子模块。</p>\n<p>进入项目 <code>project-main</code> ，输入：</p>\n<blockquote>\n<p>➜ project-main git:(master) git submodule add <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-sub-1.git\">https://github.com/username/project-sub-1.git</a><br>正克隆到 ‘&#x2F;path&#x2F;to&#x2F;project-main&#x2F;project-sub-1’…<br>remote: Enumerating objects: 3, done.<br>remote: Counting objects: 100% (3&#x2F;3), done.<br>remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0<br>展开对象中: 100% (3&#x2F;3), 完成.</p>\n</blockquote>\n<p>此时项目仓库中会多出两个文件：<code>.gitmodules</code> 和 <code>project-sub-1</code> 。</p>\n<p>前者的内容是这样的，事实上就是子模块的相关信息；而后者那个文件，实际上保存的是子模块当前版本的版本号信息。</p>\n<blockquote>\n<p>[submodule “project-sub-1”]<br>path &#x3D; project-sub-1<br>url &#x3D; <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-sub-1.git\">https://github.com/username/project-sub-1.git</a></p>\n</blockquote>\n<p>如果此前项目中已经存在 <code>.gitmodules</code> 文件，则会在文件内容中多出上述三行记录。</p>\n<p>事实上，此时在 <code>.git/config</code> 文件中也会多出一些信息，在 <code>.git/modules</code> 文件夹下也会多出一份内容。</p>\n<p>通常此时可以使用 <code>git commit -m &quot;add submodule xxx&quot;</code> 提交一次，表示引入了某个子模块。提交后，在主项目仓库中，会显示出子模块文件夹，并带上其所在仓库的版本号。</p>\n<p><img src=\"/media/v2-8b77b08acc39bfc9cb569116ff6905e2_720w.webp\" alt=\"img\"></p>\n<h3 id=\"2-获取-submodule\"><a href=\"#2-获取-submodule\" class=\"headerlink\" title=\"2.获取 submodule\"></a><strong>2.获取 submodule</strong></h3><p>上述步骤在创建子模块的过程中，会自动将相关代码克隆到对应路径，但对于后续使用者而言，对于主项目使用普通的 <code>clone</code> 操作并不会拉取到子模块中的实际代码。</p>\n<p>使用以下命令进行克隆，完成后 <code>project-main/project-sub-1</code> 文件夹是空的：</p>\n<blockquote>\n<p>cd &#x2F;path&#x2F;to&#x2F;temp<br>git clone <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-main.git\">https://github.com/username/project-main.git</a></p>\n</blockquote>\n<p>如果希望子模块代码也获取到，一种方式是在克隆主项目的时候带上参数 <code>--recurse-submodules</code>，这样会递归地将项目中所有子模块的代码拉取。</p>\n<blockquote>\n<p>cd &#x2F;path&#x2F;to&#x2F;temp2<br>git clone <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-main.git\">https://github.com/username/project-main.git</a> –recurse-submodules</p>\n</blockquote>\n<p>此时 <code>project-main/project-sub-1</code> 文件夹是有内容的，并且固定在某个 Git 提交的版本上。</p>\n<p>另外一种可行的方式是，在当前主项目中执行：</p>\n<blockquote>\n<p>git submodule init<br>git submodule update</p>\n</blockquote>\n<p>则会根据主项目的配置信息，拉取更新子模块中的代码。</p>\n<p>一般使用更多的是，递归得将子项目中目录拉去下来</p>\n<blockquote>\n<p>git submodule update –init –recursive</p>\n</blockquote>\n<h3 id=\"3-子模块内容的更新\"><a href=\"#3-子模块内容的更新\" class=\"headerlink\" title=\"3.子模块内容的更新\"></a><strong>3.子模块内容的更新</strong></h3><p>对于子模块而言，并不需要知道引用自己的主项目的存在。对于自身来讲，子模块就是一个完整的 Git 仓库，按照正常的 Git 代码管理规范操作即可。</p>\n<p>对于主项目而言，子模块的内容发生变动时，通常有三种情况：</p>\n<p>1）当前项目下子模块文件夹内的内容发生了未跟踪的内容变动；</p>\n<p>2）当前项目下子模块文件夹内的内容发生了版本变化；</p>\n<p>3）当前项目下子模块文件夹内的内容没变，远程有更新；</p>\n<blockquote>\n<p>&gt; 情况1：子模块有未跟踪的内容变动</p>\n</blockquote>\n<p>对于第1种情况，通常是在开发环境中，直接修改子模块文件夹中的代码导致的。</p>\n<p>此时在主项目中使用 <code>git status</code> 能够看到关于子模块尚未暂存以备提交的变更，但是于主项目而言是无能为力的，使用 <code>git add/commit</code> 对其也不会产生影响。</p>\n<blockquote>\n<p>➜ project-main git:(master) git status<br>位于分支 master<br>您的分支与上游分支 ‘origin&#x2F;master’ 一致。<br>尚未暂存以备提交的变更：<br>（使用 “git add &lt;文件&gt;…” 更新要提交的内容）<br>（使用 “git checkout – &lt;文件&gt;…” 丢弃工作区的改动）<br>（提交或丢弃子模组中未跟踪或修改的内容）<br>修改： project-sub-1 (未跟踪的内容)<br>修改尚未加入提交（使用 “git add” 和&#x2F;或 “git commit -a”）</p>\n</blockquote>\n<p>在此情景下，通常需要进入子模块文件夹，按照子模块内部的版本控制体系提交代码。</p>\n<p>当提交完成后，主项目的状态则进入了情况2，即当前项目下子模块文件夹内的内容发生了版本变化。</p>\n<blockquote>\n<p>&gt; 情况2：子模块有版本变化</p>\n</blockquote>\n<p>当子模块版本变化时，在主项目中使用 <code>git status</code> 查看仓库状态时，会显示子模块有新的提交：</p>\n<blockquote>\n<p>➜ project-main git:(master) ✗ git status<br>位于分支 master<br>您的分支与上游分支 ‘origin&#x2F;master’ 一致。<br>尚未暂存以备提交的变更：<br>（使用 “git add &lt;文件&gt;…” 更新要提交的内容）<br>（使用 “git checkout – &lt;文件&gt;…” 丢弃工作区的改动）<br>修改： project-sub-1 (新提交)<br>修改尚未加入提交（使用 “git add” 和&#x2F;或 “git commit -a”）</p>\n</blockquote>\n<p>在这种情况下，可以使用 <code>git add/commit</code> 将其添加到主项目的代码提交中，实际的改动就是那个子模块 <code>文件</code> 所表示的版本信息：</p>\n<blockquote>\n<p>git diff HEAD HEAD^<br>diff –git a&#x2F;project-sub-1 b&#x2F;project-sub-1<br>index ace9770..7097c48 160000<br>— a&#x2F;project-sub-1<br>+++ b&#x2F;project-sub-1<br>@@ -1 +1 @@<br>-Subproject commit ace977071f94f4f88935f9bb9a33ac0f8b4ba935<br>+Subproject commit 7097c4887798b71cee360e99815f7dbd1aa17eb4</p>\n</blockquote>\n<p>通常当子项目更新后，主项目修改其所依赖的版本时，会产生类似这种情景的 commit 提交信息。</p>\n<blockquote>\n<p>&gt; 情况3：子模块远程有更新</p>\n</blockquote>\n<p>通常来讲，主项目与子模块的开发不会恰好是同时进行的。通常是子模块负责维护自己的版本升级后，推送到远程仓库，并告知主项目可以更新对子模块的版本依赖。</p>\n<p>在这种情况下，主项目是比较茫然的。</p>\n<p>之前曾经提到，主项目可以使用 <code>git submodule update</code> 更新子模块的代码，但那是指 <code>当前主项目文件夹下的子模块目录内容</code> 与 <code>当前主项目记录的子模块版本</code> 不一致时，会参考后者进行更新。</p>\n<p>但如今这种情况下，后者 <code>当前主项目记录的子模块版本</code> 还没有变化，在主项目看来当前情况一切正常。</p>\n<p>此时，需要让主项目主动进入子模块拉取新版代码，进行升级操作。</p>\n<p>通常流程是：</p>\n<blockquote>\n<p>cd project-sub-1<br>git pull origin master</p>\n</blockquote>\n<p>子模块目录下的代码版本会发生变化，转到情况2的流程进行主项目的提交。</p>\n<p>当主项目的子项目特别多时，可能会不太方便，此时可以使用 <code>git submodule</code> 的一个命令 <code>foreach</code> 执行：</p>\n<blockquote>\n<p>git submodule foreach ‘git pull origin master’</p>\n</blockquote>\n<blockquote>\n<p>&gt; 情况汇总</p>\n</blockquote>\n<p>终上所述，可知在不同场景下子模块的更新方式如下：</p>\n<ul>\n<li>对于子模块，只需要管理好自己的版本，并推送到远程分支即可；</li>\n<li>对于父模块，若子模块版本信息未提交，需要更新子模块目录下的代码，并执行 <code>commit</code> 操作提交子模块版本信息；</li>\n<li>对于父模块，若子模块版本信息已提交，需要使用 <code>git submodule update</code> （git submodule update –init –recursive），Git 会自动根据子模块版本信息更新所有子模块目录的相关代码。</li>\n</ul>\n<blockquote>\n<p><strong>4.删除子模块</strong></p>\n</blockquote>\n<p>网上流传了一些偏法，主要步骤是直接移除模块，并手动修改 <code>.gitmodules</code>、<code>.git/config</code> 和 <code>.git/modules</code> 内容。包含了一大堆类似<code>git rm --cached &lt;sub-module&gt;</code>、<code>rm -rf &lt;sub-moduel&gt;</code>、<code>rm .gitmodules</code> 和 <code>git rm --cached</code> 之类的代码。</p>\n<p>实际上这是一种比较野的做法，不建议使用。</p>\n<p>根据官方文档的说明，应该使用 <code>git submodule deinit</code> 命令卸载一个子模块。这个命令如果添加上参数 <code>--force</code>，则子模块工作区内即使有本地的修改，也会被移除。</p>\n<blockquote>\n<p>git submodule deinit project-sub-1<br>git rm project-sub-1</p>\n</blockquote>\n<p>执行 <code>git submodule deinit project-sub-1</code> 命令的实际效果，是自动在 <code>.git/config</code> 中删除了以下内容：</p>\n<blockquote>\n<p>[submodule “project-sub-1”]<br>url &#x3D; <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-sub-1.git\">https://github.com/username/project-sub-1.git</a></p>\n</blockquote>\n<p>执行 <code>git rm project-sub-1</code> 的效果，是移除了 <code>project-sub-1</code> 文件夹，并自动在 <code>.gitmodules</code> 中删除了以下内容：</p>\n<blockquote>\n<p>[submodule “project-sub-1”]<br>path &#x3D; project-sub-1<br>url &#x3D; <a href=\"https://link.zhihu.com/?target=https://github.com/username/project-sub-1.git\">https://github.com/username/project-sub-1.git</a></p>\n</blockquote>\n<p>此时，主项目中关于子模块的信息基本已经删除（虽然貌似 <code>.git/modules</code> 目录下还有残余）：</p>\n<blockquote>\n<p>➜ project-main git:(master) ✗ gs<br>位于分支 master<br>您的分支与上游分支 ‘origin&#x2F;master’ 一致。<br>要提交的变更：<br>（使用 “git reset HEAD &lt;文件&gt;…” 以取消暂存）<br>修改： .gitmodules<br>删除： project-sub-1</p>\n</blockquote>\n<p>可以提交代码：</p>\n<blockquote>\n<p>git commit -m “delete submodule project-sub-1”</p>\n</blockquote>\n<p>至此完成对子模块的删除。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>当项目比较复杂，部分代码希望独立为子模块进行版本控制时，可以使用 <code>git submodule</code> 功能。</p>\n<p>使用 <code>git submodule</code> 功能时，主项目仓库并不会包含子模块的文件，只会保留一份子模块的配置信息及版本信息，作为主项目版本管理的一部分。</p>\n<p>本篇文章简单介绍了 <code>git submodule</code> 的添加和删除，以及项目开发过程中主项目与子模块不同状态时刻的操作方式。</p>\n"},{"title":"Xsens传感器调用","date":"2023-08-25T08:54:21.192Z","description":null,"top_img":false,"_content":"\n# Xsens传感器调用\n\n\n\n```shell\nsource devel/setup.bash\n\nsudo chmod 777 /dev/ttyUSB\\*\n\nroslaunch xsens_mti_driver display.launch\n```\n\n\n","source":"_posts/command/Xsens传感器调用.md","raw":"---\ntitle: Xsens传感器调用\ndate:\ntags: \ncategories:\n- command\ndescription:\ntop_img: false\n\n---\n\n# Xsens传感器调用\n\n\n\n```shell\nsource devel/setup.bash\n\nsudo chmod 777 /dev/ttyUSB\\*\n\nroslaunch xsens_mti_driver display.launch\n```\n\n\n","slug":"command/Xsens传感器调用","published":1,"updated":"2023-08-25T09:08:29.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67d004agcr7d9pr4sdv","content":"<h1 id=\"Xsens传感器调用\"><a href=\"#Xsens传感器调用\" class=\"headerlink\" title=\"Xsens传感器调用\"></a>Xsens传感器调用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source devel/setup.bash</span><br><span class=\"line\"></span><br><span class=\"line\">sudo chmod 777 /dev/ttyUSB\\*</span><br><span class=\"line\"></span><br><span class=\"line\">roslaunch xsens_mti_driver display.launch</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-8.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Xsens传感器调用\"><a href=\"#Xsens传感器调用\" class=\"headerlink\" title=\"Xsens传感器调用\"></a>Xsens传感器调用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source devel/setup.bash</span><br><span class=\"line\"></span><br><span class=\"line\">sudo chmod 777 /dev/ttyUSB\\*</span><br><span class=\"line\"></span><br><span class=\"line\">roslaunch xsens_mti_driver display.launch</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Velodyne VLP16激光雷达调用","date":"2023-08-25T08:54:21.191Z","description":null,"top_img":false,"_content":"\n# Velodyne VLP16激光雷达调用\n\n```shell\nsource devel/setup.bash\n\nroslaunch velodyne_pointcloud VLP16_points.launch\n```\n\n\n","source":"_posts/command/Velodyne_VLP16激光雷达调用.md","raw":"---\ntitle: Velodyne VLP16激光雷达调用\ndate:\ntags: \n- Velodyne\ncategories:\n- command\ndescription:\ntop_img: false\n\n---\n\n# Velodyne VLP16激光雷达调用\n\n```shell\nsource devel/setup.bash\n\nroslaunch velodyne_pointcloud VLP16_points.launch\n```\n\n\n","slug":"command/Velodyne_VLP16激光雷达调用","published":1,"updated":"2023-08-25T09:06:06.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67d004dgcr7ebsjaujf","content":"<h1 id=\"Velodyne-VLP16激光雷达调用\"><a href=\"#Velodyne-VLP16激光雷达调用\" class=\"headerlink\" title=\"Velodyne VLP16激光雷达调用\"></a>Velodyne VLP16激光雷达调用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source devel/setup.bash</span><br><span class=\"line\"></span><br><span class=\"line\">roslaunch velodyne_pointcloud VLP16_points.launch</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-5.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Velodyne-VLP16激光雷达调用\"><a href=\"#Velodyne-VLP16激光雷达调用\" class=\"headerlink\" title=\"Velodyne VLP16激光雷达调用\"></a>Velodyne VLP16激光雷达调用</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source devel/setup.bash</span><br><span class=\"line\"></span><br><span class=\"line\">roslaunch velodyne_pointcloud VLP16_points.launch</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"git rebase的两种用法","date":"2023-08-25T08:54:21.183Z","description":null,"top_img":false,"_content":"\n# git rebase的两种用法\n\n## 用法一: 合并当前分支的多个commit记录\n\n你可能出现过对同一处代码进行多次处理的场景。这会导致如下提交记录:\n\n```\n$ git log --pretty=format:'%h: %s'\nd2399da: feat: modify c\n0134695: feat: modify b\neb63848: feat: modify b\n51c0bca: feat: modify b\n4cb600e: feat: modify a\nd29f331: Initial commit\n```\n\n其实, 中间的对b的3次提交 完全可以合并成一次commit, 这个时候 rebase就很有用了。\n\n### 1. 找到想要合并的commit, 使用rebase -i\n\n```\n$ git rebase -i 4cb600e\n```\n\n**注意 git rebase -i [startPonit] [endPoint]**\n\n前开后闭 区间 这里的 [startPonit] 是指需要合并的commit的前一个commit (即当前示例中的 “4cb600e: feat: modify a”)。 因为, 三个commit肯定要基于上一个commit合并成了新的commit。\n谨慎使用[endPoint] 省略, 即默认表示从起始commit一直到最后一个，但是一旦你填写了, **则表示 [endPoint]后面的commit全部不要了!**\n\n### 2. 进入Interact交互界面\n\n终端会进入选择交互界面, 让你进行变基选择操作:\n\n![](media/47e2a05c214d49f7bbe30c7d58bcd331.png)\n\n- 最上面三行, 就是刚刚选中的三个commit, 按时间顺序依次往下排序（时间最老的在上面）(**和git log的展示顺序是反的, 大家查看的时候要注意**)\n- 前面的三个Pick 其实就是下面 **Commands展示的7种命令中的第一个p**, 也就是使用commit。\n\n### 3.使用s命令合并到上一个commit\n\n1. 按i 进入操作, 将**第二、三个commit的pick改成s**\n2. 按Esc 退出操作\n3. 输入:wq保存并退出\n\n![](media/c98f8577d9e440afacc1f33900f90835.png)\n\n| **命令** | **缩写** |                         **含义**                         |\n| :------: | :------: | :------------------------------------------------------: |\n|   pick   |    p     |                       保留该commit                       |\n|  reword  |    r     |          保留该commit，但需要修改该commit的注释          |\n|   edit   |    e     |   保留该commit, 但我要停下来修改该提交(不仅仅修改注释)   |\n|  squash  |    s     |               将该commit合并到前一个commit               |\n|  fixup   |    f     | 将该commit合并到前一个commit，但不要保留该提交的注释信息 |\n|   exec   |    x     |                      执行shell命令                       |\n|   drop   |    d     |                       丢弃该commit                       |\n\n### 4.修改commit记录\n\n![](media/ea41ef6e45a44d1780182e7f1f483c60.png)\n\n这里三个信息都是一样的, 我们选用第一个的提交信息, 将其余的全部注释掉,重复上述步骤, 保存退出即可\n\n![](media/474feca2a40949c0a9dc579122ef4ece.png)\n\n### 5.查看最新合并情况\n\n会发现原三个一样的提交现在合并成了一个新的commit。\n\n![](media/1303dcff987147d79a1340c6abe0233e.png)\n\n## 用法二: 避免出现分叉合并\n\n### 1.原理介绍\n\n首先通过简单的提交节点图解感受一下rebase在干什么\n\n构造两个分支master和feature，其中feature是在提交点B处从master上拉出的分支\n\nmaster上有一个新提交M，feature上有两个新提交C和D\n\n![](media/36efc2704d174acab598c4b9addd3694.png)\n\n此时我们切换到feature分支上，执行rebase命令，相当于是想要把master分支合并到feature分支（这一步的场景就可以类比为我们在自己的分支feature上开发了一段时间了，准备从主干master上拉一下最新改动。模拟了git pull --rebase的情形）\n\n```\n# 这两条命令等价于git rebase master feature\ngit checkout feature\ngit rebase master\n```\n\n下图为变基后的提交节点图，解释一下其工作原理：\n\n![](media/12b959efcc454da5a15b9fdec493d61b.png)\n\n- feature：待变基分支、当前分支\n- master：基分支、目标分支\n\n#### 官方原文解释：\n\n当执行rebase操作时，git会从两个分支的共同祖先开始提取待变基分支上的修改，然后将待变基分支指向基分支的最新提交，最后将刚才提取的修改应用到基分支的最新提交的后面。\n\n#### 结合例子解释：\n\n当在feature分支上执行git rebase master时，git会从master和featuer的共同祖先B开始提取feature分支上的修改，也就是C和D两个提交，先提取到。然后将feature分支指向master分支的最新提交上，也就是M。最后把提取的C和D接到M后面，注意这里的接法，官方没说清楚，实际是会依次拿M和C、D内容分别比较，处理冲突后生成新的C’和D’。一定注意，这里新C’、D’和之前的C、D已经不一样了，是我们处理冲突后的新内容，feature指针自然最后也是指向D’\n\n#### 通俗解释：\n\nrebase，变基，可以直接理解为改变基底。feature分支是基于master分支的B拉出来的分支，feature的基底是B。而master在B之后有新的提交，就相当于此时要用master上新的提交来作为feature分支的新基底。实际操作为把B之后feature的提交先暂存下来，然后删掉原来这些提交，再找到master的最新提交位置，把存下来的提交再接上去（接上去是逐个和新基底处理冲突的过程），如此feature分支的基底就相当于变成了M而不是原来的B了。（注意，如果master上在B以后没有新提交，那么就还是用原来的B作为基，rebase操作相当于无效，此时和git merge就基本没区别了，差异只在于git merge会多一条记录Merge操作的提交记录）\n\n### 2.冲突解决\n\n在 `rebase` 的过程中，也许会出现冲突 `conflict`。在这种情况，`git` 会停止 `rebase` 并会让你去解决冲突。在解决完冲突后，用 `git add` 命令去更新这些内容。\n\n注意，你无需执行 git-commit，只要执行 continue\n\n```\ngit rebase --continue\n```\n\n这样 `git` 会继续应用余下的 `patch` 补丁文件。\n\n在任何时候，我们都可以用 `--abort` 参数来终止 `rebase` 的行动，并且分支会回到 `rebase` 开始前的状态。\n\n```\ngit rebase —abort\n```\n\n### 3.实际git提交示例\n\n这里严格按照上面的图解，构造了实际的git提交示例（注意，这里重新贴了新图，之前的图逻辑上还是不够清晰）\n\n如下图所示，ABM是master分支线，ABCD是feature分支线。\n\n![](media/3c5b8613a9e440fdbee8274d463a6427.png)\n\n此时，在feature分支上执行git rebase master后，会提示有冲突，这里是关键，之前没有把这个细节说清楚。冲突其实也简单，因为我们要生成新的C’和D’嘛，那C’的内容如何得到呢？照搬C的？当然不是，C’的内容就是C和M两个节点的内容合并的结果，D’的内容就是D和M两个节点的内容合并的结果。我们手动处理冲突后，执行如下命令即可：\n\n```\n# 先处理完C，会继续报D的冲突，所以下面命令一共会执行两次\ngit add file\ngit rebase --continue\n```\n\n变基完成以后如下图所示，ABM还是没变化，ABMC’D’是rebase完成后的feature节点图，私以为讲到这里就还是比较清楚了\n\n![](media/19a206038ee44136a2713e8809b6a870.png)\n\n## other：git rebase 和 git pull --rebase\n\n#### 切分支开发与合并分支\n\n```\n#你在本地local分支（并没有远程对应,纯粹是本地开发使用），切回主分支，更新master\ngit checkout master \n#更新master代码\ngit pull\n#切回去\ngit checkout local\n\n#关键的来了，这个时候，把代码变基到最新的上面。\ngit rebase master  ---->解决冲突--->git rebase --continue\n# 搞完以后，切回主分支\ngit checkout master\n# 把local的改动，全部合并到master这边来\ngit merge local\n#提交\ngit push\n```\n\n> ##### 它完全遵循了git的标准规范来开发代码\n\n**我们就知道区别了**：\npull --rebase是为了直接将远程的代码与本地（因为你就在远程分支下开发的）整合；而rebase的一套操作是为了本地额外分支与远程分支的，整合。\n\n### 参考资料\n\n[git rebase的两种用法(最全)](https://blog.csdn.net/small_white_123/article/details/121563248?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-121563248-blog-119004977.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-121563248-blog-119004977.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=9)\n\n[git rebase详解（图解+最简单示例，一次就懂）](https://blog.csdn.net/weixin_42310154/article/details/119004977)\n\n[git rebase超详细解读](https://blog.csdn.net/m0_69424697/article/details/125106290)\n\n[git rebase和add -p和git pull --rebase记录](https://blog.csdn.net/jzlhll123/article/details/119776702)","source":"_posts/command/git_rebase的两种用法.md","raw":"---\ntitle: git rebase的两种用法\ndate:\ntags: \n- Git\ncategories:\n- command\ndescription:\ntop_img: false\n\n---\n\n# git rebase的两种用法\n\n## 用法一: 合并当前分支的多个commit记录\n\n你可能出现过对同一处代码进行多次处理的场景。这会导致如下提交记录:\n\n```\n$ git log --pretty=format:'%h: %s'\nd2399da: feat: modify c\n0134695: feat: modify b\neb63848: feat: modify b\n51c0bca: feat: modify b\n4cb600e: feat: modify a\nd29f331: Initial commit\n```\n\n其实, 中间的对b的3次提交 完全可以合并成一次commit, 这个时候 rebase就很有用了。\n\n### 1. 找到想要合并的commit, 使用rebase -i\n\n```\n$ git rebase -i 4cb600e\n```\n\n**注意 git rebase -i [startPonit] [endPoint]**\n\n前开后闭 区间 这里的 [startPonit] 是指需要合并的commit的前一个commit (即当前示例中的 “4cb600e: feat: modify a”)。 因为, 三个commit肯定要基于上一个commit合并成了新的commit。\n谨慎使用[endPoint] 省略, 即默认表示从起始commit一直到最后一个，但是一旦你填写了, **则表示 [endPoint]后面的commit全部不要了!**\n\n### 2. 进入Interact交互界面\n\n终端会进入选择交互界面, 让你进行变基选择操作:\n\n![](media/47e2a05c214d49f7bbe30c7d58bcd331.png)\n\n- 最上面三行, 就是刚刚选中的三个commit, 按时间顺序依次往下排序（时间最老的在上面）(**和git log的展示顺序是反的, 大家查看的时候要注意**)\n- 前面的三个Pick 其实就是下面 **Commands展示的7种命令中的第一个p**, 也就是使用commit。\n\n### 3.使用s命令合并到上一个commit\n\n1. 按i 进入操作, 将**第二、三个commit的pick改成s**\n2. 按Esc 退出操作\n3. 输入:wq保存并退出\n\n![](media/c98f8577d9e440afacc1f33900f90835.png)\n\n| **命令** | **缩写** |                         **含义**                         |\n| :------: | :------: | :------------------------------------------------------: |\n|   pick   |    p     |                       保留该commit                       |\n|  reword  |    r     |          保留该commit，但需要修改该commit的注释          |\n|   edit   |    e     |   保留该commit, 但我要停下来修改该提交(不仅仅修改注释)   |\n|  squash  |    s     |               将该commit合并到前一个commit               |\n|  fixup   |    f     | 将该commit合并到前一个commit，但不要保留该提交的注释信息 |\n|   exec   |    x     |                      执行shell命令                       |\n|   drop   |    d     |                       丢弃该commit                       |\n\n### 4.修改commit记录\n\n![](media/ea41ef6e45a44d1780182e7f1f483c60.png)\n\n这里三个信息都是一样的, 我们选用第一个的提交信息, 将其余的全部注释掉,重复上述步骤, 保存退出即可\n\n![](media/474feca2a40949c0a9dc579122ef4ece.png)\n\n### 5.查看最新合并情况\n\n会发现原三个一样的提交现在合并成了一个新的commit。\n\n![](media/1303dcff987147d79a1340c6abe0233e.png)\n\n## 用法二: 避免出现分叉合并\n\n### 1.原理介绍\n\n首先通过简单的提交节点图解感受一下rebase在干什么\n\n构造两个分支master和feature，其中feature是在提交点B处从master上拉出的分支\n\nmaster上有一个新提交M，feature上有两个新提交C和D\n\n![](media/36efc2704d174acab598c4b9addd3694.png)\n\n此时我们切换到feature分支上，执行rebase命令，相当于是想要把master分支合并到feature分支（这一步的场景就可以类比为我们在自己的分支feature上开发了一段时间了，准备从主干master上拉一下最新改动。模拟了git pull --rebase的情形）\n\n```\n# 这两条命令等价于git rebase master feature\ngit checkout feature\ngit rebase master\n```\n\n下图为变基后的提交节点图，解释一下其工作原理：\n\n![](media/12b959efcc454da5a15b9fdec493d61b.png)\n\n- feature：待变基分支、当前分支\n- master：基分支、目标分支\n\n#### 官方原文解释：\n\n当执行rebase操作时，git会从两个分支的共同祖先开始提取待变基分支上的修改，然后将待变基分支指向基分支的最新提交，最后将刚才提取的修改应用到基分支的最新提交的后面。\n\n#### 结合例子解释：\n\n当在feature分支上执行git rebase master时，git会从master和featuer的共同祖先B开始提取feature分支上的修改，也就是C和D两个提交，先提取到。然后将feature分支指向master分支的最新提交上，也就是M。最后把提取的C和D接到M后面，注意这里的接法，官方没说清楚，实际是会依次拿M和C、D内容分别比较，处理冲突后生成新的C’和D’。一定注意，这里新C’、D’和之前的C、D已经不一样了，是我们处理冲突后的新内容，feature指针自然最后也是指向D’\n\n#### 通俗解释：\n\nrebase，变基，可以直接理解为改变基底。feature分支是基于master分支的B拉出来的分支，feature的基底是B。而master在B之后有新的提交，就相当于此时要用master上新的提交来作为feature分支的新基底。实际操作为把B之后feature的提交先暂存下来，然后删掉原来这些提交，再找到master的最新提交位置，把存下来的提交再接上去（接上去是逐个和新基底处理冲突的过程），如此feature分支的基底就相当于变成了M而不是原来的B了。（注意，如果master上在B以后没有新提交，那么就还是用原来的B作为基，rebase操作相当于无效，此时和git merge就基本没区别了，差异只在于git merge会多一条记录Merge操作的提交记录）\n\n### 2.冲突解决\n\n在 `rebase` 的过程中，也许会出现冲突 `conflict`。在这种情况，`git` 会停止 `rebase` 并会让你去解决冲突。在解决完冲突后，用 `git add` 命令去更新这些内容。\n\n注意，你无需执行 git-commit，只要执行 continue\n\n```\ngit rebase --continue\n```\n\n这样 `git` 会继续应用余下的 `patch` 补丁文件。\n\n在任何时候，我们都可以用 `--abort` 参数来终止 `rebase` 的行动，并且分支会回到 `rebase` 开始前的状态。\n\n```\ngit rebase —abort\n```\n\n### 3.实际git提交示例\n\n这里严格按照上面的图解，构造了实际的git提交示例（注意，这里重新贴了新图，之前的图逻辑上还是不够清晰）\n\n如下图所示，ABM是master分支线，ABCD是feature分支线。\n\n![](media/3c5b8613a9e440fdbee8274d463a6427.png)\n\n此时，在feature分支上执行git rebase master后，会提示有冲突，这里是关键，之前没有把这个细节说清楚。冲突其实也简单，因为我们要生成新的C’和D’嘛，那C’的内容如何得到呢？照搬C的？当然不是，C’的内容就是C和M两个节点的内容合并的结果，D’的内容就是D和M两个节点的内容合并的结果。我们手动处理冲突后，执行如下命令即可：\n\n```\n# 先处理完C，会继续报D的冲突，所以下面命令一共会执行两次\ngit add file\ngit rebase --continue\n```\n\n变基完成以后如下图所示，ABM还是没变化，ABMC’D’是rebase完成后的feature节点图，私以为讲到这里就还是比较清楚了\n\n![](media/19a206038ee44136a2713e8809b6a870.png)\n\n## other：git rebase 和 git pull --rebase\n\n#### 切分支开发与合并分支\n\n```\n#你在本地local分支（并没有远程对应,纯粹是本地开发使用），切回主分支，更新master\ngit checkout master \n#更新master代码\ngit pull\n#切回去\ngit checkout local\n\n#关键的来了，这个时候，把代码变基到最新的上面。\ngit rebase master  ---->解决冲突--->git rebase --continue\n# 搞完以后，切回主分支\ngit checkout master\n# 把local的改动，全部合并到master这边来\ngit merge local\n#提交\ngit push\n```\n\n> ##### 它完全遵循了git的标准规范来开发代码\n\n**我们就知道区别了**：\npull --rebase是为了直接将远程的代码与本地（因为你就在远程分支下开发的）整合；而rebase的一套操作是为了本地额外分支与远程分支的，整合。\n\n### 参考资料\n\n[git rebase的两种用法(最全)](https://blog.csdn.net/small_white_123/article/details/121563248?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-121563248-blog-119004977.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-5-121563248-blog-119004977.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=9)\n\n[git rebase详解（图解+最简单示例，一次就懂）](https://blog.csdn.net/weixin_42310154/article/details/119004977)\n\n[git rebase超详细解读](https://blog.csdn.net/m0_69424697/article/details/125106290)\n\n[git rebase和add -p和git pull --rebase记录](https://blog.csdn.net/jzlhll123/article/details/119776702)","slug":"command/git_rebase的两种用法","published":1,"updated":"2023-08-25T09:04:12.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67e004hgcr73zr0cmvr","content":"<h1 id=\"git-rebase的两种用法\"><a href=\"#git-rebase的两种用法\" class=\"headerlink\" title=\"git rebase的两种用法\"></a>git rebase的两种用法</h1><h2 id=\"用法一-合并当前分支的多个commit记录\"><a href=\"#用法一-合并当前分支的多个commit记录\" class=\"headerlink\" title=\"用法一: 合并当前分支的多个commit记录\"></a>用法一: 合并当前分支的多个commit记录</h2><p>你可能出现过对同一处代码进行多次处理的场景。这会导致如下提交记录:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=format:&#x27;%h: %s&#x27;</span><br><span class=\"line\">d2399da: feat: modify c</span><br><span class=\"line\">0134695: feat: modify b</span><br><span class=\"line\">eb63848: feat: modify b</span><br><span class=\"line\">51c0bca: feat: modify b</span><br><span class=\"line\">4cb600e: feat: modify a</span><br><span class=\"line\">d29f331: Initial commit</span><br></pre></td></tr></table></figure>\n\n<p>其实, 中间的对b的3次提交 完全可以合并成一次commit, 这个时候 rebase就很有用了。</p>\n<h3 id=\"1-找到想要合并的commit-使用rebase-i\"><a href=\"#1-找到想要合并的commit-使用rebase-i\" class=\"headerlink\" title=\"1. 找到想要合并的commit, 使用rebase -i\"></a>1. 找到想要合并的commit, 使用rebase -i</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i 4cb600e</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意 git rebase -i [startPonit] [endPoint]</strong></p>\n<p>前开后闭 区间 这里的 [startPonit] 是指需要合并的commit的前一个commit (即当前示例中的 “4cb600e: feat: modify a”)。 因为, 三个commit肯定要基于上一个commit合并成了新的commit。<br>谨慎使用[endPoint] 省略, 即默认表示从起始commit一直到最后一个，但是一旦你填写了, <strong>则表示 [endPoint]后面的commit全部不要了!</strong></p>\n<h3 id=\"2-进入Interact交互界面\"><a href=\"#2-进入Interact交互界面\" class=\"headerlink\" title=\"2. 进入Interact交互界面\"></a>2. 进入Interact交互界面</h3><p>终端会进入选择交互界面, 让你进行变基选择操作:</p>\n<p><img src=\"/media/47e2a05c214d49f7bbe30c7d58bcd331.png\"></p>\n<ul>\n<li>最上面三行, 就是刚刚选中的三个commit, 按时间顺序依次往下排序（时间最老的在上面）(<strong>和git log的展示顺序是反的, 大家查看的时候要注意</strong>)</li>\n<li>前面的三个Pick 其实就是下面 <strong>Commands展示的7种命令中的第一个p</strong>, 也就是使用commit。</li>\n</ul>\n<h3 id=\"3-使用s命令合并到上一个commit\"><a href=\"#3-使用s命令合并到上一个commit\" class=\"headerlink\" title=\"3.使用s命令合并到上一个commit\"></a>3.使用s命令合并到上一个commit</h3><ol>\n<li>按i 进入操作, 将<strong>第二、三个commit的pick改成s</strong></li>\n<li>按Esc 退出操作</li>\n<li>输入:wq保存并退出</li>\n</ol>\n<p><img src=\"/media/c98f8577d9e440afacc1f33900f90835.png\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>命令</strong></th>\n<th align=\"center\"><strong>缩写</strong></th>\n<th align=\"center\"><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">pick</td>\n<td align=\"center\">p</td>\n<td align=\"center\">保留该commit</td>\n</tr>\n<tr>\n<td align=\"center\">reword</td>\n<td align=\"center\">r</td>\n<td align=\"center\">保留该commit，但需要修改该commit的注释</td>\n</tr>\n<tr>\n<td align=\"center\">edit</td>\n<td align=\"center\">e</td>\n<td align=\"center\">保留该commit, 但我要停下来修改该提交(不仅仅修改注释)</td>\n</tr>\n<tr>\n<td align=\"center\">squash</td>\n<td align=\"center\">s</td>\n<td align=\"center\">将该commit合并到前一个commit</td>\n</tr>\n<tr>\n<td align=\"center\">fixup</td>\n<td align=\"center\">f</td>\n<td align=\"center\">将该commit合并到前一个commit，但不要保留该提交的注释信息</td>\n</tr>\n<tr>\n<td align=\"center\">exec</td>\n<td align=\"center\">x</td>\n<td align=\"center\">执行shell命令</td>\n</tr>\n<tr>\n<td align=\"center\">drop</td>\n<td align=\"center\">d</td>\n<td align=\"center\">丢弃该commit</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-修改commit记录\"><a href=\"#4-修改commit记录\" class=\"headerlink\" title=\"4.修改commit记录\"></a>4.修改commit记录</h3><p><img src=\"/media/ea41ef6e45a44d1780182e7f1f483c60.png\"></p>\n<p>这里三个信息都是一样的, 我们选用第一个的提交信息, 将其余的全部注释掉,重复上述步骤, 保存退出即可</p>\n<p><img src=\"/media/474feca2a40949c0a9dc579122ef4ece.png\"></p>\n<h3 id=\"5-查看最新合并情况\"><a href=\"#5-查看最新合并情况\" class=\"headerlink\" title=\"5.查看最新合并情况\"></a>5.查看最新合并情况</h3><p>会发现原三个一样的提交现在合并成了一个新的commit。</p>\n<p><img src=\"/media/1303dcff987147d79a1340c6abe0233e.png\"></p>\n<h2 id=\"用法二-避免出现分叉合并\"><a href=\"#用法二-避免出现分叉合并\" class=\"headerlink\" title=\"用法二: 避免出现分叉合并\"></a>用法二: 避免出现分叉合并</h2><h3 id=\"1-原理介绍\"><a href=\"#1-原理介绍\" class=\"headerlink\" title=\"1.原理介绍\"></a>1.原理介绍</h3><p>首先通过简单的提交节点图解感受一下rebase在干什么</p>\n<p>构造两个分支master和feature，其中feature是在提交点B处从master上拉出的分支</p>\n<p>master上有一个新提交M，feature上有两个新提交C和D</p>\n<p><img src=\"/media/36efc2704d174acab598c4b9addd3694.png\"></p>\n<p>此时我们切换到feature分支上，执行rebase命令，相当于是想要把master分支合并到feature分支（这一步的场景就可以类比为我们在自己的分支feature上开发了一段时间了，准备从主干master上拉一下最新改动。模拟了git pull –rebase的情形）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这两条命令等价于git rebase master feature</span><br><span class=\"line\">git checkout feature</span><br><span class=\"line\">git rebase master</span><br></pre></td></tr></table></figure>\n\n<p>下图为变基后的提交节点图，解释一下其工作原理：</p>\n<p><img src=\"/media/12b959efcc454da5a15b9fdec493d61b.png\"></p>\n<ul>\n<li>feature：待变基分支、当前分支</li>\n<li>master：基分支、目标分支</li>\n</ul>\n<h4 id=\"官方原文解释：\"><a href=\"#官方原文解释：\" class=\"headerlink\" title=\"官方原文解释：\"></a>官方原文解释：</h4><p>当执行rebase操作时，git会从两个分支的共同祖先开始提取待变基分支上的修改，然后将待变基分支指向基分支的最新提交，最后将刚才提取的修改应用到基分支的最新提交的后面。</p>\n<h4 id=\"结合例子解释：\"><a href=\"#结合例子解释：\" class=\"headerlink\" title=\"结合例子解释：\"></a>结合例子解释：</h4><p>当在feature分支上执行git rebase master时，git会从master和featuer的共同祖先B开始提取feature分支上的修改，也就是C和D两个提交，先提取到。然后将feature分支指向master分支的最新提交上，也就是M。最后把提取的C和D接到M后面，注意这里的接法，官方没说清楚，实际是会依次拿M和C、D内容分别比较，处理冲突后生成新的C’和D’。一定注意，这里新C’、D’和之前的C、D已经不一样了，是我们处理冲突后的新内容，feature指针自然最后也是指向D’</p>\n<h4 id=\"通俗解释：\"><a href=\"#通俗解释：\" class=\"headerlink\" title=\"通俗解释：\"></a>通俗解释：</h4><p>rebase，变基，可以直接理解为改变基底。feature分支是基于master分支的B拉出来的分支，feature的基底是B。而master在B之后有新的提交，就相当于此时要用master上新的提交来作为feature分支的新基底。实际操作为把B之后feature的提交先暂存下来，然后删掉原来这些提交，再找到master的最新提交位置，把存下来的提交再接上去（接上去是逐个和新基底处理冲突的过程），如此feature分支的基底就相当于变成了M而不是原来的B了。（注意，如果master上在B以后没有新提交，那么就还是用原来的B作为基，rebase操作相当于无效，此时和git merge就基本没区别了，差异只在于git merge会多一条记录Merge操作的提交记录）</p>\n<h3 id=\"2-冲突解决\"><a href=\"#2-冲突解决\" class=\"headerlink\" title=\"2.冲突解决\"></a>2.冲突解决</h3><p>在 <code>rebase</code> 的过程中，也许会出现冲突 <code>conflict</code>。在这种情况，<code>git</code> 会停止 <code>rebase</code> 并会让你去解决冲突。在解决完冲突后，用 <code>git add</code> 命令去更新这些内容。</p>\n<p>注意，你无需执行 git-commit，只要执行 continue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --continue</span><br></pre></td></tr></table></figure>\n\n<p>这样 <code>git</code> 会继续应用余下的 <code>patch</code> 补丁文件。</p>\n<p>在任何时候，我们都可以用 <code>--abort</code> 参数来终止 <code>rebase</code> 的行动，并且分支会回到 <code>rebase</code> 开始前的状态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase —abort</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-实际git提交示例\"><a href=\"#3-实际git提交示例\" class=\"headerlink\" title=\"3.实际git提交示例\"></a>3.实际git提交示例</h3><p>这里严格按照上面的图解，构造了实际的git提交示例（注意，这里重新贴了新图，之前的图逻辑上还是不够清晰）</p>\n<p>如下图所示，ABM是master分支线，ABCD是feature分支线。</p>\n<p><img src=\"/media/3c5b8613a9e440fdbee8274d463a6427.png\"></p>\n<p>此时，在feature分支上执行git rebase master后，会提示有冲突，这里是关键，之前没有把这个细节说清楚。冲突其实也简单，因为我们要生成新的C’和D’嘛，那C’的内容如何得到呢？照搬C的？当然不是，C’的内容就是C和M两个节点的内容合并的结果，D’的内容就是D和M两个节点的内容合并的结果。我们手动处理冲突后，执行如下命令即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先处理完C，会继续报D的冲突，所以下面命令一共会执行两次</span><br><span class=\"line\">git add file</span><br><span class=\"line\">git rebase --continue</span><br></pre></td></tr></table></figure>\n\n<p>变基完成以后如下图所示，ABM还是没变化，ABMC’D’是rebase完成后的feature节点图，私以为讲到这里就还是比较清楚了</p>\n<p><img src=\"/media/19a206038ee44136a2713e8809b6a870.png\"></p>\n<h2 id=\"other：git-rebase-和-git-pull-–rebase\"><a href=\"#other：git-rebase-和-git-pull-–rebase\" class=\"headerlink\" title=\"other：git rebase 和 git pull –rebase\"></a>other：git rebase 和 git pull –rebase</h2><h4 id=\"切分支开发与合并分支\"><a href=\"#切分支开发与合并分支\" class=\"headerlink\" title=\"切分支开发与合并分支\"></a>切分支开发与合并分支</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#你在本地local分支（并没有远程对应,纯粹是本地开发使用），切回主分支，更新master</span><br><span class=\"line\">git checkout master </span><br><span class=\"line\">#更新master代码</span><br><span class=\"line\">git pull</span><br><span class=\"line\">#切回去</span><br><span class=\"line\">git checkout local</span><br><span class=\"line\"></span><br><span class=\"line\">#关键的来了，这个时候，把代码变基到最新的上面。</span><br><span class=\"line\">git rebase master  ----&gt;解决冲突---&gt;git rebase --continue</span><br><span class=\"line\"># 搞完以后，切回主分支</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"># 把local的改动，全部合并到master这边来</span><br><span class=\"line\">git merge local</span><br><span class=\"line\">#提交</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h5 id=\"它完全遵循了git的标准规范来开发代码\"><a href=\"#它完全遵循了git的标准规范来开发代码\" class=\"headerlink\" title=\"它完全遵循了git的标准规范来开发代码\"></a>它完全遵循了git的标准规范来开发代码</h5></blockquote>\n<p><strong>我们就知道区别了</strong>：<br>pull –rebase是为了直接将远程的代码与本地（因为你就在远程分支下开发的）整合；而rebase的一套操作是为了本地额外分支与远程分支的，整合。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://blog.csdn.net/small_white_123/article/details/121563248?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-121563248-blog-119004977.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-121563248-blog-119004977.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=9\">git rebase的两种用法(最全)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42310154/article/details/119004977\">git rebase详解（图解+最简单示例，一次就懂）</a></p>\n<p><a href=\"https://blog.csdn.net/m0_69424697/article/details/125106290\">git rebase超详细解读</a></p>\n<p><a href=\"https://blog.csdn.net/jzlhll123/article/details/119776702\">git rebase和add -p和git pull –rebase记录</a></p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-8.png","cover_type":"img","excerpt":"","more":"<h1 id=\"git-rebase的两种用法\"><a href=\"#git-rebase的两种用法\" class=\"headerlink\" title=\"git rebase的两种用法\"></a>git rebase的两种用法</h1><h2 id=\"用法一-合并当前分支的多个commit记录\"><a href=\"#用法一-合并当前分支的多个commit记录\" class=\"headerlink\" title=\"用法一: 合并当前分支的多个commit记录\"></a>用法一: 合并当前分支的多个commit记录</h2><p>你可能出现过对同一处代码进行多次处理的场景。这会导致如下提交记录:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=format:&#x27;%h: %s&#x27;</span><br><span class=\"line\">d2399da: feat: modify c</span><br><span class=\"line\">0134695: feat: modify b</span><br><span class=\"line\">eb63848: feat: modify b</span><br><span class=\"line\">51c0bca: feat: modify b</span><br><span class=\"line\">4cb600e: feat: modify a</span><br><span class=\"line\">d29f331: Initial commit</span><br></pre></td></tr></table></figure>\n\n<p>其实, 中间的对b的3次提交 完全可以合并成一次commit, 这个时候 rebase就很有用了。</p>\n<h3 id=\"1-找到想要合并的commit-使用rebase-i\"><a href=\"#1-找到想要合并的commit-使用rebase-i\" class=\"headerlink\" title=\"1. 找到想要合并的commit, 使用rebase -i\"></a>1. 找到想要合并的commit, 使用rebase -i</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i 4cb600e</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意 git rebase -i [startPonit] [endPoint]</strong></p>\n<p>前开后闭 区间 这里的 [startPonit] 是指需要合并的commit的前一个commit (即当前示例中的 “4cb600e: feat: modify a”)。 因为, 三个commit肯定要基于上一个commit合并成了新的commit。<br>谨慎使用[endPoint] 省略, 即默认表示从起始commit一直到最后一个，但是一旦你填写了, <strong>则表示 [endPoint]后面的commit全部不要了!</strong></p>\n<h3 id=\"2-进入Interact交互界面\"><a href=\"#2-进入Interact交互界面\" class=\"headerlink\" title=\"2. 进入Interact交互界面\"></a>2. 进入Interact交互界面</h3><p>终端会进入选择交互界面, 让你进行变基选择操作:</p>\n<p><img src=\"/media/47e2a05c214d49f7bbe30c7d58bcd331.png\"></p>\n<ul>\n<li>最上面三行, 就是刚刚选中的三个commit, 按时间顺序依次往下排序（时间最老的在上面）(<strong>和git log的展示顺序是反的, 大家查看的时候要注意</strong>)</li>\n<li>前面的三个Pick 其实就是下面 <strong>Commands展示的7种命令中的第一个p</strong>, 也就是使用commit。</li>\n</ul>\n<h3 id=\"3-使用s命令合并到上一个commit\"><a href=\"#3-使用s命令合并到上一个commit\" class=\"headerlink\" title=\"3.使用s命令合并到上一个commit\"></a>3.使用s命令合并到上一个commit</h3><ol>\n<li>按i 进入操作, 将<strong>第二、三个commit的pick改成s</strong></li>\n<li>按Esc 退出操作</li>\n<li>输入:wq保存并退出</li>\n</ol>\n<p><img src=\"/media/c98f8577d9e440afacc1f33900f90835.png\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><strong>命令</strong></th>\n<th align=\"center\"><strong>缩写</strong></th>\n<th align=\"center\"><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">pick</td>\n<td align=\"center\">p</td>\n<td align=\"center\">保留该commit</td>\n</tr>\n<tr>\n<td align=\"center\">reword</td>\n<td align=\"center\">r</td>\n<td align=\"center\">保留该commit，但需要修改该commit的注释</td>\n</tr>\n<tr>\n<td align=\"center\">edit</td>\n<td align=\"center\">e</td>\n<td align=\"center\">保留该commit, 但我要停下来修改该提交(不仅仅修改注释)</td>\n</tr>\n<tr>\n<td align=\"center\">squash</td>\n<td align=\"center\">s</td>\n<td align=\"center\">将该commit合并到前一个commit</td>\n</tr>\n<tr>\n<td align=\"center\">fixup</td>\n<td align=\"center\">f</td>\n<td align=\"center\">将该commit合并到前一个commit，但不要保留该提交的注释信息</td>\n</tr>\n<tr>\n<td align=\"center\">exec</td>\n<td align=\"center\">x</td>\n<td align=\"center\">执行shell命令</td>\n</tr>\n<tr>\n<td align=\"center\">drop</td>\n<td align=\"center\">d</td>\n<td align=\"center\">丢弃该commit</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-修改commit记录\"><a href=\"#4-修改commit记录\" class=\"headerlink\" title=\"4.修改commit记录\"></a>4.修改commit记录</h3><p><img src=\"/media/ea41ef6e45a44d1780182e7f1f483c60.png\"></p>\n<p>这里三个信息都是一样的, 我们选用第一个的提交信息, 将其余的全部注释掉,重复上述步骤, 保存退出即可</p>\n<p><img src=\"/media/474feca2a40949c0a9dc579122ef4ece.png\"></p>\n<h3 id=\"5-查看最新合并情况\"><a href=\"#5-查看最新合并情况\" class=\"headerlink\" title=\"5.查看最新合并情况\"></a>5.查看最新合并情况</h3><p>会发现原三个一样的提交现在合并成了一个新的commit。</p>\n<p><img src=\"/media/1303dcff987147d79a1340c6abe0233e.png\"></p>\n<h2 id=\"用法二-避免出现分叉合并\"><a href=\"#用法二-避免出现分叉合并\" class=\"headerlink\" title=\"用法二: 避免出现分叉合并\"></a>用法二: 避免出现分叉合并</h2><h3 id=\"1-原理介绍\"><a href=\"#1-原理介绍\" class=\"headerlink\" title=\"1.原理介绍\"></a>1.原理介绍</h3><p>首先通过简单的提交节点图解感受一下rebase在干什么</p>\n<p>构造两个分支master和feature，其中feature是在提交点B处从master上拉出的分支</p>\n<p>master上有一个新提交M，feature上有两个新提交C和D</p>\n<p><img src=\"/media/36efc2704d174acab598c4b9addd3694.png\"></p>\n<p>此时我们切换到feature分支上，执行rebase命令，相当于是想要把master分支合并到feature分支（这一步的场景就可以类比为我们在自己的分支feature上开发了一段时间了，准备从主干master上拉一下最新改动。模拟了git pull –rebase的情形）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这两条命令等价于git rebase master feature</span><br><span class=\"line\">git checkout feature</span><br><span class=\"line\">git rebase master</span><br></pre></td></tr></table></figure>\n\n<p>下图为变基后的提交节点图，解释一下其工作原理：</p>\n<p><img src=\"/media/12b959efcc454da5a15b9fdec493d61b.png\"></p>\n<ul>\n<li>feature：待变基分支、当前分支</li>\n<li>master：基分支、目标分支</li>\n</ul>\n<h4 id=\"官方原文解释：\"><a href=\"#官方原文解释：\" class=\"headerlink\" title=\"官方原文解释：\"></a>官方原文解释：</h4><p>当执行rebase操作时，git会从两个分支的共同祖先开始提取待变基分支上的修改，然后将待变基分支指向基分支的最新提交，最后将刚才提取的修改应用到基分支的最新提交的后面。</p>\n<h4 id=\"结合例子解释：\"><a href=\"#结合例子解释：\" class=\"headerlink\" title=\"结合例子解释：\"></a>结合例子解释：</h4><p>当在feature分支上执行git rebase master时，git会从master和featuer的共同祖先B开始提取feature分支上的修改，也就是C和D两个提交，先提取到。然后将feature分支指向master分支的最新提交上，也就是M。最后把提取的C和D接到M后面，注意这里的接法，官方没说清楚，实际是会依次拿M和C、D内容分别比较，处理冲突后生成新的C’和D’。一定注意，这里新C’、D’和之前的C、D已经不一样了，是我们处理冲突后的新内容，feature指针自然最后也是指向D’</p>\n<h4 id=\"通俗解释：\"><a href=\"#通俗解释：\" class=\"headerlink\" title=\"通俗解释：\"></a>通俗解释：</h4><p>rebase，变基，可以直接理解为改变基底。feature分支是基于master分支的B拉出来的分支，feature的基底是B。而master在B之后有新的提交，就相当于此时要用master上新的提交来作为feature分支的新基底。实际操作为把B之后feature的提交先暂存下来，然后删掉原来这些提交，再找到master的最新提交位置，把存下来的提交再接上去（接上去是逐个和新基底处理冲突的过程），如此feature分支的基底就相当于变成了M而不是原来的B了。（注意，如果master上在B以后没有新提交，那么就还是用原来的B作为基，rebase操作相当于无效，此时和git merge就基本没区别了，差异只在于git merge会多一条记录Merge操作的提交记录）</p>\n<h3 id=\"2-冲突解决\"><a href=\"#2-冲突解决\" class=\"headerlink\" title=\"2.冲突解决\"></a>2.冲突解决</h3><p>在 <code>rebase</code> 的过程中，也许会出现冲突 <code>conflict</code>。在这种情况，<code>git</code> 会停止 <code>rebase</code> 并会让你去解决冲突。在解决完冲突后，用 <code>git add</code> 命令去更新这些内容。</p>\n<p>注意，你无需执行 git-commit，只要执行 continue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --continue</span><br></pre></td></tr></table></figure>\n\n<p>这样 <code>git</code> 会继续应用余下的 <code>patch</code> 补丁文件。</p>\n<p>在任何时候，我们都可以用 <code>--abort</code> 参数来终止 <code>rebase</code> 的行动，并且分支会回到 <code>rebase</code> 开始前的状态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase —abort</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-实际git提交示例\"><a href=\"#3-实际git提交示例\" class=\"headerlink\" title=\"3.实际git提交示例\"></a>3.实际git提交示例</h3><p>这里严格按照上面的图解，构造了实际的git提交示例（注意，这里重新贴了新图，之前的图逻辑上还是不够清晰）</p>\n<p>如下图所示，ABM是master分支线，ABCD是feature分支线。</p>\n<p><img src=\"/media/3c5b8613a9e440fdbee8274d463a6427.png\"></p>\n<p>此时，在feature分支上执行git rebase master后，会提示有冲突，这里是关键，之前没有把这个细节说清楚。冲突其实也简单，因为我们要生成新的C’和D’嘛，那C’的内容如何得到呢？照搬C的？当然不是，C’的内容就是C和M两个节点的内容合并的结果，D’的内容就是D和M两个节点的内容合并的结果。我们手动处理冲突后，执行如下命令即可：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 先处理完C，会继续报D的冲突，所以下面命令一共会执行两次</span><br><span class=\"line\">git add file</span><br><span class=\"line\">git rebase --continue</span><br></pre></td></tr></table></figure>\n\n<p>变基完成以后如下图所示，ABM还是没变化，ABMC’D’是rebase完成后的feature节点图，私以为讲到这里就还是比较清楚了</p>\n<p><img src=\"/media/19a206038ee44136a2713e8809b6a870.png\"></p>\n<h2 id=\"other：git-rebase-和-git-pull-–rebase\"><a href=\"#other：git-rebase-和-git-pull-–rebase\" class=\"headerlink\" title=\"other：git rebase 和 git pull –rebase\"></a>other：git rebase 和 git pull –rebase</h2><h4 id=\"切分支开发与合并分支\"><a href=\"#切分支开发与合并分支\" class=\"headerlink\" title=\"切分支开发与合并分支\"></a>切分支开发与合并分支</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#你在本地local分支（并没有远程对应,纯粹是本地开发使用），切回主分支，更新master</span><br><span class=\"line\">git checkout master </span><br><span class=\"line\">#更新master代码</span><br><span class=\"line\">git pull</span><br><span class=\"line\">#切回去</span><br><span class=\"line\">git checkout local</span><br><span class=\"line\"></span><br><span class=\"line\">#关键的来了，这个时候，把代码变基到最新的上面。</span><br><span class=\"line\">git rebase master  ----&gt;解决冲突---&gt;git rebase --continue</span><br><span class=\"line\"># 搞完以后，切回主分支</span><br><span class=\"line\">git checkout master</span><br><span class=\"line\"># 把local的改动，全部合并到master这边来</span><br><span class=\"line\">git merge local</span><br><span class=\"line\">#提交</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h5 id=\"它完全遵循了git的标准规范来开发代码\"><a href=\"#它完全遵循了git的标准规范来开发代码\" class=\"headerlink\" title=\"它完全遵循了git的标准规范来开发代码\"></a>它完全遵循了git的标准规范来开发代码</h5></blockquote>\n<p><strong>我们就知道区别了</strong>：<br>pull –rebase是为了直接将远程的代码与本地（因为你就在远程分支下开发的）整合；而rebase的一套操作是为了本地额外分支与远程分支的，整合。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://blog.csdn.net/small_white_123/article/details/121563248?spm=1001.2101.3001.6650.5&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-121563248-blog-119004977.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-5-121563248-blog-119004977.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=9\">git rebase的两种用法(最全)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42310154/article/details/119004977\">git rebase详解（图解+最简单示例，一次就懂）</a></p>\n<p><a href=\"https://blog.csdn.net/m0_69424697/article/details/125106290\">git rebase超详细解读</a></p>\n<p><a href=\"https://blog.csdn.net/jzlhll123/article/details/119776702\">git rebase和add -p和git pull –rebase记录</a></p>\n"},{"title":"ros查看ZED节点效果","date":"2023-08-25T08:54:21.188Z","description":null,"top_img":false,"_content":"\n# ros查看ZED节点效果\n\n\n\n```shell\nroslaunch zed_wrapper zed2.launch\n\nrqt_image_view\n```\n\n\n","source":"_posts/command/ROS查看ZED节点效果.md","raw":"---\ntitle: ros查看ZED节点效果\ndate:\ntags: \n- ROS\ncategories:\n- command\ndescription:\ntop_img: false\n\n---\n\n# ros查看ZED节点效果\n\n\n\n```shell\nroslaunch zed_wrapper zed2.launch\n\nrqt_image_view\n```\n\n\n","slug":"command/ROS查看ZED节点效果","published":1,"updated":"2023-08-25T09:07:35.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67f004kgcr75c7l4pu1","content":"<h1 id=\"ros查看ZED节点效果\"><a href=\"#ros查看ZED节点效果\" class=\"headerlink\" title=\"ros查看ZED节点效果\"></a>ros查看ZED节点效果</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch zed_wrapper zed2.launch</span><br><span class=\"line\"></span><br><span class=\"line\">rqt_image_view</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-10.png","cover_type":"img","excerpt":"","more":"<h1 id=\"ros查看ZED节点效果\"><a href=\"#ros查看ZED节点效果\" class=\"headerlink\" title=\"ros查看ZED节点效果\"></a>ros查看ZED节点效果</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch zed_wrapper zed2.launch</span><br><span class=\"line\"></span><br><span class=\"line\">rqt_image_view</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"Ubuntu18.04环境配置","date":"2023-08-25T09:26:08.994Z","description":null,"top_img":false,"_content":"\n# Ubuntu18.04环境配置\n\n## 1.安装多版本gcc、g++可切换\n\n```\nsudo apt-get install gcc-4.8 gcc-4.8-multilib  \nsudo apt-get install g++-4.8 g++-4.8-multilib  \nsudo apt-get install gcc-5 gcc-5-multilib  \nsudo apt-get install g++-5 g++-5-multilib  \nsudo apt-get install gcc-6 gcc-6-multilib  \nsudo apt-get install g++-6 g++-6-multilib  \nsudo apt-get install gcc-7 gcc-7-multilib  \nsudo apt-get install g++-7 g++-7-multilib  \nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 48  \nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50  \nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60  \nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70  \nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 48  \nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 50  \nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 60  \nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 70  \n```\n\n### 切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择>=5的版本）：\n\n```\nsudo update-alternatives --config gcc  \nsudo update-alternatives --config g++\n```\n\n## 2.安装make：\n\n```\nsudo apt install make\n```\n\n## 3.安装cmake\n\n建议手动源码编译安装，选择高版本，后续很多库需要使用告版本cmake\n\n## 4.安装python和python3\n\n#### 安装依赖\n\n```\n$ sudo apt-get install -y nano curl\n# python3\n$ sudo apt-get install -y python3-pip python3-dev python3-setuptools\n# python2\n$ sudo apt-get install -y python-pip python-dev python-setuptools\n$ sudo apt-get install -y libcanberra-gtk0 libcanberra-gtk-module\n```\n\n#### 安装python-pip\n\n```\n# pip3\n$ pip3 install -U pip\n$ pip install -U pip\n# pip\n$ pip3 install setuptools wheel cython\n$ pip install setuptools wheel cython\n```\n\n#### 更改软链接\n\n```\n# python\n$ sudo rm -rf /usr/bin/python && sudo ln -s /usr/bin/python3 /usr/bin/python\n$ which python\n# pip\n$ sudo rm -rf /usr/bin/pip && sudo ln -s /usr/bin/pip3 /usr/bin/pip\n$ which pip\n```\n\n## 5.安装NVIDIA显卡驱动\n\n- #### 先把之前的nvidia卸载干净:\n\n```\nsudo apt-get remove --purge nvidia*\n```\n\n- #### 执行以下命令:\n\n```\nsudo apt-get update\n```\n\n- #### 查看本机显卡能够配置的驱动信息\n\n```\nubuntu-drivers devices\n```\n\n![](./media/41895494f7064942bc224d6b3783b77b.png)\n\n从上图可以看出，推荐安装的版本号是：**nvidia-driver-470 - distro non-free recommended**\n\n- #### 下载你想下载的nvidia驱动版本：\n\n```\nsudo apt install nvidia-driver-470\n```\n\n- #### 重启电脑(这一步很重要，不重启没有效果):\n\n```\nreboot\n```\n\n- #### 重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。\n\n```\nnvidia-smi\n```\n\n![](media/4e18cfce966b47a599ab6ae87e7cd069.png)\n\n如上显示，安装成功\n\n## 6.安装CUDA10.2\n\n![](media/4e18cfce966b47a599ab6ae87e7cd069.png)\n\n**这个图说明，我们可以安装11.4及比11.4低的版本。具体需要安装什么版本可以根据情况自己选择。**\n\n- #### 这里我们安装CUDA最新的10.2版本。进入Nvidia cuda下载地址：\n\n[Nvidia 10.2下载地址](https://developer.nvidia.com/cuda-10.2-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=deblocal)\n\n然后依次执行下述官方提供的7条命令：\n\n![](media/6a677661b9aa46c8919bafb2aa6fce52.png)\n\n```\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin\nsudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600\nwget https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb\nsudo dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb\nsudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub\nsudo apt-get update\nsudo apt-get -y install cuda\n```\n\n- #### 配置CUDA环境变量\n\n打开.bashrc\n\n```\ngedit ~/.bashrc\n```\n\n在.bashrc末尾添加两行环境变量\n\n```\nexport PATH=$PATH:/usr/local/cuda-10.2/bin\nexport LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}  #根据CUDA版本更换路径\n```\n\n最后，使环境变量生效\n\n```\nsource ~/.bashrc\n```\n\n- #### 测试是否安装成功\n\n```\nnvcc -V\n```\n\n> diyun@diyun:~$ nvcc -V\n> nvcc: NVIDIA ® Cuda compiler driver\n> Copyright © 2005-2019 NVIDIA Corporation\n> Built on Wed_Oct_23_19:24:38_PDT_2019\n> Cuda compilation tools, release 10.2, V10.2.89\n\n**出现如下字段则表示安装成功**\n\n## 7.cudnn8.2.2 安装\n\ncudnn下载地址：https://developer.nvidia.com/rdp/cudnn-archive\n\n- #### 需要提前注册，找到对应版本，下载cuDNN Library for Linux压缩包即可\n\n![](media/d4517e01d32c4567bd9327c728938916.png)\n\n- #### 解压压缩包，并终端进入文件夹，执行以下\n\n```\nsudo cp cuda/include/* -R /usr/local/cuda/include/ \nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ \nsudo chmod a+r /usr/local/cuda/include/cudnn.h \nsudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n```\n\n- #### 测试\n\n```\ncat /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2\n```\n\n![](media/91923e61b62c4872ab222d9b86800dbb.png)\n\n安装成功！\n\n## 8.待更新。。","source":"_posts/slam_config/Ubuntu18.04环境配置.md","raw":"---\ntitle: Ubuntu18.04环境配置\ndate:\ntags: \n- Ubuntu\n- Linux\ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# Ubuntu18.04环境配置\n\n## 1.安装多版本gcc、g++可切换\n\n```\nsudo apt-get install gcc-4.8 gcc-4.8-multilib  \nsudo apt-get install g++-4.8 g++-4.8-multilib  \nsudo apt-get install gcc-5 gcc-5-multilib  \nsudo apt-get install g++-5 g++-5-multilib  \nsudo apt-get install gcc-6 gcc-6-multilib  \nsudo apt-get install g++-6 g++-6-multilib  \nsudo apt-get install gcc-7 gcc-7-multilib  \nsudo apt-get install g++-7 g++-7-multilib  \nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 48  \nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50  \nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60  \nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70  \nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 48  \nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 50  \nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 60  \nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 70  \n```\n\n### 切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择>=5的版本）：\n\n```\nsudo update-alternatives --config gcc  \nsudo update-alternatives --config g++\n```\n\n## 2.安装make：\n\n```\nsudo apt install make\n```\n\n## 3.安装cmake\n\n建议手动源码编译安装，选择高版本，后续很多库需要使用告版本cmake\n\n## 4.安装python和python3\n\n#### 安装依赖\n\n```\n$ sudo apt-get install -y nano curl\n# python3\n$ sudo apt-get install -y python3-pip python3-dev python3-setuptools\n# python2\n$ sudo apt-get install -y python-pip python-dev python-setuptools\n$ sudo apt-get install -y libcanberra-gtk0 libcanberra-gtk-module\n```\n\n#### 安装python-pip\n\n```\n# pip3\n$ pip3 install -U pip\n$ pip install -U pip\n# pip\n$ pip3 install setuptools wheel cython\n$ pip install setuptools wheel cython\n```\n\n#### 更改软链接\n\n```\n# python\n$ sudo rm -rf /usr/bin/python && sudo ln -s /usr/bin/python3 /usr/bin/python\n$ which python\n# pip\n$ sudo rm -rf /usr/bin/pip && sudo ln -s /usr/bin/pip3 /usr/bin/pip\n$ which pip\n```\n\n## 5.安装NVIDIA显卡驱动\n\n- #### 先把之前的nvidia卸载干净:\n\n```\nsudo apt-get remove --purge nvidia*\n```\n\n- #### 执行以下命令:\n\n```\nsudo apt-get update\n```\n\n- #### 查看本机显卡能够配置的驱动信息\n\n```\nubuntu-drivers devices\n```\n\n![](./media/41895494f7064942bc224d6b3783b77b.png)\n\n从上图可以看出，推荐安装的版本号是：**nvidia-driver-470 - distro non-free recommended**\n\n- #### 下载你想下载的nvidia驱动版本：\n\n```\nsudo apt install nvidia-driver-470\n```\n\n- #### 重启电脑(这一步很重要，不重启没有效果):\n\n```\nreboot\n```\n\n- #### 重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。\n\n```\nnvidia-smi\n```\n\n![](media/4e18cfce966b47a599ab6ae87e7cd069.png)\n\n如上显示，安装成功\n\n## 6.安装CUDA10.2\n\n![](media/4e18cfce966b47a599ab6ae87e7cd069.png)\n\n**这个图说明，我们可以安装11.4及比11.4低的版本。具体需要安装什么版本可以根据情况自己选择。**\n\n- #### 这里我们安装CUDA最新的10.2版本。进入Nvidia cuda下载地址：\n\n[Nvidia 10.2下载地址](https://developer.nvidia.com/cuda-10.2-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=deblocal)\n\n然后依次执行下述官方提供的7条命令：\n\n![](media/6a677661b9aa46c8919bafb2aa6fce52.png)\n\n```\nwget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin\nsudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600\nwget https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb\nsudo dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb\nsudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub\nsudo apt-get update\nsudo apt-get -y install cuda\n```\n\n- #### 配置CUDA环境变量\n\n打开.bashrc\n\n```\ngedit ~/.bashrc\n```\n\n在.bashrc末尾添加两行环境变量\n\n```\nexport PATH=$PATH:/usr/local/cuda-10.2/bin\nexport LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}  #根据CUDA版本更换路径\n```\n\n最后，使环境变量生效\n\n```\nsource ~/.bashrc\n```\n\n- #### 测试是否安装成功\n\n```\nnvcc -V\n```\n\n> diyun@diyun:~$ nvcc -V\n> nvcc: NVIDIA ® Cuda compiler driver\n> Copyright © 2005-2019 NVIDIA Corporation\n> Built on Wed_Oct_23_19:24:38_PDT_2019\n> Cuda compilation tools, release 10.2, V10.2.89\n\n**出现如下字段则表示安装成功**\n\n## 7.cudnn8.2.2 安装\n\ncudnn下载地址：https://developer.nvidia.com/rdp/cudnn-archive\n\n- #### 需要提前注册，找到对应版本，下载cuDNN Library for Linux压缩包即可\n\n![](media/d4517e01d32c4567bd9327c728938916.png)\n\n- #### 解压压缩包，并终端进入文件夹，执行以下\n\n```\nsudo cp cuda/include/* -R /usr/local/cuda/include/ \nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ \nsudo chmod a+r /usr/local/cuda/include/cudnn.h \nsudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n```\n\n- #### 测试\n\n```\ncat /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2\n```\n\n![](media/91923e61b62c4872ab222d9b86800dbb.png)\n\n安装成功！\n\n## 8.待更新。。","slug":"slam_config/Ubuntu18.04环境配置","published":1,"updated":"2023-08-25T09:58:25.205Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67f004ngcr7as8k5q9o","content":"<h1 id=\"Ubuntu18-04环境配置\"><a href=\"#Ubuntu18-04环境配置\" class=\"headerlink\" title=\"Ubuntu18.04环境配置\"></a>Ubuntu18.04环境配置</h1><h2 id=\"1-安装多版本gcc、g-可切换\"><a href=\"#1-安装多版本gcc、g-可切换\" class=\"headerlink\" title=\"1.安装多版本gcc、g++可切换\"></a>1.安装多版本gcc、g++可切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc-4.8 gcc-4.8-multilib  </span><br><span class=\"line\">sudo apt-get install g++-4.8 g++-4.8-multilib  </span><br><span class=\"line\">sudo apt-get install gcc-5 gcc-5-multilib  </span><br><span class=\"line\">sudo apt-get install g++-5 g++-5-multilib  </span><br><span class=\"line\">sudo apt-get install gcc-6 gcc-6-multilib  </span><br><span class=\"line\">sudo apt-get install g++-6 g++-6-multilib  </span><br><span class=\"line\">sudo apt-get install gcc-7 gcc-7-multilib  </span><br><span class=\"line\">sudo apt-get install g++-7 g++-7-multilib  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 48  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 48  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 50  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 60  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 70  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择-5的版本）：\"><a href=\"#切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择-5的版本）：\" class=\"headerlink\" title=\"切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择&gt;&#x3D;5的版本）：\"></a>切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择&gt;&#x3D;5的版本）：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config gcc  </span><br><span class=\"line\">sudo update-alternatives --config g++</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装make：\"><a href=\"#2-安装make：\" class=\"headerlink\" title=\"2.安装make：\"></a>2.安装make：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install make</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装cmake\"><a href=\"#3-安装cmake\" class=\"headerlink\" title=\"3.安装cmake\"></a>3.安装cmake</h2><p>建议手动源码编译安装，选择高版本，后续很多库需要使用告版本cmake</p>\n<h2 id=\"4-安装python和python3\"><a href=\"#4-安装python和python3\" class=\"headerlink\" title=\"4.安装python和python3\"></a>4.安装python和python3</h2><h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y nano curl</span><br><span class=\"line\"># python3</span><br><span class=\"line\">$ sudo apt-get install -y python3-pip python3-dev python3-setuptools</span><br><span class=\"line\"># python2</span><br><span class=\"line\">$ sudo apt-get install -y python-pip python-dev python-setuptools</span><br><span class=\"line\">$ sudo apt-get install -y libcanberra-gtk0 libcanberra-gtk-module</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装python-pip\"><a href=\"#安装python-pip\" class=\"headerlink\" title=\"安装python-pip\"></a>安装python-pip</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pip3</span><br><span class=\"line\">$ pip3 install -U pip</span><br><span class=\"line\">$ pip install -U pip</span><br><span class=\"line\"># pip</span><br><span class=\"line\">$ pip3 install setuptools wheel cython</span><br><span class=\"line\">$ pip install setuptools wheel cython</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更改软链接\"><a href=\"#更改软链接\" class=\"headerlink\" title=\"更改软链接\"></a>更改软链接</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># python</span><br><span class=\"line\">$ sudo rm -rf /usr/bin/python &amp;&amp; sudo ln -s /usr/bin/python3 /usr/bin/python</span><br><span class=\"line\">$ which python</span><br><span class=\"line\"># pip</span><br><span class=\"line\">$ sudo rm -rf /usr/bin/pip &amp;&amp; sudo ln -s /usr/bin/pip3 /usr/bin/pip</span><br><span class=\"line\">$ which pip</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-安装NVIDIA显卡驱动\"><a href=\"#5-安装NVIDIA显卡驱动\" class=\"headerlink\" title=\"5.安装NVIDIA显卡驱动\"></a>5.安装NVIDIA显卡驱动</h2><ul>\n<li><h4 id=\"先把之前的nvidia卸载干净\"><a href=\"#先把之前的nvidia卸载干净\" class=\"headerlink\" title=\"先把之前的nvidia卸载干净:\"></a>先把之前的nvidia卸载干净:</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"执行以下命令\"><a href=\"#执行以下命令\" class=\"headerlink\" title=\"执行以下命令:\"></a>执行以下命令:</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"查看本机显卡能够配置的驱动信息\"><a href=\"#查看本机显卡能够配置的驱动信息\" class=\"headerlink\" title=\"查看本机显卡能够配置的驱动信息\"></a>查看本机显卡能够配置的驱动信息</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu-drivers devices</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./media/41895494f7064942bc224d6b3783b77b.png\"></p>\n<p>从上图可以看出，推荐安装的版本号是：<strong>nvidia-driver-470 - distro non-free recommended</strong></p>\n<ul>\n<li><h4 id=\"下载你想下载的nvidia驱动版本：\"><a href=\"#下载你想下载的nvidia驱动版本：\" class=\"headerlink\" title=\"下载你想下载的nvidia驱动版本：\"></a>下载你想下载的nvidia驱动版本：</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nvidia-driver-470</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"重启电脑-这一步很重要，不重启没有效果\"><a href=\"#重启电脑-这一步很重要，不重启没有效果\" class=\"headerlink\" title=\"重启电脑(这一步很重要，不重启没有效果):\"></a>重启电脑(这一步很重要，不重启没有效果):</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。\"><a href=\"#重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。\" class=\"headerlink\" title=\"重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。\"></a>重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/4e18cfce966b47a599ab6ae87e7cd069.png\"></p>\n<p>如上显示，安装成功</p>\n<h2 id=\"6-安装CUDA10-2\"><a href=\"#6-安装CUDA10-2\" class=\"headerlink\" title=\"6.安装CUDA10.2\"></a>6.安装CUDA10.2</h2><p><img src=\"/media/4e18cfce966b47a599ab6ae87e7cd069.png\"></p>\n<p><strong>这个图说明，我们可以安装11.4及比11.4低的版本。具体需要安装什么版本可以根据情况自己选择。</strong></p>\n<ul>\n<li><h4 id=\"这里我们安装CUDA最新的10-2版本。进入Nvidia-cuda下载地址：\"><a href=\"#这里我们安装CUDA最新的10-2版本。进入Nvidia-cuda下载地址：\" class=\"headerlink\" title=\"这里我们安装CUDA最新的10.2版本。进入Nvidia cuda下载地址：\"></a>这里我们安装CUDA最新的10.2版本。进入Nvidia cuda下载地址：</h4></li>\n</ul>\n<p><a href=\"https://developer.nvidia.com/cuda-10.2-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=deblocal\">Nvidia 10.2下载地址</a></p>\n<p>然后依次执行下述官方提供的7条命令：</p>\n<p><img src=\"/media/6a677661b9aa46c8919bafb2aa6fce52.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin</span><br><span class=\"line\">sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class=\"line\">wget https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class=\"line\">sudo dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class=\"line\">sudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y install cuda</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"配置CUDA环境变量\"><a href=\"#配置CUDA环境变量\" class=\"headerlink\" title=\"配置CUDA环境变量\"></a>配置CUDA环境变量</h4></li>\n</ul>\n<p>打开.bashrc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gedit ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>在.bashrc末尾添加两行环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/cuda-10.2/bin</span><br><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;  #根据CUDA版本更换路径</span><br></pre></td></tr></table></figure>\n\n<p>最后，使环境变量生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"测试是否安装成功\"><a href=\"#测试是否安装成功\" class=\"headerlink\" title=\"测试是否安装成功\"></a>测试是否安装成功</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>diyun@diyun:~$ nvcc -V<br>nvcc: NVIDIA ® Cuda compiler driver<br>Copyright © 2005-2019 NVIDIA Corporation<br>Built on Wed_Oct_23_19:24:38_PDT_2019<br>Cuda compilation tools, release 10.2, V10.2.89</p>\n</blockquote>\n<p><strong>出现如下字段则表示安装成功</strong></p>\n<h2 id=\"7-cudnn8-2-2-安装\"><a href=\"#7-cudnn8-2-2-安装\" class=\"headerlink\" title=\"7.cudnn8.2.2 安装\"></a>7.cudnn8.2.2 安装</h2><p>cudnn下载地址：<a href=\"https://developer.nvidia.com/rdp/cudnn-archive\">https://developer.nvidia.com/rdp/cudnn-archive</a></p>\n<ul>\n<li><h4 id=\"需要提前注册，找到对应版本，下载cuDNN-Library-for-Linux压缩包即可\"><a href=\"#需要提前注册，找到对应版本，下载cuDNN-Library-for-Linux压缩包即可\" class=\"headerlink\" title=\"需要提前注册，找到对应版本，下载cuDNN Library for Linux压缩包即可\"></a>需要提前注册，找到对应版本，下载cuDNN Library for Linux压缩包即可</h4></li>\n</ul>\n<p><img src=\"/media/d4517e01d32c4567bd9327c728938916.png\"></p>\n<ul>\n<li><h4 id=\"解压压缩包，并终端进入文件夹，执行以下\"><a href=\"#解压压缩包，并终端进入文件夹，执行以下\" class=\"headerlink\" title=\"解压压缩包，并终端进入文件夹，执行以下\"></a>解压压缩包，并终端进入文件夹，执行以下</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp cuda/include/* -R /usr/local/cuda/include/ </span><br><span class=\"line\">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ </span><br><span class=\"line\">sudo chmod a+r /usr/local/cuda/include/cudnn.h </span><br><span class=\"line\">sudo chmod a+r /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/91923e61b62c4872ab222d9b86800dbb.png\"></p>\n<p>安装成功！</p>\n<h2 id=\"8-待更新。。\"><a href=\"#8-待更新。。\" class=\"headerlink\" title=\"8.待更新。。\"></a>8.待更新。。</h2>","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-7.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Ubuntu18-04环境配置\"><a href=\"#Ubuntu18-04环境配置\" class=\"headerlink\" title=\"Ubuntu18.04环境配置\"></a>Ubuntu18.04环境配置</h1><h2 id=\"1-安装多版本gcc、g-可切换\"><a href=\"#1-安装多版本gcc、g-可切换\" class=\"headerlink\" title=\"1.安装多版本gcc、g++可切换\"></a>1.安装多版本gcc、g++可切换</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install gcc-4.8 gcc-4.8-multilib  </span><br><span class=\"line\">sudo apt-get install g++-4.8 g++-4.8-multilib  </span><br><span class=\"line\">sudo apt-get install gcc-5 gcc-5-multilib  </span><br><span class=\"line\">sudo apt-get install g++-5 g++-5-multilib  </span><br><span class=\"line\">sudo apt-get install gcc-6 gcc-6-multilib  </span><br><span class=\"line\">sudo apt-get install g++-6 g++-6-multilib  </span><br><span class=\"line\">sudo apt-get install gcc-7 gcc-7-multilib  </span><br><span class=\"line\">sudo apt-get install g++-7 g++-7-multilib  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 48  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 50  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 48  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 50  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 60  </span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 70  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择-5的版本）：\"><a href=\"#切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择-5的版本）：\" class=\"headerlink\" title=\"切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择&gt;&#x3D;5的版本）：\"></a>切换版本命令，可根据自己想要的环境选择（后面安装显卡驱动需要选择&gt;&#x3D;5的版本）：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config gcc  </span><br><span class=\"line\">sudo update-alternatives --config g++</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装make：\"><a href=\"#2-安装make：\" class=\"headerlink\" title=\"2.安装make：\"></a>2.安装make：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install make</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装cmake\"><a href=\"#3-安装cmake\" class=\"headerlink\" title=\"3.安装cmake\"></a>3.安装cmake</h2><p>建议手动源码编译安装，选择高版本，后续很多库需要使用告版本cmake</p>\n<h2 id=\"4-安装python和python3\"><a href=\"#4-安装python和python3\" class=\"headerlink\" title=\"4.安装python和python3\"></a>4.安装python和python3</h2><h4 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install -y nano curl</span><br><span class=\"line\"># python3</span><br><span class=\"line\">$ sudo apt-get install -y python3-pip python3-dev python3-setuptools</span><br><span class=\"line\"># python2</span><br><span class=\"line\">$ sudo apt-get install -y python-pip python-dev python-setuptools</span><br><span class=\"line\">$ sudo apt-get install -y libcanberra-gtk0 libcanberra-gtk-module</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装python-pip\"><a href=\"#安装python-pip\" class=\"headerlink\" title=\"安装python-pip\"></a>安装python-pip</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># pip3</span><br><span class=\"line\">$ pip3 install -U pip</span><br><span class=\"line\">$ pip install -U pip</span><br><span class=\"line\"># pip</span><br><span class=\"line\">$ pip3 install setuptools wheel cython</span><br><span class=\"line\">$ pip install setuptools wheel cython</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更改软链接\"><a href=\"#更改软链接\" class=\"headerlink\" title=\"更改软链接\"></a>更改软链接</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># python</span><br><span class=\"line\">$ sudo rm -rf /usr/bin/python &amp;&amp; sudo ln -s /usr/bin/python3 /usr/bin/python</span><br><span class=\"line\">$ which python</span><br><span class=\"line\"># pip</span><br><span class=\"line\">$ sudo rm -rf /usr/bin/pip &amp;&amp; sudo ln -s /usr/bin/pip3 /usr/bin/pip</span><br><span class=\"line\">$ which pip</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-安装NVIDIA显卡驱动\"><a href=\"#5-安装NVIDIA显卡驱动\" class=\"headerlink\" title=\"5.安装NVIDIA显卡驱动\"></a>5.安装NVIDIA显卡驱动</h2><ul>\n<li><h4 id=\"先把之前的nvidia卸载干净\"><a href=\"#先把之前的nvidia卸载干净\" class=\"headerlink\" title=\"先把之前的nvidia卸载干净:\"></a>先把之前的nvidia卸载干净:</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove --purge nvidia*</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"执行以下命令\"><a href=\"#执行以下命令\" class=\"headerlink\" title=\"执行以下命令:\"></a>执行以下命令:</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"查看本机显卡能够配置的驱动信息\"><a href=\"#查看本机显卡能够配置的驱动信息\" class=\"headerlink\" title=\"查看本机显卡能够配置的驱动信息\"></a>查看本机显卡能够配置的驱动信息</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu-drivers devices</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./media/41895494f7064942bc224d6b3783b77b.png\"></p>\n<p>从上图可以看出，推荐安装的版本号是：<strong>nvidia-driver-470 - distro non-free recommended</strong></p>\n<ul>\n<li><h4 id=\"下载你想下载的nvidia驱动版本：\"><a href=\"#下载你想下载的nvidia驱动版本：\" class=\"headerlink\" title=\"下载你想下载的nvidia驱动版本：\"></a>下载你想下载的nvidia驱动版本：</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nvidia-driver-470</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"重启电脑-这一步很重要，不重启没有效果\"><a href=\"#重启电脑-这一步很重要，不重启没有效果\" class=\"headerlink\" title=\"重启电脑(这一步很重要，不重启没有效果):\"></a>重启电脑(这一步很重要，不重启没有效果):</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。\"><a href=\"#重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。\" class=\"headerlink\" title=\"重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。\"></a>重启后，输入命令查看nvidia驱动是否安装好了，gpu是否可用。</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/4e18cfce966b47a599ab6ae87e7cd069.png\"></p>\n<p>如上显示，安装成功</p>\n<h2 id=\"6-安装CUDA10-2\"><a href=\"#6-安装CUDA10-2\" class=\"headerlink\" title=\"6.安装CUDA10.2\"></a>6.安装CUDA10.2</h2><p><img src=\"/media/4e18cfce966b47a599ab6ae87e7cd069.png\"></p>\n<p><strong>这个图说明，我们可以安装11.4及比11.4低的版本。具体需要安装什么版本可以根据情况自己选择。</strong></p>\n<ul>\n<li><h4 id=\"这里我们安装CUDA最新的10-2版本。进入Nvidia-cuda下载地址：\"><a href=\"#这里我们安装CUDA最新的10-2版本。进入Nvidia-cuda下载地址：\" class=\"headerlink\" title=\"这里我们安装CUDA最新的10.2版本。进入Nvidia cuda下载地址：\"></a>这里我们安装CUDA最新的10.2版本。进入Nvidia cuda下载地址：</h4></li>\n</ul>\n<p><a href=\"https://developer.nvidia.com/cuda-10.2-download-archive?target_os=Linux&target_arch=x86_64&target_distro=Ubuntu&target_version=1804&target_type=deblocal\">Nvidia 10.2下载地址</a></p>\n<p>然后依次执行下述官方提供的7条命令：</p>\n<p><img src=\"/media/6a677661b9aa46c8919bafb2aa6fce52.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin</span><br><span class=\"line\">sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class=\"line\">wget https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class=\"line\">sudo dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class=\"line\">sudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y install cuda</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"配置CUDA环境变量\"><a href=\"#配置CUDA环境变量\" class=\"headerlink\" title=\"配置CUDA环境变量\"></a>配置CUDA环境变量</h4></li>\n</ul>\n<p>打开.bashrc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gedit ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>在.bashrc末尾添加两行环境变量</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/local/cuda-10.2/bin</span><br><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;  #根据CUDA版本更换路径</span><br></pre></td></tr></table></figure>\n\n<p>最后，使环境变量生效</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"测试是否安装成功\"><a href=\"#测试是否安装成功\" class=\"headerlink\" title=\"测试是否安装成功\"></a>测试是否安装成功</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvcc -V</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>diyun@diyun:~$ nvcc -V<br>nvcc: NVIDIA ® Cuda compiler driver<br>Copyright © 2005-2019 NVIDIA Corporation<br>Built on Wed_Oct_23_19:24:38_PDT_2019<br>Cuda compilation tools, release 10.2, V10.2.89</p>\n</blockquote>\n<p><strong>出现如下字段则表示安装成功</strong></p>\n<h2 id=\"7-cudnn8-2-2-安装\"><a href=\"#7-cudnn8-2-2-安装\" class=\"headerlink\" title=\"7.cudnn8.2.2 安装\"></a>7.cudnn8.2.2 安装</h2><p>cudnn下载地址：<a href=\"https://developer.nvidia.com/rdp/cudnn-archive\">https://developer.nvidia.com/rdp/cudnn-archive</a></p>\n<ul>\n<li><h4 id=\"需要提前注册，找到对应版本，下载cuDNN-Library-for-Linux压缩包即可\"><a href=\"#需要提前注册，找到对应版本，下载cuDNN-Library-for-Linux压缩包即可\" class=\"headerlink\" title=\"需要提前注册，找到对应版本，下载cuDNN Library for Linux压缩包即可\"></a>需要提前注册，找到对应版本，下载cuDNN Library for Linux压缩包即可</h4></li>\n</ul>\n<p><img src=\"/media/d4517e01d32c4567bd9327c728938916.png\"></p>\n<ul>\n<li><h4 id=\"解压压缩包，并终端进入文件夹，执行以下\"><a href=\"#解压压缩包，并终端进入文件夹，执行以下\" class=\"headerlink\" title=\"解压压缩包，并终端进入文件夹，执行以下\"></a>解压压缩包，并终端进入文件夹，执行以下</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp cuda/include/* -R /usr/local/cuda/include/ </span><br><span class=\"line\">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ </span><br><span class=\"line\">sudo chmod a+r /usr/local/cuda/include/cudnn.h </span><br><span class=\"line\">sudo chmod a+r /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/91923e61b62c4872ab222d9b86800dbb.png\"></p>\n<p>安装成功！</p>\n<h2 id=\"8-待更新。。\"><a href=\"#8-待更新。。\" class=\"headerlink\" title=\"8.待更新。。\"></a>8.待更新。。</h2>"},{"title":"git cherry-pick","date":"2023-08-25T08:54:21.153Z","description":null,"top_img":false,"_content":"\n# git cherry-pick\n\n## 前言\n\n对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。\n\n这时分两种情况。\n\n你需要另一个分支的所有代码变动，那么就采用合并（git merge）。\n你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。\nCherry pick直译为捡樱桃🍒，它的功能是把已经存在的commit进行挑选，然后重新提交。比较合适的一个场景是把A分支的某次或者多次的提交也提交到B分支上。\n\n## 图示\n\n比如此时分支情况如下：\n\n![](media/a7d7fe639765492abea6951ae25170c8.png)\n\n这幅图中，每个圆圈代表一次commit\n\n一条线是一个分支。\n\n比如c2，c3，这是两次提交，在同一个分支上。\n\n此时需求是：要把绿色分支的C3，蓝色分支的C5，紫色分支的C7合到一条新的分支上。\n\n此时就需要cherry-pick命令了。\n\n首先切到master分支，然后输入\n\ngit cherry-pick C3 C5 C7\n\n此时，分支图示就变成了：\n![](media/30f3d615cb354306a900383295ef8166.png)\n\n## 一、转移一个提交\n\n1. 先切换到 A 分支\n\n   ```git\n   $ git checkout A\n   ```\n\n2. 找到这次提交\n\n   ```\n      $ git log\n      commit f038d7ffb1685af7d4f870ad0b798670b6f760e8 (HEAD -> feature/0113_update)\n      Author: qxj <qxj@qq.com>\n      Date:   Thu Jan 14 15:24:54 2021 +0800\n      \n          feat: xxx\n   ```\n\n3. 再切换到B分支\n\n   ```\n   $ git checkout B\n   ```\n\n4. 把 A 分支下的这次commit 重新提交到 B 分支下\n\n   ```\n   $ git cherry-pick 'f038d7ffb1685af7d4f870ad0b798670b6f760e8'\n   ```\n\n当执行完 `git cherry-pick`以后，将会生成一个新的提交，这个新的提交的[hash](https://so.csdn.net/so/search?q=hash&spm=1001.2101.3001.7020)值和原来的不同，但标志名称一样。\n\n## 二、转移多个提交\n\nCherry pick 支持一次转移多个提交。\n\n```\n$ git cherry-pick <HashA> <HashB>\n```\n\n上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。\n\n如果想要转移一系列的连续提交，可以使用下面的简便语法。\n\n```\n$ git cherry-pick A..B \n```\n\n如果要包含提交 A，可以使用下面的语法。\n\n```\n$ git cherry-pick A^..B \n```\n\n## 三、配置项\n\ngit cherry-pick命令的常用配置项如下。\n\n##### （1）-e，--edit\n\n​\t打开外部编辑器，编辑提交信息。\n\n##### （2）-n，--no-commit\n\n​\t只更新工作区和暂存区，不产生新的提交。\n\n##### （3）-x\n\n​\t在提交信息的末尾追加一行(cherry picked from commit ...)，保留原提交者信息，方便以后查到这个提交是如何产生的。\n\n##### （4）-s，--signoff\n\n​\t在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。\n\n##### （5）-m parent-number，--mainline parent-number\n\n​\t如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。\n\n​\t-m配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。\n\n```\n$ git cherry-pick -m 1 <commitHash>\n```\n\n上面命令表示，Cherry pick 采用提交commitHash来自编号1的父分支的变动。\n\n一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。\n\n## 四、代码冲突\n\n如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。\n\n##### **（1）`--continue`**\n\n用户解决代码冲突后，第一步将修改的文件重新加入暂存区（`git add .`），第二步使用下面的命令，让 Cherry pick 过程继续执行。\n\n```\n$ git cherry-pick --continue\n```\n\n##### **（2）`--abort`**\n\n发生代码冲突后，放弃合并，回到操作前的样子。\n\n##### **（3）`--quit`**\n\n发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。\n\n#### 如果在真实的cherry-pick 的过程中出现了冲突\n\n```\n Automatic cherry-pick failed.\n After resolving the conflicts,mark the corrected paths with 'git add <paths>' or 'git rm <paths>'and commit the result with:\n git commit -c 15a2b6c61927e5aed6111de89ad9dafba939a90b\n // **或者:**\n error: could not apply f038d7f... dev\n hint: after resolving the conflicts, mark the corrected paths\n hint: with 'git add <paths>' or 'git rm <paths>'\n hint: and commit the result with 'git commit'\n```\n\n就跟普通的冲突一样，手工解决。\n\n```\n$ git status    # 看哪些文件出现冲突\n$ vim xxx.js  # 手动解决它。\n$ git add xxx.js\n\tor\n$ git add .\t\t\t# 添加到缓存区\n$ git commit -c <新的commit号码>\n```\n\n第二步使用下面的命令，让 Cherry pick 过程继续执行。\n\n```\ngit cherry-pick --continue\n```\n\n","source":"_posts/command/git_cherry-pick.md","raw":"---\ntitle: git cherry-pick\ndate:\ntags: \n- Git\ncategories:\n- command\ndescription:\ntop_img: false\n---\n\n# git cherry-pick\n\n## 前言\n\n对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。\n\n这时分两种情况。\n\n你需要另一个分支的所有代码变动，那么就采用合并（git merge）。\n你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。\nCherry pick直译为捡樱桃🍒，它的功能是把已经存在的commit进行挑选，然后重新提交。比较合适的一个场景是把A分支的某次或者多次的提交也提交到B分支上。\n\n## 图示\n\n比如此时分支情况如下：\n\n![](media/a7d7fe639765492abea6951ae25170c8.png)\n\n这幅图中，每个圆圈代表一次commit\n\n一条线是一个分支。\n\n比如c2，c3，这是两次提交，在同一个分支上。\n\n此时需求是：要把绿色分支的C3，蓝色分支的C5，紫色分支的C7合到一条新的分支上。\n\n此时就需要cherry-pick命令了。\n\n首先切到master分支，然后输入\n\ngit cherry-pick C3 C5 C7\n\n此时，分支图示就变成了：\n![](media/30f3d615cb354306a900383295ef8166.png)\n\n## 一、转移一个提交\n\n1. 先切换到 A 分支\n\n   ```git\n   $ git checkout A\n   ```\n\n2. 找到这次提交\n\n   ```\n      $ git log\n      commit f038d7ffb1685af7d4f870ad0b798670b6f760e8 (HEAD -> feature/0113_update)\n      Author: qxj <qxj@qq.com>\n      Date:   Thu Jan 14 15:24:54 2021 +0800\n      \n          feat: xxx\n   ```\n\n3. 再切换到B分支\n\n   ```\n   $ git checkout B\n   ```\n\n4. 把 A 分支下的这次commit 重新提交到 B 分支下\n\n   ```\n   $ git cherry-pick 'f038d7ffb1685af7d4f870ad0b798670b6f760e8'\n   ```\n\n当执行完 `git cherry-pick`以后，将会生成一个新的提交，这个新的提交的[hash](https://so.csdn.net/so/search?q=hash&spm=1001.2101.3001.7020)值和原来的不同，但标志名称一样。\n\n## 二、转移多个提交\n\nCherry pick 支持一次转移多个提交。\n\n```\n$ git cherry-pick <HashA> <HashB>\n```\n\n上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。\n\n如果想要转移一系列的连续提交，可以使用下面的简便语法。\n\n```\n$ git cherry-pick A..B \n```\n\n如果要包含提交 A，可以使用下面的语法。\n\n```\n$ git cherry-pick A^..B \n```\n\n## 三、配置项\n\ngit cherry-pick命令的常用配置项如下。\n\n##### （1）-e，--edit\n\n​\t打开外部编辑器，编辑提交信息。\n\n##### （2）-n，--no-commit\n\n​\t只更新工作区和暂存区，不产生新的提交。\n\n##### （3）-x\n\n​\t在提交信息的末尾追加一行(cherry picked from commit ...)，保留原提交者信息，方便以后查到这个提交是如何产生的。\n\n##### （4）-s，--signoff\n\n​\t在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。\n\n##### （5）-m parent-number，--mainline parent-number\n\n​\t如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。\n\n​\t-m配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。\n\n```\n$ git cherry-pick -m 1 <commitHash>\n```\n\n上面命令表示，Cherry pick 采用提交commitHash来自编号1的父分支的变动。\n\n一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。\n\n## 四、代码冲突\n\n如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。\n\n##### **（1）`--continue`**\n\n用户解决代码冲突后，第一步将修改的文件重新加入暂存区（`git add .`），第二步使用下面的命令，让 Cherry pick 过程继续执行。\n\n```\n$ git cherry-pick --continue\n```\n\n##### **（2）`--abort`**\n\n发生代码冲突后，放弃合并，回到操作前的样子。\n\n##### **（3）`--quit`**\n\n发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。\n\n#### 如果在真实的cherry-pick 的过程中出现了冲突\n\n```\n Automatic cherry-pick failed.\n After resolving the conflicts,mark the corrected paths with 'git add <paths>' or 'git rm <paths>'and commit the result with:\n git commit -c 15a2b6c61927e5aed6111de89ad9dafba939a90b\n // **或者:**\n error: could not apply f038d7f... dev\n hint: after resolving the conflicts, mark the corrected paths\n hint: with 'git add <paths>' or 'git rm <paths>'\n hint: and commit the result with 'git commit'\n```\n\n就跟普通的冲突一样，手工解决。\n\n```\n$ git status    # 看哪些文件出现冲突\n$ vim xxx.js  # 手动解决它。\n$ git add xxx.js\n\tor\n$ git add .\t\t\t# 添加到缓存区\n$ git commit -c <新的commit号码>\n```\n\n第二步使用下面的命令，让 Cherry pick 过程继续执行。\n\n```\ngit cherry-pick --continue\n```\n\n","slug":"command/git_cherry-pick","published":1,"updated":"2023-08-25T08:58:39.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67g004rgcr75gq8gje1","content":"<h1 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。</p>\n<p>这时分两种情况。</p>\n<p>你需要另一个分支的所有代码变动，那么就采用合并（git merge）。<br>你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。<br>Cherry pick直译为捡樱桃🍒，它的功能是把已经存在的commit进行挑选，然后重新提交。比较合适的一个场景是把A分支的某次或者多次的提交也提交到B分支上。</p>\n<h2 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h2><p>比如此时分支情况如下：</p>\n<p><img src=\"/media/a7d7fe639765492abea6951ae25170c8.png\"></p>\n<p>这幅图中，每个圆圈代表一次commit</p>\n<p>一条线是一个分支。</p>\n<p>比如c2，c3，这是两次提交，在同一个分支上。</p>\n<p>此时需求是：要把绿色分支的C3，蓝色分支的C5，紫色分支的C7合到一条新的分支上。</p>\n<p>此时就需要cherry-pick命令了。</p>\n<p>首先切到master分支，然后输入</p>\n<p>git cherry-pick C3 C5 C7</p>\n<p>此时，分支图示就变成了：<br><img src=\"/media/30f3d615cb354306a900383295ef8166.png\"></p>\n<h2 id=\"一、转移一个提交\"><a href=\"#一、转移一个提交\" class=\"headerlink\" title=\"一、转移一个提交\"></a>一、转移一个提交</h2><ol>\n<li><p>先切换到 A 分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到这次提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit f038d7ffb1685af7d4f870ad0b798670b6f760e8 (HEAD -&gt; feature/0113_update)</span><br><span class=\"line\">Author: qxj &lt;qxj@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Jan 14 15:24:54 2021 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    feat: xxx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再切换到B分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout B</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把 A 分支下的这次commit 重新提交到 B 分支下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick &#x27;f038d7ffb1685af7d4f870ad0b798670b6f760e8&#x27;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>当执行完 <code>git cherry-pick</code>以后，将会生成一个新的提交，这个新的提交的<a href=\"https://so.csdn.net/so/search?q=hash&spm=1001.2101.3001.7020\">hash</a>值和原来的不同，但标志名称一样。</p>\n<h2 id=\"二、转移多个提交\"><a href=\"#二、转移多个提交\" class=\"headerlink\" title=\"二、转移多个提交\"></a>二、转移多个提交</h2><p>Cherry pick 支持一次转移多个提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick &lt;HashA&gt; &lt;HashB&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。</p>\n<p>如果想要转移一系列的连续提交，可以使用下面的简便语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick A..B </span><br></pre></td></tr></table></figure>\n\n<p>如果要包含提交 A，可以使用下面的语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick A^..B </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、配置项\"><a href=\"#三、配置项\" class=\"headerlink\" title=\"三、配置项\"></a>三、配置项</h2><p>git cherry-pick命令的常用配置项如下。</p>\n<h5 id=\"（1）-e，–edit\"><a href=\"#（1）-e，–edit\" class=\"headerlink\" title=\"（1）-e，–edit\"></a>（1）-e，–edit</h5><p>​\t打开外部编辑器，编辑提交信息。</p>\n<h5 id=\"（2）-n，–no-commit\"><a href=\"#（2）-n，–no-commit\" class=\"headerlink\" title=\"（2）-n，–no-commit\"></a>（2）-n，–no-commit</h5><p>​\t只更新工作区和暂存区，不产生新的提交。</p>\n<h5 id=\"（3）-x\"><a href=\"#（3）-x\" class=\"headerlink\" title=\"（3）-x\"></a>（3）-x</h5><p>​\t在提交信息的末尾追加一行(cherry picked from commit …)，保留原提交者信息，方便以后查到这个提交是如何产生的。</p>\n<h5 id=\"（4）-s，–signoff\"><a href=\"#（4）-s，–signoff\" class=\"headerlink\" title=\"（4）-s，–signoff\"></a>（4）-s，–signoff</h5><p>​\t在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。</p>\n<h5 id=\"（5）-m-parent-number，–mainline-parent-number\"><a href=\"#（5）-m-parent-number，–mainline-parent-number\" class=\"headerlink\" title=\"（5）-m parent-number，–mainline parent-number\"></a>（5）-m parent-number，–mainline parent-number</h5><p>​\t如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。</p>\n<p>​\t-m配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick -m 1 &lt;commitHash&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，Cherry pick 采用提交commitHash来自编号1的父分支的变动。</p>\n<p>一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。</p>\n<h2 id=\"四、代码冲突\"><a href=\"#四、代码冲突\" class=\"headerlink\" title=\"四、代码冲突\"></a>四、代码冲突</h2><p>如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。</p>\n<h5 id=\"（1）-continue\"><a href=\"#（1）-continue\" class=\"headerlink\" title=\"（1）--continue\"></a><strong>（1）<code>--continue</code></strong></h5><p>用户解决代码冲突后，第一步将修改的文件重新加入暂存区（<code>git add .</code>），第二步使用下面的命令，让 Cherry pick 过程继续执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick --continue</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（2）-abort\"><a href=\"#（2）-abort\" class=\"headerlink\" title=\"（2）--abort\"></a><strong>（2）<code>--abort</code></strong></h5><p>发生代码冲突后，放弃合并，回到操作前的样子。</p>\n<h5 id=\"（3）-quit\"><a href=\"#（3）-quit\" class=\"headerlink\" title=\"（3）--quit\"></a><strong>（3）<code>--quit</code></strong></h5><p>发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。</p>\n<h4 id=\"如果在真实的cherry-pick-的过程中出现了冲突\"><a href=\"#如果在真实的cherry-pick-的过程中出现了冲突\" class=\"headerlink\" title=\"如果在真实的cherry-pick 的过程中出现了冲突\"></a>如果在真实的cherry-pick 的过程中出现了冲突</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Automatic cherry-pick failed.</span><br><span class=\"line\">After resolving the conflicts,mark the corrected paths with &#x27;git add &lt;paths&gt;&#x27; or &#x27;git rm &lt;paths&gt;&#x27;and commit the result with:</span><br><span class=\"line\">git commit -c 15a2b6c61927e5aed6111de89ad9dafba939a90b</span><br><span class=\"line\">// **或者:**</span><br><span class=\"line\">error: could not apply f038d7f... dev</span><br><span class=\"line\">hint: after resolving the conflicts, mark the corrected paths</span><br><span class=\"line\">hint: with &#x27;git add &lt;paths&gt;&#x27; or &#x27;git rm &lt;paths&gt;&#x27;</span><br><span class=\"line\">hint: and commit the result with &#x27;git commit&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>就跟普通的冲突一样，手工解决。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status    # 看哪些文件出现冲突</span><br><span class=\"line\">$ vim xxx.js  # 手动解决它。</span><br><span class=\"line\">$ git add xxx.js</span><br><span class=\"line\">\tor</span><br><span class=\"line\">$ git add .\t\t\t# 添加到缓存区</span><br><span class=\"line\">$ git commit -c &lt;新的commit号码&gt;</span><br></pre></td></tr></table></figure>\n\n<p>第二步使用下面的命令，让 Cherry pick 过程继续执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick --continue</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":"<h1 id=\"git-cherry-pick\"><a href=\"#git-cherry-pick\" class=\"headerlink\" title=\"git cherry-pick\"></a>git cherry-pick</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。</p>\n<p>这时分两种情况。</p>\n<p>你需要另一个分支的所有代码变动，那么就采用合并（git merge）。<br>你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。<br>Cherry pick直译为捡樱桃🍒，它的功能是把已经存在的commit进行挑选，然后重新提交。比较合适的一个场景是把A分支的某次或者多次的提交也提交到B分支上。</p>\n<h2 id=\"图示\"><a href=\"#图示\" class=\"headerlink\" title=\"图示\"></a>图示</h2><p>比如此时分支情况如下：</p>\n<p><img src=\"/media/a7d7fe639765492abea6951ae25170c8.png\"></p>\n<p>这幅图中，每个圆圈代表一次commit</p>\n<p>一条线是一个分支。</p>\n<p>比如c2，c3，这是两次提交，在同一个分支上。</p>\n<p>此时需求是：要把绿色分支的C3，蓝色分支的C5，紫色分支的C7合到一条新的分支上。</p>\n<p>此时就需要cherry-pick命令了。</p>\n<p>首先切到master分支，然后输入</p>\n<p>git cherry-pick C3 C5 C7</p>\n<p>此时，分支图示就变成了：<br><img src=\"/media/30f3d615cb354306a900383295ef8166.png\"></p>\n<h2 id=\"一、转移一个提交\"><a href=\"#一、转移一个提交\" class=\"headerlink\" title=\"一、转移一个提交\"></a>一、转移一个提交</h2><ol>\n<li><p>先切换到 A 分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到这次提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit f038d7ffb1685af7d4f870ad0b798670b6f760e8 (HEAD -&gt; feature/0113_update)</span><br><span class=\"line\">Author: qxj &lt;qxj@qq.com&gt;</span><br><span class=\"line\">Date:   Thu Jan 14 15:24:54 2021 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    feat: xxx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>再切换到B分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout B</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把 A 分支下的这次commit 重新提交到 B 分支下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick &#x27;f038d7ffb1685af7d4f870ad0b798670b6f760e8&#x27;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>当执行完 <code>git cherry-pick</code>以后，将会生成一个新的提交，这个新的提交的<a href=\"https://so.csdn.net/so/search?q=hash&spm=1001.2101.3001.7020\">hash</a>值和原来的不同，但标志名称一样。</p>\n<h2 id=\"二、转移多个提交\"><a href=\"#二、转移多个提交\" class=\"headerlink\" title=\"二、转移多个提交\"></a>二、转移多个提交</h2><p>Cherry pick 支持一次转移多个提交。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick &lt;HashA&gt; &lt;HashB&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。</p>\n<p>如果想要转移一系列的连续提交，可以使用下面的简便语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick A..B </span><br></pre></td></tr></table></figure>\n\n<p>如果要包含提交 A，可以使用下面的语法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick A^..B </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、配置项\"><a href=\"#三、配置项\" class=\"headerlink\" title=\"三、配置项\"></a>三、配置项</h2><p>git cherry-pick命令的常用配置项如下。</p>\n<h5 id=\"（1）-e，–edit\"><a href=\"#（1）-e，–edit\" class=\"headerlink\" title=\"（1）-e，–edit\"></a>（1）-e，–edit</h5><p>​\t打开外部编辑器，编辑提交信息。</p>\n<h5 id=\"（2）-n，–no-commit\"><a href=\"#（2）-n，–no-commit\" class=\"headerlink\" title=\"（2）-n，–no-commit\"></a>（2）-n，–no-commit</h5><p>​\t只更新工作区和暂存区，不产生新的提交。</p>\n<h5 id=\"（3）-x\"><a href=\"#（3）-x\" class=\"headerlink\" title=\"（3）-x\"></a>（3）-x</h5><p>​\t在提交信息的末尾追加一行(cherry picked from commit …)，保留原提交者信息，方便以后查到这个提交是如何产生的。</p>\n<h5 id=\"（4）-s，–signoff\"><a href=\"#（4）-s，–signoff\" class=\"headerlink\" title=\"（4）-s，–signoff\"></a>（4）-s，–signoff</h5><p>​\t在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。</p>\n<h5 id=\"（5）-m-parent-number，–mainline-parent-number\"><a href=\"#（5）-m-parent-number，–mainline-parent-number\" class=\"headerlink\" title=\"（5）-m parent-number，–mainline parent-number\"></a>（5）-m parent-number，–mainline parent-number</h5><p>​\t如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。</p>\n<p>​\t-m配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick -m 1 &lt;commitHash&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面命令表示，Cherry pick 采用提交commitHash来自编号1的父分支的变动。</p>\n<p>一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。</p>\n<h2 id=\"四、代码冲突\"><a href=\"#四、代码冲突\" class=\"headerlink\" title=\"四、代码冲突\"></a>四、代码冲突</h2><p>如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。</p>\n<h5 id=\"（1）-continue\"><a href=\"#（1）-continue\" class=\"headerlink\" title=\"（1）--continue\"></a><strong>（1）<code>--continue</code></strong></h5><p>用户解决代码冲突后，第一步将修改的文件重新加入暂存区（<code>git add .</code>），第二步使用下面的命令，让 Cherry pick 过程继续执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git cherry-pick --continue</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（2）-abort\"><a href=\"#（2）-abort\" class=\"headerlink\" title=\"（2）--abort\"></a><strong>（2）<code>--abort</code></strong></h5><p>发生代码冲突后，放弃合并，回到操作前的样子。</p>\n<h5 id=\"（3）-quit\"><a href=\"#（3）-quit\" class=\"headerlink\" title=\"（3）--quit\"></a><strong>（3）<code>--quit</code></strong></h5><p>发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。</p>\n<h4 id=\"如果在真实的cherry-pick-的过程中出现了冲突\"><a href=\"#如果在真实的cherry-pick-的过程中出现了冲突\" class=\"headerlink\" title=\"如果在真实的cherry-pick 的过程中出现了冲突\"></a>如果在真实的cherry-pick 的过程中出现了冲突</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Automatic cherry-pick failed.</span><br><span class=\"line\">After resolving the conflicts,mark the corrected paths with &#x27;git add &lt;paths&gt;&#x27; or &#x27;git rm &lt;paths&gt;&#x27;and commit the result with:</span><br><span class=\"line\">git commit -c 15a2b6c61927e5aed6111de89ad9dafba939a90b</span><br><span class=\"line\">// **或者:**</span><br><span class=\"line\">error: could not apply f038d7f... dev</span><br><span class=\"line\">hint: after resolving the conflicts, mark the corrected paths</span><br><span class=\"line\">hint: with &#x27;git add &lt;paths&gt;&#x27; or &#x27;git rm &lt;paths&gt;&#x27;</span><br><span class=\"line\">hint: and commit the result with &#x27;git commit&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>就跟普通的冲突一样，手工解决。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status    # 看哪些文件出现冲突</span><br><span class=\"line\">$ vim xxx.js  # 手动解决它。</span><br><span class=\"line\">$ git add xxx.js</span><br><span class=\"line\">\tor</span><br><span class=\"line\">$ git add .\t\t\t# 添加到缓存区</span><br><span class=\"line\">$ git commit -c &lt;新的commit号码&gt;</span><br></pre></td></tr></table></figure>\n\n<p>第二步使用下面的命令，让 Cherry pick 过程继续执行。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git cherry-pick --continue</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Rosdep update failed","date":"2023-08-25T09:26:08.990Z","description":null,"top_img":false,"_content":"\n# Rosdep update failed \n\n## Action1：\n\n```\nsudo pip install rosdepc \n```\n\n如果显示没有pip可以尝试pip3： \n\n```\nsudo pip3 install rosdepc \n```\n\nor \n\n```\nsudo apt-get install python3-pip  sudo pip install rosdepc \n```\n\n使用 \n\n```\nsudo rosdepc init  rosdepc update \n```\n\nfinished！！ \n\n\n\n## **Action2** \n\n### **1.首先将下面仓库的内容clone到本地** \n\n```\ngit clone https://github.com/ros/rosdistro.git \n```\n\n如果git clone 速度较慢，可以直接拷贝[https://github.com/ros/rosdistro.git](https://github.com/ros/rosdistro.git) 到网页下载，速度提高记录rosdistro存放地址，例如/home/gec/rosdistro \n\n如果是自己的改成/home/user/rosdistro，其中user表示用户名 \n\n \n\n### **2.修改/usr/lib/python2.7/dist-packages/rosdep2/rep3.py文件** \n\n```\ncd /usr/lib/python2.7/dist-packages/rosdep2 \nsudo gedit rep3.py \n```\n\n将REP3_TARGETS_URL = ‘https://raw.githubusercontent.com/ros/rosdistro/master/releases/targets.yaml’ \n\n替换成 REP3_TARGETS_URL = 'file:///home/gec/rosdistro/releases/targets.yaml' \n\n替换后的/home/gec 即为第一步clone内容的存放地址 \n\n \n\n### **3.修改/usr/lib/python2.7/dist-packages/rosdistro/__init__.py文件** \n\n```\ncd /usr/lib/python2.7/dist-packages/rosdistro\nsudo gedit __init__.py \n```\n\n将原来文件中的 DEFAULT_INDEX_URL = ‘https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml’ \n\n替换成 DEFAULT_INDEX_URL =  'file:///home/gec/rosdistro/index-v4.yaml' \n\n替换后的/home/gec 即为第一步clone内容的存放地址 \n\n \n\n### **4.配置20-default.list文件** \n\n```\nsudo rosdep init \n```\n\n重新生成/etc/ros/rosdep/sources.list.d/20-default.list. \n\n没有则手动创建/etc/ros/rosdep/sources.list.d/20-default.list.步奏如下： \n\n如果sudo rosdep init成功，直接跳过以下创建文件步骤------- \n\n```\n# 进入到/etc/ros/目录下 \ncd /etc/ros   \n\n# 创建rosdep文件 \nsudo mkdir rosdep && cd rosdep \n\n# 创建sources.list.d文件 \nsudo mkdir sources.list.d && cd sources.list.d \n\n# 创建20-default.list文档 \nsudo gedit 20-default.list \n```\n\n如果sudo rosdep init成功，直接跳过以上创建文件步骤------ \n\n将20-default.list里面内容修改为下面的代码,注意内容/home/gec修改为自己的记录路径 \n\n```\n# os-specific listings first \nyaml file:///home/gec/rosdistro/rosdep/osx-homebrew.yaml osx \n\n# generic \nyaml file:///home/gec/rosdistro/rosdep/base.yaml\nyaml file:///home/gec/rosdistro/rosdep/python.yaml\nyaml file:///home/gec/rosdistro/rosdep/ruby.yaml \ngbpdistro file:///home/gec/rosdistro/releases/fuerte.yaml fuerte \n\n# newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead  \n```\n\n注意的是yaml file:// 表示固定格式/home...表示文件目录，所以是yaml file:/// \n\n \n\n### 5.最后直接  \n\n```\nrosdep update \n```\n\n","source":"_posts/slam_config/Rosdep_update_failed.md","raw":"---\ntitle: Rosdep update failed\ndate:\ntags: \n- Ros\ncategories:\n- slam_config\ndescription:\ntop_img: false\n---\n\n# Rosdep update failed \n\n## Action1：\n\n```\nsudo pip install rosdepc \n```\n\n如果显示没有pip可以尝试pip3： \n\n```\nsudo pip3 install rosdepc \n```\n\nor \n\n```\nsudo apt-get install python3-pip  sudo pip install rosdepc \n```\n\n使用 \n\n```\nsudo rosdepc init  rosdepc update \n```\n\nfinished！！ \n\n\n\n## **Action2** \n\n### **1.首先将下面仓库的内容clone到本地** \n\n```\ngit clone https://github.com/ros/rosdistro.git \n```\n\n如果git clone 速度较慢，可以直接拷贝[https://github.com/ros/rosdistro.git](https://github.com/ros/rosdistro.git) 到网页下载，速度提高记录rosdistro存放地址，例如/home/gec/rosdistro \n\n如果是自己的改成/home/user/rosdistro，其中user表示用户名 \n\n \n\n### **2.修改/usr/lib/python2.7/dist-packages/rosdep2/rep3.py文件** \n\n```\ncd /usr/lib/python2.7/dist-packages/rosdep2 \nsudo gedit rep3.py \n```\n\n将REP3_TARGETS_URL = ‘https://raw.githubusercontent.com/ros/rosdistro/master/releases/targets.yaml’ \n\n替换成 REP3_TARGETS_URL = 'file:///home/gec/rosdistro/releases/targets.yaml' \n\n替换后的/home/gec 即为第一步clone内容的存放地址 \n\n \n\n### **3.修改/usr/lib/python2.7/dist-packages/rosdistro/__init__.py文件** \n\n```\ncd /usr/lib/python2.7/dist-packages/rosdistro\nsudo gedit __init__.py \n```\n\n将原来文件中的 DEFAULT_INDEX_URL = ‘https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml’ \n\n替换成 DEFAULT_INDEX_URL =  'file:///home/gec/rosdistro/index-v4.yaml' \n\n替换后的/home/gec 即为第一步clone内容的存放地址 \n\n \n\n### **4.配置20-default.list文件** \n\n```\nsudo rosdep init \n```\n\n重新生成/etc/ros/rosdep/sources.list.d/20-default.list. \n\n没有则手动创建/etc/ros/rosdep/sources.list.d/20-default.list.步奏如下： \n\n如果sudo rosdep init成功，直接跳过以下创建文件步骤------- \n\n```\n# 进入到/etc/ros/目录下 \ncd /etc/ros   \n\n# 创建rosdep文件 \nsudo mkdir rosdep && cd rosdep \n\n# 创建sources.list.d文件 \nsudo mkdir sources.list.d && cd sources.list.d \n\n# 创建20-default.list文档 \nsudo gedit 20-default.list \n```\n\n如果sudo rosdep init成功，直接跳过以上创建文件步骤------ \n\n将20-default.list里面内容修改为下面的代码,注意内容/home/gec修改为自己的记录路径 \n\n```\n# os-specific listings first \nyaml file:///home/gec/rosdistro/rosdep/osx-homebrew.yaml osx \n\n# generic \nyaml file:///home/gec/rosdistro/rosdep/base.yaml\nyaml file:///home/gec/rosdistro/rosdep/python.yaml\nyaml file:///home/gec/rosdistro/rosdep/ruby.yaml \ngbpdistro file:///home/gec/rosdistro/releases/fuerte.yaml fuerte \n\n# newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead  \n```\n\n注意的是yaml file:// 表示固定格式/home...表示文件目录，所以是yaml file:/// \n\n \n\n### 5.最后直接  \n\n```\nrosdep update \n```\n\n","slug":"slam_config/Rosdep_update_failed","published":1,"updated":"2023-08-25T09:51:06.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67g004vgcr741di32lk","content":"<h1 id=\"Rosdep-update-failed\"><a href=\"#Rosdep-update-failed\" class=\"headerlink\" title=\"Rosdep update failed\"></a>Rosdep update failed</h1><h2 id=\"Action1：\"><a href=\"#Action1：\" class=\"headerlink\" title=\"Action1：\"></a>Action1：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install rosdepc </span><br></pre></td></tr></table></figure>\n\n<p>如果显示没有pip可以尝试pip3： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install rosdepc </span><br></pre></td></tr></table></figure>\n\n<p>or </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python3-pip  sudo pip install rosdepc </span><br></pre></td></tr></table></figure>\n\n<p>使用 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rosdepc init  rosdepc update </span><br></pre></td></tr></table></figure>\n\n<p>finished！！ </p>\n<h2 id=\"Action2\"><a href=\"#Action2\" class=\"headerlink\" title=\"Action2\"></a><strong>Action2</strong></h2><h3 id=\"1-首先将下面仓库的内容clone到本地\"><a href=\"#1-首先将下面仓库的内容clone到本地\" class=\"headerlink\" title=\"1.首先将下面仓库的内容clone到本地\"></a><strong>1.首先将下面仓库的内容clone到本地</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ros/rosdistro.git </span><br></pre></td></tr></table></figure>\n\n<p>如果git clone 速度较慢，可以直接拷贝<a href=\"https://github.com/ros/rosdistro.git\">https://github.com/ros/rosdistro.git</a> 到网页下载，速度提高记录rosdistro存放地址，例如&#x2F;home&#x2F;gec&#x2F;rosdistro </p>\n<p>如果是自己的改成&#x2F;home&#x2F;user&#x2F;rosdistro，其中user表示用户名 </p>\n<h3 id=\"2-修改-usr-lib-python2-7-dist-packages-rosdep2-rep3-py文件\"><a href=\"#2-修改-usr-lib-python2-7-dist-packages-rosdep2-rep3-py文件\" class=\"headerlink\" title=\"2.修改&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdep2&#x2F;rep3.py文件\"></a><strong>2.修改&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdep2&#x2F;rep3.py文件</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/lib/python2.7/dist-packages/rosdep2 </span><br><span class=\"line\">sudo gedit rep3.py </span><br></pre></td></tr></table></figure>\n\n<p>将REP3_TARGETS_URL &#x3D; ‘<a href=\"https://raw.githubusercontent.com/ros/rosdistro/master/releases/targets.yaml%E2%80%99\">https://raw.githubusercontent.com/ros/rosdistro/master/releases/targets.yaml’</a> </p>\n<p>替换成 REP3_TARGETS_URL &#x3D; ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;gec&#x2F;rosdistro&#x2F;releases&#x2F;targets.yaml’ </p>\n<p>替换后的&#x2F;home&#x2F;gec 即为第一步clone内容的存放地址 </p>\n<h3 id=\"3-修改-usr-lib-python2-7-dist-packages-rosdistro-init-py文件\"><a href=\"#3-修改-usr-lib-python2-7-dist-packages-rosdistro-init-py文件\" class=\"headerlink\" title=\"3.修改&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdistro&#x2F;init.py文件\"></a><strong>3.修改&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdistro&#x2F;<strong>init</strong>.py文件</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/lib/python2.7/dist-packages/rosdistro</span><br><span class=\"line\">sudo gedit __init__.py </span><br></pre></td></tr></table></figure>\n\n<p>将原来文件中的 DEFAULT_INDEX_URL &#x3D; ‘<a href=\"https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml%E2%80%99\">https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml’</a> </p>\n<p>替换成 DEFAULT_INDEX_URL &#x3D;  ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;gec&#x2F;rosdistro&#x2F;index-v4.yaml’ </p>\n<p>替换后的&#x2F;home&#x2F;gec 即为第一步clone内容的存放地址 </p>\n<h3 id=\"4-配置20-default-list文件\"><a href=\"#4-配置20-default-list文件\" class=\"headerlink\" title=\"4.配置20-default.list文件\"></a><strong>4.配置20-default.list文件</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rosdep init </span><br></pre></td></tr></table></figure>\n\n<p>重新生成&#x2F;etc&#x2F;ros&#x2F;rosdep&#x2F;sources.list.d&#x2F;20-default.list. </p>\n<p>没有则手动创建&#x2F;etc&#x2F;ros&#x2F;rosdep&#x2F;sources.list.d&#x2F;20-default.list.步奏如下： </p>\n<p>如果sudo rosdep init成功，直接跳过以下创建文件步骤——- </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 进入到/etc/ros/目录下 </span><br><span class=\"line\">cd /etc/ros   </span><br><span class=\"line\"></span><br><span class=\"line\"># 创建rosdep文件 </span><br><span class=\"line\">sudo mkdir rosdep &amp;&amp; cd rosdep </span><br><span class=\"line\"></span><br><span class=\"line\"># 创建sources.list.d文件 </span><br><span class=\"line\">sudo mkdir sources.list.d &amp;&amp; cd sources.list.d </span><br><span class=\"line\"></span><br><span class=\"line\"># 创建20-default.list文档 </span><br><span class=\"line\">sudo gedit 20-default.list </span><br></pre></td></tr></table></figure>\n\n<p>如果sudo rosdep init成功，直接跳过以上创建文件步骤—— </p>\n<p>将20-default.list里面内容修改为下面的代码,注意内容&#x2F;home&#x2F;gec修改为自己的记录路径 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># os-specific listings first </span><br><span class=\"line\">yaml file:///home/gec/rosdistro/rosdep/osx-homebrew.yaml osx </span><br><span class=\"line\"></span><br><span class=\"line\"># generic </span><br><span class=\"line\">yaml file:///home/gec/rosdistro/rosdep/base.yaml</span><br><span class=\"line\">yaml file:///home/gec/rosdistro/rosdep/python.yaml</span><br><span class=\"line\">yaml file:///home/gec/rosdistro/rosdep/ruby.yaml </span><br><span class=\"line\">gbpdistro file:///home/gec/rosdistro/releases/fuerte.yaml fuerte </span><br><span class=\"line\"></span><br><span class=\"line\"># newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead  </span><br></pre></td></tr></table></figure>\n\n<p>注意的是yaml file:&#x2F;&#x2F; 表示固定格式&#x2F;home…表示文件目录，所以是yaml file:&#x2F;&#x2F;&#x2F; </p>\n<h3 id=\"5-最后直接\"><a href=\"#5-最后直接\" class=\"headerlink\" title=\"5.最后直接\"></a>5.最后直接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosdep update </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-1.png","cover_type":"img","excerpt":"","more":"<h1 id=\"Rosdep-update-failed\"><a href=\"#Rosdep-update-failed\" class=\"headerlink\" title=\"Rosdep update failed\"></a>Rosdep update failed</h1><h2 id=\"Action1：\"><a href=\"#Action1：\" class=\"headerlink\" title=\"Action1：\"></a>Action1：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install rosdepc </span><br></pre></td></tr></table></figure>\n\n<p>如果显示没有pip可以尝试pip3： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip3 install rosdepc </span><br></pre></td></tr></table></figure>\n\n<p>or </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python3-pip  sudo pip install rosdepc </span><br></pre></td></tr></table></figure>\n\n<p>使用 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rosdepc init  rosdepc update </span><br></pre></td></tr></table></figure>\n\n<p>finished！！ </p>\n<h2 id=\"Action2\"><a href=\"#Action2\" class=\"headerlink\" title=\"Action2\"></a><strong>Action2</strong></h2><h3 id=\"1-首先将下面仓库的内容clone到本地\"><a href=\"#1-首先将下面仓库的内容clone到本地\" class=\"headerlink\" title=\"1.首先将下面仓库的内容clone到本地\"></a><strong>1.首先将下面仓库的内容clone到本地</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ros/rosdistro.git </span><br></pre></td></tr></table></figure>\n\n<p>如果git clone 速度较慢，可以直接拷贝<a href=\"https://github.com/ros/rosdistro.git\">https://github.com/ros/rosdistro.git</a> 到网页下载，速度提高记录rosdistro存放地址，例如&#x2F;home&#x2F;gec&#x2F;rosdistro </p>\n<p>如果是自己的改成&#x2F;home&#x2F;user&#x2F;rosdistro，其中user表示用户名 </p>\n<h3 id=\"2-修改-usr-lib-python2-7-dist-packages-rosdep2-rep3-py文件\"><a href=\"#2-修改-usr-lib-python2-7-dist-packages-rosdep2-rep3-py文件\" class=\"headerlink\" title=\"2.修改&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdep2&#x2F;rep3.py文件\"></a><strong>2.修改&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdep2&#x2F;rep3.py文件</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/lib/python2.7/dist-packages/rosdep2 </span><br><span class=\"line\">sudo gedit rep3.py </span><br></pre></td></tr></table></figure>\n\n<p>将REP3_TARGETS_URL &#x3D; ‘<a href=\"https://raw.githubusercontent.com/ros/rosdistro/master/releases/targets.yaml%E2%80%99\">https://raw.githubusercontent.com/ros/rosdistro/master/releases/targets.yaml’</a> </p>\n<p>替换成 REP3_TARGETS_URL &#x3D; ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;gec&#x2F;rosdistro&#x2F;releases&#x2F;targets.yaml’ </p>\n<p>替换后的&#x2F;home&#x2F;gec 即为第一步clone内容的存放地址 </p>\n<h3 id=\"3-修改-usr-lib-python2-7-dist-packages-rosdistro-init-py文件\"><a href=\"#3-修改-usr-lib-python2-7-dist-packages-rosdistro-init-py文件\" class=\"headerlink\" title=\"3.修改&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdistro&#x2F;init.py文件\"></a><strong>3.修改&#x2F;usr&#x2F;lib&#x2F;python2.7&#x2F;dist-packages&#x2F;rosdistro&#x2F;<strong>init</strong>.py文件</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/lib/python2.7/dist-packages/rosdistro</span><br><span class=\"line\">sudo gedit __init__.py </span><br></pre></td></tr></table></figure>\n\n<p>将原来文件中的 DEFAULT_INDEX_URL &#x3D; ‘<a href=\"https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml%E2%80%99\">https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml’</a> </p>\n<p>替换成 DEFAULT_INDEX_URL &#x3D;  ‘file:&#x2F;&#x2F;&#x2F;home&#x2F;gec&#x2F;rosdistro&#x2F;index-v4.yaml’ </p>\n<p>替换后的&#x2F;home&#x2F;gec 即为第一步clone内容的存放地址 </p>\n<h3 id=\"4-配置20-default-list文件\"><a href=\"#4-配置20-default-list文件\" class=\"headerlink\" title=\"4.配置20-default.list文件\"></a><strong>4.配置20-default.list文件</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rosdep init </span><br></pre></td></tr></table></figure>\n\n<p>重新生成&#x2F;etc&#x2F;ros&#x2F;rosdep&#x2F;sources.list.d&#x2F;20-default.list. </p>\n<p>没有则手动创建&#x2F;etc&#x2F;ros&#x2F;rosdep&#x2F;sources.list.d&#x2F;20-default.list.步奏如下： </p>\n<p>如果sudo rosdep init成功，直接跳过以下创建文件步骤——- </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 进入到/etc/ros/目录下 </span><br><span class=\"line\">cd /etc/ros   </span><br><span class=\"line\"></span><br><span class=\"line\"># 创建rosdep文件 </span><br><span class=\"line\">sudo mkdir rosdep &amp;&amp; cd rosdep </span><br><span class=\"line\"></span><br><span class=\"line\"># 创建sources.list.d文件 </span><br><span class=\"line\">sudo mkdir sources.list.d &amp;&amp; cd sources.list.d </span><br><span class=\"line\"></span><br><span class=\"line\"># 创建20-default.list文档 </span><br><span class=\"line\">sudo gedit 20-default.list </span><br></pre></td></tr></table></figure>\n\n<p>如果sudo rosdep init成功，直接跳过以上创建文件步骤—— </p>\n<p>将20-default.list里面内容修改为下面的代码,注意内容&#x2F;home&#x2F;gec修改为自己的记录路径 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># os-specific listings first </span><br><span class=\"line\">yaml file:///home/gec/rosdistro/rosdep/osx-homebrew.yaml osx </span><br><span class=\"line\"></span><br><span class=\"line\"># generic </span><br><span class=\"line\">yaml file:///home/gec/rosdistro/rosdep/base.yaml</span><br><span class=\"line\">yaml file:///home/gec/rosdistro/rosdep/python.yaml</span><br><span class=\"line\">yaml file:///home/gec/rosdistro/rosdep/ruby.yaml </span><br><span class=\"line\">gbpdistro file:///home/gec/rosdistro/releases/fuerte.yaml fuerte </span><br><span class=\"line\"></span><br><span class=\"line\"># newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead  </span><br></pre></td></tr></table></figure>\n\n<p>注意的是yaml file:&#x2F;&#x2F; 表示固定格式&#x2F;home…表示文件目录，所以是yaml file:&#x2F;&#x2F;&#x2F; </p>\n<h3 id=\"5-最后直接\"><a href=\"#5-最后直接\" class=\"headerlink\" title=\"5.最后直接\"></a>5.最后直接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosdep update </span><br></pre></td></tr></table></figure>\n\n"},{"title":"ubuntu18.04系统下安装turtlebot2","date":"2023-08-25T09:26:08.995Z","description":null,"top_img":false,"_content":"\n# ubuntu 18.04系统下安装turtlebot2 \n\n## 先完成ROS melodic安装 \n\n \n\n## 安装依赖： \n\n```\n$ sudo apt-get install ros-melodic-kobuki-* \n$ sudo apt-get install ros-melodic-ecl-streams \n$ sudo apt-get install libusb-dev \n$ sudo apt-get install libspnav-dev \n$ sudo apt-get install ros-melodic-joystick-drivers \n$ sudo apt-get install bluetooth \n$ sudo apt-get install libbluetooth-dev \n$ sudo apt-get install libcwiid-dev \n```\n\n \n\n## 新建工作空间，准备相关包 \n\n```\n$ mkdir -p ~/turtlebot_ws/src \n$ cd ~/turtlebot_ws/src \n$ git clone https://github.com/turtlebot/turtlebot_simulator \n$ git clone https://github.com/turtlebot/turtlebot.git \n$ git clone https://github.com/turtlebot/turtlebot_apps.git \n$ git clone https://github.com/udacity/robot_pose_ekf \n$ git clone https://github.com/ros-perception/depthimage_to_laserscan.git \n$ git clone https://github.com/yujinrobot/kobuki_msgs.git \n$ git clone https://github.com/yujinrobot/kobuki_desktop.git \n$ cd kobuki_desktop/ \n$ rm -r kobuki_qtestsuite \n$ git clone https://github.com/toeklk/orocos-bayesian-filtering.git \n$ git clone https://github.com/turtlebot/turtlebot_msgs.git \n$ git clone https://github.com/ros-drivers/joystick_drivers.git \n```\n\n \n\n## 复制kobuki和yujin_ocs依赖库到turtlebot_ws/src工作空间下 \n\n```\n$ mkdir -p ~/repos/ \n$ cd ~/repos/ \n$ git clone https://github.com/yujinrobot/kobuki.git \n$ cp -r kobuki/* ~/turtlebot_ws/src/ \n$ git clone https://github.com/yujinrobot/yujin_ocs.git \n$ cp -r yujin_ocs/yocs_cmd_vel_mux/ yujin_ocs/yocs_controllers ~/turtlebot_ws/src/ \n```\n\n \n\n## 编译工作空间 \n\n```\n$ cd ~/turtlebot_ws \n$ catkin_make \n```\n\n \n\n遇到问题： \n\n![](media/1GetImage.png)\n\n \n\n解决方法：orocos-bfl没有安装。\n\n```\nsudo apt-get install ros-melodic-bfl\n```\n\n注意自己ros版本的选择。安装后再catkin_make。 \n\n \n\n## 添加工作空间到bashrc文件 \n\n```\necho \"source ~/turtlebot_ws/devel/setup.bash\" >> ~/.bashrc \nsource ~/.bashrc \n```\n\n \n\n## 测试 \n\n```\nroslaunch turtlebot_bringup minimal.launch \n```\n\n问题：cannot launch node of type [laptop_battery_monitor/laptop_battery.py]: laptop_battery_monitor \n\n解决：\n\n```\nsudo apt-get install ros-melodic-laptop-battery-monitor \nroslaunch turtlebot_teleop keyboard_teleop.launch \n```\n\n","source":"_posts/slam_config/ubuntu18.04系统下安装turtlebot2.md","raw":"---\ntitle: ubuntu18.04系统下安装turtlebot2 \ndate:\ntags: \ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# ubuntu 18.04系统下安装turtlebot2 \n\n## 先完成ROS melodic安装 \n\n \n\n## 安装依赖： \n\n```\n$ sudo apt-get install ros-melodic-kobuki-* \n$ sudo apt-get install ros-melodic-ecl-streams \n$ sudo apt-get install libusb-dev \n$ sudo apt-get install libspnav-dev \n$ sudo apt-get install ros-melodic-joystick-drivers \n$ sudo apt-get install bluetooth \n$ sudo apt-get install libbluetooth-dev \n$ sudo apt-get install libcwiid-dev \n```\n\n \n\n## 新建工作空间，准备相关包 \n\n```\n$ mkdir -p ~/turtlebot_ws/src \n$ cd ~/turtlebot_ws/src \n$ git clone https://github.com/turtlebot/turtlebot_simulator \n$ git clone https://github.com/turtlebot/turtlebot.git \n$ git clone https://github.com/turtlebot/turtlebot_apps.git \n$ git clone https://github.com/udacity/robot_pose_ekf \n$ git clone https://github.com/ros-perception/depthimage_to_laserscan.git \n$ git clone https://github.com/yujinrobot/kobuki_msgs.git \n$ git clone https://github.com/yujinrobot/kobuki_desktop.git \n$ cd kobuki_desktop/ \n$ rm -r kobuki_qtestsuite \n$ git clone https://github.com/toeklk/orocos-bayesian-filtering.git \n$ git clone https://github.com/turtlebot/turtlebot_msgs.git \n$ git clone https://github.com/ros-drivers/joystick_drivers.git \n```\n\n \n\n## 复制kobuki和yujin_ocs依赖库到turtlebot_ws/src工作空间下 \n\n```\n$ mkdir -p ~/repos/ \n$ cd ~/repos/ \n$ git clone https://github.com/yujinrobot/kobuki.git \n$ cp -r kobuki/* ~/turtlebot_ws/src/ \n$ git clone https://github.com/yujinrobot/yujin_ocs.git \n$ cp -r yujin_ocs/yocs_cmd_vel_mux/ yujin_ocs/yocs_controllers ~/turtlebot_ws/src/ \n```\n\n \n\n## 编译工作空间 \n\n```\n$ cd ~/turtlebot_ws \n$ catkin_make \n```\n\n \n\n遇到问题： \n\n![](media/1GetImage.png)\n\n \n\n解决方法：orocos-bfl没有安装。\n\n```\nsudo apt-get install ros-melodic-bfl\n```\n\n注意自己ros版本的选择。安装后再catkin_make。 \n\n \n\n## 添加工作空间到bashrc文件 \n\n```\necho \"source ~/turtlebot_ws/devel/setup.bash\" >> ~/.bashrc \nsource ~/.bashrc \n```\n\n \n\n## 测试 \n\n```\nroslaunch turtlebot_bringup minimal.launch \n```\n\n问题：cannot launch node of type [laptop_battery_monitor/laptop_battery.py]: laptop_battery_monitor \n\n解决：\n\n```\nsudo apt-get install ros-melodic-laptop-battery-monitor \nroslaunch turtlebot_teleop keyboard_teleop.launch \n```\n\n","slug":"slam_config/ubuntu18.04系统下安装turtlebot2","published":1,"updated":"2023-08-25T09:56:07.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67h004zgcr79mchcpcx","content":"<h1 id=\"ubuntu-18-04系统下安装turtlebot2\"><a href=\"#ubuntu-18-04系统下安装turtlebot2\" class=\"headerlink\" title=\"ubuntu 18.04系统下安装turtlebot2\"></a>ubuntu 18.04系统下安装turtlebot2</h1><h2 id=\"先完成ROS-melodic安装\"><a href=\"#先完成ROS-melodic安装\" class=\"headerlink\" title=\"先完成ROS melodic安装\"></a>先完成ROS melodic安装</h2><h2 id=\"安装依赖：\"><a href=\"#安装依赖：\" class=\"headerlink\" title=\"安装依赖：\"></a>安装依赖：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install ros-melodic-kobuki-* </span><br><span class=\"line\">$ sudo apt-get install ros-melodic-ecl-streams </span><br><span class=\"line\">$ sudo apt-get install libusb-dev </span><br><span class=\"line\">$ sudo apt-get install libspnav-dev </span><br><span class=\"line\">$ sudo apt-get install ros-melodic-joystick-drivers </span><br><span class=\"line\">$ sudo apt-get install bluetooth </span><br><span class=\"line\">$ sudo apt-get install libbluetooth-dev </span><br><span class=\"line\">$ sudo apt-get install libcwiid-dev </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建工作空间，准备相关包\"><a href=\"#新建工作空间，准备相关包\" class=\"headerlink\" title=\"新建工作空间，准备相关包\"></a>新建工作空间，准备相关包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p ~/turtlebot_ws/src </span><br><span class=\"line\">$ cd ~/turtlebot_ws/src </span><br><span class=\"line\">$ git clone https://github.com/turtlebot/turtlebot_simulator </span><br><span class=\"line\">$ git clone https://github.com/turtlebot/turtlebot.git </span><br><span class=\"line\">$ git clone https://github.com/turtlebot/turtlebot_apps.git </span><br><span class=\"line\">$ git clone https://github.com/udacity/robot_pose_ekf </span><br><span class=\"line\">$ git clone https://github.com/ros-perception/depthimage_to_laserscan.git </span><br><span class=\"line\">$ git clone https://github.com/yujinrobot/kobuki_msgs.git </span><br><span class=\"line\">$ git clone https://github.com/yujinrobot/kobuki_desktop.git </span><br><span class=\"line\">$ cd kobuki_desktop/ </span><br><span class=\"line\">$ rm -r kobuki_qtestsuite </span><br><span class=\"line\">$ git clone https://github.com/toeklk/orocos-bayesian-filtering.git </span><br><span class=\"line\">$ git clone https://github.com/turtlebot/turtlebot_msgs.git </span><br><span class=\"line\">$ git clone https://github.com/ros-drivers/joystick_drivers.git </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制kobuki和yujin-ocs依赖库到turtlebot-ws-src工作空间下\"><a href=\"#复制kobuki和yujin-ocs依赖库到turtlebot-ws-src工作空间下\" class=\"headerlink\" title=\"复制kobuki和yujin_ocs依赖库到turtlebot_ws&#x2F;src工作空间下\"></a>复制kobuki和yujin_ocs依赖库到turtlebot_ws&#x2F;src工作空间下</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p ~/repos/ </span><br><span class=\"line\">$ cd ~/repos/ </span><br><span class=\"line\">$ git clone https://github.com/yujinrobot/kobuki.git </span><br><span class=\"line\">$ cp -r kobuki/* ~/turtlebot_ws/src/ </span><br><span class=\"line\">$ git clone https://github.com/yujinrobot/yujin_ocs.git </span><br><span class=\"line\">$ cp -r yujin_ocs/yocs_cmd_vel_mux/ yujin_ocs/yocs_controllers ~/turtlebot_ws/src/ </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译工作空间\"><a href=\"#编译工作空间\" class=\"headerlink\" title=\"编译工作空间\"></a>编译工作空间</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~/turtlebot_ws </span><br><span class=\"line\">$ catkin_make </span><br></pre></td></tr></table></figure>\n\n<p>遇到问题： </p>\n<p><img src=\"/media/1GetImage.png\"></p>\n<p>解决方法：orocos-bfl没有安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ros-melodic-bfl</span><br></pre></td></tr></table></figure>\n\n<p>注意自己ros版本的选择。安装后再catkin_make。 </p>\n<h2 id=\"添加工作空间到bashrc文件\"><a href=\"#添加工作空间到bashrc文件\" class=\"headerlink\" title=\"添加工作空间到bashrc文件\"></a>添加工作空间到bashrc文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;source ~/turtlebot_ws/devel/setup.bash&quot; &gt;&gt; ~/.bashrc </span><br><span class=\"line\">source ~/.bashrc </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch turtlebot_bringup minimal.launch </span><br></pre></td></tr></table></figure>\n\n<p>问题：cannot launch node of type [laptop_battery_monitor&#x2F;laptop_battery.py]: laptop_battery_monitor </p>\n<p>解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ros-melodic-laptop-battery-monitor </span><br><span class=\"line\">roslaunch turtlebot_teleop keyboard_teleop.launch </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-10.png","cover_type":"img","excerpt":"","more":"<h1 id=\"ubuntu-18-04系统下安装turtlebot2\"><a href=\"#ubuntu-18-04系统下安装turtlebot2\" class=\"headerlink\" title=\"ubuntu 18.04系统下安装turtlebot2\"></a>ubuntu 18.04系统下安装turtlebot2</h1><h2 id=\"先完成ROS-melodic安装\"><a href=\"#先完成ROS-melodic安装\" class=\"headerlink\" title=\"先完成ROS melodic安装\"></a>先完成ROS melodic安装</h2><h2 id=\"安装依赖：\"><a href=\"#安装依赖：\" class=\"headerlink\" title=\"安装依赖：\"></a>安装依赖：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-get install ros-melodic-kobuki-* </span><br><span class=\"line\">$ sudo apt-get install ros-melodic-ecl-streams </span><br><span class=\"line\">$ sudo apt-get install libusb-dev </span><br><span class=\"line\">$ sudo apt-get install libspnav-dev </span><br><span class=\"line\">$ sudo apt-get install ros-melodic-joystick-drivers </span><br><span class=\"line\">$ sudo apt-get install bluetooth </span><br><span class=\"line\">$ sudo apt-get install libbluetooth-dev </span><br><span class=\"line\">$ sudo apt-get install libcwiid-dev </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建工作空间，准备相关包\"><a href=\"#新建工作空间，准备相关包\" class=\"headerlink\" title=\"新建工作空间，准备相关包\"></a>新建工作空间，准备相关包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p ~/turtlebot_ws/src </span><br><span class=\"line\">$ cd ~/turtlebot_ws/src </span><br><span class=\"line\">$ git clone https://github.com/turtlebot/turtlebot_simulator </span><br><span class=\"line\">$ git clone https://github.com/turtlebot/turtlebot.git </span><br><span class=\"line\">$ git clone https://github.com/turtlebot/turtlebot_apps.git </span><br><span class=\"line\">$ git clone https://github.com/udacity/robot_pose_ekf </span><br><span class=\"line\">$ git clone https://github.com/ros-perception/depthimage_to_laserscan.git </span><br><span class=\"line\">$ git clone https://github.com/yujinrobot/kobuki_msgs.git </span><br><span class=\"line\">$ git clone https://github.com/yujinrobot/kobuki_desktop.git </span><br><span class=\"line\">$ cd kobuki_desktop/ </span><br><span class=\"line\">$ rm -r kobuki_qtestsuite </span><br><span class=\"line\">$ git clone https://github.com/toeklk/orocos-bayesian-filtering.git </span><br><span class=\"line\">$ git clone https://github.com/turtlebot/turtlebot_msgs.git </span><br><span class=\"line\">$ git clone https://github.com/ros-drivers/joystick_drivers.git </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制kobuki和yujin-ocs依赖库到turtlebot-ws-src工作空间下\"><a href=\"#复制kobuki和yujin-ocs依赖库到turtlebot-ws-src工作空间下\" class=\"headerlink\" title=\"复制kobuki和yujin_ocs依赖库到turtlebot_ws&#x2F;src工作空间下\"></a>复制kobuki和yujin_ocs依赖库到turtlebot_ws&#x2F;src工作空间下</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir -p ~/repos/ </span><br><span class=\"line\">$ cd ~/repos/ </span><br><span class=\"line\">$ git clone https://github.com/yujinrobot/kobuki.git </span><br><span class=\"line\">$ cp -r kobuki/* ~/turtlebot_ws/src/ </span><br><span class=\"line\">$ git clone https://github.com/yujinrobot/yujin_ocs.git </span><br><span class=\"line\">$ cp -r yujin_ocs/yocs_cmd_vel_mux/ yujin_ocs/yocs_controllers ~/turtlebot_ws/src/ </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译工作空间\"><a href=\"#编译工作空间\" class=\"headerlink\" title=\"编译工作空间\"></a>编译工作空间</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd ~/turtlebot_ws </span><br><span class=\"line\">$ catkin_make </span><br></pre></td></tr></table></figure>\n\n<p>遇到问题： </p>\n<p><img src=\"/media/1GetImage.png\"></p>\n<p>解决方法：orocos-bfl没有安装。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ros-melodic-bfl</span><br></pre></td></tr></table></figure>\n\n<p>注意自己ros版本的选择。安装后再catkin_make。 </p>\n<h2 id=\"添加工作空间到bashrc文件\"><a href=\"#添加工作空间到bashrc文件\" class=\"headerlink\" title=\"添加工作空间到bashrc文件\"></a>添加工作空间到bashrc文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;source ~/turtlebot_ws/devel/setup.bash&quot; &gt;&gt; ~/.bashrc </span><br><span class=\"line\">source ~/.bashrc </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch turtlebot_bringup minimal.launch </span><br></pre></td></tr></table></figure>\n\n<p>问题：cannot launch node of type [laptop_battery_monitor&#x2F;laptop_battery.py]: laptop_battery_monitor </p>\n<p>解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ros-melodic-laptop-battery-monitor </span><br><span class=\"line\">roslaunch turtlebot_teleop keyboard_teleop.launch </span><br></pre></td></tr></table></figure>\n\n"},{"title":"基于ROS的opencv安装与卸载","date":"2023-08-25T09:26:08.998Z","description":null,"top_img":false,"_content":"\n# 基于ROS的opencv安装与卸载 \n\n## **Part1:下载安装包**  \n\n前往官网下载所需版本的opencv。 \n\n## **Part2：安装依赖包** \n\n```\nsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev \nsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev \n```\n\n## **Part3：编译opencv**  \n\n```\ncd opncv3.4.2  \n# 终端路径指向自己的opencv文件包，本文档以3.4.2为例\n\n mkdir build && cd build \ncmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local .. \n# 路径指向自己需要安装的位置，一般在/usr/local or /usr/local/opencv#.# or /usr \n\nmake -j8 \n# 这里是八线程，可以根据自己的电脑选择，一般直接使用命令make \n# 达到100%后继续执行 \n\nsudo make install \n```\n\n \n\n## **part4:配置环境** \n\n### 1.修改opencv.conf文件 \n\n```\nsudo gedit /etc/ld.so.conf.d/opencv.conf  \n\n# 写入 \n/usr/local/lib \n```\n\n \n\n### 2.更新系统共享链接库 \n\n```\nsudo ldconfig\n```\n\n \n\n### 3.修改bash.bashrc文件 \n\n```\nsudo gedit /etc/bash.bashrc \n\n# 文件末尾加入 \nPKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  （注意路径) \n\nexport PKG_CONFIG_PATH \n \n# 有些安装路径可能找不到pkgconfig，解决方法如下：\ncd/usr/local/lib \nsudo mkdir pkgconfig && cdpkgconfig \nsudo gedit opencv.pc \n\n# 添加 \nprefix=/usr/local \nexec_prefix=${prefix} \nincludedir=/usr/local/include \nlibdir=/usr/local/lib \n \nName: OpenCV \nDescription: Open Source Computer Vision Library \nVersion: 3.4.2 \nLibs: -L${exec_prefix}/lib -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dpm -lopencv_face -lopencv_photo -lopencv_freetype -lopencv_fuzzy -lopencv_hdf -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_optflow -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_xfeatures2d -lopencv_shape -lopencv_video -lopencv_ml -lopencv_ximgproc -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_flann -lopencv_xobjdetect -lopencv_imgcodecs -lopencv_objdetect -lopencv_xphoto -lopencv_imgproc -lopencv_core \nLibs.private: -ldl -lm -lpthread -lrt \nCflags: -I${includedir} \n\n注：注意版本与路径 \n```\n\n \n\n### 4.保存退出并source \n\n```\nsource /etc/bash.bashrc \n```\n\n \n\n### 5.验证是否安装成功 \n\n```\npkg-config --modversion opencv \n```\n\n \n\n## **part5：将opencv配置到ROS中** \n\n \n\n```\nsudo gedit /opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake \n```\n\n\\# 更改三个地方的路径地址 \n\n![](./media/GetImage1.png)\n\n至此opencv安装与配置完成！ \n\n \n\n## **part6**：opencv的完全卸载\n\n终端指向opencv下build文件夹 \n\n```\nsudo make uninstall \ncd .. \nsudo rm -r build \nsudo rm -r /usr/local/include/opencv2 /usr/local/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/local/share/opencv /usr/local/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/local/bin/opencv* /usr/local/lib/libopencv* \n\n# 注意安装路径不同时卸载路径也不同 \nsudo apt-get –purge remove opencv-doc opencv-data python-opencv \n```\n\n卸载完成！ ","source":"_posts/slam_config/基于ROS的opencv安装与卸载.md","raw":"---\ntitle: 基于ROS的opencv安装与卸载 \ndate:\ntags: \n- Ros\n- Opencv\ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# 基于ROS的opencv安装与卸载 \n\n## **Part1:下载安装包**  \n\n前往官网下载所需版本的opencv。 \n\n## **Part2：安装依赖包** \n\n```\nsudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev \nsudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev \n```\n\n## **Part3：编译opencv**  \n\n```\ncd opncv3.4.2  \n# 终端路径指向自己的opencv文件包，本文档以3.4.2为例\n\n mkdir build && cd build \ncmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local .. \n# 路径指向自己需要安装的位置，一般在/usr/local or /usr/local/opencv#.# or /usr \n\nmake -j8 \n# 这里是八线程，可以根据自己的电脑选择，一般直接使用命令make \n# 达到100%后继续执行 \n\nsudo make install \n```\n\n \n\n## **part4:配置环境** \n\n### 1.修改opencv.conf文件 \n\n```\nsudo gedit /etc/ld.so.conf.d/opencv.conf  \n\n# 写入 \n/usr/local/lib \n```\n\n \n\n### 2.更新系统共享链接库 \n\n```\nsudo ldconfig\n```\n\n \n\n### 3.修改bash.bashrc文件 \n\n```\nsudo gedit /etc/bash.bashrc \n\n# 文件末尾加入 \nPKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  （注意路径) \n\nexport PKG_CONFIG_PATH \n \n# 有些安装路径可能找不到pkgconfig，解决方法如下：\ncd/usr/local/lib \nsudo mkdir pkgconfig && cdpkgconfig \nsudo gedit opencv.pc \n\n# 添加 \nprefix=/usr/local \nexec_prefix=${prefix} \nincludedir=/usr/local/include \nlibdir=/usr/local/lib \n \nName: OpenCV \nDescription: Open Source Computer Vision Library \nVersion: 3.4.2 \nLibs: -L${exec_prefix}/lib -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dpm -lopencv_face -lopencv_photo -lopencv_freetype -lopencv_fuzzy -lopencv_hdf -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_optflow -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_xfeatures2d -lopencv_shape -lopencv_video -lopencv_ml -lopencv_ximgproc -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_flann -lopencv_xobjdetect -lopencv_imgcodecs -lopencv_objdetect -lopencv_xphoto -lopencv_imgproc -lopencv_core \nLibs.private: -ldl -lm -lpthread -lrt \nCflags: -I${includedir} \n\n注：注意版本与路径 \n```\n\n \n\n### 4.保存退出并source \n\n```\nsource /etc/bash.bashrc \n```\n\n \n\n### 5.验证是否安装成功 \n\n```\npkg-config --modversion opencv \n```\n\n \n\n## **part5：将opencv配置到ROS中** \n\n \n\n```\nsudo gedit /opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake \n```\n\n\\# 更改三个地方的路径地址 \n\n![](./media/GetImage1.png)\n\n至此opencv安装与配置完成！ \n\n \n\n## **part6**：opencv的完全卸载\n\n终端指向opencv下build文件夹 \n\n```\nsudo make uninstall \ncd .. \nsudo rm -r build \nsudo rm -r /usr/local/include/opencv2 /usr/local/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/local/share/opencv /usr/local/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/local/bin/opencv* /usr/local/lib/libopencv* \n\n# 注意安装路径不同时卸载路径也不同 \nsudo apt-get –purge remove opencv-doc opencv-data python-opencv \n```\n\n卸载完成！ ","slug":"slam_config/基于ROS的opencv安装与卸载","published":1,"updated":"2023-08-25T09:53:16.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67h0052gcr75pmc7t2j","content":"<h1 id=\"基于ROS的opencv安装与卸载\"><a href=\"#基于ROS的opencv安装与卸载\" class=\"headerlink\" title=\"基于ROS的opencv安装与卸载\"></a>基于ROS的opencv安装与卸载</h1><h2 id=\"Part1-下载安装包\"><a href=\"#Part1-下载安装包\" class=\"headerlink\" title=\"Part1:下载安装包\"></a><strong>Part1:下载安装包</strong></h2><p>前往官网下载所需版本的opencv。 </p>\n<h2 id=\"Part2：安装依赖包\"><a href=\"#Part2：安装依赖包\" class=\"headerlink\" title=\"Part2：安装依赖包\"></a><strong>Part2：安装依赖包</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev </span><br><span class=\"line\">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part3：编译opencv\"><a href=\"#Part3：编译opencv\" class=\"headerlink\" title=\"Part3：编译opencv\"></a><strong>Part3：编译opencv</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd opncv3.4.2  </span><br><span class=\"line\"># 终端路径指向自己的opencv文件包，本文档以3.4.2为例</span><br><span class=\"line\"></span><br><span class=\"line\"> mkdir build &amp;&amp; cd build </span><br><span class=\"line\">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local .. </span><br><span class=\"line\"># 路径指向自己需要安装的位置，一般在/usr/local or /usr/local/opencv#.# or /usr </span><br><span class=\"line\"></span><br><span class=\"line\">make -j8 </span><br><span class=\"line\"># 这里是八线程，可以根据自己的电脑选择，一般直接使用命令make </span><br><span class=\"line\"># 达到100%后继续执行 </span><br><span class=\"line\"></span><br><span class=\"line\">sudo make install </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"part4-配置环境\"><a href=\"#part4-配置环境\" class=\"headerlink\" title=\"part4:配置环境\"></a><strong>part4:配置环境</strong></h2><h3 id=\"1-修改opencv-conf文件\"><a href=\"#1-修改opencv-conf文件\" class=\"headerlink\" title=\"1.修改opencv.conf文件\"></a>1.修改opencv.conf文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/ld.so.conf.d/opencv.conf  </span><br><span class=\"line\"></span><br><span class=\"line\"># 写入 </span><br><span class=\"line\">/usr/local/lib </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-更新系统共享链接库\"><a href=\"#2-更新系统共享链接库\" class=\"headerlink\" title=\"2.更新系统共享链接库\"></a>2.更新系统共享链接库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-修改bash-bashrc文件\"><a href=\"#3-修改bash-bashrc文件\" class=\"headerlink\" title=\"3.修改bash.bashrc文件\"></a>3.修改bash.bashrc文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/bash.bashrc </span><br><span class=\"line\"></span><br><span class=\"line\"># 文件末尾加入 </span><br><span class=\"line\">PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  （注意路径) </span><br><span class=\"line\"></span><br><span class=\"line\">export PKG_CONFIG_PATH </span><br><span class=\"line\"> </span><br><span class=\"line\"># 有些安装路径可能找不到pkgconfig，解决方法如下：</span><br><span class=\"line\">cd/usr/local/lib </span><br><span class=\"line\">sudo mkdir pkgconfig &amp;&amp; cdpkgconfig </span><br><span class=\"line\">sudo gedit opencv.pc </span><br><span class=\"line\"></span><br><span class=\"line\"># 添加 </span><br><span class=\"line\">prefix=/usr/local </span><br><span class=\"line\">exec_prefix=$&#123;prefix&#125; </span><br><span class=\"line\">includedir=/usr/local/include </span><br><span class=\"line\">libdir=/usr/local/lib </span><br><span class=\"line\"> </span><br><span class=\"line\">Name: OpenCV </span><br><span class=\"line\">Description: Open Source Computer Vision Library </span><br><span class=\"line\">Version: 3.4.2 </span><br><span class=\"line\">Libs: -L$&#123;exec_prefix&#125;/lib -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dpm -lopencv_face -lopencv_photo -lopencv_freetype -lopencv_fuzzy -lopencv_hdf -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_optflow -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_xfeatures2d -lopencv_shape -lopencv_video -lopencv_ml -lopencv_ximgproc -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_flann -lopencv_xobjdetect -lopencv_imgcodecs -lopencv_objdetect -lopencv_xphoto -lopencv_imgproc -lopencv_core </span><br><span class=\"line\">Libs.private: -ldl -lm -lpthread -lrt </span><br><span class=\"line\">Cflags: -I$&#123;includedir&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">注：注意版本与路径 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-保存退出并source\"><a href=\"#4-保存退出并source\" class=\"headerlink\" title=\"4.保存退出并source\"></a>4.保存退出并source</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/bash.bashrc </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-验证是否安装成功\"><a href=\"#5-验证是否安装成功\" class=\"headerlink\" title=\"5.验证是否安装成功\"></a>5.验证是否安装成功</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg-config --modversion opencv </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"part5：将opencv配置到ROS中\"><a href=\"#part5：将opencv配置到ROS中\" class=\"headerlink\" title=\"part5：将opencv配置到ROS中\"></a><strong>part5：将opencv配置到ROS中</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake </span><br></pre></td></tr></table></figure>\n\n<p># 更改三个地方的路径地址 </p>\n<p><img src=\"/./media/GetImage1.png\"></p>\n<p>至此opencv安装与配置完成！ </p>\n<h2 id=\"part6：opencv的完全卸载\"><a href=\"#part6：opencv的完全卸载\" class=\"headerlink\" title=\"part6：opencv的完全卸载\"></a><strong>part6</strong>：opencv的完全卸载</h2><p>终端指向opencv下build文件夹 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make uninstall </span><br><span class=\"line\">cd .. </span><br><span class=\"line\">sudo rm -r build </span><br><span class=\"line\">sudo rm -r /usr/local/include/opencv2 /usr/local/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/local/share/opencv /usr/local/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/local/bin/opencv* /usr/local/lib/libopencv* </span><br><span class=\"line\"></span><br><span class=\"line\"># 注意安装路径不同时卸载路径也不同 </span><br><span class=\"line\">sudo apt-get –purge remove opencv-doc opencv-data python-opencv </span><br></pre></td></tr></table></figure>\n\n<p>卸载完成！ </p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":"<h1 id=\"基于ROS的opencv安装与卸载\"><a href=\"#基于ROS的opencv安装与卸载\" class=\"headerlink\" title=\"基于ROS的opencv安装与卸载\"></a>基于ROS的opencv安装与卸载</h1><h2 id=\"Part1-下载安装包\"><a href=\"#Part1-下载安装包\" class=\"headerlink\" title=\"Part1:下载安装包\"></a><strong>Part1:下载安装包</strong></h2><p>前往官网下载所需版本的opencv。 </p>\n<h2 id=\"Part2：安装依赖包\"><a href=\"#Part2：安装依赖包\" class=\"headerlink\" title=\"Part2：安装依赖包\"></a><strong>Part2：安装依赖包</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev </span><br><span class=\"line\">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part3：编译opencv\"><a href=\"#Part3：编译opencv\" class=\"headerlink\" title=\"Part3：编译opencv\"></a><strong>Part3：编译opencv</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd opncv3.4.2  </span><br><span class=\"line\"># 终端路径指向自己的opencv文件包，本文档以3.4.2为例</span><br><span class=\"line\"></span><br><span class=\"line\"> mkdir build &amp;&amp; cd build </span><br><span class=\"line\">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local .. </span><br><span class=\"line\"># 路径指向自己需要安装的位置，一般在/usr/local or /usr/local/opencv#.# or /usr </span><br><span class=\"line\"></span><br><span class=\"line\">make -j8 </span><br><span class=\"line\"># 这里是八线程，可以根据自己的电脑选择，一般直接使用命令make </span><br><span class=\"line\"># 达到100%后继续执行 </span><br><span class=\"line\"></span><br><span class=\"line\">sudo make install </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"part4-配置环境\"><a href=\"#part4-配置环境\" class=\"headerlink\" title=\"part4:配置环境\"></a><strong>part4:配置环境</strong></h2><h3 id=\"1-修改opencv-conf文件\"><a href=\"#1-修改opencv-conf文件\" class=\"headerlink\" title=\"1.修改opencv.conf文件\"></a>1.修改opencv.conf文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/ld.so.conf.d/opencv.conf  </span><br><span class=\"line\"></span><br><span class=\"line\"># 写入 </span><br><span class=\"line\">/usr/local/lib </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-更新系统共享链接库\"><a href=\"#2-更新系统共享链接库\" class=\"headerlink\" title=\"2.更新系统共享链接库\"></a>2.更新系统共享链接库</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ldconfig</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-修改bash-bashrc文件\"><a href=\"#3-修改bash-bashrc文件\" class=\"headerlink\" title=\"3.修改bash.bashrc文件\"></a>3.修改bash.bashrc文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/bash.bashrc </span><br><span class=\"line\"></span><br><span class=\"line\"># 文件末尾加入 </span><br><span class=\"line\">PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig  （注意路径) </span><br><span class=\"line\"></span><br><span class=\"line\">export PKG_CONFIG_PATH </span><br><span class=\"line\"> </span><br><span class=\"line\"># 有些安装路径可能找不到pkgconfig，解决方法如下：</span><br><span class=\"line\">cd/usr/local/lib </span><br><span class=\"line\">sudo mkdir pkgconfig &amp;&amp; cdpkgconfig </span><br><span class=\"line\">sudo gedit opencv.pc </span><br><span class=\"line\"></span><br><span class=\"line\"># 添加 </span><br><span class=\"line\">prefix=/usr/local </span><br><span class=\"line\">exec_prefix=$&#123;prefix&#125; </span><br><span class=\"line\">includedir=/usr/local/include </span><br><span class=\"line\">libdir=/usr/local/lib </span><br><span class=\"line\"> </span><br><span class=\"line\">Name: OpenCV </span><br><span class=\"line\">Description: Open Source Computer Vision Library </span><br><span class=\"line\">Version: 3.4.2 </span><br><span class=\"line\">Libs: -L$&#123;exec_prefix&#125;/lib -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dnn_objdetect -lopencv_dpm -lopencv_face -lopencv_photo -lopencv_freetype -lopencv_fuzzy -lopencv_hdf -lopencv_hfs -lopencv_img_hash -lopencv_line_descriptor -lopencv_optflow -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_xfeatures2d -lopencv_shape -lopencv_video -lopencv_ml -lopencv_ximgproc -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_flann -lopencv_xobjdetect -lopencv_imgcodecs -lopencv_objdetect -lopencv_xphoto -lopencv_imgproc -lopencv_core </span><br><span class=\"line\">Libs.private: -ldl -lm -lpthread -lrt </span><br><span class=\"line\">Cflags: -I$&#123;includedir&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">注：注意版本与路径 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-保存退出并source\"><a href=\"#4-保存退出并source\" class=\"headerlink\" title=\"4.保存退出并source\"></a>4.保存退出并source</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/bash.bashrc </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-验证是否安装成功\"><a href=\"#5-验证是否安装成功\" class=\"headerlink\" title=\"5.验证是否安装成功\"></a>5.验证是否安装成功</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg-config --modversion opencv </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"part5：将opencv配置到ROS中\"><a href=\"#part5：将opencv配置到ROS中\" class=\"headerlink\" title=\"part5：将opencv配置到ROS中\"></a><strong>part5：将opencv配置到ROS中</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake </span><br></pre></td></tr></table></figure>\n\n<p># 更改三个地方的路径地址 </p>\n<p><img src=\"/./media/GetImage1.png\"></p>\n<p>至此opencv安装与配置完成！ </p>\n<h2 id=\"part6：opencv的完全卸载\"><a href=\"#part6：opencv的完全卸载\" class=\"headerlink\" title=\"part6：opencv的完全卸载\"></a><strong>part6</strong>：opencv的完全卸载</h2><p>终端指向opencv下build文件夹 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make uninstall </span><br><span class=\"line\">cd .. </span><br><span class=\"line\">sudo rm -r build </span><br><span class=\"line\">sudo rm -r /usr/local/include/opencv2 /usr/local/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/local/share/opencv /usr/local/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/local/bin/opencv* /usr/local/lib/libopencv* </span><br><span class=\"line\"></span><br><span class=\"line\"># 注意安装路径不同时卸载路径也不同 </span><br><span class=\"line\">sudo apt-get –purge remove opencv-doc opencv-data python-opencv </span><br></pre></td></tr></table></figure>\n\n<p>卸载完成！ </p>\n"},{"title":"安装Orb-slam2","date":"2023-08-25T09:26:09.001Z","description":null,"top_img":false,"_content":"\n# 安装Orb-slam2 \n\n## **Part1:安装orb-slam2的依赖库** \n\n```\nsudo apt-get install libeigen3-dev \n```\n\n \n\n## **Part2：需要安装zed与opencv** \n\n \n\n## **Part3：安装orb-slam2** \n\n\\#创建工作空间，将代码克隆到src下 \n\n```\nmkdir -p orbslam_ws/src \ncd orbslam_ws/src \ncatkin_init_workspace \ngit clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2 \ncd ORB_SLAM2 \nchmod +x build.sh \n ./build.sh \ncd ../ \ncatkin_make \n```\n\n \n\n\\#添加运行环境#PATH为你得安装目录 \n\n```\nexport ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:PATH/ORB_SLAM2/Examples/ROS//添加运行环境 \n```\n\n \n\n\\#将setup.bash添加到~/.bashrc中 \n\n```\nsource ~/.bashrc \n```\n\n \n\n\\#编译ROS驱动 \n\n在ORBSLAM2/Examples/ROS/ORBSLAM2下的Cmakelists.txt中添加一行，-lboost_system\n\n![](./media/GetImage2.png)\n\n\n\n#编译前还得手动export一下运行环境 \n\n```\nexport ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:PATH/ORB_SLAM2/Examples/ROS//添加运行环境 \n./build_ros.sh \n```\n\n\\#编译完成 \n\n \n","source":"_posts/slam_config/安装Orb-slam2.md","raw":"---\ntitle: 安装Orb-slam2 \ndate:\ntags: \n- ORB-SLAM\ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# 安装Orb-slam2 \n\n## **Part1:安装orb-slam2的依赖库** \n\n```\nsudo apt-get install libeigen3-dev \n```\n\n \n\n## **Part2：需要安装zed与opencv** \n\n \n\n## **Part3：安装orb-slam2** \n\n\\#创建工作空间，将代码克隆到src下 \n\n```\nmkdir -p orbslam_ws/src \ncd orbslam_ws/src \ncatkin_init_workspace \ngit clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2 \ncd ORB_SLAM2 \nchmod +x build.sh \n ./build.sh \ncd ../ \ncatkin_make \n```\n\n \n\n\\#添加运行环境#PATH为你得安装目录 \n\n```\nexport ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:PATH/ORB_SLAM2/Examples/ROS//添加运行环境 \n```\n\n \n\n\\#将setup.bash添加到~/.bashrc中 \n\n```\nsource ~/.bashrc \n```\n\n \n\n\\#编译ROS驱动 \n\n在ORBSLAM2/Examples/ROS/ORBSLAM2下的Cmakelists.txt中添加一行，-lboost_system\n\n![](./media/GetImage2.png)\n\n\n\n#编译前还得手动export一下运行环境 \n\n```\nexport ROS_PACKAGE_PATH=${ROS_PACKAGE_PATH}:PATH/ORB_SLAM2/Examples/ROS//添加运行环境 \n./build_ros.sh \n```\n\n\\#编译完成 \n\n \n","slug":"slam_config/安装Orb-slam2","published":1,"updated":"2023-08-25T09:55:02.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67i0056gcr7ctw6bxk3","content":"<h1 id=\"安装Orb-slam2\"><a href=\"#安装Orb-slam2\" class=\"headerlink\" title=\"安装Orb-slam2\"></a>安装Orb-slam2</h1><h2 id=\"Part1-安装orb-slam2的依赖库\"><a href=\"#Part1-安装orb-slam2的依赖库\" class=\"headerlink\" title=\"Part1:安装orb-slam2的依赖库\"></a><strong>Part1:安装orb-slam2的依赖库</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libeigen3-dev </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part2：需要安装zed与opencv\"><a href=\"#Part2：需要安装zed与opencv\" class=\"headerlink\" title=\"Part2：需要安装zed与opencv\"></a><strong>Part2：需要安装zed与opencv</strong></h2><h2 id=\"Part3：安装orb-slam2\"><a href=\"#Part3：安装orb-slam2\" class=\"headerlink\" title=\"Part3：安装orb-slam2\"></a><strong>Part3：安装orb-slam2</strong></h2><p>#创建工作空间，将代码克隆到src下 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p orbslam_ws/src </span><br><span class=\"line\">cd orbslam_ws/src </span><br><span class=\"line\">catkin_init_workspace </span><br><span class=\"line\">git clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2 </span><br><span class=\"line\">cd ORB_SLAM2 </span><br><span class=\"line\">chmod +x build.sh </span><br><span class=\"line\"> ./build.sh </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">catkin_make </span><br></pre></td></tr></table></figure>\n\n<p>#添加运行环境#PATH为你得安装目录 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ROS_PACKAGE_PATH=$&#123;ROS_PACKAGE_PATH&#125;:PATH/ORB_SLAM2/Examples/ROS//添加运行环境 </span><br></pre></td></tr></table></figure>\n\n<p>#将setup.bash添加到~&#x2F;.bashrc中 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc </span><br></pre></td></tr></table></figure>\n\n<p>#编译ROS驱动 </p>\n<p>在ORBSLAM2&#x2F;Examples&#x2F;ROS&#x2F;ORBSLAM2下的Cmakelists.txt中添加一行，-lboost_system</p>\n<p><img src=\"/./media/GetImage2.png\"></p>\n<p>#编译前还得手动export一下运行环境 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ROS_PACKAGE_PATH=$&#123;ROS_PACKAGE_PATH&#125;:PATH/ORB_SLAM2/Examples/ROS//添加运行环境 </span><br><span class=\"line\">./build_ros.sh </span><br></pre></td></tr></table></figure>\n\n<p>#编译完成 </p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"安装Orb-slam2\"><a href=\"#安装Orb-slam2\" class=\"headerlink\" title=\"安装Orb-slam2\"></a>安装Orb-slam2</h1><h2 id=\"Part1-安装orb-slam2的依赖库\"><a href=\"#Part1-安装orb-slam2的依赖库\" class=\"headerlink\" title=\"Part1:安装orb-slam2的依赖库\"></a><strong>Part1:安装orb-slam2的依赖库</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install libeigen3-dev </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part2：需要安装zed与opencv\"><a href=\"#Part2：需要安装zed与opencv\" class=\"headerlink\" title=\"Part2：需要安装zed与opencv\"></a><strong>Part2：需要安装zed与opencv</strong></h2><h2 id=\"Part3：安装orb-slam2\"><a href=\"#Part3：安装orb-slam2\" class=\"headerlink\" title=\"Part3：安装orb-slam2\"></a><strong>Part3：安装orb-slam2</strong></h2><p>#创建工作空间，将代码克隆到src下 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p orbslam_ws/src </span><br><span class=\"line\">cd orbslam_ws/src </span><br><span class=\"line\">catkin_init_workspace </span><br><span class=\"line\">git clone https://github.com/raulmur/ORB_SLAM2.git ORB_SLAM2 </span><br><span class=\"line\">cd ORB_SLAM2 </span><br><span class=\"line\">chmod +x build.sh </span><br><span class=\"line\"> ./build.sh </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">catkin_make </span><br></pre></td></tr></table></figure>\n\n<p>#添加运行环境#PATH为你得安装目录 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ROS_PACKAGE_PATH=$&#123;ROS_PACKAGE_PATH&#125;:PATH/ORB_SLAM2/Examples/ROS//添加运行环境 </span><br></pre></td></tr></table></figure>\n\n<p>#将setup.bash添加到~&#x2F;.bashrc中 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc </span><br></pre></td></tr></table></figure>\n\n<p>#编译ROS驱动 </p>\n<p>在ORBSLAM2&#x2F;Examples&#x2F;ROS&#x2F;ORBSLAM2下的Cmakelists.txt中添加一行，-lboost_system</p>\n<p><img src=\"/./media/GetImage2.png\"></p>\n<p>#编译前还得手动export一下运行环境 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ROS_PACKAGE_PATH=$&#123;ROS_PACKAGE_PATH&#125;:PATH/ORB_SLAM2/Examples/ROS//添加运行环境 </span><br><span class=\"line\">./build_ros.sh </span><br></pre></td></tr></table></figure>\n\n<p>#编译完成 </p>\n"},{"title":"安装LIO-SAM","date":"2023-08-25T09:26:09.000Z","description":null,"top_img":false,"_content":"\n# 安装LIO-SAM \n\n## **part1**：安装依赖功能包 \n\n```\nsudo apt-get install -y ros-melodic-navigation \nsudo apt-get install -y ros-melodic-robot-localization \nsudo apt-get install -y ros-melodic-robot-state-publisher \n```\n\n \n\n## **part2:**安装gtsam\n\n```\ngit clone https://github.com/borglab/gtsam.git \nmkdir build && cd build \ncmake -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF .. \nsudo make install -j4 \n```\n\n \n\n## part3:安装lio-sam\n\n```\nmkdir ~/lio-sam_ws/src \ncd ~/lio-sam_ws/src \ngit clone https://github.com/TixiaoShan/LIO-SAM.git \ncd ../ \ncatkin_make \n```\n\n ","source":"_posts/slam_config/安装LIO-SAM.md","raw":"---\ntitle: 安装LIO-SAM \ndate:\ntags: \n- LIO-SAM\ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# 安装LIO-SAM \n\n## **part1**：安装依赖功能包 \n\n```\nsudo apt-get install -y ros-melodic-navigation \nsudo apt-get install -y ros-melodic-robot-localization \nsudo apt-get install -y ros-melodic-robot-state-publisher \n```\n\n \n\n## **part2:**安装gtsam\n\n```\ngit clone https://github.com/borglab/gtsam.git \nmkdir build && cd build \ncmake -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF .. \nsudo make install -j4 \n```\n\n \n\n## part3:安装lio-sam\n\n```\nmkdir ~/lio-sam_ws/src \ncd ~/lio-sam_ws/src \ngit clone https://github.com/TixiaoShan/LIO-SAM.git \ncd ../ \ncatkin_make \n```\n\n ","slug":"slam_config/安装LIO-SAM","published":1,"updated":"2023-08-25T09:55:16.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67i005agcr79u46ewbb","content":"<h1 id=\"安装LIO-SAM\"><a href=\"#安装LIO-SAM\" class=\"headerlink\" title=\"安装LIO-SAM\"></a>安装LIO-SAM</h1><h2 id=\"part1：安装依赖功能包\"><a href=\"#part1：安装依赖功能包\" class=\"headerlink\" title=\"part1：安装依赖功能包\"></a><strong>part1</strong>：安装依赖功能包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y ros-melodic-navigation </span><br><span class=\"line\">sudo apt-get install -y ros-melodic-robot-localization </span><br><span class=\"line\">sudo apt-get install -y ros-melodic-robot-state-publisher </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"part2-安装gtsam\"><a href=\"#part2-安装gtsam\" class=\"headerlink\" title=\"**part2:**安装gtsam\"></a>**part2:**安装gtsam</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/borglab/gtsam.git </span><br><span class=\"line\">mkdir build &amp;&amp; cd build </span><br><span class=\"line\">cmake -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF .. </span><br><span class=\"line\">sudo make install -j4 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"part3-安装lio-sam\"><a href=\"#part3-安装lio-sam\" class=\"headerlink\" title=\"part3:安装lio-sam\"></a>part3:安装lio-sam</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/lio-sam_ws/src </span><br><span class=\"line\">cd ~/lio-sam_ws/src </span><br><span class=\"line\">git clone https://github.com/TixiaoShan/LIO-SAM.git </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">catkin_make </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-1.png","cover_type":"img","excerpt":"","more":"<h1 id=\"安装LIO-SAM\"><a href=\"#安装LIO-SAM\" class=\"headerlink\" title=\"安装LIO-SAM\"></a>安装LIO-SAM</h1><h2 id=\"part1：安装依赖功能包\"><a href=\"#part1：安装依赖功能包\" class=\"headerlink\" title=\"part1：安装依赖功能包\"></a><strong>part1</strong>：安装依赖功能包</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y ros-melodic-navigation </span><br><span class=\"line\">sudo apt-get install -y ros-melodic-robot-localization </span><br><span class=\"line\">sudo apt-get install -y ros-melodic-robot-state-publisher </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"part2-安装gtsam\"><a href=\"#part2-安装gtsam\" class=\"headerlink\" title=\"**part2:**安装gtsam\"></a>**part2:**安装gtsam</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/borglab/gtsam.git </span><br><span class=\"line\">mkdir build &amp;&amp; cd build </span><br><span class=\"line\">cmake -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF .. </span><br><span class=\"line\">sudo make install -j4 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"part3-安装lio-sam\"><a href=\"#part3-安装lio-sam\" class=\"headerlink\" title=\"part3:安装lio-sam\"></a>part3:安装lio-sam</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/lio-sam_ws/src </span><br><span class=\"line\">cd ~/lio-sam_ws/src </span><br><span class=\"line\">git clone https://github.com/TixiaoShan/LIO-SAM.git </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">catkin_make </span><br></pre></td></tr></table></figure>\n\n"},{"title":"xavier装机文档","date":"2023-08-25T09:26:08.997Z","description":null,"top_img":false,"_content":"\n# xavier装机文档 \n\n## 1、刷机 \n\n刷 Jetpack 最新版本: \n\nhttps://www.ncnynl.com/category/Xavier-basic/ \n\n## 2、挂载固态硬盘 \n\nhttps://www.ncnynl.com/archives/201912/3486.html \n\n## 3、更新源列表及软件更新( 必须要先更新 ) \n\n## 4、进入 xavier 基础依赖 \n\nhttps://github.com/yqlbu/jetson-packages-family安装 \n\nDependencies Installation注意不要安装Set CUDA Path \n\n## 5、卸载 opencv \n\n刷机后系统自带 opencv,但是不支持 GPU,建议移除(一定要先安装Opencv,在安装ros,不然后面会出现想不到的错误) \n\n进入https://github.com/yqlbu/jetson-packages-family 找到Table of Content \n\n安装命令 \n\n```\nsudo apt-get update \nsudo apt-get upgrade \nsudo apt-get install -y nano curl \nsudo apt-get install -y python3-pip python3-dev \nsudo apt-get install -y python-pip \nsudo apt-get install -y python-setuptools \nsudo apt-get install -y python3-setuptools \nsudo apt-get install -y libcanberra-gtk0 libcanberra-gtk-module \npip3 install -U pip \npip install -U pip \npip3 install setuptools wheel \npip install setuptools wheel cython \n!!! You may modify the script to install custom version of OpenCV \n```\n\n修改 install_opencv4.1.1_jetson.sh 改成4.4.0 版本的opencv 成功后的日志 \n\n## 6、安装ros \n\nROS入门教程-安装并配置ROS环境（melodic版本） \n\nhttps://www.ncnynl.com/archives/201906/3147.html \n\n```\ncd ~ \nsudo apt-get purge libopencv* \nbash <(wget -qO- https://github.com/yqlbu/jetson-packages-family/raw/master/OpenCV/install_opencv4.1.1_jetson.sh) \n```\n\n> 需要下载 1,680 kB 的归档。 \n>\n> 解压缩后会消耗 3,678 kB 的额外空间。 \n>\n> 获取:1 http://ports.ubuntu.com/ubuntu-ports bionic-updates/universe arm64 \n>\n> libopencv-core3.2 arm64 3.2.0+dfsg-4ubuntu0.1 [631 kB] \n>\n> 获取:2 http://ports.ubuntu.com/ubuntu-ports bionic-updates/universe arm64 \n>\n> libopencv-core-dev arm64 3.2.0+dfsg-4ubuntu0.1 [1,049 kB] \n>\n> 已下载 1,680 kB，耗时 7秒 (256 kB/s)                                           \n>\n> debconf: 因为并未安装 apt-utils，所以软件包的设定过程将被推迟 \n>\n> (正在读取数据库 ... 系统当前共安装有 172732 个文件和目录。) \n>\n> 正在卸载 libopencv-dev (4.1.1-2-gd5a58aa75) ... \n>\n> 正在选中未选择的软件包 libopencv-core3.2:arm64。 \n>\n> (正在读取数据库 ... 系统当前共安装有 172397 个文件和目录。) \n>\n> 正准备解包 .../libopencv-core3.2_3.2.0+dfsg-4ubuntu0.1_arm64.deb ... \n>\n> 正在解包 libopencv-core3.2:arm64 (3.2.0+dfsg-4ubuntu0.1) ... \n>\n> 正在选中未选择的软件包 libopencv-core-dev:arm64。 \n>\n> 正准备解包 .../libopencv-core-dev_3.2.0+dfsg-4ubuntu0.1_arm64.deb ... \n>\n> 正在解包 libopencv-core-dev:arm64 (3.2.0+dfsg-4ubuntu0.1) ... \n>\n> 正在设置 libopencv-core3.2:arm64 (3.2.0+dfsg-4ubuntu0.1) ... \n>\n> 正在设置 libopencv-core-dev:arm64 (3.2.0+dfsg-4ubuntu0.1) ... \n>\n> 正在处理用于 libc-bin (2.27-3ubuntu1.4) 的触发器 ... \n>\n> [BASH]   Installation completed ... \n>\n> sudo sh -c '. /etc/lsb-release && echo \"deb \n>\n> http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main\" > \n>\n> /etc/apt/sources.list.d/ros-latest.list' \n>\n> sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key \n>\n> C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 \n\n```\nsudo apt-get update \nsudo apt-get install ros-melodic-desktop-full \nsudo apt install python-rosdep python-rosinstall python-rosinstall-generator \npython-wstool build-essential \nsudo rosdep init \nrosdep update \necho \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc \n```\n\n中途可能报错： \n\n打开hosts文件 sudo gedit /etc/hosts #在文件末尾添加 \n\n151.101.84.133  raw.githubusercontent.com \n\n保存后退出再尝试 \n\n## 7、ros中使用realsense \n\n### \ta) 安装 realsense sdk \n\n​\thttps://github.com/IntelRealSense/realsense-ros(官方给出的方式,多次编译失败) \n\n​\thttps://github.com/jetsonhacks/installRealSenseSDK(亲自实验,成功!) \n\n​\t安装 installRealSenseSDK \n\n### \tb) 安装 realsesense_ros \n\n​\t若报错: Project ‘cv_bridges’ specifics '/user/include/opencv' as an include dir, which is not found. \n\n​\t则:将报错路径中的cv_bridgeconfig.cmake文件中 include/opencv 改成 include/opencv4 \n\n```\nvi /opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake(94/96行修改opencv4) \nsource ~/.bashrc \nroscore \ngit clone https://github.com/jetsonhacks/installRealSenseSDK.git \ncd installRealSenseSDK \n./installLibrealsense.sh \ncd ~ \nmkdir -p ~/catkin_ws/src \ncd ~/catkin_ws/src \ngit clone https://github.com/IntelRealSense/realsense-ros.git \ncd realsense-ros/ \ngit checkout `git tag | sort -V | grep -P \"^2.\\d+\\.\\d+\" | tail -1` \ncd .. \ngit clone https://github.com/pal-robotics/ddynamic_reconfigure.git \ncatkin_init_workspace \ncd .. \n```\n\n​\t出现以下日志表示成功啦！！！ \n\n## 8、python3 项目测试 \n\n将 CV_Bridge 下的 CMakeLists 中的 Python37 改成 Python3 \n\n## 9、其他 \n\n```\ngit clone https://github.com/JetBrains/pty4j.git \ncd pty4j/native \ngcc -fPIC -c *.c \ngcc -shared -o libpty.so *.o \n\n\\# 复制到 pycharm 下面, 注意下路径 \ncp libpty.so /home/yc/pycharm-community-2019.3.4/lib/pty4j-native/linux/x86 \nsudo apt-get install python-catkin-tools \nmkdir -p ~/project_ws/src \ncd ~/project_ws \ncatkin init \ncd src \ngit clone -b noetic https://github.com/ros-perception/vision_opencv.git \ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3-DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/aarch64-linux-gnu/libpython3.6m.so \nsudo pip install -U catkin_pkg \nsudo pip3 install -U catkin_pkg -i https://pypi.douban.com/simple \ncatkin build \nsource ~/project_ws/devel/setup.bash \nsource ~/.bashrc \npip install rospkg \nroslaunch realsense2_camera rs_camera.launch \n```\n\n输入法修复 \n\nubuntu 16.04 输入法候选框不显示: \n\n解决方案: \n\n网上查询到的方法,亲测可用. \n\n如果运行了下面这条命令输入法就正常了的话： \n\n```\nkillall fcitx-qimpanel \n```\n\n那么： \n\n```\nsudo apt-get remove fcitx-ui-qimpanel \n```\n\n问题解决. 亲测可用. ","source":"_posts/slam_config/xavier装机文档.md","raw":"---\ntitle: xavier装机文档 \ndate:\ntags: \n- Xavier\ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# xavier装机文档 \n\n## 1、刷机 \n\n刷 Jetpack 最新版本: \n\nhttps://www.ncnynl.com/category/Xavier-basic/ \n\n## 2、挂载固态硬盘 \n\nhttps://www.ncnynl.com/archives/201912/3486.html \n\n## 3、更新源列表及软件更新( 必须要先更新 ) \n\n## 4、进入 xavier 基础依赖 \n\nhttps://github.com/yqlbu/jetson-packages-family安装 \n\nDependencies Installation注意不要安装Set CUDA Path \n\n## 5、卸载 opencv \n\n刷机后系统自带 opencv,但是不支持 GPU,建议移除(一定要先安装Opencv,在安装ros,不然后面会出现想不到的错误) \n\n进入https://github.com/yqlbu/jetson-packages-family 找到Table of Content \n\n安装命令 \n\n```\nsudo apt-get update \nsudo apt-get upgrade \nsudo apt-get install -y nano curl \nsudo apt-get install -y python3-pip python3-dev \nsudo apt-get install -y python-pip \nsudo apt-get install -y python-setuptools \nsudo apt-get install -y python3-setuptools \nsudo apt-get install -y libcanberra-gtk0 libcanberra-gtk-module \npip3 install -U pip \npip install -U pip \npip3 install setuptools wheel \npip install setuptools wheel cython \n!!! You may modify the script to install custom version of OpenCV \n```\n\n修改 install_opencv4.1.1_jetson.sh 改成4.4.0 版本的opencv 成功后的日志 \n\n## 6、安装ros \n\nROS入门教程-安装并配置ROS环境（melodic版本） \n\nhttps://www.ncnynl.com/archives/201906/3147.html \n\n```\ncd ~ \nsudo apt-get purge libopencv* \nbash <(wget -qO- https://github.com/yqlbu/jetson-packages-family/raw/master/OpenCV/install_opencv4.1.1_jetson.sh) \n```\n\n> 需要下载 1,680 kB 的归档。 \n>\n> 解压缩后会消耗 3,678 kB 的额外空间。 \n>\n> 获取:1 http://ports.ubuntu.com/ubuntu-ports bionic-updates/universe arm64 \n>\n> libopencv-core3.2 arm64 3.2.0+dfsg-4ubuntu0.1 [631 kB] \n>\n> 获取:2 http://ports.ubuntu.com/ubuntu-ports bionic-updates/universe arm64 \n>\n> libopencv-core-dev arm64 3.2.0+dfsg-4ubuntu0.1 [1,049 kB] \n>\n> 已下载 1,680 kB，耗时 7秒 (256 kB/s)                                           \n>\n> debconf: 因为并未安装 apt-utils，所以软件包的设定过程将被推迟 \n>\n> (正在读取数据库 ... 系统当前共安装有 172732 个文件和目录。) \n>\n> 正在卸载 libopencv-dev (4.1.1-2-gd5a58aa75) ... \n>\n> 正在选中未选择的软件包 libopencv-core3.2:arm64。 \n>\n> (正在读取数据库 ... 系统当前共安装有 172397 个文件和目录。) \n>\n> 正准备解包 .../libopencv-core3.2_3.2.0+dfsg-4ubuntu0.1_arm64.deb ... \n>\n> 正在解包 libopencv-core3.2:arm64 (3.2.0+dfsg-4ubuntu0.1) ... \n>\n> 正在选中未选择的软件包 libopencv-core-dev:arm64。 \n>\n> 正准备解包 .../libopencv-core-dev_3.2.0+dfsg-4ubuntu0.1_arm64.deb ... \n>\n> 正在解包 libopencv-core-dev:arm64 (3.2.0+dfsg-4ubuntu0.1) ... \n>\n> 正在设置 libopencv-core3.2:arm64 (3.2.0+dfsg-4ubuntu0.1) ... \n>\n> 正在设置 libopencv-core-dev:arm64 (3.2.0+dfsg-4ubuntu0.1) ... \n>\n> 正在处理用于 libc-bin (2.27-3ubuntu1.4) 的触发器 ... \n>\n> [BASH]   Installation completed ... \n>\n> sudo sh -c '. /etc/lsb-release && echo \"deb \n>\n> http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main\" > \n>\n> /etc/apt/sources.list.d/ros-latest.list' \n>\n> sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key \n>\n> C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 \n\n```\nsudo apt-get update \nsudo apt-get install ros-melodic-desktop-full \nsudo apt install python-rosdep python-rosinstall python-rosinstall-generator \npython-wstool build-essential \nsudo rosdep init \nrosdep update \necho \"source /opt/ros/melodic/setup.bash\" >> ~/.bashrc \n```\n\n中途可能报错： \n\n打开hosts文件 sudo gedit /etc/hosts #在文件末尾添加 \n\n151.101.84.133  raw.githubusercontent.com \n\n保存后退出再尝试 \n\n## 7、ros中使用realsense \n\n### \ta) 安装 realsense sdk \n\n​\thttps://github.com/IntelRealSense/realsense-ros(官方给出的方式,多次编译失败) \n\n​\thttps://github.com/jetsonhacks/installRealSenseSDK(亲自实验,成功!) \n\n​\t安装 installRealSenseSDK \n\n### \tb) 安装 realsesense_ros \n\n​\t若报错: Project ‘cv_bridges’ specifics '/user/include/opencv' as an include dir, which is not found. \n\n​\t则:将报错路径中的cv_bridgeconfig.cmake文件中 include/opencv 改成 include/opencv4 \n\n```\nvi /opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake(94/96行修改opencv4) \nsource ~/.bashrc \nroscore \ngit clone https://github.com/jetsonhacks/installRealSenseSDK.git \ncd installRealSenseSDK \n./installLibrealsense.sh \ncd ~ \nmkdir -p ~/catkin_ws/src \ncd ~/catkin_ws/src \ngit clone https://github.com/IntelRealSense/realsense-ros.git \ncd realsense-ros/ \ngit checkout `git tag | sort -V | grep -P \"^2.\\d+\\.\\d+\" | tail -1` \ncd .. \ngit clone https://github.com/pal-robotics/ddynamic_reconfigure.git \ncatkin_init_workspace \ncd .. \n```\n\n​\t出现以下日志表示成功啦！！！ \n\n## 8、python3 项目测试 \n\n将 CV_Bridge 下的 CMakeLists 中的 Python37 改成 Python3 \n\n## 9、其他 \n\n```\ngit clone https://github.com/JetBrains/pty4j.git \ncd pty4j/native \ngcc -fPIC -c *.c \ngcc -shared -o libpty.so *.o \n\n\\# 复制到 pycharm 下面, 注意下路径 \ncp libpty.so /home/yc/pycharm-community-2019.3.4/lib/pty4j-native/linux/x86 \nsudo apt-get install python-catkin-tools \nmkdir -p ~/project_ws/src \ncd ~/project_ws \ncatkin init \ncd src \ngit clone -b noetic https://github.com/ros-perception/vision_opencv.git \ncatkin config -DPYTHON_EXECUTABLE=/usr/bin/python3-DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/aarch64-linux-gnu/libpython3.6m.so \nsudo pip install -U catkin_pkg \nsudo pip3 install -U catkin_pkg -i https://pypi.douban.com/simple \ncatkin build \nsource ~/project_ws/devel/setup.bash \nsource ~/.bashrc \npip install rospkg \nroslaunch realsense2_camera rs_camera.launch \n```\n\n输入法修复 \n\nubuntu 16.04 输入法候选框不显示: \n\n解决方案: \n\n网上查询到的方法,亲测可用. \n\n如果运行了下面这条命令输入法就正常了的话： \n\n```\nkillall fcitx-qimpanel \n```\n\n那么： \n\n```\nsudo apt-get remove fcitx-ui-qimpanel \n```\n\n问题解决. 亲测可用. ","slug":"slam_config/xavier装机文档","published":1,"updated":"2023-08-25T09:55:32.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67j005egcr722ji2lsv","content":"<h1 id=\"xavier装机文档\"><a href=\"#xavier装机文档\" class=\"headerlink\" title=\"xavier装机文档\"></a>xavier装机文档</h1><h2 id=\"1、刷机\"><a href=\"#1、刷机\" class=\"headerlink\" title=\"1、刷机\"></a>1、刷机</h2><p>刷 Jetpack 最新版本: </p>\n<p><a href=\"https://www.ncnynl.com/category/Xavier-basic/\">https://www.ncnynl.com/category/Xavier-basic/</a> </p>\n<h2 id=\"2、挂载固态硬盘\"><a href=\"#2、挂载固态硬盘\" class=\"headerlink\" title=\"2、挂载固态硬盘\"></a>2、挂载固态硬盘</h2><p><a href=\"https://www.ncnynl.com/archives/201912/3486.html\">https://www.ncnynl.com/archives/201912/3486.html</a> </p>\n<h2 id=\"3、更新源列表及软件更新-必须要先更新\"><a href=\"#3、更新源列表及软件更新-必须要先更新\" class=\"headerlink\" title=\"3、更新源列表及软件更新( 必须要先更新 )\"></a>3、更新源列表及软件更新( 必须要先更新 )</h2><h2 id=\"4、进入-xavier-基础依赖\"><a href=\"#4、进入-xavier-基础依赖\" class=\"headerlink\" title=\"4、进入 xavier 基础依赖\"></a>4、进入 xavier 基础依赖</h2><p><a href=\"https://github.com/yqlbu/jetson-packages-family%E5%AE%89%E8%A3%85\">https://github.com/yqlbu/jetson-packages-family安装</a> </p>\n<p>Dependencies Installation注意不要安装Set CUDA Path </p>\n<h2 id=\"5、卸载-opencv\"><a href=\"#5、卸载-opencv\" class=\"headerlink\" title=\"5、卸载 opencv\"></a>5、卸载 opencv</h2><p>刷机后系统自带 opencv,但是不支持 GPU,建议移除(一定要先安装Opencv,在安装ros,不然后面会出现想不到的错误) </p>\n<p>进入<a href=\"https://github.com/yqlbu/jetson-packages-family\">https://github.com/yqlbu/jetson-packages-family</a> 找到Table of Content </p>\n<p>安装命令 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update </span><br><span class=\"line\">sudo apt-get upgrade </span><br><span class=\"line\">sudo apt-get install -y nano curl </span><br><span class=\"line\">sudo apt-get install -y python3-pip python3-dev </span><br><span class=\"line\">sudo apt-get install -y python-pip </span><br><span class=\"line\">sudo apt-get install -y python-setuptools </span><br><span class=\"line\">sudo apt-get install -y python3-setuptools </span><br><span class=\"line\">sudo apt-get install -y libcanberra-gtk0 libcanberra-gtk-module </span><br><span class=\"line\">pip3 install -U pip </span><br><span class=\"line\">pip install -U pip </span><br><span class=\"line\">pip3 install setuptools wheel </span><br><span class=\"line\">pip install setuptools wheel cython </span><br><span class=\"line\">!!! You may modify the script to install custom version of OpenCV </span><br></pre></td></tr></table></figure>\n\n<p>修改 install_opencv4.1.1_jetson.sh 改成4.4.0 版本的opencv 成功后的日志 </p>\n<h2 id=\"6、安装ros\"><a href=\"#6、安装ros\" class=\"headerlink\" title=\"6、安装ros\"></a>6、安装ros</h2><p>ROS入门教程-安装并配置ROS环境（melodic版本） </p>\n<p><a href=\"https://www.ncnynl.com/archives/201906/3147.html\">https://www.ncnynl.com/archives/201906/3147.html</a> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~ </span><br><span class=\"line\">sudo apt-get purge libopencv* </span><br><span class=\"line\">bash &lt;(wget -qO- https://github.com/yqlbu/jetson-packages-family/raw/master/OpenCV/install_opencv4.1.1_jetson.sh) </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要下载 1,680 kB 的归档。 </p>\n<p>解压缩后会消耗 3,678 kB 的额外空间。 </p>\n<p>获取:1 <a href=\"http://ports.ubuntu.com/ubuntu-ports\">http://ports.ubuntu.com/ubuntu-ports</a> bionic-updates&#x2F;universe arm64 </p>\n<p>libopencv-core3.2 arm64 3.2.0+dfsg-4ubuntu0.1 [631 kB] </p>\n<p>获取:2 <a href=\"http://ports.ubuntu.com/ubuntu-ports\">http://ports.ubuntu.com/ubuntu-ports</a> bionic-updates&#x2F;universe arm64 </p>\n<p>libopencv-core-dev arm64 3.2.0+dfsg-4ubuntu0.1 [1,049 kB] </p>\n<p>已下载 1,680 kB，耗时 7秒 (256 kB&#x2F;s)                                           </p>\n<p>debconf: 因为并未安装 apt-utils，所以软件包的设定过程将被推迟 </p>\n<p>(正在读取数据库 … 系统当前共安装有 172732 个文件和目录。) </p>\n<p>正在卸载 libopencv-dev (4.1.1-2-gd5a58aa75) … </p>\n<p>正在选中未选择的软件包 libopencv-core3.2:arm64。 </p>\n<p>(正在读取数据库 … 系统当前共安装有 172397 个文件和目录。) </p>\n<p>正准备解包 …&#x2F;libopencv-core3.2_3.2.0+dfsg-4ubuntu0.1_arm64.deb … </p>\n<p>正在解包 libopencv-core3.2:arm64 (3.2.0+dfsg-4ubuntu0.1) … </p>\n<p>正在选中未选择的软件包 libopencv-core-dev:arm64。 </p>\n<p>正准备解包 …&#x2F;libopencv-core-dev_3.2.0+dfsg-4ubuntu0.1_arm64.deb … </p>\n<p>正在解包 libopencv-core-dev:arm64 (3.2.0+dfsg-4ubuntu0.1) … </p>\n<p>正在设置 libopencv-core3.2:arm64 (3.2.0+dfsg-4ubuntu0.1) … </p>\n<p>正在设置 libopencv-core-dev:arm64 (3.2.0+dfsg-4ubuntu0.1) … </p>\n<p>正在处理用于 libc-bin (2.27-3ubuntu1.4) 的触发器 … </p>\n<p>[BASH]   Installation completed … </p>\n<p>sudo sh -c ‘. &#x2F;etc&#x2F;lsb-release &amp;&amp; echo “deb </p>\n<p><a href=\"http://mirrors.ustc.edu.cn/ros/ubuntu/\">http://mirrors.ustc.edu.cn/ros/ubuntu/</a> $DISTRIB_CODENAME main” &gt; </p>\n<p>&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ros-latest.list’ </p>\n<p>sudo apt-key adv –keyserver ‘hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80’ –recv-key </p>\n<p>C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update </span><br><span class=\"line\">sudo apt-get install ros-melodic-desktop-full </span><br><span class=\"line\">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator </span><br><span class=\"line\">python-wstool build-essential </span><br><span class=\"line\">sudo rosdep init </span><br><span class=\"line\">rosdep update </span><br><span class=\"line\">echo &quot;source /opt/ros/melodic/setup.bash&quot; &gt;&gt; ~/.bashrc </span><br></pre></td></tr></table></figure>\n\n<p>中途可能报错： </p>\n<p>打开hosts文件 sudo gedit &#x2F;etc&#x2F;hosts #在文件末尾添加 </p>\n<p>151.101.84.133  raw.githubusercontent.com </p>\n<p>保存后退出再尝试 </p>\n<h2 id=\"7、ros中使用realsense\"><a href=\"#7、ros中使用realsense\" class=\"headerlink\" title=\"7、ros中使用realsense\"></a>7、ros中使用realsense</h2><h3 id=\"a-安装-realsense-sdk\"><a href=\"#a-安装-realsense-sdk\" class=\"headerlink\" title=\"a) 安装 realsense sdk\"></a>a) 安装 realsense sdk</h3><p>​\t<a href=\"https://github.com/IntelRealSense/realsense-ros(%E5%AE%98%E6%96%B9%E7%BB%99%E5%87%BA%E7%9A%84%E6%96%B9%E5%BC%8F,%E5%A4%9A%E6%AC%A1%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5)\">https://github.com/IntelRealSense/realsense-ros(官方给出的方式,多次编译失败)</a> </p>\n<p>​\t<a href=\"https://github.com/jetsonhacks/installRealSenseSDK(%E4%BA%B2%E8%87%AA%E5%AE%9E%E9%AA%8C,%E6%88%90%E5%8A%9F!)\">https://github.com/jetsonhacks/installRealSenseSDK(亲自实验,成功!)</a> </p>\n<p>​\t安装 installRealSenseSDK </p>\n<h3 id=\"b-安装-realsesense-ros\"><a href=\"#b-安装-realsesense-ros\" class=\"headerlink\" title=\"b) 安装 realsesense_ros\"></a>b) 安装 realsesense_ros</h3><p>​\t若报错: Project ‘cv_bridges’ specifics ‘&#x2F;user&#x2F;include&#x2F;opencv’ as an include dir, which is not found. </p>\n<p>​\t则:将报错路径中的cv_bridgeconfig.cmake文件中 include&#x2F;opencv 改成 include&#x2F;opencv4 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake(94/96行修改opencv4) </span><br><span class=\"line\">source ~/.bashrc </span><br><span class=\"line\">roscore </span><br><span class=\"line\">git clone https://github.com/jetsonhacks/installRealSenseSDK.git </span><br><span class=\"line\">cd installRealSenseSDK </span><br><span class=\"line\">./installLibrealsense.sh </span><br><span class=\"line\">cd ~ </span><br><span class=\"line\">mkdir -p ~/catkin_ws/src </span><br><span class=\"line\">cd ~/catkin_ws/src </span><br><span class=\"line\">git clone https://github.com/IntelRealSense/realsense-ros.git </span><br><span class=\"line\">cd realsense-ros/ </span><br><span class=\"line\">git checkout `git tag | sort -V | grep -P &quot;^2.\\d+\\.\\d+&quot; | tail -1` </span><br><span class=\"line\">cd .. </span><br><span class=\"line\">git clone https://github.com/pal-robotics/ddynamic_reconfigure.git </span><br><span class=\"line\">catkin_init_workspace </span><br><span class=\"line\">cd .. </span><br></pre></td></tr></table></figure>\n\n<p>​\t出现以下日志表示成功啦！！！ </p>\n<h2 id=\"8、python3-项目测试\"><a href=\"#8、python3-项目测试\" class=\"headerlink\" title=\"8、python3 项目测试\"></a>8、python3 项目测试</h2><p>将 CV_Bridge 下的 CMakeLists 中的 Python37 改成 Python3 </p>\n<h2 id=\"9、其他\"><a href=\"#9、其他\" class=\"headerlink\" title=\"9、其他\"></a>9、其他</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/JetBrains/pty4j.git </span><br><span class=\"line\">cd pty4j/native </span><br><span class=\"line\">gcc -fPIC -c *.c </span><br><span class=\"line\">gcc -shared -o libpty.so *.o </span><br><span class=\"line\"></span><br><span class=\"line\">\\# 复制到 pycharm 下面, 注意下路径 </span><br><span class=\"line\">cp libpty.so /home/yc/pycharm-community-2019.3.4/lib/pty4j-native/linux/x86 </span><br><span class=\"line\">sudo apt-get install python-catkin-tools </span><br><span class=\"line\">mkdir -p ~/project_ws/src </span><br><span class=\"line\">cd ~/project_ws </span><br><span class=\"line\">catkin init </span><br><span class=\"line\">cd src </span><br><span class=\"line\">git clone -b noetic https://github.com/ros-perception/vision_opencv.git </span><br><span class=\"line\">catkin config -DPYTHON_EXECUTABLE=/usr/bin/python3-DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/aarch64-linux-gnu/libpython3.6m.so </span><br><span class=\"line\">sudo pip install -U catkin_pkg </span><br><span class=\"line\">sudo pip3 install -U catkin_pkg -i https://pypi.douban.com/simple </span><br><span class=\"line\">catkin build </span><br><span class=\"line\">source ~/project_ws/devel/setup.bash </span><br><span class=\"line\">source ~/.bashrc </span><br><span class=\"line\">pip install rospkg </span><br><span class=\"line\">roslaunch realsense2_camera rs_camera.launch </span><br></pre></td></tr></table></figure>\n\n<p>输入法修复 </p>\n<p>ubuntu 16.04 输入法候选框不显示: </p>\n<p>解决方案: </p>\n<p>网上查询到的方法,亲测可用. </p>\n<p>如果运行了下面这条命令输入法就正常了的话： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall fcitx-qimpanel </span><br></pre></td></tr></table></figure>\n\n<p>那么： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove fcitx-ui-qimpanel </span><br></pre></td></tr></table></figure>\n\n<p>问题解决. 亲测可用. </p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-7.png","cover_type":"img","excerpt":"","more":"<h1 id=\"xavier装机文档\"><a href=\"#xavier装机文档\" class=\"headerlink\" title=\"xavier装机文档\"></a>xavier装机文档</h1><h2 id=\"1、刷机\"><a href=\"#1、刷机\" class=\"headerlink\" title=\"1、刷机\"></a>1、刷机</h2><p>刷 Jetpack 最新版本: </p>\n<p><a href=\"https://www.ncnynl.com/category/Xavier-basic/\">https://www.ncnynl.com/category/Xavier-basic/</a> </p>\n<h2 id=\"2、挂载固态硬盘\"><a href=\"#2、挂载固态硬盘\" class=\"headerlink\" title=\"2、挂载固态硬盘\"></a>2、挂载固态硬盘</h2><p><a href=\"https://www.ncnynl.com/archives/201912/3486.html\">https://www.ncnynl.com/archives/201912/3486.html</a> </p>\n<h2 id=\"3、更新源列表及软件更新-必须要先更新\"><a href=\"#3、更新源列表及软件更新-必须要先更新\" class=\"headerlink\" title=\"3、更新源列表及软件更新( 必须要先更新 )\"></a>3、更新源列表及软件更新( 必须要先更新 )</h2><h2 id=\"4、进入-xavier-基础依赖\"><a href=\"#4、进入-xavier-基础依赖\" class=\"headerlink\" title=\"4、进入 xavier 基础依赖\"></a>4、进入 xavier 基础依赖</h2><p><a href=\"https://github.com/yqlbu/jetson-packages-family%E5%AE%89%E8%A3%85\">https://github.com/yqlbu/jetson-packages-family安装</a> </p>\n<p>Dependencies Installation注意不要安装Set CUDA Path </p>\n<h2 id=\"5、卸载-opencv\"><a href=\"#5、卸载-opencv\" class=\"headerlink\" title=\"5、卸载 opencv\"></a>5、卸载 opencv</h2><p>刷机后系统自带 opencv,但是不支持 GPU,建议移除(一定要先安装Opencv,在安装ros,不然后面会出现想不到的错误) </p>\n<p>进入<a href=\"https://github.com/yqlbu/jetson-packages-family\">https://github.com/yqlbu/jetson-packages-family</a> 找到Table of Content </p>\n<p>安装命令 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update </span><br><span class=\"line\">sudo apt-get upgrade </span><br><span class=\"line\">sudo apt-get install -y nano curl </span><br><span class=\"line\">sudo apt-get install -y python3-pip python3-dev </span><br><span class=\"line\">sudo apt-get install -y python-pip </span><br><span class=\"line\">sudo apt-get install -y python-setuptools </span><br><span class=\"line\">sudo apt-get install -y python3-setuptools </span><br><span class=\"line\">sudo apt-get install -y libcanberra-gtk0 libcanberra-gtk-module </span><br><span class=\"line\">pip3 install -U pip </span><br><span class=\"line\">pip install -U pip </span><br><span class=\"line\">pip3 install setuptools wheel </span><br><span class=\"line\">pip install setuptools wheel cython </span><br><span class=\"line\">!!! You may modify the script to install custom version of OpenCV </span><br></pre></td></tr></table></figure>\n\n<p>修改 install_opencv4.1.1_jetson.sh 改成4.4.0 版本的opencv 成功后的日志 </p>\n<h2 id=\"6、安装ros\"><a href=\"#6、安装ros\" class=\"headerlink\" title=\"6、安装ros\"></a>6、安装ros</h2><p>ROS入门教程-安装并配置ROS环境（melodic版本） </p>\n<p><a href=\"https://www.ncnynl.com/archives/201906/3147.html\">https://www.ncnynl.com/archives/201906/3147.html</a> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~ </span><br><span class=\"line\">sudo apt-get purge libopencv* </span><br><span class=\"line\">bash &lt;(wget -qO- https://github.com/yqlbu/jetson-packages-family/raw/master/OpenCV/install_opencv4.1.1_jetson.sh) </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要下载 1,680 kB 的归档。 </p>\n<p>解压缩后会消耗 3,678 kB 的额外空间。 </p>\n<p>获取:1 <a href=\"http://ports.ubuntu.com/ubuntu-ports\">http://ports.ubuntu.com/ubuntu-ports</a> bionic-updates&#x2F;universe arm64 </p>\n<p>libopencv-core3.2 arm64 3.2.0+dfsg-4ubuntu0.1 [631 kB] </p>\n<p>获取:2 <a href=\"http://ports.ubuntu.com/ubuntu-ports\">http://ports.ubuntu.com/ubuntu-ports</a> bionic-updates&#x2F;universe arm64 </p>\n<p>libopencv-core-dev arm64 3.2.0+dfsg-4ubuntu0.1 [1,049 kB] </p>\n<p>已下载 1,680 kB，耗时 7秒 (256 kB&#x2F;s)                                           </p>\n<p>debconf: 因为并未安装 apt-utils，所以软件包的设定过程将被推迟 </p>\n<p>(正在读取数据库 … 系统当前共安装有 172732 个文件和目录。) </p>\n<p>正在卸载 libopencv-dev (4.1.1-2-gd5a58aa75) … </p>\n<p>正在选中未选择的软件包 libopencv-core3.2:arm64。 </p>\n<p>(正在读取数据库 … 系统当前共安装有 172397 个文件和目录。) </p>\n<p>正准备解包 …&#x2F;libopencv-core3.2_3.2.0+dfsg-4ubuntu0.1_arm64.deb … </p>\n<p>正在解包 libopencv-core3.2:arm64 (3.2.0+dfsg-4ubuntu0.1) … </p>\n<p>正在选中未选择的软件包 libopencv-core-dev:arm64。 </p>\n<p>正准备解包 …&#x2F;libopencv-core-dev_3.2.0+dfsg-4ubuntu0.1_arm64.deb … </p>\n<p>正在解包 libopencv-core-dev:arm64 (3.2.0+dfsg-4ubuntu0.1) … </p>\n<p>正在设置 libopencv-core3.2:arm64 (3.2.0+dfsg-4ubuntu0.1) … </p>\n<p>正在设置 libopencv-core-dev:arm64 (3.2.0+dfsg-4ubuntu0.1) … </p>\n<p>正在处理用于 libc-bin (2.27-3ubuntu1.4) 的触发器 … </p>\n<p>[BASH]   Installation completed … </p>\n<p>sudo sh -c ‘. &#x2F;etc&#x2F;lsb-release &amp;&amp; echo “deb </p>\n<p><a href=\"http://mirrors.ustc.edu.cn/ros/ubuntu/\">http://mirrors.ustc.edu.cn/ros/ubuntu/</a> $DISTRIB_CODENAME main” &gt; </p>\n<p>&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ros-latest.list’ </p>\n<p>sudo apt-key adv –keyserver ‘hkp:&#x2F;&#x2F;keyserver.ubuntu.com:80’ –recv-key </p>\n<p>C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update </span><br><span class=\"line\">sudo apt-get install ros-melodic-desktop-full </span><br><span class=\"line\">sudo apt install python-rosdep python-rosinstall python-rosinstall-generator </span><br><span class=\"line\">python-wstool build-essential </span><br><span class=\"line\">sudo rosdep init </span><br><span class=\"line\">rosdep update </span><br><span class=\"line\">echo &quot;source /opt/ros/melodic/setup.bash&quot; &gt;&gt; ~/.bashrc </span><br></pre></td></tr></table></figure>\n\n<p>中途可能报错： </p>\n<p>打开hosts文件 sudo gedit &#x2F;etc&#x2F;hosts #在文件末尾添加 </p>\n<p>151.101.84.133  raw.githubusercontent.com </p>\n<p>保存后退出再尝试 </p>\n<h2 id=\"7、ros中使用realsense\"><a href=\"#7、ros中使用realsense\" class=\"headerlink\" title=\"7、ros中使用realsense\"></a>7、ros中使用realsense</h2><h3 id=\"a-安装-realsense-sdk\"><a href=\"#a-安装-realsense-sdk\" class=\"headerlink\" title=\"a) 安装 realsense sdk\"></a>a) 安装 realsense sdk</h3><p>​\t<a href=\"https://github.com/IntelRealSense/realsense-ros(%E5%AE%98%E6%96%B9%E7%BB%99%E5%87%BA%E7%9A%84%E6%96%B9%E5%BC%8F,%E5%A4%9A%E6%AC%A1%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A5)\">https://github.com/IntelRealSense/realsense-ros(官方给出的方式,多次编译失败)</a> </p>\n<p>​\t<a href=\"https://github.com/jetsonhacks/installRealSenseSDK(%E4%BA%B2%E8%87%AA%E5%AE%9E%E9%AA%8C,%E6%88%90%E5%8A%9F!)\">https://github.com/jetsonhacks/installRealSenseSDK(亲自实验,成功!)</a> </p>\n<p>​\t安装 installRealSenseSDK </p>\n<h3 id=\"b-安装-realsesense-ros\"><a href=\"#b-安装-realsesense-ros\" class=\"headerlink\" title=\"b) 安装 realsesense_ros\"></a>b) 安装 realsesense_ros</h3><p>​\t若报错: Project ‘cv_bridges’ specifics ‘&#x2F;user&#x2F;include&#x2F;opencv’ as an include dir, which is not found. </p>\n<p>​\t则:将报错路径中的cv_bridgeconfig.cmake文件中 include&#x2F;opencv 改成 include&#x2F;opencv4 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /opt/ros/melodic/share/cv_bridge/cmake/cv_bridgeConfig.cmake(94/96行修改opencv4) </span><br><span class=\"line\">source ~/.bashrc </span><br><span class=\"line\">roscore </span><br><span class=\"line\">git clone https://github.com/jetsonhacks/installRealSenseSDK.git </span><br><span class=\"line\">cd installRealSenseSDK </span><br><span class=\"line\">./installLibrealsense.sh </span><br><span class=\"line\">cd ~ </span><br><span class=\"line\">mkdir -p ~/catkin_ws/src </span><br><span class=\"line\">cd ~/catkin_ws/src </span><br><span class=\"line\">git clone https://github.com/IntelRealSense/realsense-ros.git </span><br><span class=\"line\">cd realsense-ros/ </span><br><span class=\"line\">git checkout `git tag | sort -V | grep -P &quot;^2.\\d+\\.\\d+&quot; | tail -1` </span><br><span class=\"line\">cd .. </span><br><span class=\"line\">git clone https://github.com/pal-robotics/ddynamic_reconfigure.git </span><br><span class=\"line\">catkin_init_workspace </span><br><span class=\"line\">cd .. </span><br></pre></td></tr></table></figure>\n\n<p>​\t出现以下日志表示成功啦！！！ </p>\n<h2 id=\"8、python3-项目测试\"><a href=\"#8、python3-项目测试\" class=\"headerlink\" title=\"8、python3 项目测试\"></a>8、python3 项目测试</h2><p>将 CV_Bridge 下的 CMakeLists 中的 Python37 改成 Python3 </p>\n<h2 id=\"9、其他\"><a href=\"#9、其他\" class=\"headerlink\" title=\"9、其他\"></a>9、其他</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/JetBrains/pty4j.git </span><br><span class=\"line\">cd pty4j/native </span><br><span class=\"line\">gcc -fPIC -c *.c </span><br><span class=\"line\">gcc -shared -o libpty.so *.o </span><br><span class=\"line\"></span><br><span class=\"line\">\\# 复制到 pycharm 下面, 注意下路径 </span><br><span class=\"line\">cp libpty.so /home/yc/pycharm-community-2019.3.4/lib/pty4j-native/linux/x86 </span><br><span class=\"line\">sudo apt-get install python-catkin-tools </span><br><span class=\"line\">mkdir -p ~/project_ws/src </span><br><span class=\"line\">cd ~/project_ws </span><br><span class=\"line\">catkin init </span><br><span class=\"line\">cd src </span><br><span class=\"line\">git clone -b noetic https://github.com/ros-perception/vision_opencv.git </span><br><span class=\"line\">catkin config -DPYTHON_EXECUTABLE=/usr/bin/python3-DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/aarch64-linux-gnu/libpython3.6m.so </span><br><span class=\"line\">sudo pip install -U catkin_pkg </span><br><span class=\"line\">sudo pip3 install -U catkin_pkg -i https://pypi.douban.com/simple </span><br><span class=\"line\">catkin build </span><br><span class=\"line\">source ~/project_ws/devel/setup.bash </span><br><span class=\"line\">source ~/.bashrc </span><br><span class=\"line\">pip install rospkg </span><br><span class=\"line\">roslaunch realsense2_camera rs_camera.launch </span><br></pre></td></tr></table></figure>\n\n<p>输入法修复 </p>\n<p>ubuntu 16.04 输入法候选框不显示: </p>\n<p>解决方案: </p>\n<p>网上查询到的方法,亲测可用. </p>\n<p>如果运行了下面这条命令输入法就正常了的话： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall fcitx-qimpanel </span><br></pre></td></tr></table></figure>\n\n<p>那么： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove fcitx-ui-qimpanel </span><br></pre></td></tr></table></figure>\n\n<p>问题解决. 亲测可用. </p>\n"},{"title":"turbot建图，导航算法汇总","date":"2023-08-25T09:26:08.992Z","description":null,"top_img":false,"_content":"\n# turbot建图，导航算法汇总 \n\n## **建图** \n\n1. gmapping： https://github.com/ros-perception/openslam_gmapping.git，可以跑，输入：scan，tf，输出：map（pgm格式），tf。 \n2. hector： https://github.com/tu-darmstadt-ros-pkg/hector_slam.git ，可以跑，初始画面非常抖动，输入：scan，initial_pose，tf，输出：tf，map（pgm格式）。 \n3. karto：跑不了，vlp雷达不支持，格式转化问题 \n4. Cartographer 2D： https://github.com/googlecartographer/cartographer.git，https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html可以跑，输入：odom，tf，imu，scan（为什么不是points数据，因为算法是2d建图，雷达只有点云数据输出，要获得scan数据必须通过一层转化），输出：tf，submap_list。 \n5. Cartographer 3D：3D不能直接保存地图，可以跑，需要离线跑。输入：odom，imu，velodyne_points，tf，输出：constraint_list，landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，tf。坐标系走着走着会歪，机器人倾斜和地图角度不对，会把人建图进去，没有闭环检测，最后回来图对不上。 \n6. LOAM：也是3D建图，坐标系走着走着会歪，机器人倾斜和地图角度不对。官网的程序，输入感觉就是激光雷达点云数据，输出，输出是一些点云数据。只用了点云数据建图，还可以融合imu数据但是例子没有。 \n7. LeGO LOAM：也是3D建图，坐标系走着走着会歪，机器人倾斜和地图角度不对，走同样的路线生成了好几个不同的图。LeGO-LOAM在LOAM的基础上增加了回环检测。输入：激光点云，输出：轨迹，特征点云。 \n8. BLAM：输入：激光点云，输出：tf，初始坐标系是正确的，但是走了两圈之后整个场景就倾斜了。 \n9. Rtabmap建图（zed）：可用，建完图直接ctrl c退出会自动保存，建图的时候是3D的，但是保存是2D的。输入：scan（zed深度信息转化成），zed左矫正图，camera_info，tf，深度信息。输出：map，tf，cloud_map，map_data \n10. ORB_SLAMv2建图（zed）：单目基本用不了，特征点丢失严重，而且是非常慢的速度。Mono：输入为zed未矫正图像image_raw，输出没有用rviz方式展示，没有rqtgraph。整个效果很差。 \n11. LOAM离线建图：没什么区别。 \n12. Cartographer 3D离线建图：可以转化成pcd文件查看。 \n13. LeGO LOAM离线建图：建不了。 \n14. BLAM离线建图：从离线地图看出，在转角的时候里程坐标系和base坐标系分离了，导致整个地图歪了。 \n15. 双目建图gmapping建图（zed）：2D，效果还可以，输入：scan（转化的深度信息），tf，输出：tf，map（pgm，yaml） \n16. hector建图（zed）：2D，效果还可以，输入：scan，tf，initialpose，输出：tf，map，测试过程中压过了一根电线，小车轮胎离地剧烈摇晃，导致建图出现巨大误差，可见第一段视频，可能是没有回路检测的。 \n17. karto建图（zed）：效果还可以，输入：scan tf 输出map tf \n18. Cartographer建图（zed）：效果还可以，输入：scan odom imu tf 输出submap_list tf \n19. 实时三维建图并进行目标检测：可以，使用rtabmap和yolo v3 \n20. 离线三维建图：用的rtabmap，但是夹杂了yolo进去，导致离线包过大。 \n21. DSO建图(zed)：和orbslam很像，输入只为未矫正图像，输出没有在graph体现，测试的时候里程跑飞且经常出现丢失建图卡死。 \n\n## **导航** \n\n1. Cartographer 2D实时点云建图和导航：建图节点输入odom，tf，imu，激光点云，输出landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，constraint_list，map。导航节点movebase输出：速度控制信号，move_base/action_topics，输入信号odom，tf，map，move_base_simple/goal，move_base/action_topics，scan（scan类型全都是单线？）。速度不是很连续都是急起急停，地面低矮障碍物导航会无视直接撞上，老板说目前主要检测都是跟传感器同一个平面的障碍物，比传感器高的可以检测到，低的就没法检测了。 \n2. Cartographer 3D实时点云建图和导航：建图节点输入odom，tf，imu，激光点云，输出landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，constraint_list，map，tf。导航节点输入move_base/global_costmap/footprint，move_base/local_costmap/footprint，move_base/goal，move_base_simple/goal，scan，map，odom，tf，输出：速度控制信号，move_base/global_costmap/footprint，move_base/local_costmap/footprint，move_base/goal。问题：放一团电线在地上让他走过去，地图和小车的定位可能会跑飞，影响里程计，只能基于平地，里程计最好不要长时间运行会有累计误差。 \n3. movebase激光导航-定点导航：使用amcl定位+movebase激光导航（激光只检测传感器同一平面障碍物），地图要求已知，amcl输入：scan，initial_pose，tf，输出：tf，particalcloud，diagnostics，导航输入：odom，move_base_simple/goal，map，tf，scan，move_base/global_costmap/footprint，move_base/local_costmap/footprint，move_base/goal，输出：速度控制信号，输出：/move_base/NavfnROS/plan，/move_base/global_costmap/costmap，/move_base/global costmap/footprint，/move_base/global_costmap/costmap_updates，/move_base/ DWAPlannerROS/trajectory_cloud，move_base/DwAPlannerROS/global_plan，/move base/DwAPlannerROS/cost_cloud，/move_base/DWAPlannerROS/local_plan，/move base/local_costmap/footprint，/move_base/local_costmap/costmap_updates，/move base/local_costmap/cosmap，/move_base/goal。 \n4. rtabmap实现视觉定点导航：输入：scan，tf，左边矫正图像，左边相机参数，深度信息，输出：map，mapdata，tf，cloud_map。Movebase输入：map，scan，tf，odom，move_base_simple/goal，move_base/global_costmap/footprint，move_base/local_costmap/footprint，move_base/goal，输出：速度控制信号，/move_base/global_costmap/costmap，/move_base/global costmap/footprint，/move_base/global_costmap/costmap_updates，/move base/local_costmap/footprint，/move_base/local_costmap/costmap_updates，/move base/local_costmap/cosmap，/move_base/goal。低矮物品看不到，撞到垃圾桶等。 \n5. 三维建图-三维导航：是rtabmap的导航，直接用9或者19建图然后再直接导航。输入：odom，scan，tf，左边矫正图像，左边相机参数，深度信息，输出：map，mapdata，tf。Movebase输入：map，scan，tf，odom，move_base_simple/goal，move_base_simple/goal，move_base/global_costmap/footprint，move_base/local_costmap/footprint，/move_base/global，输出：/move_base/NavfnROS/plan，/move_base/global_costmap/costmap，/move_base/global costmap/footprint，/move_base/global_costmap/costmap_updates，move_base/DwAPlannerROS/global_plan，/move_base/DWAPlannerROS/local_plan，/move_base/global_costmap/costmap，/move_base/global costmap/footprint，/move_base/global_costmap/costmap_updates，/move_base/goal。 ","source":"_posts/slam_config/turbot建图导航算法汇总.md","raw":"---\ntitle: turbot建图，导航算法汇总\ndate:\ntags: \ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# turbot建图，导航算法汇总 \n\n## **建图** \n\n1. gmapping： https://github.com/ros-perception/openslam_gmapping.git，可以跑，输入：scan，tf，输出：map（pgm格式），tf。 \n2. hector： https://github.com/tu-darmstadt-ros-pkg/hector_slam.git ，可以跑，初始画面非常抖动，输入：scan，initial_pose，tf，输出：tf，map（pgm格式）。 \n3. karto：跑不了，vlp雷达不支持，格式转化问题 \n4. Cartographer 2D： https://github.com/googlecartographer/cartographer.git，https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html可以跑，输入：odom，tf，imu，scan（为什么不是points数据，因为算法是2d建图，雷达只有点云数据输出，要获得scan数据必须通过一层转化），输出：tf，submap_list。 \n5. Cartographer 3D：3D不能直接保存地图，可以跑，需要离线跑。输入：odom，imu，velodyne_points，tf，输出：constraint_list，landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，tf。坐标系走着走着会歪，机器人倾斜和地图角度不对，会把人建图进去，没有闭环检测，最后回来图对不上。 \n6. LOAM：也是3D建图，坐标系走着走着会歪，机器人倾斜和地图角度不对。官网的程序，输入感觉就是激光雷达点云数据，输出，输出是一些点云数据。只用了点云数据建图，还可以融合imu数据但是例子没有。 \n7. LeGO LOAM：也是3D建图，坐标系走着走着会歪，机器人倾斜和地图角度不对，走同样的路线生成了好几个不同的图。LeGO-LOAM在LOAM的基础上增加了回环检测。输入：激光点云，输出：轨迹，特征点云。 \n8. BLAM：输入：激光点云，输出：tf，初始坐标系是正确的，但是走了两圈之后整个场景就倾斜了。 \n9. Rtabmap建图（zed）：可用，建完图直接ctrl c退出会自动保存，建图的时候是3D的，但是保存是2D的。输入：scan（zed深度信息转化成），zed左矫正图，camera_info，tf，深度信息。输出：map，tf，cloud_map，map_data \n10. ORB_SLAMv2建图（zed）：单目基本用不了，特征点丢失严重，而且是非常慢的速度。Mono：输入为zed未矫正图像image_raw，输出没有用rviz方式展示，没有rqtgraph。整个效果很差。 \n11. LOAM离线建图：没什么区别。 \n12. Cartographer 3D离线建图：可以转化成pcd文件查看。 \n13. LeGO LOAM离线建图：建不了。 \n14. BLAM离线建图：从离线地图看出，在转角的时候里程坐标系和base坐标系分离了，导致整个地图歪了。 \n15. 双目建图gmapping建图（zed）：2D，效果还可以，输入：scan（转化的深度信息），tf，输出：tf，map（pgm，yaml） \n16. hector建图（zed）：2D，效果还可以，输入：scan，tf，initialpose，输出：tf，map，测试过程中压过了一根电线，小车轮胎离地剧烈摇晃，导致建图出现巨大误差，可见第一段视频，可能是没有回路检测的。 \n17. karto建图（zed）：效果还可以，输入：scan tf 输出map tf \n18. Cartographer建图（zed）：效果还可以，输入：scan odom imu tf 输出submap_list tf \n19. 实时三维建图并进行目标检测：可以，使用rtabmap和yolo v3 \n20. 离线三维建图：用的rtabmap，但是夹杂了yolo进去，导致离线包过大。 \n21. DSO建图(zed)：和orbslam很像，输入只为未矫正图像，输出没有在graph体现，测试的时候里程跑飞且经常出现丢失建图卡死。 \n\n## **导航** \n\n1. Cartographer 2D实时点云建图和导航：建图节点输入odom，tf，imu，激光点云，输出landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，constraint_list，map。导航节点movebase输出：速度控制信号，move_base/action_topics，输入信号odom，tf，map，move_base_simple/goal，move_base/action_topics，scan（scan类型全都是单线？）。速度不是很连续都是急起急停，地面低矮障碍物导航会无视直接撞上，老板说目前主要检测都是跟传感器同一个平面的障碍物，比传感器高的可以检测到，低的就没法检测了。 \n2. Cartographer 3D实时点云建图和导航：建图节点输入odom，tf，imu，激光点云，输出landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，constraint_list，map，tf。导航节点输入move_base/global_costmap/footprint，move_base/local_costmap/footprint，move_base/goal，move_base_simple/goal，scan，map，odom，tf，输出：速度控制信号，move_base/global_costmap/footprint，move_base/local_costmap/footprint，move_base/goal。问题：放一团电线在地上让他走过去，地图和小车的定位可能会跑飞，影响里程计，只能基于平地，里程计最好不要长时间运行会有累计误差。 \n3. movebase激光导航-定点导航：使用amcl定位+movebase激光导航（激光只检测传感器同一平面障碍物），地图要求已知，amcl输入：scan，initial_pose，tf，输出：tf，particalcloud，diagnostics，导航输入：odom，move_base_simple/goal，map，tf，scan，move_base/global_costmap/footprint，move_base/local_costmap/footprint，move_base/goal，输出：速度控制信号，输出：/move_base/NavfnROS/plan，/move_base/global_costmap/costmap，/move_base/global costmap/footprint，/move_base/global_costmap/costmap_updates，/move_base/ DWAPlannerROS/trajectory_cloud，move_base/DwAPlannerROS/global_plan，/move base/DwAPlannerROS/cost_cloud，/move_base/DWAPlannerROS/local_plan，/move base/local_costmap/footprint，/move_base/local_costmap/costmap_updates，/move base/local_costmap/cosmap，/move_base/goal。 \n4. rtabmap实现视觉定点导航：输入：scan，tf，左边矫正图像，左边相机参数，深度信息，输出：map，mapdata，tf，cloud_map。Movebase输入：map，scan，tf，odom，move_base_simple/goal，move_base/global_costmap/footprint，move_base/local_costmap/footprint，move_base/goal，输出：速度控制信号，/move_base/global_costmap/costmap，/move_base/global costmap/footprint，/move_base/global_costmap/costmap_updates，/move base/local_costmap/footprint，/move_base/local_costmap/costmap_updates，/move base/local_costmap/cosmap，/move_base/goal。低矮物品看不到，撞到垃圾桶等。 \n5. 三维建图-三维导航：是rtabmap的导航，直接用9或者19建图然后再直接导航。输入：odom，scan，tf，左边矫正图像，左边相机参数，深度信息，输出：map，mapdata，tf。Movebase输入：map，scan，tf，odom，move_base_simple/goal，move_base_simple/goal，move_base/global_costmap/footprint，move_base/local_costmap/footprint，/move_base/global，输出：/move_base/NavfnROS/plan，/move_base/global_costmap/costmap，/move_base/global costmap/footprint，/move_base/global_costmap/costmap_updates，move_base/DwAPlannerROS/global_plan，/move_base/DWAPlannerROS/local_plan，/move_base/global_costmap/costmap，/move_base/global costmap/footprint，/move_base/global_costmap/costmap_updates，/move_base/goal。 ","slug":"slam_config/turbot建图导航算法汇总","published":1,"updated":"2023-08-25T09:56:41.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67j005hgcr751xm3sqj","content":"<h1 id=\"turbot建图，导航算法汇总\"><a href=\"#turbot建图，导航算法汇总\" class=\"headerlink\" title=\"turbot建图，导航算法汇总\"></a>turbot建图，导航算法汇总</h1><h2 id=\"建图\"><a href=\"#建图\" class=\"headerlink\" title=\"建图\"></a><strong>建图</strong></h2><ol>\n<li>gmapping： <a href=\"https://github.com/ros-perception/openslam_gmapping.git%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%B7%91%EF%BC%8C%E8%BE%93%E5%85%A5%EF%BC%9Ascan%EF%BC%8Ctf%EF%BC%8C%E8%BE%93%E5%87%BA%EF%BC%9Amap%EF%BC%88pgm%E6%A0%BC%E5%BC%8F%EF%BC%89%EF%BC%8Ctf%E3%80%82\">https://github.com/ros-perception/openslam_gmapping.git，可以跑，输入：scan，tf，输出：map（pgm格式），tf。</a> </li>\n<li>hector： <a href=\"https://github.com/tu-darmstadt-ros-pkg/hector_slam.git\">https://github.com/tu-darmstadt-ros-pkg/hector_slam.git</a> ，可以跑，初始画面非常抖动，输入：scan，initial_pose，tf，输出：tf，map（pgm格式）。 </li>\n<li>karto：跑不了，vlp雷达不支持，格式转化问题 </li>\n<li>Cartographer 2D： <a href=\"https://github.com/googlecartographer/cartographer.git%EF%BC%8Chttps://google-cartographer-ros.readthedocs.io/en/latest/compilation.html%E5%8F%AF%E4%BB%A5%E8%B7%91%EF%BC%8C%E8%BE%93%E5%85%A5%EF%BC%9Aodom%EF%BC%8Ctf%EF%BC%8Cimu%EF%BC%8Cscan%EF%BC%88%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AFpoints%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E4%B8%BA%E7%AE%97%E6%B3%95%E6%98%AF2d%E5%BB%BA%E5%9B%BE%EF%BC%8C%E9%9B%B7%E8%BE%BE%E5%8F%AA%E6%9C%89%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA%EF%BC%8C%E8%A6%81%E8%8E%B7%E5%BE%97scan%E6%95%B0%E6%8D%AE%E5%BF%85%E9%A1%BB%E9%80%9A%E8%BF%87%E4%B8%80%E5%B1%82%E8%BD%AC%E5%8C%96%EF%BC%89%EF%BC%8C%E8%BE%93%E5%87%BA%EF%BC%9Atf%EF%BC%8Csubmap_list%E3%80%82\">https://github.com/googlecartographer/cartographer.git，https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html可以跑，输入：odom，tf，imu，scan（为什么不是points数据，因为算法是2d建图，雷达只有点云数据输出，要获得scan数据必须通过一层转化），输出：tf，submap_list。</a> </li>\n<li>Cartographer 3D：3D不能直接保存地图，可以跑，需要离线跑。输入：odom，imu，velodyne_points，tf，输出：constraint_list，landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，tf。坐标系走着走着会歪，机器人倾斜和地图角度不对，会把人建图进去，没有闭环检测，最后回来图对不上。 </li>\n<li>LOAM：也是3D建图，坐标系走着走着会歪，机器人倾斜和地图角度不对。官网的程序，输入感觉就是激光雷达点云数据，输出，输出是一些点云数据。只用了点云数据建图，还可以融合imu数据但是例子没有。 </li>\n<li>LeGO LOAM：也是3D建图，坐标系走着走着会歪，机器人倾斜和地图角度不对，走同样的路线生成了好几个不同的图。LeGO-LOAM在LOAM的基础上增加了回环检测。输入：激光点云，输出：轨迹，特征点云。 </li>\n<li>BLAM：输入：激光点云，输出：tf，初始坐标系是正确的，但是走了两圈之后整个场景就倾斜了。 </li>\n<li>Rtabmap建图（zed）：可用，建完图直接ctrl c退出会自动保存，建图的时候是3D的，但是保存是2D的。输入：scan（zed深度信息转化成），zed左矫正图，camera_info，tf，深度信息。输出：map，tf，cloud_map，map_data </li>\n<li>ORB_SLAMv2建图（zed）：单目基本用不了，特征点丢失严重，而且是非常慢的速度。Mono：输入为zed未矫正图像image_raw，输出没有用rviz方式展示，没有rqtgraph。整个效果很差。 </li>\n<li>LOAM离线建图：没什么区别。 </li>\n<li>Cartographer 3D离线建图：可以转化成pcd文件查看。 </li>\n<li>LeGO LOAM离线建图：建不了。 </li>\n<li>BLAM离线建图：从离线地图看出，在转角的时候里程坐标系和base坐标系分离了，导致整个地图歪了。 </li>\n<li>双目建图gmapping建图（zed）：2D，效果还可以，输入：scan（转化的深度信息），tf，输出：tf，map（pgm，yaml） </li>\n<li>hector建图（zed）：2D，效果还可以，输入：scan，tf，initialpose，输出：tf，map，测试过程中压过了一根电线，小车轮胎离地剧烈摇晃，导致建图出现巨大误差，可见第一段视频，可能是没有回路检测的。 </li>\n<li>karto建图（zed）：效果还可以，输入：scan tf 输出map tf </li>\n<li>Cartographer建图（zed）：效果还可以，输入：scan odom imu tf 输出submap_list tf </li>\n<li>实时三维建图并进行目标检测：可以，使用rtabmap和yolo v3 </li>\n<li>离线三维建图：用的rtabmap，但是夹杂了yolo进去，导致离线包过大。 </li>\n<li>DSO建图(zed)：和orbslam很像，输入只为未矫正图像，输出没有在graph体现，测试的时候里程跑飞且经常出现丢失建图卡死。</li>\n</ol>\n<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a><strong>导航</strong></h2><ol>\n<li>Cartographer 2D实时点云建图和导航：建图节点输入odom，tf，imu，激光点云，输出landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，constraint_list，map。导航节点movebase输出：速度控制信号，move_base&#x2F;action_topics，输入信号odom，tf，map，move_base_simple&#x2F;goal，move_base&#x2F;action_topics，scan（scan类型全都是单线？）。速度不是很连续都是急起急停，地面低矮障碍物导航会无视直接撞上，老板说目前主要检测都是跟传感器同一个平面的障碍物，比传感器高的可以检测到，低的就没法检测了。 </li>\n<li>Cartographer 3D实时点云建图和导航：建图节点输入odom，tf，imu，激光点云，输出landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，constraint_list，map，tf。导航节点输入move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，move_base&#x2F;goal，move_base_simple&#x2F;goal，scan，map，odom，tf，输出：速度控制信号，move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，move_base&#x2F;goal。问题：放一团电线在地上让他走过去，地图和小车的定位可能会跑飞，影响里程计，只能基于平地，里程计最好不要长时间运行会有累计误差。 </li>\n<li>movebase激光导航-定点导航：使用amcl定位+movebase激光导航（激光只检测传感器同一平面障碍物），地图要求已知，amcl输入：scan，initial_pose，tf，输出：tf，particalcloud，diagnostics，导航输入：odom，move_base_simple&#x2F;goal，map，tf，scan，move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，move_base&#x2F;goal，输出：速度控制信号，输出：&#x2F;move_base&#x2F;NavfnROS&#x2F;plan，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap，&#x2F;move_base&#x2F;global costmap&#x2F;footprint，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap_updates，&#x2F;move_base&#x2F; DWAPlannerROS&#x2F;trajectory_cloud，move_base&#x2F;DwAPlannerROS&#x2F;global_plan，&#x2F;move base&#x2F;DwAPlannerROS&#x2F;cost_cloud，&#x2F;move_base&#x2F;DWAPlannerROS&#x2F;local_plan，&#x2F;move base&#x2F;local_costmap&#x2F;footprint，&#x2F;move_base&#x2F;local_costmap&#x2F;costmap_updates，&#x2F;move base&#x2F;local_costmap&#x2F;cosmap，&#x2F;move_base&#x2F;goal。 </li>\n<li>rtabmap实现视觉定点导航：输入：scan，tf，左边矫正图像，左边相机参数，深度信息，输出：map，mapdata，tf，cloud_map。Movebase输入：map，scan，tf，odom，move_base_simple&#x2F;goal，move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，move_base&#x2F;goal，输出：速度控制信号，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap，&#x2F;move_base&#x2F;global costmap&#x2F;footprint，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap_updates，&#x2F;move base&#x2F;local_costmap&#x2F;footprint，&#x2F;move_base&#x2F;local_costmap&#x2F;costmap_updates，&#x2F;move base&#x2F;local_costmap&#x2F;cosmap，&#x2F;move_base&#x2F;goal。低矮物品看不到，撞到垃圾桶等。 </li>\n<li>三维建图-三维导航：是rtabmap的导航，直接用9或者19建图然后再直接导航。输入：odom，scan，tf，左边矫正图像，左边相机参数，深度信息，输出：map，mapdata，tf。Movebase输入：map，scan，tf，odom，move_base_simple&#x2F;goal，move_base_simple&#x2F;goal，move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，&#x2F;move_base&#x2F;global，输出：&#x2F;move_base&#x2F;NavfnROS&#x2F;plan，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap，&#x2F;move_base&#x2F;global costmap&#x2F;footprint，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap_updates，move_base&#x2F;DwAPlannerROS&#x2F;global_plan，&#x2F;move_base&#x2F;DWAPlannerROS&#x2F;local_plan，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap，&#x2F;move_base&#x2F;global costmap&#x2F;footprint，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap_updates，&#x2F;move_base&#x2F;goal。</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"turbot建图，导航算法汇总\"><a href=\"#turbot建图，导航算法汇总\" class=\"headerlink\" title=\"turbot建图，导航算法汇总\"></a>turbot建图，导航算法汇总</h1><h2 id=\"建图\"><a href=\"#建图\" class=\"headerlink\" title=\"建图\"></a><strong>建图</strong></h2><ol>\n<li>gmapping： <a href=\"https://github.com/ros-perception/openslam_gmapping.git%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%B7%91%EF%BC%8C%E8%BE%93%E5%85%A5%EF%BC%9Ascan%EF%BC%8Ctf%EF%BC%8C%E8%BE%93%E5%87%BA%EF%BC%9Amap%EF%BC%88pgm%E6%A0%BC%E5%BC%8F%EF%BC%89%EF%BC%8Ctf%E3%80%82\">https://github.com/ros-perception/openslam_gmapping.git，可以跑，输入：scan，tf，输出：map（pgm格式），tf。</a> </li>\n<li>hector： <a href=\"https://github.com/tu-darmstadt-ros-pkg/hector_slam.git\">https://github.com/tu-darmstadt-ros-pkg/hector_slam.git</a> ，可以跑，初始画面非常抖动，输入：scan，initial_pose，tf，输出：tf，map（pgm格式）。 </li>\n<li>karto：跑不了，vlp雷达不支持，格式转化问题 </li>\n<li>Cartographer 2D： <a href=\"https://github.com/googlecartographer/cartographer.git%EF%BC%8Chttps://google-cartographer-ros.readthedocs.io/en/latest/compilation.html%E5%8F%AF%E4%BB%A5%E8%B7%91%EF%BC%8C%E8%BE%93%E5%85%A5%EF%BC%9Aodom%EF%BC%8Ctf%EF%BC%8Cimu%EF%BC%8Cscan%EF%BC%88%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%AFpoints%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%9B%A0%E4%B8%BA%E7%AE%97%E6%B3%95%E6%98%AF2d%E5%BB%BA%E5%9B%BE%EF%BC%8C%E9%9B%B7%E8%BE%BE%E5%8F%AA%E6%9C%89%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA%EF%BC%8C%E8%A6%81%E8%8E%B7%E5%BE%97scan%E6%95%B0%E6%8D%AE%E5%BF%85%E9%A1%BB%E9%80%9A%E8%BF%87%E4%B8%80%E5%B1%82%E8%BD%AC%E5%8C%96%EF%BC%89%EF%BC%8C%E8%BE%93%E5%87%BA%EF%BC%9Atf%EF%BC%8Csubmap_list%E3%80%82\">https://github.com/googlecartographer/cartographer.git，https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html可以跑，输入：odom，tf，imu，scan（为什么不是points数据，因为算法是2d建图，雷达只有点云数据输出，要获得scan数据必须通过一层转化），输出：tf，submap_list。</a> </li>\n<li>Cartographer 3D：3D不能直接保存地图，可以跑，需要离线跑。输入：odom，imu，velodyne_points，tf，输出：constraint_list，landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，tf。坐标系走着走着会歪，机器人倾斜和地图角度不对，会把人建图进去，没有闭环检测，最后回来图对不上。 </li>\n<li>LOAM：也是3D建图，坐标系走着走着会歪，机器人倾斜和地图角度不对。官网的程序，输入感觉就是激光雷达点云数据，输出，输出是一些点云数据。只用了点云数据建图，还可以融合imu数据但是例子没有。 </li>\n<li>LeGO LOAM：也是3D建图，坐标系走着走着会歪，机器人倾斜和地图角度不对，走同样的路线生成了好几个不同的图。LeGO-LOAM在LOAM的基础上增加了回环检测。输入：激光点云，输出：轨迹，特征点云。 </li>\n<li>BLAM：输入：激光点云，输出：tf，初始坐标系是正确的，但是走了两圈之后整个场景就倾斜了。 </li>\n<li>Rtabmap建图（zed）：可用，建完图直接ctrl c退出会自动保存，建图的时候是3D的，但是保存是2D的。输入：scan（zed深度信息转化成），zed左矫正图，camera_info，tf，深度信息。输出：map，tf，cloud_map，map_data </li>\n<li>ORB_SLAMv2建图（zed）：单目基本用不了，特征点丢失严重，而且是非常慢的速度。Mono：输入为zed未矫正图像image_raw，输出没有用rviz方式展示，没有rqtgraph。整个效果很差。 </li>\n<li>LOAM离线建图：没什么区别。 </li>\n<li>Cartographer 3D离线建图：可以转化成pcd文件查看。 </li>\n<li>LeGO LOAM离线建图：建不了。 </li>\n<li>BLAM离线建图：从离线地图看出，在转角的时候里程坐标系和base坐标系分离了，导致整个地图歪了。 </li>\n<li>双目建图gmapping建图（zed）：2D，效果还可以，输入：scan（转化的深度信息），tf，输出：tf，map（pgm，yaml） </li>\n<li>hector建图（zed）：2D，效果还可以，输入：scan，tf，initialpose，输出：tf，map，测试过程中压过了一根电线，小车轮胎离地剧烈摇晃，导致建图出现巨大误差，可见第一段视频，可能是没有回路检测的。 </li>\n<li>karto建图（zed）：效果还可以，输入：scan tf 输出map tf </li>\n<li>Cartographer建图（zed）：效果还可以，输入：scan odom imu tf 输出submap_list tf </li>\n<li>实时三维建图并进行目标检测：可以，使用rtabmap和yolo v3 </li>\n<li>离线三维建图：用的rtabmap，但是夹杂了yolo进去，导致离线包过大。 </li>\n<li>DSO建图(zed)：和orbslam很像，输入只为未矫正图像，输出没有在graph体现，测试的时候里程跑飞且经常出现丢失建图卡死。</li>\n</ol>\n<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a><strong>导航</strong></h2><ol>\n<li>Cartographer 2D实时点云建图和导航：建图节点输入odom，tf，imu，激光点云，输出landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，constraint_list，map。导航节点movebase输出：速度控制信号，move_base&#x2F;action_topics，输入信号odom，tf，map，move_base_simple&#x2F;goal，move_base&#x2F;action_topics，scan（scan类型全都是单线？）。速度不是很连续都是急起急停，地面低矮障碍物导航会无视直接撞上，老板说目前主要检测都是跟传感器同一个平面的障碍物，比传感器高的可以检测到，低的就没法检测了。 </li>\n<li>Cartographer 3D实时点云建图和导航：建图节点输入odom，tf，imu，激光点云，输出landmark_poses_list，scan_matched_points2，trajectory_node_list，submap_list，constraint_list，map，tf。导航节点输入move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，move_base&#x2F;goal，move_base_simple&#x2F;goal，scan，map，odom，tf，输出：速度控制信号，move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，move_base&#x2F;goal。问题：放一团电线在地上让他走过去，地图和小车的定位可能会跑飞，影响里程计，只能基于平地，里程计最好不要长时间运行会有累计误差。 </li>\n<li>movebase激光导航-定点导航：使用amcl定位+movebase激光导航（激光只检测传感器同一平面障碍物），地图要求已知，amcl输入：scan，initial_pose，tf，输出：tf，particalcloud，diagnostics，导航输入：odom，move_base_simple&#x2F;goal，map，tf，scan，move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，move_base&#x2F;goal，输出：速度控制信号，输出：&#x2F;move_base&#x2F;NavfnROS&#x2F;plan，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap，&#x2F;move_base&#x2F;global costmap&#x2F;footprint，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap_updates，&#x2F;move_base&#x2F; DWAPlannerROS&#x2F;trajectory_cloud，move_base&#x2F;DwAPlannerROS&#x2F;global_plan，&#x2F;move base&#x2F;DwAPlannerROS&#x2F;cost_cloud，&#x2F;move_base&#x2F;DWAPlannerROS&#x2F;local_plan，&#x2F;move base&#x2F;local_costmap&#x2F;footprint，&#x2F;move_base&#x2F;local_costmap&#x2F;costmap_updates，&#x2F;move base&#x2F;local_costmap&#x2F;cosmap，&#x2F;move_base&#x2F;goal。 </li>\n<li>rtabmap实现视觉定点导航：输入：scan，tf，左边矫正图像，左边相机参数，深度信息，输出：map，mapdata，tf，cloud_map。Movebase输入：map，scan，tf，odom，move_base_simple&#x2F;goal，move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，move_base&#x2F;goal，输出：速度控制信号，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap，&#x2F;move_base&#x2F;global costmap&#x2F;footprint，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap_updates，&#x2F;move base&#x2F;local_costmap&#x2F;footprint，&#x2F;move_base&#x2F;local_costmap&#x2F;costmap_updates，&#x2F;move base&#x2F;local_costmap&#x2F;cosmap，&#x2F;move_base&#x2F;goal。低矮物品看不到，撞到垃圾桶等。 </li>\n<li>三维建图-三维导航：是rtabmap的导航，直接用9或者19建图然后再直接导航。输入：odom，scan，tf，左边矫正图像，左边相机参数，深度信息，输出：map，mapdata，tf。Movebase输入：map，scan，tf，odom，move_base_simple&#x2F;goal，move_base_simple&#x2F;goal，move_base&#x2F;global_costmap&#x2F;footprint，move_base&#x2F;local_costmap&#x2F;footprint，&#x2F;move_base&#x2F;global，输出：&#x2F;move_base&#x2F;NavfnROS&#x2F;plan，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap，&#x2F;move_base&#x2F;global costmap&#x2F;footprint，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap_updates，move_base&#x2F;DwAPlannerROS&#x2F;global_plan，&#x2F;move_base&#x2F;DWAPlannerROS&#x2F;local_plan，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap，&#x2F;move_base&#x2F;global costmap&#x2F;footprint，&#x2F;move_base&#x2F;global_costmap&#x2F;costmap_updates，&#x2F;move_base&#x2F;goal。</li>\n</ol>\n"},{"title":"安装VINS-Fusion","date":"2023-08-25T09:26:09.003Z","description":null,"top_img":false,"_content":"\n# 安装VINS-Fusion \n\n## **Part1:** \n\n```shell\nmkdir -p ~/vin-fusion_ws/src   \ncd ~/vin-fusion_ws/src \ngit clone https://github.com/HKUST-Aerial-Robotics/VINS-Fusion.git \ncd ../ \ncatkin_make \nsource ~/catkin_ws/devel/setup.bash \n```\n\n ","source":"_posts/slam_config/安装VINS-Fusion.md","raw":"---\ntitle: 安装VINS-Fusion\ndate:\ntags: \n- VINS\ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# 安装VINS-Fusion \n\n## **Part1:** \n\n```shell\nmkdir -p ~/vin-fusion_ws/src   \ncd ~/vin-fusion_ws/src \ngit clone https://github.com/HKUST-Aerial-Robotics/VINS-Fusion.git \ncd ../ \ncatkin_make \nsource ~/catkin_ws/devel/setup.bash \n```\n\n ","slug":"slam_config/安装VINS-Fusion","published":1,"updated":"2023-08-25T09:54:24.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67k005lgcr71dy358iz","content":"<h1 id=\"安装VINS-Fusion\"><a href=\"#安装VINS-Fusion\" class=\"headerlink\" title=\"安装VINS-Fusion\"></a>安装VINS-Fusion</h1><h2 id=\"Part1\"><a href=\"#Part1\" class=\"headerlink\" title=\"Part1:\"></a><strong>Part1:</strong></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/vin-fusion_ws/src   </span><br><span class=\"line\">cd ~/vin-fusion_ws/src </span><br><span class=\"line\">git clone https://github.com/HKUST-Aerial-Robotics/VINS-Fusion.git </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">catkin_make </span><br><span class=\"line\">source ~/catkin_ws/devel/setup.bash </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-4.png","cover_type":"img","excerpt":"","more":"<h1 id=\"安装VINS-Fusion\"><a href=\"#安装VINS-Fusion\" class=\"headerlink\" title=\"安装VINS-Fusion\"></a>安装VINS-Fusion</h1><h2 id=\"Part1\"><a href=\"#Part1\" class=\"headerlink\" title=\"Part1:\"></a><strong>Part1:</strong></h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/vin-fusion_ws/src   </span><br><span class=\"line\">cd ~/vin-fusion_ws/src </span><br><span class=\"line\">git clone https://github.com/HKUST-Aerial-Robotics/VINS-Fusion.git </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">catkin_make </span><br><span class=\"line\">source ~/catkin_ws/devel/setup.bash </span><br></pre></td></tr></table></figure>\n\n"},{"title":"安装Rtabmap","date":"2023-08-25T09:26:09.002Z","description":null,"top_img":false,"_content":"\n# 安装Rtabmap \n\n## 1、安装rtabmap \n\n```\ngit clone https://github.com/introlab/rtabmap.git rtabmap \nsudo apt-get install ros-melodic-rtabmap ros-melodic-rtabmap-ros \nsudo apt-get remove ros-melodic-rtabmap ros-melodic-rtabmap-ros \n\nmkdir -p ~/rtabmap_ws/src \ncd ..      \ncd ~/rtabmap_ws                     \ncatkin_make \n\nmkdir rtabmap/build \ncd rtabmap/build \ncmake -DCMAKE_INSTALL_PREFIX=~/rtabmap_ws/devel .. \nmake -j4 \nmake install \n```\n\n \n\n## 2、安装rtabmap_ros \n\n```\ncd ~/rtabmap_ws \ngit clone https://github.com/introlab/rtabmap_ros.git src/rtabmap_ros \ncatkin_make \n```\n\n","source":"_posts/slam_config/安装Rtabmap.md","raw":"---\ntitle: 安装Rtabmap\ndate:\ntags: \n- Rtabmap\ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# 安装Rtabmap \n\n## 1、安装rtabmap \n\n```\ngit clone https://github.com/introlab/rtabmap.git rtabmap \nsudo apt-get install ros-melodic-rtabmap ros-melodic-rtabmap-ros \nsudo apt-get remove ros-melodic-rtabmap ros-melodic-rtabmap-ros \n\nmkdir -p ~/rtabmap_ws/src \ncd ..      \ncd ~/rtabmap_ws                     \ncatkin_make \n\nmkdir rtabmap/build \ncd rtabmap/build \ncmake -DCMAKE_INSTALL_PREFIX=~/rtabmap_ws/devel .. \nmake -j4 \nmake install \n```\n\n \n\n## 2、安装rtabmap_ros \n\n```\ncd ~/rtabmap_ws \ngit clone https://github.com/introlab/rtabmap_ros.git src/rtabmap_ros \ncatkin_make \n```\n\n","slug":"slam_config/安装Rtabmap","published":1,"updated":"2023-08-25T09:54:48.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67k005ngcr71re2drer","content":"<h1 id=\"安装Rtabmap\"><a href=\"#安装Rtabmap\" class=\"headerlink\" title=\"安装Rtabmap\"></a>安装Rtabmap</h1><h2 id=\"1、安装rtabmap\"><a href=\"#1、安装rtabmap\" class=\"headerlink\" title=\"1、安装rtabmap\"></a>1、安装rtabmap</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/introlab/rtabmap.git rtabmap </span><br><span class=\"line\">sudo apt-get install ros-melodic-rtabmap ros-melodic-rtabmap-ros </span><br><span class=\"line\">sudo apt-get remove ros-melodic-rtabmap ros-melodic-rtabmap-ros </span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ~/rtabmap_ws/src </span><br><span class=\"line\">cd ..      </span><br><span class=\"line\">cd ~/rtabmap_ws                     </span><br><span class=\"line\">catkin_make </span><br><span class=\"line\"></span><br><span class=\"line\">mkdir rtabmap/build </span><br><span class=\"line\">cd rtabmap/build </span><br><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX=~/rtabmap_ws/devel .. </span><br><span class=\"line\">make -j4 </span><br><span class=\"line\">make install </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、安装rtabmap-ros\"><a href=\"#2、安装rtabmap-ros\" class=\"headerlink\" title=\"2、安装rtabmap_ros\"></a>2、安装rtabmap_ros</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/rtabmap_ws </span><br><span class=\"line\">git clone https://github.com/introlab/rtabmap_ros.git src/rtabmap_ros </span><br><span class=\"line\">catkin_make </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-2.png","cover_type":"img","excerpt":"","more":"<h1 id=\"安装Rtabmap\"><a href=\"#安装Rtabmap\" class=\"headerlink\" title=\"安装Rtabmap\"></a>安装Rtabmap</h1><h2 id=\"1、安装rtabmap\"><a href=\"#1、安装rtabmap\" class=\"headerlink\" title=\"1、安装rtabmap\"></a>1、安装rtabmap</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/introlab/rtabmap.git rtabmap </span><br><span class=\"line\">sudo apt-get install ros-melodic-rtabmap ros-melodic-rtabmap-ros </span><br><span class=\"line\">sudo apt-get remove ros-melodic-rtabmap ros-melodic-rtabmap-ros </span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p ~/rtabmap_ws/src </span><br><span class=\"line\">cd ..      </span><br><span class=\"line\">cd ~/rtabmap_ws                     </span><br><span class=\"line\">catkin_make </span><br><span class=\"line\"></span><br><span class=\"line\">mkdir rtabmap/build </span><br><span class=\"line\">cd rtabmap/build </span><br><span class=\"line\">cmake -DCMAKE_INSTALL_PREFIX=~/rtabmap_ws/devel .. </span><br><span class=\"line\">make -j4 </span><br><span class=\"line\">make install </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2、安装rtabmap-ros\"><a href=\"#2、安装rtabmap-ros\" class=\"headerlink\" title=\"2、安装rtabmap_ros\"></a>2、安装rtabmap_ros</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/rtabmap_ws </span><br><span class=\"line\">git clone https://github.com/introlab/rtabmap_ros.git src/rtabmap_ros </span><br><span class=\"line\">catkin_make </span><br></pre></td></tr></table></figure>\n\n"},{"title":"安装ZED以及ros驱动","date":"2023-08-25T09:26:09.005Z","description":null,"top_img":false,"_content":"\n# 安装**ZED**以及**ros**驱动\n\n## Part1：安装zed sdk\n\n前往官网下载与Jetpack以及CUDA版本匹配的zed sdk \n\n```\nchmod +x ZED_SDK_Ubuntu16_cuda10.2_v3.1.2.run \n./ZED_SDK_Ubuntu16_cuda10.2_v3.1.2.run \n```\n\n\\#如果出现错误API下载失败，可手动前去网站下载，然后 \n\n```\nPip3 -m install *** \n```\n\n\n\n## Part2:安装zed2 ros工具\n\n```\ncd ~/ZED_WS/src \ngit clone https://github.com/stereolabs/zed-ros-wrapper.git \ncd ../ \nrosdep install --from-paths src --ignore-src -r -y \ncatkin_make -DCMAKE_BUILD_TYPE=Release \nsource ./devel/setup.bash \n \n\ncd ~/catkin_ws/src \ngit clone https://github.com/stereolabs/zed-ros-examples.git \ncd ../ \nrosdep install --from-paths src --ignore-src -r -y \ncatkin_make -DCMAKE_BUILD_TYPE=Release \nsource ./devel/setup.bash \n```\n\n \n\n## Part3：安装完毕运行查看效果\n\n```\nroslaunch zed_display_rviz display_zed.launch \n```\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n ","source":"_posts/slam_config/安装ZED以及ros驱动.md","raw":"---\ntitle: 安装ZED以及ros驱动\ndate:\ntags: \ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# 安装**ZED**以及**ros**驱动\n\n## Part1：安装zed sdk\n\n前往官网下载与Jetpack以及CUDA版本匹配的zed sdk \n\n```\nchmod +x ZED_SDK_Ubuntu16_cuda10.2_v3.1.2.run \n./ZED_SDK_Ubuntu16_cuda10.2_v3.1.2.run \n```\n\n\\#如果出现错误API下载失败，可手动前去网站下载，然后 \n\n```\nPip3 -m install *** \n```\n\n\n\n## Part2:安装zed2 ros工具\n\n```\ncd ~/ZED_WS/src \ngit clone https://github.com/stereolabs/zed-ros-wrapper.git \ncd ../ \nrosdep install --from-paths src --ignore-src -r -y \ncatkin_make -DCMAKE_BUILD_TYPE=Release \nsource ./devel/setup.bash \n \n\ncd ~/catkin_ws/src \ngit clone https://github.com/stereolabs/zed-ros-examples.git \ncd ../ \nrosdep install --from-paths src --ignore-src -r -y \ncatkin_make -DCMAKE_BUILD_TYPE=Release \nsource ./devel/setup.bash \n```\n\n \n\n## Part3：安装完毕运行查看效果\n\n```\nroslaunch zed_display_rviz display_zed.launch \n```\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n ","slug":"slam_config/安装ZED以及ros驱动","published":1,"updated":"2023-08-25T09:54:08.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67l005rgcr715qqbhxa","content":"<h1 id=\"安装ZED以及ros驱动\"><a href=\"#安装ZED以及ros驱动\" class=\"headerlink\" title=\"安装ZED以及ros驱动\"></a>安装<strong>ZED</strong>以及<strong>ros</strong>驱动</h1><h2 id=\"Part1：安装zed-sdk\"><a href=\"#Part1：安装zed-sdk\" class=\"headerlink\" title=\"Part1：安装zed sdk\"></a>Part1：安装zed sdk</h2><p>前往官网下载与Jetpack以及CUDA版本匹配的zed sdk </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ZED_SDK_Ubuntu16_cuda10.2_v3.1.2.run </span><br><span class=\"line\">./ZED_SDK_Ubuntu16_cuda10.2_v3.1.2.run </span><br></pre></td></tr></table></figure>\n\n<p>#如果出现错误API下载失败，可手动前去网站下载，然后 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pip3 -m install *** </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Part2-安装zed2-ros工具\"><a href=\"#Part2-安装zed2-ros工具\" class=\"headerlink\" title=\"Part2:安装zed2 ros工具\"></a>Part2:安装zed2 ros工具</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/ZED_WS/src </span><br><span class=\"line\">git clone https://github.com/stereolabs/zed-ros-wrapper.git </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">rosdep install --from-paths src --ignore-src -r -y </span><br><span class=\"line\">catkin_make -DCMAKE_BUILD_TYPE=Release </span><br><span class=\"line\">source ./devel/setup.bash </span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">cd ~/catkin_ws/src </span><br><span class=\"line\">git clone https://github.com/stereolabs/zed-ros-examples.git </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">rosdep install --from-paths src --ignore-src -r -y </span><br><span class=\"line\">catkin_make -DCMAKE_BUILD_TYPE=Release </span><br><span class=\"line\">source ./devel/setup.bash </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part3：安装完毕运行查看效果\"><a href=\"#Part3：安装完毕运行查看效果\" class=\"headerlink\" title=\"Part3：安装完毕运行查看效果\"></a>Part3：安装完毕运行查看效果</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch zed_display_rviz display_zed.launch </span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-9.png","cover_type":"img","excerpt":"","more":"<h1 id=\"安装ZED以及ros驱动\"><a href=\"#安装ZED以及ros驱动\" class=\"headerlink\" title=\"安装ZED以及ros驱动\"></a>安装<strong>ZED</strong>以及<strong>ros</strong>驱动</h1><h2 id=\"Part1：安装zed-sdk\"><a href=\"#Part1：安装zed-sdk\" class=\"headerlink\" title=\"Part1：安装zed sdk\"></a>Part1：安装zed sdk</h2><p>前往官网下载与Jetpack以及CUDA版本匹配的zed sdk </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ZED_SDK_Ubuntu16_cuda10.2_v3.1.2.run </span><br><span class=\"line\">./ZED_SDK_Ubuntu16_cuda10.2_v3.1.2.run </span><br></pre></td></tr></table></figure>\n\n<p>#如果出现错误API下载失败，可手动前去网站下载，然后 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pip3 -m install *** </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Part2-安装zed2-ros工具\"><a href=\"#Part2-安装zed2-ros工具\" class=\"headerlink\" title=\"Part2:安装zed2 ros工具\"></a>Part2:安装zed2 ros工具</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/ZED_WS/src </span><br><span class=\"line\">git clone https://github.com/stereolabs/zed-ros-wrapper.git </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">rosdep install --from-paths src --ignore-src -r -y </span><br><span class=\"line\">catkin_make -DCMAKE_BUILD_TYPE=Release </span><br><span class=\"line\">source ./devel/setup.bash </span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">cd ~/catkin_ws/src </span><br><span class=\"line\">git clone https://github.com/stereolabs/zed-ros-examples.git </span><br><span class=\"line\">cd ../ </span><br><span class=\"line\">rosdep install --from-paths src --ignore-src -r -y </span><br><span class=\"line\">catkin_make -DCMAKE_BUILD_TYPE=Release </span><br><span class=\"line\">source ./devel/setup.bash </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Part3：安装完毕运行查看效果\"><a href=\"#Part3：安装完毕运行查看效果\" class=\"headerlink\" title=\"Part3：安装完毕运行查看效果\"></a>Part3：安装完毕运行查看效果</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">roslaunch zed_display_rviz display_zed.launch </span><br></pre></td></tr></table></figure>\n\n"},{"title":"激光雷达与IMU联合标定(lidar_IMU_calib）","date":"2023-08-25T09:26:09.009Z","description":null,"top_img":false,"_content":"\n# 激光雷达与IMU联合标定(lidar_IMU_calib）\n\n> 本文档主要介绍浙大开源标定算法lidar_IMU_calib \n>\n> Github地址： https://github.com/APRIL-ZJU/lidar_IMU_calib \n>\n> 论文地址： https://arxiv.org/pdf/2007.14759.pdf \n>\n> 参考资料：https://www.cnblogs.com/chenlinchong/p/14048969.html \n\n​\tlidar_IMU_calib是基于连续时间批量估计的LiDAR-IMU系统的无目标标定，用于校准 6DoF 刚性变换以及 3D LiDAR 和 IMU 之间的时间偏移。基于 IMU 的成本和 LiDAR 点到冲浪距离被联合最小化，这使得校准问题在一般情况下受到很好的约束。 \n\n标定主要需要：Lidar的外参、IMU内参、Lidar与IMU之间的变换。 \n\n## **依赖条件** \n\n### ROS(tested with Kinetic and Melodic) \n\n```\nsudo apt-get install ros-melodic-pcl-ros ros-melodic-velodyne-msgs \n```\n\n### Ceres(tested with version1.14.0) \n\nGithub地址：https://github.com/ceres-solver/ceres-solver/tree/e51e9b46f6ca88ab8b2266d0e362771db6d98067 \n\n### Kontiki\n\n（需要手动下在安装在文件夹内，地址见下文） \n\n### Pangolin\n\n（不需要手动下载） \n\n### Ndt_omp\n\n(不需要手动下载) \n\n## **环境编译** \n\n```\n# init ROS workspace \nmkdir -p ~/catkin_li_calib/src \ncd ~/catkin_li_calib/src \ncatkin_init_workspace \n\n# Clone the source code for the project and build it. \ngit clone https://github.com/APRIL-ZJU/lidar_IMU_calib \n\n# ndt_omp \nwstool init \nwstool merge lidar_IMU_calib/depend_pack.rosinstall \nwstool update \n  \n# Pangolin \n./build_submodules.sh \n```\n\n装完Pangolin后手动将Kontiki编译安装到./src/lidar_IMU_calib/thirdparty/Kontiki中 \n\nGithub地址：https://github.com/APRIL-ZJU/Kontiki \n\n由于xavier是arm架构的限制，需要改动几处编译指令： \n\n1. ndt_omp中的CMakeLists.txt: \n\n   ![](media/1GetImage.jpeg)\n\n   更改为：\n\n   ![](media/1GetImage(1).png)\n\n2. lidar_IMU_calib中的CMakeLists.txt: \n\n   更改为： \n\n   ![](media/GetImage(3).png)\n\n3. 改名： \n\n```\nsudo mv /usr/include/flann/ext/lz4.h /usr/include/flann/ext/lz4.h.bak \nsudo mv /usr/include/flann/ext/lz4hc.h /usr/include/flann/ext/lz4.h.bak \n\n 添加软链接： \nsudo ln -s /usr/include/lz4.h /usr/include/flann/ext/lz4.h \nsudo ln -s /usr/include/lz4hc.h /usr/include/flann/ext/lz4hc.h \n\n## build \ncd ../.. \ncatkin_make \nsource ./devel/setup.bash \n```\n\n## **数据录制** \n\n鉴于是基于NDT匹配算法的里程计计算， \n\n数据录制需要`注意`： \n\n1.需要在平面多的房间里录制； \n\n2.xyz轴方向都需要移动 \n\n3.不要旋转过/移动过猛 \n\n```\nrosbag -record -o out /velodyne_packets/你的IMU数据话题 \n# 注意话题名要匹配。 \n```\n\n## **运行** \n\n在licalib_gui.launch和calib.sh里面修改成你录制的话题 \n\n```\n./src/lidar_IMU_calib/calib.sh \n```\n\n![](media/GetImage5.jpeg)\n\n点击了初始化（Initialization）及下面的三个按钮，后续就一直是点击下面的按钮 \n\n## **结果** \n\n标定结果是四元数，将四元数转换为旋转矩阵。放入了LIOSAM的param.yaml文件里。再就行实际效果测试。 \n\n## **问题** \n\n迭代过程中并不知道自己的标定文件是否是对的，可能需要多录制几次进行测试。 ","source":"_posts/slam_config/激光雷达与IMU联合标定(lidar_IMU_calib).md","raw":"---\ntitle: 激光雷达与IMU联合标定(lidar_IMU_calib）\ndate:\ntags: \n- Calib\ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# 激光雷达与IMU联合标定(lidar_IMU_calib）\n\n> 本文档主要介绍浙大开源标定算法lidar_IMU_calib \n>\n> Github地址： https://github.com/APRIL-ZJU/lidar_IMU_calib \n>\n> 论文地址： https://arxiv.org/pdf/2007.14759.pdf \n>\n> 参考资料：https://www.cnblogs.com/chenlinchong/p/14048969.html \n\n​\tlidar_IMU_calib是基于连续时间批量估计的LiDAR-IMU系统的无目标标定，用于校准 6DoF 刚性变换以及 3D LiDAR 和 IMU 之间的时间偏移。基于 IMU 的成本和 LiDAR 点到冲浪距离被联合最小化，这使得校准问题在一般情况下受到很好的约束。 \n\n标定主要需要：Lidar的外参、IMU内参、Lidar与IMU之间的变换。 \n\n## **依赖条件** \n\n### ROS(tested with Kinetic and Melodic) \n\n```\nsudo apt-get install ros-melodic-pcl-ros ros-melodic-velodyne-msgs \n```\n\n### Ceres(tested with version1.14.0) \n\nGithub地址：https://github.com/ceres-solver/ceres-solver/tree/e51e9b46f6ca88ab8b2266d0e362771db6d98067 \n\n### Kontiki\n\n（需要手动下在安装在文件夹内，地址见下文） \n\n### Pangolin\n\n（不需要手动下载） \n\n### Ndt_omp\n\n(不需要手动下载) \n\n## **环境编译** \n\n```\n# init ROS workspace \nmkdir -p ~/catkin_li_calib/src \ncd ~/catkin_li_calib/src \ncatkin_init_workspace \n\n# Clone the source code for the project and build it. \ngit clone https://github.com/APRIL-ZJU/lidar_IMU_calib \n\n# ndt_omp \nwstool init \nwstool merge lidar_IMU_calib/depend_pack.rosinstall \nwstool update \n  \n# Pangolin \n./build_submodules.sh \n```\n\n装完Pangolin后手动将Kontiki编译安装到./src/lidar_IMU_calib/thirdparty/Kontiki中 \n\nGithub地址：https://github.com/APRIL-ZJU/Kontiki \n\n由于xavier是arm架构的限制，需要改动几处编译指令： \n\n1. ndt_omp中的CMakeLists.txt: \n\n   ![](media/1GetImage.jpeg)\n\n   更改为：\n\n   ![](media/1GetImage(1).png)\n\n2. lidar_IMU_calib中的CMakeLists.txt: \n\n   更改为： \n\n   ![](media/GetImage(3).png)\n\n3. 改名： \n\n```\nsudo mv /usr/include/flann/ext/lz4.h /usr/include/flann/ext/lz4.h.bak \nsudo mv /usr/include/flann/ext/lz4hc.h /usr/include/flann/ext/lz4.h.bak \n\n 添加软链接： \nsudo ln -s /usr/include/lz4.h /usr/include/flann/ext/lz4.h \nsudo ln -s /usr/include/lz4hc.h /usr/include/flann/ext/lz4hc.h \n\n## build \ncd ../.. \ncatkin_make \nsource ./devel/setup.bash \n```\n\n## **数据录制** \n\n鉴于是基于NDT匹配算法的里程计计算， \n\n数据录制需要`注意`： \n\n1.需要在平面多的房间里录制； \n\n2.xyz轴方向都需要移动 \n\n3.不要旋转过/移动过猛 \n\n```\nrosbag -record -o out /velodyne_packets/你的IMU数据话题 \n# 注意话题名要匹配。 \n```\n\n## **运行** \n\n在licalib_gui.launch和calib.sh里面修改成你录制的话题 \n\n```\n./src/lidar_IMU_calib/calib.sh \n```\n\n![](media/GetImage5.jpeg)\n\n点击了初始化（Initialization）及下面的三个按钮，后续就一直是点击下面的按钮 \n\n## **结果** \n\n标定结果是四元数，将四元数转换为旋转矩阵。放入了LIOSAM的param.yaml文件里。再就行实际效果测试。 \n\n## **问题** \n\n迭代过程中并不知道自己的标定文件是否是对的，可能需要多录制几次进行测试。 ","slug":"slam_config/激光雷达与IMU联合标定(lidar_IMU_calib)","published":1,"updated":"2023-08-25T09:52:54.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67q007ggcr7ff9d6vpd","content":"<h1 id=\"激光雷达与IMU联合标定-lidar-IMU-calib）\"><a href=\"#激光雷达与IMU联合标定-lidar-IMU-calib）\" class=\"headerlink\" title=\"激光雷达与IMU联合标定(lidar_IMU_calib）\"></a>激光雷达与IMU联合标定(lidar_IMU_calib）</h1><blockquote>\n<p>本文档主要介绍浙大开源标定算法lidar_IMU_calib </p>\n<p>Github地址： <a href=\"https://github.com/APRIL-ZJU/lidar_IMU_calib\">https://github.com/APRIL-ZJU/lidar_IMU_calib</a> </p>\n<p>论文地址： <a href=\"https://arxiv.org/pdf/2007.14759.pdf\">https://arxiv.org/pdf/2007.14759.pdf</a> </p>\n<p>参考资料：<a href=\"https://www.cnblogs.com/chenlinchong/p/14048969.html\">https://www.cnblogs.com/chenlinchong/p/14048969.html</a> </p>\n</blockquote>\n<p>​\tlidar_IMU_calib是基于连续时间批量估计的LiDAR-IMU系统的无目标标定，用于校准 6DoF 刚性变换以及 3D LiDAR 和 IMU 之间的时间偏移。基于 IMU 的成本和 LiDAR 点到冲浪距离被联合最小化，这使得校准问题在一般情况下受到很好的约束。 </p>\n<p>标定主要需要：Lidar的外参、IMU内参、Lidar与IMU之间的变换。 </p>\n<h2 id=\"依赖条件\"><a href=\"#依赖条件\" class=\"headerlink\" title=\"依赖条件\"></a><strong>依赖条件</strong></h2><h3 id=\"ROS-tested-with-Kinetic-and-Melodic\"><a href=\"#ROS-tested-with-Kinetic-and-Melodic\" class=\"headerlink\" title=\"ROS(tested with Kinetic and Melodic)\"></a>ROS(tested with Kinetic and Melodic)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ros-melodic-pcl-ros ros-melodic-velodyne-msgs </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ceres-tested-with-version1-14-0\"><a href=\"#Ceres-tested-with-version1-14-0\" class=\"headerlink\" title=\"Ceres(tested with version1.14.0)\"></a>Ceres(tested with version1.14.0)</h3><p>Github地址：<a href=\"https://github.com/ceres-solver/ceres-solver/tree/e51e9b46f6ca88ab8b2266d0e362771db6d98067\">https://github.com/ceres-solver/ceres-solver/tree/e51e9b46f6ca88ab8b2266d0e362771db6d98067</a> </p>\n<h3 id=\"Kontiki\"><a href=\"#Kontiki\" class=\"headerlink\" title=\"Kontiki\"></a>Kontiki</h3><p>（需要手动下在安装在文件夹内，地址见下文） </p>\n<h3 id=\"Pangolin\"><a href=\"#Pangolin\" class=\"headerlink\" title=\"Pangolin\"></a>Pangolin</h3><p>（不需要手动下载） </p>\n<h3 id=\"Ndt-omp\"><a href=\"#Ndt-omp\" class=\"headerlink\" title=\"Ndt_omp\"></a>Ndt_omp</h3><p>(不需要手动下载) </p>\n<h2 id=\"环境编译\"><a href=\"#环境编译\" class=\"headerlink\" title=\"环境编译\"></a><strong>环境编译</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># init ROS workspace </span><br><span class=\"line\">mkdir -p ~/catkin_li_calib/src </span><br><span class=\"line\">cd ~/catkin_li_calib/src </span><br><span class=\"line\">catkin_init_workspace </span><br><span class=\"line\"></span><br><span class=\"line\"># Clone the source code for the project and build it. </span><br><span class=\"line\">git clone https://github.com/APRIL-ZJU/lidar_IMU_calib </span><br><span class=\"line\"></span><br><span class=\"line\"># ndt_omp </span><br><span class=\"line\">wstool init </span><br><span class=\"line\">wstool merge lidar_IMU_calib/depend_pack.rosinstall </span><br><span class=\"line\">wstool update </span><br><span class=\"line\">  </span><br><span class=\"line\"># Pangolin </span><br><span class=\"line\">./build_submodules.sh </span><br></pre></td></tr></table></figure>\n\n<p>装完Pangolin后手动将Kontiki编译安装到.&#x2F;src&#x2F;lidar_IMU_calib&#x2F;thirdparty&#x2F;Kontiki中 </p>\n<p>Github地址：<a href=\"https://github.com/APRIL-ZJU/Kontiki\">https://github.com/APRIL-ZJU/Kontiki</a> </p>\n<p>由于xavier是arm架构的限制，需要改动几处编译指令： </p>\n<ol>\n<li><p>ndt_omp中的CMakeLists.txt: </p>\n<p><img src=\"/media/1GetImage.jpeg\"></p>\n<p>更改为：</p>\n<p><img src=\"/media/1GetImage(1).png\"></p>\n</li>\n<li><p>lidar_IMU_calib中的CMakeLists.txt: </p>\n<p>更改为： </p>\n<p><img src=\"/media/GetImage(3).png\"></p>\n</li>\n<li><p>改名：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /usr/include/flann/ext/lz4.h /usr/include/flann/ext/lz4.h.bak </span><br><span class=\"line\">sudo mv /usr/include/flann/ext/lz4hc.h /usr/include/flann/ext/lz4.h.bak </span><br><span class=\"line\"></span><br><span class=\"line\"> 添加软链接： </span><br><span class=\"line\">sudo ln -s /usr/include/lz4.h /usr/include/flann/ext/lz4.h </span><br><span class=\"line\">sudo ln -s /usr/include/lz4hc.h /usr/include/flann/ext/lz4hc.h </span><br><span class=\"line\"></span><br><span class=\"line\">## build </span><br><span class=\"line\">cd ../.. </span><br><span class=\"line\">catkin_make </span><br><span class=\"line\">source ./devel/setup.bash </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据录制\"><a href=\"#数据录制\" class=\"headerlink\" title=\"数据录制\"></a><strong>数据录制</strong></h2><p>鉴于是基于NDT匹配算法的里程计计算， </p>\n<p>数据录制需要<code>注意</code>： </p>\n<p>1.需要在平面多的房间里录制； </p>\n<p>2.xyz轴方向都需要移动 </p>\n<p>3.不要旋转过&#x2F;移动过猛 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosbag -record -o out /velodyne_packets/你的IMU数据话题 </span><br><span class=\"line\"># 注意话题名要匹配。 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a><strong>运行</strong></h2><p>在licalib_gui.launch和calib.sh里面修改成你录制的话题 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./src/lidar_IMU_calib/calib.sh </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/GetImage5.jpeg\"></p>\n<p>点击了初始化（Initialization）及下面的三个按钮，后续就一直是点击下面的按钮 </p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a><strong>结果</strong></h2><p>标定结果是四元数，将四元数转换为旋转矩阵。放入了LIOSAM的param.yaml文件里。再就行实际效果测试。 </p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a><strong>问题</strong></h2><p>迭代过程中并不知道自己的标定文件是否是对的，可能需要多录制几次进行测试。 </p>\n","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-6.png","cover_type":"img","excerpt":"","more":"<h1 id=\"激光雷达与IMU联合标定-lidar-IMU-calib）\"><a href=\"#激光雷达与IMU联合标定-lidar-IMU-calib）\" class=\"headerlink\" title=\"激光雷达与IMU联合标定(lidar_IMU_calib）\"></a>激光雷达与IMU联合标定(lidar_IMU_calib）</h1><blockquote>\n<p>本文档主要介绍浙大开源标定算法lidar_IMU_calib </p>\n<p>Github地址： <a href=\"https://github.com/APRIL-ZJU/lidar_IMU_calib\">https://github.com/APRIL-ZJU/lidar_IMU_calib</a> </p>\n<p>论文地址： <a href=\"https://arxiv.org/pdf/2007.14759.pdf\">https://arxiv.org/pdf/2007.14759.pdf</a> </p>\n<p>参考资料：<a href=\"https://www.cnblogs.com/chenlinchong/p/14048969.html\">https://www.cnblogs.com/chenlinchong/p/14048969.html</a> </p>\n</blockquote>\n<p>​\tlidar_IMU_calib是基于连续时间批量估计的LiDAR-IMU系统的无目标标定，用于校准 6DoF 刚性变换以及 3D LiDAR 和 IMU 之间的时间偏移。基于 IMU 的成本和 LiDAR 点到冲浪距离被联合最小化，这使得校准问题在一般情况下受到很好的约束。 </p>\n<p>标定主要需要：Lidar的外参、IMU内参、Lidar与IMU之间的变换。 </p>\n<h2 id=\"依赖条件\"><a href=\"#依赖条件\" class=\"headerlink\" title=\"依赖条件\"></a><strong>依赖条件</strong></h2><h3 id=\"ROS-tested-with-Kinetic-and-Melodic\"><a href=\"#ROS-tested-with-Kinetic-and-Melodic\" class=\"headerlink\" title=\"ROS(tested with Kinetic and Melodic)\"></a>ROS(tested with Kinetic and Melodic)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install ros-melodic-pcl-ros ros-melodic-velodyne-msgs </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Ceres-tested-with-version1-14-0\"><a href=\"#Ceres-tested-with-version1-14-0\" class=\"headerlink\" title=\"Ceres(tested with version1.14.0)\"></a>Ceres(tested with version1.14.0)</h3><p>Github地址：<a href=\"https://github.com/ceres-solver/ceres-solver/tree/e51e9b46f6ca88ab8b2266d0e362771db6d98067\">https://github.com/ceres-solver/ceres-solver/tree/e51e9b46f6ca88ab8b2266d0e362771db6d98067</a> </p>\n<h3 id=\"Kontiki\"><a href=\"#Kontiki\" class=\"headerlink\" title=\"Kontiki\"></a>Kontiki</h3><p>（需要手动下在安装在文件夹内，地址见下文） </p>\n<h3 id=\"Pangolin\"><a href=\"#Pangolin\" class=\"headerlink\" title=\"Pangolin\"></a>Pangolin</h3><p>（不需要手动下载） </p>\n<h3 id=\"Ndt-omp\"><a href=\"#Ndt-omp\" class=\"headerlink\" title=\"Ndt_omp\"></a>Ndt_omp</h3><p>(不需要手动下载) </p>\n<h2 id=\"环境编译\"><a href=\"#环境编译\" class=\"headerlink\" title=\"环境编译\"></a><strong>环境编译</strong></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># init ROS workspace </span><br><span class=\"line\">mkdir -p ~/catkin_li_calib/src </span><br><span class=\"line\">cd ~/catkin_li_calib/src </span><br><span class=\"line\">catkin_init_workspace </span><br><span class=\"line\"></span><br><span class=\"line\"># Clone the source code for the project and build it. </span><br><span class=\"line\">git clone https://github.com/APRIL-ZJU/lidar_IMU_calib </span><br><span class=\"line\"></span><br><span class=\"line\"># ndt_omp </span><br><span class=\"line\">wstool init </span><br><span class=\"line\">wstool merge lidar_IMU_calib/depend_pack.rosinstall </span><br><span class=\"line\">wstool update </span><br><span class=\"line\">  </span><br><span class=\"line\"># Pangolin </span><br><span class=\"line\">./build_submodules.sh </span><br></pre></td></tr></table></figure>\n\n<p>装完Pangolin后手动将Kontiki编译安装到.&#x2F;src&#x2F;lidar_IMU_calib&#x2F;thirdparty&#x2F;Kontiki中 </p>\n<p>Github地址：<a href=\"https://github.com/APRIL-ZJU/Kontiki\">https://github.com/APRIL-ZJU/Kontiki</a> </p>\n<p>由于xavier是arm架构的限制，需要改动几处编译指令： </p>\n<ol>\n<li><p>ndt_omp中的CMakeLists.txt: </p>\n<p><img src=\"/media/1GetImage.jpeg\"></p>\n<p>更改为：</p>\n<p><img src=\"/media/1GetImage(1).png\"></p>\n</li>\n<li><p>lidar_IMU_calib中的CMakeLists.txt: </p>\n<p>更改为： </p>\n<p><img src=\"/media/GetImage(3).png\"></p>\n</li>\n<li><p>改名：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /usr/include/flann/ext/lz4.h /usr/include/flann/ext/lz4.h.bak </span><br><span class=\"line\">sudo mv /usr/include/flann/ext/lz4hc.h /usr/include/flann/ext/lz4.h.bak </span><br><span class=\"line\"></span><br><span class=\"line\"> 添加软链接： </span><br><span class=\"line\">sudo ln -s /usr/include/lz4.h /usr/include/flann/ext/lz4.h </span><br><span class=\"line\">sudo ln -s /usr/include/lz4hc.h /usr/include/flann/ext/lz4hc.h </span><br><span class=\"line\"></span><br><span class=\"line\">## build </span><br><span class=\"line\">cd ../.. </span><br><span class=\"line\">catkin_make </span><br><span class=\"line\">source ./devel/setup.bash </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数据录制\"><a href=\"#数据录制\" class=\"headerlink\" title=\"数据录制\"></a><strong>数据录制</strong></h2><p>鉴于是基于NDT匹配算法的里程计计算， </p>\n<p>数据录制需要<code>注意</code>： </p>\n<p>1.需要在平面多的房间里录制； </p>\n<p>2.xyz轴方向都需要移动 </p>\n<p>3.不要旋转过&#x2F;移动过猛 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rosbag -record -o out /velodyne_packets/你的IMU数据话题 </span><br><span class=\"line\"># 注意话题名要匹配。 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a><strong>运行</strong></h2><p>在licalib_gui.launch和calib.sh里面修改成你录制的话题 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./src/lidar_IMU_calib/calib.sh </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/media/GetImage5.jpeg\"></p>\n<p>点击了初始化（Initialization）及下面的三个按钮，后续就一直是点击下面的按钮 </p>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a><strong>结果</strong></h2><p>标定结果是四元数，将四元数转换为旋转矩阵。放入了LIOSAM的param.yaml文件里。再就行实际效果测试。 </p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a><strong>问题</strong></h2><p>迭代过程中并不知道自己的标定文件是否是对的，可能需要多录制几次进行测试。 </p>\n"},{"title":"轨迹评估介绍与evo工具使用","date":"2023-08-25T09:26:09.011Z","description":null,"top_img":false,"_content":"\n# 轨迹评估介绍与evo工具使用 \n\n## **介绍** \n\n本文介绍了轨迹评估的基本概念，包括轨迹对齐、尺度变换、绝对轨迹误差、相对轨迹误差以及计算方法、相关文献，以及evo轨迹评估工具的安装、使用举例、命令参数详解。 \n\n \n\n## **第一部分：evo 介绍** \n\n- evo是一款用于视觉里程计和SLAM问题的轨迹评估工具. 核心功能是能够绘制相机的轨迹, 或评估轨迹与真值之间的误差. \n- 它支持多种数据集的轨迹格式(TUM、KITTI、EuRoC MAV、ROS的bag)， 同时支持这些数据格式之间的相互转换。 \n- 灵活的输出/绘图和导出选项(例如LaTeX绘图或Excel表格) \n- 强大的可配置的CLI, 可以涵盖多种场景使用 \n- 用于自定义扩展的模块化 \n- github：[github.com/MichaelGrup…](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FMichaelGrupp%2Fevo.git) \n- wiki： [github.com/MichaelGrup…](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FMichaelGrupp%2Fevo%2Fwiki) \n\n \n\n## **第二部分：安装 evo 工具** \n\n#### **Step1： python 3.8虚拟环境搭建** \n\n`目的`：构筑一个纯净python 3.8环境（github上告知最新的evo版本支持Python 3.8+，若要支持Python2.7需使用 1.12.0及以下版本）。ubuntu18.04自带python 3.6和2.7，如果不使用python虚拟环境，还可以使用 update-alternatives 命令来切换OS所使用的Python版本，以下以使用Python虚拟环境为例（使用conda方式）： \n\n```\n# 下载 anaconda 或 miniconda， 以下以 miniconda 为例 \nwget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh \n或 \nwget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda2-py27_4.8.3-Linux-x86_64.sh \n \n# 安装 miniconda \nbash iniconda2-py27_4.8.3-Linux-x86_64.sh \nsource ~/.bashrc \n \n# 创建 python3.8 虚拟环境 \nconda create -n slam_env python=3.8 \n \n# 进入虚拟环境 \nconda activate slam_env \n \n# 查看python虚拟环境和其pip工具 （此时提示符已经切换为 slam_env ） \n(slam_env) hadoop@ubuntu:~$ pip --version \npip 21.2.4 from /home/hadoop/miniconda2/envs/slam_env/lib/python3.8/site-packages/pip (python 3.8) \n \n# 查看虚拟环境已安装的python模块 \n(slam_env) hadoop@ubuntu:~$ conda list \n# packages inenvironment at /home/hadoop/miniconda2/envs/slam_env:# \n# Name                    Version                   Build  Channel \n_libgcc_mutex             0.1                        main \n_openmp_mutex             4.5                       1_gnu \nca-certificates           2021.10.26           h06a4308_2 \ncertifi                   2021.10.8        py38h06a4308_2 \nld_impl_linux-64          2.35.1               h7274673_9 \nlibffi                    3.3                  he6710b0_2 \n(下略） \n \n# 升级 pip 到最新版本 \n(slam_env) hadoop@ubuntu:~$ pip install -U pip  \n \n# pip 使用国内 pypi 镜像站（清华） \npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple \n```\n\n至此，完成python虚拟环境搭建完毕，使用时使用 conda activate slam_env 即可进入python虚拟环境提示符。 \n\n\n\n#### **Step2： 使用pip安装 evo 到虚拟环境** \n\n```\n# 进入虚拟环境 \n(base) hadoop@ubuntu:~$ conda activate slam_env \n \n# 安装evo工具 \n(slam_env) hadoop@ubuntu:~$ pip install evo --upgrade --no-binary evo --user \n \n# 查看evo工具 \nls ~/.local/bin \n \n# 编辑 ~/.bashrc， 把 ~/.local/bin 目录加入到 PATH 环境变量 \necho 'export PATH=~/.local/bin:$PATH' >> ~/.bashrc \nsource ~/.bashrc \n \n# 确认evo工具可用 \nevo_ape --help \n \n# 安装tkinter，防止运行 evo 时报错 tkinter 找不到 \nsudo apt install  python3-tk \n```\n\n**备注1: 安装过程会自动安装所依赖的科学计算库和绘图库如numpy、scipy、pandas、matplotlib、pillow等.** \n\n\n\n#### **Step3：工具位置介绍** \n\n- ##### **安装好的 evo 的命令行工具在目录 ~/.local/bin 下** \n\n```\n$ ls ~/.local/bin \n    activate-global-python-argcomplete  evo_traj    pygmentize \n    evo                                 f2py        python-argcomplete-check-easy-install-script \n    evo_ape                             f2py3       python-argcomplete-tcsh \n    evo_config                          f2py3.8     register-python-argcomplete \n    evo_fig                             fonttools   rosbags-convert \n    evo_ipython                         natsort     ttx \n    evo_res                             pyftmerge \n    evo_rpe                             pyftsubset \n```\n\n- **轨迹误差评估方面**：\n  - evo_ape : 计算绝对位姿误差(absolute pose error)，用于整体评估整条轨迹的`全局一致性`； \n  - evo_rpe : 计算相对位姿误差(relative pose error)，用于评价轨迹局部的`准确性`。 \n- **绘图方面**：\n  - evo_traj : 分析/绘图/导出一条或多条轨迹 \n- **评估结果比较方面**：\n  - evo_res : 比较一个或多个结果文件, 结果文件来自 evo_ape 或 evp_rpe的输出 \n- **其他**： \n  - evo_config : 对evo工具的全局设置\n- **需要注意, EUROC数据集、TUM数据集、KITTI数据集使用四元数的顺序是不一样的， 因此在使用 evo 命令时， 需要增加一个命令选项参数进行区分。** \n\n\n\n## **第三部分： 基本概念简介** \n\n在使用evo工具之前， 先介绍一些evo工具使用过程中会遇到的轨迹评估方面的基本概念，以便于更好的理解工具的输出信息和图表。 \n\n基本介绍信息如下所示。 \n\n### **1. 轨迹对齐** \n\n在定量轨迹评估过程时，如图所示，首先估计的轨迹（蓝色）要和真值（黑色）对齐，然后再利用特性的误差度量计算对气候的轨迹估计误差。 \n\n![](./media/GetImage6.png)\n\n下图左图是对齐前，右图是对齐后； 其中灰色线为对应的状态 \n\n![](/./media/GetImage7.png)\n\n### **2. 尺度变换** \n\n**尺度歧义性**？ \n\n根据单目相机相机测量模型可知其尺度歧义性，如图所示，相机将3D点（红色×）投影到成像平面上的2D点（黑色○）。对于单目相机，相同方向但不同距离的3D点（灰色x）投影到相同的2D点，从而导致尺度歧义性。 \n\n**尺度变换**： 相当于添加一个恒定的尺度变换 TsT_sTs到第二个相机，消除该歧义性；\n\n ![](./media/GetImage8.png)\n\n### **3. 绝对轨迹误差和相对轨迹误差** \n\n- 绝对轨迹误差计算的每一个点对（待评估轨迹的点与真值轨迹的点）的绝对值误差。 \n- 相对轨迹误差计算的是，针对两条轨迹，分别计算第 k时刻和 k+Δ时刻的误差，然后这两个误差间再计算绝对值误差。\n\n![](./media/GetImage9.png)\n\n### **4. 补充** \n\n可以在相关文献获取更加详细的信息: A Tutorial on Quantitative Trajectory Evaluation for Visual(-Inertial) Odometry。 \n\n \n\n## **第四部分：evo初体验**\n\n### **1.evo_traj 体验** \n\n- 介绍：evo_traj 可以分析、绘制、导出一个或多个轨迹；可以打开任意多个轨迹，查看统计信息， 还可以将轨迹转换为其他格式； \n\n- 体验\n\n  ```\n  # evo_traj 执行，以KITTI_00_gt为参考，绘制 KITTI_00_ORB  KITTI_00_SPTAMcd evo/test/data \n  evo_traj kitti KITTI_00_ORB.txt KITTI_00_SPTAM.txt --ref=KITTI_00_gt.txt -p --plot_mode=xz \n  ```\n\n- 出现如下的图示 \n\n  ![](./media/GetImage3.png)\n\n  注：虚线为参考值；由于参数设置了xz，因此只显示轨迹在xz平面上投影；坐标表示活动轨迹范围； \n\n  ![](./media/GetImage4.png)\n\n  注： 以起始点作为基准点，针对每个pose点（横），按x/y/z三个方向的分量，描述其距离原点距离（纵）\n\n- 本文后面章节会详细讲解 evo_traj 的每一个命令参数。\n\n### **2.evo_ape 体验 + 绝对轨迹误差计算方法** \n\n- 介绍：evo_ape 可以评估轨迹绝对位姿误差(absolute pose error) \n- 绝对位姿误差常被用作比较估计轨迹和参考估计并计算整个轨迹误差的统计数据， 适用于测试轨迹的全局一致性。 \n\n```\n# 创建存放结果的目录 \nmkdir results \nevo_ape kitti KITTI_00_gt.txt KITTI_00_SPTAM.txt -vas  --plot --plot_mode xz --save_results results/SPTAM_APE.zip \n```\n\n- 出现如下图示效果\n\n  - 绝对轨迹误差信息如下图：\n\n    ![](./media/GetImage10.png)\n\n    注：针对所有位姿点描述绝对误差大小，并与均方根误差、中位值、均值、标准差等直观比较；std覆盖区域为 [mean−std, mean+std], 反应组内个体间离散程度； \n\n    注：默认情况下计算的是ATE(absolute trajectory error)绝对轨迹误差。终端输出 Calculating APE for translation part pose relation... 表示计算的是平移误差；可以使用 -r full 同时计算平移+旋转误差； \n\n  - 轨迹直观误差信息如下图\n\n    ![](./media/GetImage11.png)\n\n    注： 针对整个轨迹，使用颜色显示偏差的大小，按蓝-绿-红渐变色偏差依次变大；放大后可更清楚的查看局部轨迹差； \n    本文后面章节会详细讲解 evo_ape 的每一个命令参数。 \n\n- Umeyama算法\n\n  Umeyama算法用于做点云匹配对齐，因为点集合之间的对应关系已知，它可以计算出两组点云数据间的旋转+平移变换矩阵和相似变换矩阵； \n  原理就是通过点对之间距离平方和的最小二乘误差计算出T，和ICP的损失函数是类似的。 \n\n  ![](./media/GetImage12.png)\n\n  最后计算得到:\n\n  ![](./media/GetImage13.png)\n\n  此外， Eigen 库也封装了函数 Eigen::umeyama（），可直接传入两个点云集合调用求解. \n\n  SE(3)与Sim(3)，对于双目SLAM和RGB-D SLAM，尺度统一，因此需要通过最小二乘计算估计位姿到真实位姿的转换矩阵 S∈SE(3); \n\n  对于单目相机，尺度不确定性，因此需要计算从估计位姿到真实位姿的相似变换矩阵 S∈Sim(3)。 默认为SE(3)，加 -s 参数使用 Sim(3); \n\n  补充说明：可以通过Umeyama的文献获取更进一步的信息： Least-Squares Estimation of Transformation Parameters Between Two Point Patterns \n注：终端输出表示的是用 Umeyama 计算得到的相似矩阵选装、平移和尺度变换的结果。\n  \n```\n   Rotation of alignment: \n    [[ 0.99972834 -0.01321112  0.01920198] \n   [ 0.01357949  0.99972379 -0.01918176] \n     [-0.01894327  0.0194373   0.9996316 ]] \n    Translation of alignment: \n    [1.18538132 2.10165699 2.31548455] \n    Scale correction: 1.0045265524039808 \n```\n\n- 绝对轨迹误差（ATE）计算公式 \n\n  为什要计算绝对轨迹误差？ 绝对轨迹误差实际上在计算什么？ \n  对于视觉SLAM系统， 估计轨迹的全局一致性是重要度量，如何评估全局一致性？ 就是通过比较被估计值和真值轨迹之间的绝对距离来得到。 \n  首先先将两条轨迹对齐。 记P1:n代表待估计的轨迹，Q1:n代表真值轨迹， 则时间戳 iii处的绝对估计误差为： \n\n  ![](./media/GetImage14.png)\n\n  可以这么理解公式：对 A=[R∣t]∈SE(3), 有A−1A=[I∣0]； 那么这里的 SPi 是估计的 Qi， 计算 Qi−1SPi可以直观得到两条轨迹的差值。 \n  则针对所有时刻定义平移分量的 均方根误差(RMSE)、和方差（SSE)：\n\n  ![](./media/GetImage15.png)\n\n  补充说明：可以通过文献获取更进一步的信息： A Benchmark for the Evaluation of RGB-D SLAM Systems \n\n### **3.evo_rpe 体验 + 相对轨迹误差计算方法** \n\n- 介绍： evo_rpe 可以用来计算相对轨迹误差（relative pose error） \n\n  ```\n  evo_rpe kitti KITTI_00_gt.txt KITTI_00_SPTAM.txt  -r full -va --plot --plot_mode xyz --save_results results/SPTAM_RPE.zip \n  ```\n\n  - -r full 指定对平移和旋转的误差均进行计算。 \n  - -as 采用SE(3) Umeyama对齐，处理平移和旋转和尺度 \n\n- 终端输出的轨迹对齐的旋转矩阵和平移矩阵， 以及统计信息\n\n  ```\n  -------------------------------------------------------------------------------- \n    Aligning using Umeyama's method... (with scale correction) \n    Rotation of alignment: \n    [[ 0.99972834 -0.01321112  0.01920198] \n     [ 0.01357949  0.99972379 -0.01918176] \n     [-0.01894327  0.0194373   0.9996316 ]] \n    Translation of alignment: \n    [1.18538132 2.10165699 2.31548455] \n    Scale correction: 1.0045265524039808 \n    -------------------------------------------------------------------------------- \n    Found 4540 pairs with delta 1 (frames) among 4541 poses using consecutive pairs. \n    Compared 4540 relative pose pairs, delta = 1 (frames) with consecutive pairs. \n    Calculating RPE for full transformation pose relation... \n    -------------------------------------------------------------------------------- \n    RPE w.r.t. full transformation (unit-less) \n    for delta = 1 (frames) using consecutive pairs \n    (with Sim(3) Umeyama alignment) \n   \n          max      1.136092 \n          mean      0.024773 \n          median      0.020434 \n          min      0.001043 \n          rmse      0.035773 \n          sse      5.809960 \n          std      0.025807 \n    -------------------------------------------------------------------------------- \n  ```\n\n- **相对位姿误差(RPE) 计算公式**\n\n  为什要计算相对轨迹误差？ 相对轨迹误差实际上在计算什么？ \n  相对位姿误差测量了轨迹在一个固定的时间区间 Δ\\DeltaΔ内的局部准确度。 因此，相对位姿误差对应轨迹的漂移。 \n  先定义时间步 iii处的相对位姿误差如下，可知相对位姿误差计算的是相隔固定时间差 Δ 两帧位姿差：\n\n  ![](./media/GetImage16.png)\n\n  根据上式，对于一个有n个相机位姿的序列中，我们获得 m=n−Δm=n-\\Deltam=n−Δ个独立的沿着序列的相对位姿误差。则可以定义平移分量的的所有时刻的均方根误差RMSE: \n\n  ![](./media/GetImage17.png)\n\n  可以这么理解公式：对 A=[R∣t]∈SE(3), 有 A−1A=[I∣0]. \n  上式中的 (Pi−1Pi+Δ)(P_i^{-1}P_{i+\\Delta}) (Pi−1Pi+Δ)是估计的 Qi−1Qi+ΔQ_i^{-1}Q_{i+\\Delta}Qi−1Qi+Δ，计算 (Qi−1Qi+Δ)−1(Pi−1Pi+Δ)(Q_i^{-1}Q_{i+\\Delta})^{-1} (P_i^{-1}P_{i+\\Delta})(Qi−1Qi+Δ)−1(Pi−1Pi+Δ)可以直观的得到两条轨迹的差值； \n  此处计算的是 EiE_iEi的平移分量，旋转误差也可以被估计，但一般平移误差就足够了（因为旋转误差会随着平移误差的上升而增加）。时间参数 Δ\\DeltaΔ对于帧速较快的相同，如30Hz的传感器，可选择 Δ=30\\Delta=30Δ=30以得到每秒的漂移。 \n  补充说明：可以通过文献获取更进一步的信息： A Benchmark for the Evaluation of RGB-D SLAM Systems \n\n### **4.evo_res 体验** \n\n- 介绍： evo_res 可以用来比较多个结果文件， 打印统计信息、绘图、保存结果到表格等。 \n\n  ```\n  evo_res results/*.zip -p --save_table results/table.csv \n  ```\n\n- 如下图示 \n\n  绝对轨迹误差对比：\n\n  ![](./media/GetImage18.png)\n\n## **第五部分： evo 命令参数详解** \n\n### **1.evo_ape 命令详解** \n\n- 用途：计算绝对位姿误差 \n\n- 绝对位姿误差常被用作比较估计轨迹和参考估计并计算整个轨迹误差的统计数据， 适用于测试轨迹的全局一致性。 \n\n- 命令语法： evo_ape 数据格式 参考轨迹 估计轨迹 可选项 \n\n  - 数据格式： euroc, tum, kitti 等 \n\n- 常用命令示例：\n\n  ```\n  evo_ape euroc MH_data3.csv pose_graphloop.txt -r full -va --plot --plot_mode xyz --save_plot ./VINSplot --save_results ./VINS.zip \n  ```\n\n  命令含义： 考虑平移和旋转部分误差的ape， 进行平移和旋转对齐，以详细模式显示，画图并保存计算结果。\n\n- 参数说明： \n\n  - -r : 即 -pose_relation， 此参数可选, 若不添加此参数，则默认为 trans_part。 有如下可选项： \n\n  | **可选项** | **含义**                                                |\n  | ---------- | ------------------------------------------------------- |\n  | full       | 表示同时考虑旋转和平移误差得到的ape,无单位（unit-less） |\n  | trans_part | 考虑平移部分得到的ape，单位为m                          |\n  | rot_part   | 考虑旋转部分得到的ape，无单位（unit-less）              |\n  | angle_deg  | 考虑旋转角得到的ape,单位°（deg）                        |\n  | angle_rad  | 考虑旋转角得到的ape,单位弧度（rad）                     |\n\n  - -v : 表示 verbose mode， 详细模式 \n\n  - -a ：即 -align, 表示采用 SE(3) Umeyama 对齐。 除了 -a 外，其他可选项如下 \n\n  | **命令**                   | **含义**                                       |\n  | -------------------------- | ---------------------------------------------- |\n  | -a/–align                  | 采用SE(3) Umeyama对齐，只处理平移和旋转        |\n  | -as/–align --correct_scale | 采用Sim(3) Umeyama对齐，同时处理平移旋转和尺度 |\n  | -s/–correct_scale          | 仅对齐尺度                                     |\n\n  - -plot ： 表示画图 \n    - --plot_mode : 选择画图模式， 二维图或三维图，默认为 xyz， 可选项有[xy, xz, yz, zx, zy, xyz]. \n    - --save_plot : 后跟保存图像的文件路径， 如 ./VINSplot. 保存文件的类型， 可以通过 evo_config 命令设置， 常见的可以保存为 png, pdf等  \n  - -save_results : 后跟存储结果的压缩文件路径， 如 ./VINS.zip， 是一个压缩文件。 \n\n  - --help: 显示帮助信息， 格式为： evo_ape 格式 --help , 如 evo_ape euroc --help \n\n### **2.evo_rpe 命令详解** \n\n- 用途：计算相对位子误差 \n\n- 相对位姿误差不进行绝对位姿的比较，相对位姿误差比较运动（姿态增量）。相对位姿误差可以给出局部精度，例如slam系统每米的平移或者旋转漂移量。 \n\n- 命令语法： evo_ape 数据格式 参考轨迹 估计轨迹 可选项 \n\n  - 数据格式： euroc, tum, kitti 等 \n\n- 常用命令示例： \n\n  ```\n  evo_rpe euroc MH_data3.csv pose_graphloop.txt -r angle_deg \\ \n    --delta 1 --delta_unit m -va --plot --plot_mode xyz \\ \n    --save_plot ./VINSplot --save_results ./VINS.zip \n  ```\n\n  命令含义： 求每米的旋转角的rpe，以详细模式显示，画图并保存计算结果。\n\n- 参数说明： \n  - -r : 即 -pose_relation， 此参数可选, 若不添加此参数，则默认为 trans_part。具体参数选项内容 同 evo_ape，具体项可参见前一章节说明.\n  - -d/--delta : 表示相对位姿之间的增量，后跟数值，默认为1， 然后通过 -u/--delta_unit 指定单位； \n  - -u/--delta_unit : 表示增量的单位，可选参数为 f, d, r, m 分别表示 frames, deg, rad, meters 。默认为f。 当此参数为 f 时，则 -d/--delta必须为整型， 其余情况可谓浮点型；-d/--delta 和 -u/--delta_unit 联合起来表示衡量局部精度的单位，如 每米、每弧度、每百米等。  \n  - -v --plot --plot_mode xyz --save_results results/VINS.zip --save_plot ： 这些参数同 evo_ape， 具体可参见前一章节说明。 \n\n### **3.evo_traj 命令详解** \n\n- 用途： 轨迹管理工具 \n\n- 可以打开任意多个轨迹，查看统计信息， 还可以将轨迹转换为其他格式 \n\n- 常用命令示例1： \n\n  ```\n  evo_traj euroc MH_data1.csv MH_data3.csv -v --full_check \n  ```\n\n- 参数说明： \n  - -v : 以详细模式显示 \n  - --full_check : 对轨迹进行检查 \n\n- 常用命令示例2：对轨迹进行对齐， 此时需要利用 --ref 指定参考轨迹 \n\n  ```\n  evo_traj bag ROS_example.bag ORB-SLAM S-PTAM --ref groundtruth -s \n  ```\n\n- 参数说明：  \n  \n- -a ：即 -align, 轨迹对齐的选项参数， 如 -a/--align, -s/--correct_scale, --n_to_align 等等，与evo_ape 相同，详情可参见前一章节 evo_ape 中轨迹说明中的参数解释。 \n  \n- 常用命令示例3： 转换格式 \n\n  ```\n  evo_traj euroc data.csv --save_as_tum  \n  ```\n\n- 参数说明： \n  \n- --save_as_tum : 指定目标数据集格式为 tum \n  \n- 数据集格式转换表如下： \n\n| **源数据集** | **ROS Bag**       | **KITTI**       | **TUM**           |\n| ------------ | ----------------- | --------------- | ----------------- |\n|              | --save_as_bag     | --save_as_kitti | --ave_as_tum      |\n| bag          | yes               | yes             | yes               |\n| euroc        | yes               | yes             | yes               |\n| kitti        | no(no timestamps) | yes             | no(no timestamps) |\n| tum          | yes               | yes             | yes               |\n\n### **4.轨迹的对齐和尺度缩放** \n\n单目相机会存在尺度的不确定性，evo_traj 支持使用-s（或 --correct_scale）参数进行Sim(3)上的对齐（旋转、平移与尺度缩放）。 \n例子1： 下图从左到右三幅图中两条曲线的结果分别是：未对齐、SE(3)对齐、尺度缩放 \n\n![](./media/GetImage19.png)\n\n例子2： 不同的对齐命令效果图，分别是未对齐、SE(3)对齐、Sim(3)对齐、尺度缩放 \n\n![](./media/GetImage20.png)\n\n### **5.evo_res 命令详解** \n\n- 用途：结果比较 \n\n- evo_ape/evo_rpe中将结果保存为.zip文件后，可以利用evo_res对不同的结果进行比较 \n\n- 常用命令示例1： evo_ape得到MH3_1.zip和MH3_2.zip两个文件后，对这两个结果进行比较 \n\n  ```\n  evo_res MH3.zip MH3_2.zip -v \n  ```\n\n- 参数说明： \n  \n  - -v : 详细模式展示信息 \n\n### **6.evo_config 命令详解** \n\n- 用途：全局设置和配置文件的操作 \n\n| **命令**                                   | **说明**                 |\n| ------------------------------------------ | ------------------------ |\n| evo_config show                            | 查看设计文件中的参数配置 |\n| evo_config set                             | 进行参数设置             |\n| evo_config generate                        | 导出配置到指定的json文件 |\n| evo_config reset                           | 将参数还原到默认值       |\n| evo_config show\\|set\\|generate\\|reset help | 将参数还原到默认值       |\n\n- evo_config set 命令最为常用，下面是几个常用的参数，其含义以及可选项 \n\n| **参数**                 | **含义**               | **可选项**                    |\n| ------------------------ | ---------------------- | ----------------------------- |\n| plot_export_format       | 输出图像时图像存储格式 | 常用png,pdf等                 |\n| plot_linewidth           | 作图时线的宽度         | matplotlib支持的宽度，默认1.5 |\n| plot_reference_color     | 图像中参考轨迹的颜色   | black,red,green等             |\n| plot_reference_linestyle | 参考轨迹的线型         | matplotlib支持的线型，默认–   |\n| plot_seaborn_style       | 图像背景和网格         | whitegrid,darkgrid,white,dark |\n| plot_split               | 是否分开显示/存储图像  | false/true                    |\n| plot_figsize             | 画图的图像大小         | 默认宽高均为6，可使用其他值   |\n| table_export_format      | 表格数据输出格式       | 常用 csv,excel,latex,json     |\n\n- 命令示例 \n\n  ```\n  # 将画图背景更改成白色网格 \n  evo_config set plot_seaborn_style whitegrid  \n   \n  # 将字体改为衬线型并调为1.2倍大小 \n  evo_config set plot_fontfamily serif plot_fontscale 1.2  \n   \n  # 将画图所使用的线型改为  \n  evo_config set plot_reference_linestyle -  \n   \n  # 将所画图的图像大小调整为10 9（宽 高） \n  evo_config set plot_figsize 10 9  \n   \n  # 将参数还原到默认值 \n  evo_config reset       \n   \n  # 导出配置 \n  evo_config generate --pose_relation angle_deg --delta 1 --delta_unit m --verbose --plot --out rpe_config.json \n   \n  # 导入配置 \n  evo_rpe euroc MH_data3.csv pose_graphloop.txt -c rpe_config.json\n  ```\n\n### **7.evo 其他常用命令** \n\n| **命令**              | **含义**                |\n| --------------------- | ----------------------- |\n| evo pkg   --version   | 查看evo版本             |\n| evo pkg   --info      | 查看evo的简要介绍和描述 |\n| evo pkg   --pyversion | 查看python版本          |\n| evo pkg   --license   | 查看许可证              |\n| evo pkg   --location  | 查看evo安装路径         |\n| evo pkg   --logfile   | 查看日志文件路径        |\n| evo pkg   --open_log  | 打开日志文件            |\n| evo pkg   --clear_log | 清除日志文件            |\n\n## **第六部分： 在程序中调用 evo 函数**\n\n除了在命令行中使用外， 还可以在程序中使用 evo 能力。 \n\n### **例子1：轨迹对齐** \n\n调用 evo 函数实现不同对齐方式的轨迹结果绘图并比较 \n\nalignment_demo.py: \n\n```\n#!/usr/bin/env python \n\n\"\"\" \ntrajectory alignment functions \n\"\"\" \n\nimport copy \nimport logging \nimport sys \n\nimport evo.core.lie_algebra as lie \nfrom evo.core import trajectory \nfrom evo.tools import plot, file_interface, log \n\nimport numpy as np \nimport matplotlib.pyplot as plt \n\nlogger = logging.getLogger(\"evo\") \nlog.configure_logging(verbose=True) \n\n# 读取参考轨迹数据和待评估轨迹数据 \ntraj_ref = file_interface.read_kitti_poses_file(\"./data/KITTI_00_gt.txt\") \ntraj_est = file_interface.read_kitti_poses_file( \"./data/KITTI_00_ORB.txt\") \n\n# add artificial Sim(3) transformation \ntraj_est.transform(lie.se3(np.eye(3), np.array([0, 0, 0]))) \n\n# 尺寸缩放 \ntraj_est.scale(0.5) \n\nlogger.info(\"\\nUmeyama alignment without scaling\") \ntraj_est_aligned = copy.deepcopy(traj_est) \n\n# 对齐轨迹（但不做尺寸缩放） \ntraj_est_aligned.align(traj_ref) \n\nlogger.info(\"\\nUmeyama alignment with scaling\") \ntraj_est_aligned_scaled = copy.deepcopy(traj_est) \n# 对齐轨迹（同时尺寸缩放） \ntraj_est_aligned_scaled.align(traj_ref, correct_scale=True) \n\nlogger.info(\"\\nUmeyama alignment with scaling only\") \ntraj_est_aligned_only_scaled = copy.deepcopy(traj_est) \n# 对齐轨迹（仅仅尺寸缩放） \ntraj_est_aligned_only_scaled.align(traj_ref, correct_only_scale=True) \n\n# 以下部分为绘图部分 \nfig = plt.figure(figsize=(8, 8)) \nplot_mode = plot.PlotMode.xz \n\nax = plot.prepare_axis(fig, plot_mode, subplot_arg=221) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray') \nplot.traj(ax, plot_mode, traj_est, '-', 'blue') \nfig.axes.append(ax) \nplt.title('not aligned') \n\nax = plot.prepare_axis(fig, plot_mode, subplot_arg=222) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray') \nplot.traj(ax, plot_mode, traj_est_aligned, '-', 'blue') \nfig.axes.append(ax) \nplt.title('$\\mathrm{SE}(3)$ alignment') \n\nax = plot.prepare_axis(fig, plot_mode, subplot_arg=223) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray') \nplot.traj(ax, plot_mode, traj_est_aligned_scaled, '-', 'blue') \nfig.axes.append(ax) \nplt.title('$\\mathrm{Sim}(3)$ alignment') \n\nax = plot.prepare_axis(fig, plot_mode, subplot_arg=224) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray') \nplot.traj(ax, plot_mode, traj_est_aligned_only_scaled, '-', 'blue') \nfig.axes.append(ax) \nplt.title('only scaled') \n\nfig.tight_layout() \nplt.show() \n```\n\n执行后如图所示：\n\n![](./media/GetImage21.png)\n\n### **例子2：计算APE** \n\n调用 evo 函数计算APE和统计值MEAN \n\ncalc_ape.py: \n\n```\n#!/usr/bin/env python \n\n\"\"\" \ncaculate ape of two trajectories \n\"\"\" \n\nprint(\"loading required evo modules\") \nfrom evo.core import trajectory, sync, metrics \nfrom evo.tools import file_interface \n\n# 读取参考轨迹数据和待评估轨迹数据 \nprint(\"loading trajectories\") \ntraj_ref = file_interface.read_tum_trajectory_file( \"./data/fr2_desk_groundtruth.txt\") \ntraj_est = file_interface.read_tum_trajectory_file( \"./data/fr2_desk_ORB.txt\") \n\n# 调用时间同步算法进行同步，主要是根据 timestamps进行同步 \n# 具体实现参考 evo/core/syn.py 源码 \nprint(\"registering and aligning trajectories\") \ntraj_ref, traj_est = sync.associate_trajectories(traj_ref, traj_est) \n\n# 对齐轨迹（不带尺度缩放） \ntraj_est.align(traj_ref, correct_scale=False) \n\n# 计算APE \nprint(\"calculating APE\") \ndata = (traj_ref, traj_est)     \n\n# 仅针对平移部分计算 \nape_metric = metrics.APE(metrics.PoseRelation.translation_part) \n\n# 对SE(3)的位姿点集合计算APE \n# 详细实现参见 evo/core/metrics.py 源码 \nape_metric.process_data(data) \n\n# 得到rmse，sse，mean，median,max,min,std等统计值 \nape_statistics = ape_metric.get_all_statistics() \nprint(\"mean:\", ape_statistics[\"mean\"]) \n\n# 以下为绘图部分 \nprint(\"loading plot modules\") \nfrom evo.tools import plot \nimport matplotlib.pyplot as plt  \n\nprint(\"plotting\") \nplot_collection = plot.PlotCollection(\"Example\") \n# metric values \nfig_1 = plt.figure(figsize=(8, 8)) \nplot.error_array(fig_1.gca(), ape_metric.error, statistics=ape_statistics, \n                                 name=\"APE\", title=str(ape_metric)) \nplot_collection.add_figure(\"raw\", fig_1) \n\n \n# trajectory colormapped with error \nfig_2 = plt.figure(figsize=(8, 8)) \nplot_mode = plot.PlotMode.xy \nax = plot.prepare_axis(fig_2, plot_mode) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray', 'reference') \nplot.traj_colormap(ax, traj_est, ape_metric.error, plot_mode, \n                                   min_map=ape_statistics[\"min\"], \n                                   max_map=ape_statistics[\"max\"], \n                                   title=\"APE mapped onto trajectory\") \nplot_collection.add_figure(\"traj (error)\", fig_2) \n\n# trajectory colormapped with speed \nfig_3 = plt.figure(figsize=(8, 8)) \nplot_mode = plot.PlotMode.xy \nax = plot.prepare_axis(fig_3, plot_mode) \nspeeds = [ \n        trajectory.calc_speed(traj_est.positions_xyz[i], \n                                traj_est.positions_xyz[i + 1], \n                                traj_est.timestamps[i], traj_est.timestamps[i + 1]) \n        for i in range(len(traj_est.positions_xyz) - 1) \n] \nspeeds.append(0) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray', 'reference') \nplot.traj_colormap(ax, traj_est, speeds, plot_mode, min_map=min(speeds), \n                        max_map=max(speeds), title=\"speed mapped onto trajectory\") \nfig_3.axes.append(ax) \nplot_collection.add_figure(\"traj (speed)\", fig_3) \n \nplot_collection.show()  \n```\n\n终端输出信息： \n\n```\nloading required evo modules \nloading trajectories \nregistering and aligning trajectories \ncalculating APE \nmean: 0.0074917768702161495 \n```\n\n计算并打印了MEAN信息 \n\n## **附录：数据集以及 evo 使用例子** \n\n### **TUM数据集** \n\n- 数据格式为 ： timestamp tx ty tz qx qy qz qw 每行8个元素， 结尾没有空格， 时间戳以秒为单位， 精确到小数点后9位 \n\n  ![](./media/GetImage22.png)\n\n- evo_ape 计算轨迹绝对误差的例子\n\n  ```\n    mkdir results \n  \n    # 计算轨迹绝对误差 evo_ape \n    evo_ape tum fr2_desk_groundtruth.txt  fr2_desk_ORB.txt -va --plot --plot_mode xz --save_results results/ORB_fr2_desk.zi \n  \n   # 分析多条曲线 evo_res \n   evo_res results/*.zip -p --save_table results/table.csv \n  \n   # 绘制多条轨迹 evo_traj\n   evo_traj tum freiburg1_xyz-ORB_kf_mono.txt freiburg1_xyz-rgbdslam.txt  --ref=freiburg1_xyz-groundtruth.txt -va --plot --plot_mode xy \n  ```\n\n### **KITTI数据集** \n\n- KITTI数据集格式： r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz 存储变换矩阵的前三行,每行12元素，空格隔开, 无时间戳 \n\n  ![](./media/GetImage23.png)\n\n- evo_ape 计算轨迹绝对误差, evo_traj 绘制多条曲线轨迹 \n\n  ```\n   mkdir results \n  \n   # 计算轨迹绝对误差 evo_ape \n   evo_ape kitti KITTI_00_gt.txt KITTI_00_ORB.txt -va --plot --plot_mode xz --save_results results/KITTI_00_ORB.zip \n  \n   # 分析多条曲线 evo_res \n   evo_res results/*.zip -p --save_table results/table.csv \n  \n   # 绘制多条轨迹 \n   cd test/data \n   evo_traj kitti KITTI_00_ORB.txt KITTI_00_SPTAM.txt --ref=KITTI_00_gt.txt -p --plot_mode=xz  \n  ```\n\n### **EUROC数据集** \n\n- EUROC数据格式为：timestamp,px,py,pz,qw,qx,qy,qz,vx,vy,vz,bwx,bwy,bwz,bax,bay,baz 每行17个元素，逗号隔开，时间以纳秒为单位, 无小数\n\n  ![](./media/GetImage24.png)\n\n- evo_ape 计算轨迹绝对误差 \n\n  ```\n  mkdir results \n  \n   # 计算轨迹绝对误差 evo_ape \n   evo_ape euroc V102_groundtruth.csv V102.txt -va --plot --plot_mode xy --save_results results/EUROC.zip \n  ```\n\n## **附录：相关文献** \n\n- Z. Zhang, D. Scaramuzza. A Tutorial on Quantitative Trajectory Evaluation for Visual(-Inertial) Odometry. *IEEE/RSJ International Conference on Intelligent Robots and Systems*, 7244-7251, 2018. 基本概念介绍教程，包括尺度、对齐等等 \n- J. Sturm, N. Engelhard, F. Endres, W. Burgard, D. Cremers. A Benchmark for the Evaluation of RGB-D SLAM Systems. *IEEE International Conference on Robotics and Automation*, 573-580, 2012. 讲解绝对轨迹误差和相对轨迹误差的概念，以及计算 \n- Least-Squares Estimation of Transformation Parameters Between Two Point Patterns, 讲解Umeyama轨迹对齐算法原理和最小二乘过程 \n\n### [参考教程](https://juejin.cn/post/7063041669725159461)\n\n","source":"_posts/slam_config/轨迹评估介绍与evo工具使用.md","raw":"---\ntitle: 轨迹评估介绍与evo工具使用 \ndate:\ntags: \n- SLAM\n- evo\ncategories:\n- slam_config\ndescription:\ntop_img: false\n\n---\n\n# 轨迹评估介绍与evo工具使用 \n\n## **介绍** \n\n本文介绍了轨迹评估的基本概念，包括轨迹对齐、尺度变换、绝对轨迹误差、相对轨迹误差以及计算方法、相关文献，以及evo轨迹评估工具的安装、使用举例、命令参数详解。 \n\n \n\n## **第一部分：evo 介绍** \n\n- evo是一款用于视觉里程计和SLAM问题的轨迹评估工具. 核心功能是能够绘制相机的轨迹, 或评估轨迹与真值之间的误差. \n- 它支持多种数据集的轨迹格式(TUM、KITTI、EuRoC MAV、ROS的bag)， 同时支持这些数据格式之间的相互转换。 \n- 灵活的输出/绘图和导出选项(例如LaTeX绘图或Excel表格) \n- 强大的可配置的CLI, 可以涵盖多种场景使用 \n- 用于自定义扩展的模块化 \n- github：[github.com/MichaelGrup…](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FMichaelGrupp%2Fevo.git) \n- wiki： [github.com/MichaelGrup…](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FMichaelGrupp%2Fevo%2Fwiki) \n\n \n\n## **第二部分：安装 evo 工具** \n\n#### **Step1： python 3.8虚拟环境搭建** \n\n`目的`：构筑一个纯净python 3.8环境（github上告知最新的evo版本支持Python 3.8+，若要支持Python2.7需使用 1.12.0及以下版本）。ubuntu18.04自带python 3.6和2.7，如果不使用python虚拟环境，还可以使用 update-alternatives 命令来切换OS所使用的Python版本，以下以使用Python虚拟环境为例（使用conda方式）： \n\n```\n# 下载 anaconda 或 miniconda， 以下以 miniconda 为例 \nwget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh \n或 \nwget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda2-py27_4.8.3-Linux-x86_64.sh \n \n# 安装 miniconda \nbash iniconda2-py27_4.8.3-Linux-x86_64.sh \nsource ~/.bashrc \n \n# 创建 python3.8 虚拟环境 \nconda create -n slam_env python=3.8 \n \n# 进入虚拟环境 \nconda activate slam_env \n \n# 查看python虚拟环境和其pip工具 （此时提示符已经切换为 slam_env ） \n(slam_env) hadoop@ubuntu:~$ pip --version \npip 21.2.4 from /home/hadoop/miniconda2/envs/slam_env/lib/python3.8/site-packages/pip (python 3.8) \n \n# 查看虚拟环境已安装的python模块 \n(slam_env) hadoop@ubuntu:~$ conda list \n# packages inenvironment at /home/hadoop/miniconda2/envs/slam_env:# \n# Name                    Version                   Build  Channel \n_libgcc_mutex             0.1                        main \n_openmp_mutex             4.5                       1_gnu \nca-certificates           2021.10.26           h06a4308_2 \ncertifi                   2021.10.8        py38h06a4308_2 \nld_impl_linux-64          2.35.1               h7274673_9 \nlibffi                    3.3                  he6710b0_2 \n(下略） \n \n# 升级 pip 到最新版本 \n(slam_env) hadoop@ubuntu:~$ pip install -U pip  \n \n# pip 使用国内 pypi 镜像站（清华） \npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple \n```\n\n至此，完成python虚拟环境搭建完毕，使用时使用 conda activate slam_env 即可进入python虚拟环境提示符。 \n\n\n\n#### **Step2： 使用pip安装 evo 到虚拟环境** \n\n```\n# 进入虚拟环境 \n(base) hadoop@ubuntu:~$ conda activate slam_env \n \n# 安装evo工具 \n(slam_env) hadoop@ubuntu:~$ pip install evo --upgrade --no-binary evo --user \n \n# 查看evo工具 \nls ~/.local/bin \n \n# 编辑 ~/.bashrc， 把 ~/.local/bin 目录加入到 PATH 环境变量 \necho 'export PATH=~/.local/bin:$PATH' >> ~/.bashrc \nsource ~/.bashrc \n \n# 确认evo工具可用 \nevo_ape --help \n \n# 安装tkinter，防止运行 evo 时报错 tkinter 找不到 \nsudo apt install  python3-tk \n```\n\n**备注1: 安装过程会自动安装所依赖的科学计算库和绘图库如numpy、scipy、pandas、matplotlib、pillow等.** \n\n\n\n#### **Step3：工具位置介绍** \n\n- ##### **安装好的 evo 的命令行工具在目录 ~/.local/bin 下** \n\n```\n$ ls ~/.local/bin \n    activate-global-python-argcomplete  evo_traj    pygmentize \n    evo                                 f2py        python-argcomplete-check-easy-install-script \n    evo_ape                             f2py3       python-argcomplete-tcsh \n    evo_config                          f2py3.8     register-python-argcomplete \n    evo_fig                             fonttools   rosbags-convert \n    evo_ipython                         natsort     ttx \n    evo_res                             pyftmerge \n    evo_rpe                             pyftsubset \n```\n\n- **轨迹误差评估方面**：\n  - evo_ape : 计算绝对位姿误差(absolute pose error)，用于整体评估整条轨迹的`全局一致性`； \n  - evo_rpe : 计算相对位姿误差(relative pose error)，用于评价轨迹局部的`准确性`。 \n- **绘图方面**：\n  - evo_traj : 分析/绘图/导出一条或多条轨迹 \n- **评估结果比较方面**：\n  - evo_res : 比较一个或多个结果文件, 结果文件来自 evo_ape 或 evp_rpe的输出 \n- **其他**： \n  - evo_config : 对evo工具的全局设置\n- **需要注意, EUROC数据集、TUM数据集、KITTI数据集使用四元数的顺序是不一样的， 因此在使用 evo 命令时， 需要增加一个命令选项参数进行区分。** \n\n\n\n## **第三部分： 基本概念简介** \n\n在使用evo工具之前， 先介绍一些evo工具使用过程中会遇到的轨迹评估方面的基本概念，以便于更好的理解工具的输出信息和图表。 \n\n基本介绍信息如下所示。 \n\n### **1. 轨迹对齐** \n\n在定量轨迹评估过程时，如图所示，首先估计的轨迹（蓝色）要和真值（黑色）对齐，然后再利用特性的误差度量计算对气候的轨迹估计误差。 \n\n![](./media/GetImage6.png)\n\n下图左图是对齐前，右图是对齐后； 其中灰色线为对应的状态 \n\n![](/./media/GetImage7.png)\n\n### **2. 尺度变换** \n\n**尺度歧义性**？ \n\n根据单目相机相机测量模型可知其尺度歧义性，如图所示，相机将3D点（红色×）投影到成像平面上的2D点（黑色○）。对于单目相机，相同方向但不同距离的3D点（灰色x）投影到相同的2D点，从而导致尺度歧义性。 \n\n**尺度变换**： 相当于添加一个恒定的尺度变换 TsT_sTs到第二个相机，消除该歧义性；\n\n ![](./media/GetImage8.png)\n\n### **3. 绝对轨迹误差和相对轨迹误差** \n\n- 绝对轨迹误差计算的每一个点对（待评估轨迹的点与真值轨迹的点）的绝对值误差。 \n- 相对轨迹误差计算的是，针对两条轨迹，分别计算第 k时刻和 k+Δ时刻的误差，然后这两个误差间再计算绝对值误差。\n\n![](./media/GetImage9.png)\n\n### **4. 补充** \n\n可以在相关文献获取更加详细的信息: A Tutorial on Quantitative Trajectory Evaluation for Visual(-Inertial) Odometry。 \n\n \n\n## **第四部分：evo初体验**\n\n### **1.evo_traj 体验** \n\n- 介绍：evo_traj 可以分析、绘制、导出一个或多个轨迹；可以打开任意多个轨迹，查看统计信息， 还可以将轨迹转换为其他格式； \n\n- 体验\n\n  ```\n  # evo_traj 执行，以KITTI_00_gt为参考，绘制 KITTI_00_ORB  KITTI_00_SPTAMcd evo/test/data \n  evo_traj kitti KITTI_00_ORB.txt KITTI_00_SPTAM.txt --ref=KITTI_00_gt.txt -p --plot_mode=xz \n  ```\n\n- 出现如下的图示 \n\n  ![](./media/GetImage3.png)\n\n  注：虚线为参考值；由于参数设置了xz，因此只显示轨迹在xz平面上投影；坐标表示活动轨迹范围； \n\n  ![](./media/GetImage4.png)\n\n  注： 以起始点作为基准点，针对每个pose点（横），按x/y/z三个方向的分量，描述其距离原点距离（纵）\n\n- 本文后面章节会详细讲解 evo_traj 的每一个命令参数。\n\n### **2.evo_ape 体验 + 绝对轨迹误差计算方法** \n\n- 介绍：evo_ape 可以评估轨迹绝对位姿误差(absolute pose error) \n- 绝对位姿误差常被用作比较估计轨迹和参考估计并计算整个轨迹误差的统计数据， 适用于测试轨迹的全局一致性。 \n\n```\n# 创建存放结果的目录 \nmkdir results \nevo_ape kitti KITTI_00_gt.txt KITTI_00_SPTAM.txt -vas  --plot --plot_mode xz --save_results results/SPTAM_APE.zip \n```\n\n- 出现如下图示效果\n\n  - 绝对轨迹误差信息如下图：\n\n    ![](./media/GetImage10.png)\n\n    注：针对所有位姿点描述绝对误差大小，并与均方根误差、中位值、均值、标准差等直观比较；std覆盖区域为 [mean−std, mean+std], 反应组内个体间离散程度； \n\n    注：默认情况下计算的是ATE(absolute trajectory error)绝对轨迹误差。终端输出 Calculating APE for translation part pose relation... 表示计算的是平移误差；可以使用 -r full 同时计算平移+旋转误差； \n\n  - 轨迹直观误差信息如下图\n\n    ![](./media/GetImage11.png)\n\n    注： 针对整个轨迹，使用颜色显示偏差的大小，按蓝-绿-红渐变色偏差依次变大；放大后可更清楚的查看局部轨迹差； \n    本文后面章节会详细讲解 evo_ape 的每一个命令参数。 \n\n- Umeyama算法\n\n  Umeyama算法用于做点云匹配对齐，因为点集合之间的对应关系已知，它可以计算出两组点云数据间的旋转+平移变换矩阵和相似变换矩阵； \n  原理就是通过点对之间距离平方和的最小二乘误差计算出T，和ICP的损失函数是类似的。 \n\n  ![](./media/GetImage12.png)\n\n  最后计算得到:\n\n  ![](./media/GetImage13.png)\n\n  此外， Eigen 库也封装了函数 Eigen::umeyama（），可直接传入两个点云集合调用求解. \n\n  SE(3)与Sim(3)，对于双目SLAM和RGB-D SLAM，尺度统一，因此需要通过最小二乘计算估计位姿到真实位姿的转换矩阵 S∈SE(3); \n\n  对于单目相机，尺度不确定性，因此需要计算从估计位姿到真实位姿的相似变换矩阵 S∈Sim(3)。 默认为SE(3)，加 -s 参数使用 Sim(3); \n\n  补充说明：可以通过Umeyama的文献获取更进一步的信息： Least-Squares Estimation of Transformation Parameters Between Two Point Patterns \n注：终端输出表示的是用 Umeyama 计算得到的相似矩阵选装、平移和尺度变换的结果。\n  \n```\n   Rotation of alignment: \n    [[ 0.99972834 -0.01321112  0.01920198] \n   [ 0.01357949  0.99972379 -0.01918176] \n     [-0.01894327  0.0194373   0.9996316 ]] \n    Translation of alignment: \n    [1.18538132 2.10165699 2.31548455] \n    Scale correction: 1.0045265524039808 \n```\n\n- 绝对轨迹误差（ATE）计算公式 \n\n  为什要计算绝对轨迹误差？ 绝对轨迹误差实际上在计算什么？ \n  对于视觉SLAM系统， 估计轨迹的全局一致性是重要度量，如何评估全局一致性？ 就是通过比较被估计值和真值轨迹之间的绝对距离来得到。 \n  首先先将两条轨迹对齐。 记P1:n代表待估计的轨迹，Q1:n代表真值轨迹， 则时间戳 iii处的绝对估计误差为： \n\n  ![](./media/GetImage14.png)\n\n  可以这么理解公式：对 A=[R∣t]∈SE(3), 有A−1A=[I∣0]； 那么这里的 SPi 是估计的 Qi， 计算 Qi−1SPi可以直观得到两条轨迹的差值。 \n  则针对所有时刻定义平移分量的 均方根误差(RMSE)、和方差（SSE)：\n\n  ![](./media/GetImage15.png)\n\n  补充说明：可以通过文献获取更进一步的信息： A Benchmark for the Evaluation of RGB-D SLAM Systems \n\n### **3.evo_rpe 体验 + 相对轨迹误差计算方法** \n\n- 介绍： evo_rpe 可以用来计算相对轨迹误差（relative pose error） \n\n  ```\n  evo_rpe kitti KITTI_00_gt.txt KITTI_00_SPTAM.txt  -r full -va --plot --plot_mode xyz --save_results results/SPTAM_RPE.zip \n  ```\n\n  - -r full 指定对平移和旋转的误差均进行计算。 \n  - -as 采用SE(3) Umeyama对齐，处理平移和旋转和尺度 \n\n- 终端输出的轨迹对齐的旋转矩阵和平移矩阵， 以及统计信息\n\n  ```\n  -------------------------------------------------------------------------------- \n    Aligning using Umeyama's method... (with scale correction) \n    Rotation of alignment: \n    [[ 0.99972834 -0.01321112  0.01920198] \n     [ 0.01357949  0.99972379 -0.01918176] \n     [-0.01894327  0.0194373   0.9996316 ]] \n    Translation of alignment: \n    [1.18538132 2.10165699 2.31548455] \n    Scale correction: 1.0045265524039808 \n    -------------------------------------------------------------------------------- \n    Found 4540 pairs with delta 1 (frames) among 4541 poses using consecutive pairs. \n    Compared 4540 relative pose pairs, delta = 1 (frames) with consecutive pairs. \n    Calculating RPE for full transformation pose relation... \n    -------------------------------------------------------------------------------- \n    RPE w.r.t. full transformation (unit-less) \n    for delta = 1 (frames) using consecutive pairs \n    (with Sim(3) Umeyama alignment) \n   \n          max      1.136092 \n          mean      0.024773 \n          median      0.020434 \n          min      0.001043 \n          rmse      0.035773 \n          sse      5.809960 \n          std      0.025807 \n    -------------------------------------------------------------------------------- \n  ```\n\n- **相对位姿误差(RPE) 计算公式**\n\n  为什要计算相对轨迹误差？ 相对轨迹误差实际上在计算什么？ \n  相对位姿误差测量了轨迹在一个固定的时间区间 Δ\\DeltaΔ内的局部准确度。 因此，相对位姿误差对应轨迹的漂移。 \n  先定义时间步 iii处的相对位姿误差如下，可知相对位姿误差计算的是相隔固定时间差 Δ 两帧位姿差：\n\n  ![](./media/GetImage16.png)\n\n  根据上式，对于一个有n个相机位姿的序列中，我们获得 m=n−Δm=n-\\Deltam=n−Δ个独立的沿着序列的相对位姿误差。则可以定义平移分量的的所有时刻的均方根误差RMSE: \n\n  ![](./media/GetImage17.png)\n\n  可以这么理解公式：对 A=[R∣t]∈SE(3), 有 A−1A=[I∣0]. \n  上式中的 (Pi−1Pi+Δ)(P_i^{-1}P_{i+\\Delta}) (Pi−1Pi+Δ)是估计的 Qi−1Qi+ΔQ_i^{-1}Q_{i+\\Delta}Qi−1Qi+Δ，计算 (Qi−1Qi+Δ)−1(Pi−1Pi+Δ)(Q_i^{-1}Q_{i+\\Delta})^{-1} (P_i^{-1}P_{i+\\Delta})(Qi−1Qi+Δ)−1(Pi−1Pi+Δ)可以直观的得到两条轨迹的差值； \n  此处计算的是 EiE_iEi的平移分量，旋转误差也可以被估计，但一般平移误差就足够了（因为旋转误差会随着平移误差的上升而增加）。时间参数 Δ\\DeltaΔ对于帧速较快的相同，如30Hz的传感器，可选择 Δ=30\\Delta=30Δ=30以得到每秒的漂移。 \n  补充说明：可以通过文献获取更进一步的信息： A Benchmark for the Evaluation of RGB-D SLAM Systems \n\n### **4.evo_res 体验** \n\n- 介绍： evo_res 可以用来比较多个结果文件， 打印统计信息、绘图、保存结果到表格等。 \n\n  ```\n  evo_res results/*.zip -p --save_table results/table.csv \n  ```\n\n- 如下图示 \n\n  绝对轨迹误差对比：\n\n  ![](./media/GetImage18.png)\n\n## **第五部分： evo 命令参数详解** \n\n### **1.evo_ape 命令详解** \n\n- 用途：计算绝对位姿误差 \n\n- 绝对位姿误差常被用作比较估计轨迹和参考估计并计算整个轨迹误差的统计数据， 适用于测试轨迹的全局一致性。 \n\n- 命令语法： evo_ape 数据格式 参考轨迹 估计轨迹 可选项 \n\n  - 数据格式： euroc, tum, kitti 等 \n\n- 常用命令示例：\n\n  ```\n  evo_ape euroc MH_data3.csv pose_graphloop.txt -r full -va --plot --plot_mode xyz --save_plot ./VINSplot --save_results ./VINS.zip \n  ```\n\n  命令含义： 考虑平移和旋转部分误差的ape， 进行平移和旋转对齐，以详细模式显示，画图并保存计算结果。\n\n- 参数说明： \n\n  - -r : 即 -pose_relation， 此参数可选, 若不添加此参数，则默认为 trans_part。 有如下可选项： \n\n  | **可选项** | **含义**                                                |\n  | ---------- | ------------------------------------------------------- |\n  | full       | 表示同时考虑旋转和平移误差得到的ape,无单位（unit-less） |\n  | trans_part | 考虑平移部分得到的ape，单位为m                          |\n  | rot_part   | 考虑旋转部分得到的ape，无单位（unit-less）              |\n  | angle_deg  | 考虑旋转角得到的ape,单位°（deg）                        |\n  | angle_rad  | 考虑旋转角得到的ape,单位弧度（rad）                     |\n\n  - -v : 表示 verbose mode， 详细模式 \n\n  - -a ：即 -align, 表示采用 SE(3) Umeyama 对齐。 除了 -a 外，其他可选项如下 \n\n  | **命令**                   | **含义**                                       |\n  | -------------------------- | ---------------------------------------------- |\n  | -a/–align                  | 采用SE(3) Umeyama对齐，只处理平移和旋转        |\n  | -as/–align --correct_scale | 采用Sim(3) Umeyama对齐，同时处理平移旋转和尺度 |\n  | -s/–correct_scale          | 仅对齐尺度                                     |\n\n  - -plot ： 表示画图 \n    - --plot_mode : 选择画图模式， 二维图或三维图，默认为 xyz， 可选项有[xy, xz, yz, zx, zy, xyz]. \n    - --save_plot : 后跟保存图像的文件路径， 如 ./VINSplot. 保存文件的类型， 可以通过 evo_config 命令设置， 常见的可以保存为 png, pdf等  \n  - -save_results : 后跟存储结果的压缩文件路径， 如 ./VINS.zip， 是一个压缩文件。 \n\n  - --help: 显示帮助信息， 格式为： evo_ape 格式 --help , 如 evo_ape euroc --help \n\n### **2.evo_rpe 命令详解** \n\n- 用途：计算相对位子误差 \n\n- 相对位姿误差不进行绝对位姿的比较，相对位姿误差比较运动（姿态增量）。相对位姿误差可以给出局部精度，例如slam系统每米的平移或者旋转漂移量。 \n\n- 命令语法： evo_ape 数据格式 参考轨迹 估计轨迹 可选项 \n\n  - 数据格式： euroc, tum, kitti 等 \n\n- 常用命令示例： \n\n  ```\n  evo_rpe euroc MH_data3.csv pose_graphloop.txt -r angle_deg \\ \n    --delta 1 --delta_unit m -va --plot --plot_mode xyz \\ \n    --save_plot ./VINSplot --save_results ./VINS.zip \n  ```\n\n  命令含义： 求每米的旋转角的rpe，以详细模式显示，画图并保存计算结果。\n\n- 参数说明： \n  - -r : 即 -pose_relation， 此参数可选, 若不添加此参数，则默认为 trans_part。具体参数选项内容 同 evo_ape，具体项可参见前一章节说明.\n  - -d/--delta : 表示相对位姿之间的增量，后跟数值，默认为1， 然后通过 -u/--delta_unit 指定单位； \n  - -u/--delta_unit : 表示增量的单位，可选参数为 f, d, r, m 分别表示 frames, deg, rad, meters 。默认为f。 当此参数为 f 时，则 -d/--delta必须为整型， 其余情况可谓浮点型；-d/--delta 和 -u/--delta_unit 联合起来表示衡量局部精度的单位，如 每米、每弧度、每百米等。  \n  - -v --plot --plot_mode xyz --save_results results/VINS.zip --save_plot ： 这些参数同 evo_ape， 具体可参见前一章节说明。 \n\n### **3.evo_traj 命令详解** \n\n- 用途： 轨迹管理工具 \n\n- 可以打开任意多个轨迹，查看统计信息， 还可以将轨迹转换为其他格式 \n\n- 常用命令示例1： \n\n  ```\n  evo_traj euroc MH_data1.csv MH_data3.csv -v --full_check \n  ```\n\n- 参数说明： \n  - -v : 以详细模式显示 \n  - --full_check : 对轨迹进行检查 \n\n- 常用命令示例2：对轨迹进行对齐， 此时需要利用 --ref 指定参考轨迹 \n\n  ```\n  evo_traj bag ROS_example.bag ORB-SLAM S-PTAM --ref groundtruth -s \n  ```\n\n- 参数说明：  \n  \n- -a ：即 -align, 轨迹对齐的选项参数， 如 -a/--align, -s/--correct_scale, --n_to_align 等等，与evo_ape 相同，详情可参见前一章节 evo_ape 中轨迹说明中的参数解释。 \n  \n- 常用命令示例3： 转换格式 \n\n  ```\n  evo_traj euroc data.csv --save_as_tum  \n  ```\n\n- 参数说明： \n  \n- --save_as_tum : 指定目标数据集格式为 tum \n  \n- 数据集格式转换表如下： \n\n| **源数据集** | **ROS Bag**       | **KITTI**       | **TUM**           |\n| ------------ | ----------------- | --------------- | ----------------- |\n|              | --save_as_bag     | --save_as_kitti | --ave_as_tum      |\n| bag          | yes               | yes             | yes               |\n| euroc        | yes               | yes             | yes               |\n| kitti        | no(no timestamps) | yes             | no(no timestamps) |\n| tum          | yes               | yes             | yes               |\n\n### **4.轨迹的对齐和尺度缩放** \n\n单目相机会存在尺度的不确定性，evo_traj 支持使用-s（或 --correct_scale）参数进行Sim(3)上的对齐（旋转、平移与尺度缩放）。 \n例子1： 下图从左到右三幅图中两条曲线的结果分别是：未对齐、SE(3)对齐、尺度缩放 \n\n![](./media/GetImage19.png)\n\n例子2： 不同的对齐命令效果图，分别是未对齐、SE(3)对齐、Sim(3)对齐、尺度缩放 \n\n![](./media/GetImage20.png)\n\n### **5.evo_res 命令详解** \n\n- 用途：结果比较 \n\n- evo_ape/evo_rpe中将结果保存为.zip文件后，可以利用evo_res对不同的结果进行比较 \n\n- 常用命令示例1： evo_ape得到MH3_1.zip和MH3_2.zip两个文件后，对这两个结果进行比较 \n\n  ```\n  evo_res MH3.zip MH3_2.zip -v \n  ```\n\n- 参数说明： \n  \n  - -v : 详细模式展示信息 \n\n### **6.evo_config 命令详解** \n\n- 用途：全局设置和配置文件的操作 \n\n| **命令**                                   | **说明**                 |\n| ------------------------------------------ | ------------------------ |\n| evo_config show                            | 查看设计文件中的参数配置 |\n| evo_config set                             | 进行参数设置             |\n| evo_config generate                        | 导出配置到指定的json文件 |\n| evo_config reset                           | 将参数还原到默认值       |\n| evo_config show\\|set\\|generate\\|reset help | 将参数还原到默认值       |\n\n- evo_config set 命令最为常用，下面是几个常用的参数，其含义以及可选项 \n\n| **参数**                 | **含义**               | **可选项**                    |\n| ------------------------ | ---------------------- | ----------------------------- |\n| plot_export_format       | 输出图像时图像存储格式 | 常用png,pdf等                 |\n| plot_linewidth           | 作图时线的宽度         | matplotlib支持的宽度，默认1.5 |\n| plot_reference_color     | 图像中参考轨迹的颜色   | black,red,green等             |\n| plot_reference_linestyle | 参考轨迹的线型         | matplotlib支持的线型，默认–   |\n| plot_seaborn_style       | 图像背景和网格         | whitegrid,darkgrid,white,dark |\n| plot_split               | 是否分开显示/存储图像  | false/true                    |\n| plot_figsize             | 画图的图像大小         | 默认宽高均为6，可使用其他值   |\n| table_export_format      | 表格数据输出格式       | 常用 csv,excel,latex,json     |\n\n- 命令示例 \n\n  ```\n  # 将画图背景更改成白色网格 \n  evo_config set plot_seaborn_style whitegrid  \n   \n  # 将字体改为衬线型并调为1.2倍大小 \n  evo_config set plot_fontfamily serif plot_fontscale 1.2  \n   \n  # 将画图所使用的线型改为  \n  evo_config set plot_reference_linestyle -  \n   \n  # 将所画图的图像大小调整为10 9（宽 高） \n  evo_config set plot_figsize 10 9  \n   \n  # 将参数还原到默认值 \n  evo_config reset       \n   \n  # 导出配置 \n  evo_config generate --pose_relation angle_deg --delta 1 --delta_unit m --verbose --plot --out rpe_config.json \n   \n  # 导入配置 \n  evo_rpe euroc MH_data3.csv pose_graphloop.txt -c rpe_config.json\n  ```\n\n### **7.evo 其他常用命令** \n\n| **命令**              | **含义**                |\n| --------------------- | ----------------------- |\n| evo pkg   --version   | 查看evo版本             |\n| evo pkg   --info      | 查看evo的简要介绍和描述 |\n| evo pkg   --pyversion | 查看python版本          |\n| evo pkg   --license   | 查看许可证              |\n| evo pkg   --location  | 查看evo安装路径         |\n| evo pkg   --logfile   | 查看日志文件路径        |\n| evo pkg   --open_log  | 打开日志文件            |\n| evo pkg   --clear_log | 清除日志文件            |\n\n## **第六部分： 在程序中调用 evo 函数**\n\n除了在命令行中使用外， 还可以在程序中使用 evo 能力。 \n\n### **例子1：轨迹对齐** \n\n调用 evo 函数实现不同对齐方式的轨迹结果绘图并比较 \n\nalignment_demo.py: \n\n```\n#!/usr/bin/env python \n\n\"\"\" \ntrajectory alignment functions \n\"\"\" \n\nimport copy \nimport logging \nimport sys \n\nimport evo.core.lie_algebra as lie \nfrom evo.core import trajectory \nfrom evo.tools import plot, file_interface, log \n\nimport numpy as np \nimport matplotlib.pyplot as plt \n\nlogger = logging.getLogger(\"evo\") \nlog.configure_logging(verbose=True) \n\n# 读取参考轨迹数据和待评估轨迹数据 \ntraj_ref = file_interface.read_kitti_poses_file(\"./data/KITTI_00_gt.txt\") \ntraj_est = file_interface.read_kitti_poses_file( \"./data/KITTI_00_ORB.txt\") \n\n# add artificial Sim(3) transformation \ntraj_est.transform(lie.se3(np.eye(3), np.array([0, 0, 0]))) \n\n# 尺寸缩放 \ntraj_est.scale(0.5) \n\nlogger.info(\"\\nUmeyama alignment without scaling\") \ntraj_est_aligned = copy.deepcopy(traj_est) \n\n# 对齐轨迹（但不做尺寸缩放） \ntraj_est_aligned.align(traj_ref) \n\nlogger.info(\"\\nUmeyama alignment with scaling\") \ntraj_est_aligned_scaled = copy.deepcopy(traj_est) \n# 对齐轨迹（同时尺寸缩放） \ntraj_est_aligned_scaled.align(traj_ref, correct_scale=True) \n\nlogger.info(\"\\nUmeyama alignment with scaling only\") \ntraj_est_aligned_only_scaled = copy.deepcopy(traj_est) \n# 对齐轨迹（仅仅尺寸缩放） \ntraj_est_aligned_only_scaled.align(traj_ref, correct_only_scale=True) \n\n# 以下部分为绘图部分 \nfig = plt.figure(figsize=(8, 8)) \nplot_mode = plot.PlotMode.xz \n\nax = plot.prepare_axis(fig, plot_mode, subplot_arg=221) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray') \nplot.traj(ax, plot_mode, traj_est, '-', 'blue') \nfig.axes.append(ax) \nplt.title('not aligned') \n\nax = plot.prepare_axis(fig, plot_mode, subplot_arg=222) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray') \nplot.traj(ax, plot_mode, traj_est_aligned, '-', 'blue') \nfig.axes.append(ax) \nplt.title('$\\mathrm{SE}(3)$ alignment') \n\nax = plot.prepare_axis(fig, plot_mode, subplot_arg=223) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray') \nplot.traj(ax, plot_mode, traj_est_aligned_scaled, '-', 'blue') \nfig.axes.append(ax) \nplt.title('$\\mathrm{Sim}(3)$ alignment') \n\nax = plot.prepare_axis(fig, plot_mode, subplot_arg=224) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray') \nplot.traj(ax, plot_mode, traj_est_aligned_only_scaled, '-', 'blue') \nfig.axes.append(ax) \nplt.title('only scaled') \n\nfig.tight_layout() \nplt.show() \n```\n\n执行后如图所示：\n\n![](./media/GetImage21.png)\n\n### **例子2：计算APE** \n\n调用 evo 函数计算APE和统计值MEAN \n\ncalc_ape.py: \n\n```\n#!/usr/bin/env python \n\n\"\"\" \ncaculate ape of two trajectories \n\"\"\" \n\nprint(\"loading required evo modules\") \nfrom evo.core import trajectory, sync, metrics \nfrom evo.tools import file_interface \n\n# 读取参考轨迹数据和待评估轨迹数据 \nprint(\"loading trajectories\") \ntraj_ref = file_interface.read_tum_trajectory_file( \"./data/fr2_desk_groundtruth.txt\") \ntraj_est = file_interface.read_tum_trajectory_file( \"./data/fr2_desk_ORB.txt\") \n\n# 调用时间同步算法进行同步，主要是根据 timestamps进行同步 \n# 具体实现参考 evo/core/syn.py 源码 \nprint(\"registering and aligning trajectories\") \ntraj_ref, traj_est = sync.associate_trajectories(traj_ref, traj_est) \n\n# 对齐轨迹（不带尺度缩放） \ntraj_est.align(traj_ref, correct_scale=False) \n\n# 计算APE \nprint(\"calculating APE\") \ndata = (traj_ref, traj_est)     \n\n# 仅针对平移部分计算 \nape_metric = metrics.APE(metrics.PoseRelation.translation_part) \n\n# 对SE(3)的位姿点集合计算APE \n# 详细实现参见 evo/core/metrics.py 源码 \nape_metric.process_data(data) \n\n# 得到rmse，sse，mean，median,max,min,std等统计值 \nape_statistics = ape_metric.get_all_statistics() \nprint(\"mean:\", ape_statistics[\"mean\"]) \n\n# 以下为绘图部分 \nprint(\"loading plot modules\") \nfrom evo.tools import plot \nimport matplotlib.pyplot as plt  \n\nprint(\"plotting\") \nplot_collection = plot.PlotCollection(\"Example\") \n# metric values \nfig_1 = plt.figure(figsize=(8, 8)) \nplot.error_array(fig_1.gca(), ape_metric.error, statistics=ape_statistics, \n                                 name=\"APE\", title=str(ape_metric)) \nplot_collection.add_figure(\"raw\", fig_1) \n\n \n# trajectory colormapped with error \nfig_2 = plt.figure(figsize=(8, 8)) \nplot_mode = plot.PlotMode.xy \nax = plot.prepare_axis(fig_2, plot_mode) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray', 'reference') \nplot.traj_colormap(ax, traj_est, ape_metric.error, plot_mode, \n                                   min_map=ape_statistics[\"min\"], \n                                   max_map=ape_statistics[\"max\"], \n                                   title=\"APE mapped onto trajectory\") \nplot_collection.add_figure(\"traj (error)\", fig_2) \n\n# trajectory colormapped with speed \nfig_3 = plt.figure(figsize=(8, 8)) \nplot_mode = plot.PlotMode.xy \nax = plot.prepare_axis(fig_3, plot_mode) \nspeeds = [ \n        trajectory.calc_speed(traj_est.positions_xyz[i], \n                                traj_est.positions_xyz[i + 1], \n                                traj_est.timestamps[i], traj_est.timestamps[i + 1]) \n        for i in range(len(traj_est.positions_xyz) - 1) \n] \nspeeds.append(0) \nplot.traj(ax, plot_mode, traj_ref, '--', 'gray', 'reference') \nplot.traj_colormap(ax, traj_est, speeds, plot_mode, min_map=min(speeds), \n                        max_map=max(speeds), title=\"speed mapped onto trajectory\") \nfig_3.axes.append(ax) \nplot_collection.add_figure(\"traj (speed)\", fig_3) \n \nplot_collection.show()  \n```\n\n终端输出信息： \n\n```\nloading required evo modules \nloading trajectories \nregistering and aligning trajectories \ncalculating APE \nmean: 0.0074917768702161495 \n```\n\n计算并打印了MEAN信息 \n\n## **附录：数据集以及 evo 使用例子** \n\n### **TUM数据集** \n\n- 数据格式为 ： timestamp tx ty tz qx qy qz qw 每行8个元素， 结尾没有空格， 时间戳以秒为单位， 精确到小数点后9位 \n\n  ![](./media/GetImage22.png)\n\n- evo_ape 计算轨迹绝对误差的例子\n\n  ```\n    mkdir results \n  \n    # 计算轨迹绝对误差 evo_ape \n    evo_ape tum fr2_desk_groundtruth.txt  fr2_desk_ORB.txt -va --plot --plot_mode xz --save_results results/ORB_fr2_desk.zi \n  \n   # 分析多条曲线 evo_res \n   evo_res results/*.zip -p --save_table results/table.csv \n  \n   # 绘制多条轨迹 evo_traj\n   evo_traj tum freiburg1_xyz-ORB_kf_mono.txt freiburg1_xyz-rgbdslam.txt  --ref=freiburg1_xyz-groundtruth.txt -va --plot --plot_mode xy \n  ```\n\n### **KITTI数据集** \n\n- KITTI数据集格式： r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz 存储变换矩阵的前三行,每行12元素，空格隔开, 无时间戳 \n\n  ![](./media/GetImage23.png)\n\n- evo_ape 计算轨迹绝对误差, evo_traj 绘制多条曲线轨迹 \n\n  ```\n   mkdir results \n  \n   # 计算轨迹绝对误差 evo_ape \n   evo_ape kitti KITTI_00_gt.txt KITTI_00_ORB.txt -va --plot --plot_mode xz --save_results results/KITTI_00_ORB.zip \n  \n   # 分析多条曲线 evo_res \n   evo_res results/*.zip -p --save_table results/table.csv \n  \n   # 绘制多条轨迹 \n   cd test/data \n   evo_traj kitti KITTI_00_ORB.txt KITTI_00_SPTAM.txt --ref=KITTI_00_gt.txt -p --plot_mode=xz  \n  ```\n\n### **EUROC数据集** \n\n- EUROC数据格式为：timestamp,px,py,pz,qw,qx,qy,qz,vx,vy,vz,bwx,bwy,bwz,bax,bay,baz 每行17个元素，逗号隔开，时间以纳秒为单位, 无小数\n\n  ![](./media/GetImage24.png)\n\n- evo_ape 计算轨迹绝对误差 \n\n  ```\n  mkdir results \n  \n   # 计算轨迹绝对误差 evo_ape \n   evo_ape euroc V102_groundtruth.csv V102.txt -va --plot --plot_mode xy --save_results results/EUROC.zip \n  ```\n\n## **附录：相关文献** \n\n- Z. Zhang, D. Scaramuzza. A Tutorial on Quantitative Trajectory Evaluation for Visual(-Inertial) Odometry. *IEEE/RSJ International Conference on Intelligent Robots and Systems*, 7244-7251, 2018. 基本概念介绍教程，包括尺度、对齐等等 \n- J. Sturm, N. Engelhard, F. Endres, W. Burgard, D. Cremers. A Benchmark for the Evaluation of RGB-D SLAM Systems. *IEEE International Conference on Robotics and Automation*, 573-580, 2012. 讲解绝对轨迹误差和相对轨迹误差的概念，以及计算 \n- Least-Squares Estimation of Transformation Parameters Between Two Point Patterns, 讲解Umeyama轨迹对齐算法原理和最小二乘过程 \n\n### [参考教程](https://juejin.cn/post/7063041669725159461)\n\n","slug":"slam_config/轨迹评估介绍与evo工具使用","published":1,"updated":"2023-08-25T09:53:42.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllqhd67r007hgcr710bh4ic7","content":"<h1 id=\"轨迹评估介绍与evo工具使用\"><a href=\"#轨迹评估介绍与evo工具使用\" class=\"headerlink\" title=\"轨迹评估介绍与evo工具使用\"></a>轨迹评估介绍与evo工具使用</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a><strong>介绍</strong></h2><p>本文介绍了轨迹评估的基本概念，包括轨迹对齐、尺度变换、绝对轨迹误差、相对轨迹误差以及计算方法、相关文献，以及evo轨迹评估工具的安装、使用举例、命令参数详解。 </p>\n<h2 id=\"第一部分：evo-介绍\"><a href=\"#第一部分：evo-介绍\" class=\"headerlink\" title=\"第一部分：evo 介绍\"></a><strong>第一部分：evo 介绍</strong></h2><ul>\n<li>evo是一款用于视觉里程计和SLAM问题的轨迹评估工具. 核心功能是能够绘制相机的轨迹, 或评估轨迹与真值之间的误差. </li>\n<li>它支持多种数据集的轨迹格式(TUM、KITTI、EuRoC MAV、ROS的bag)， 同时支持这些数据格式之间的相互转换。 </li>\n<li>灵活的输出&#x2F;绘图和导出选项(例如LaTeX绘图或Excel表格) </li>\n<li>强大的可配置的CLI, 可以涵盖多种场景使用 </li>\n<li>用于自定义扩展的模块化 </li>\n<li>github：<a href=\"https://link.juejin.cn/?target=https://github.com/MichaelGrupp/evo.git\">github.com&#x2F;MichaelGrup…</a> </li>\n<li>wiki： <a href=\"https://link.juejin.cn/?target=https://github.com/MichaelGrupp/evo/wiki\">github.com&#x2F;MichaelGrup…</a></li>\n</ul>\n<h2 id=\"第二部分：安装-evo-工具\"><a href=\"#第二部分：安装-evo-工具\" class=\"headerlink\" title=\"第二部分：安装 evo 工具\"></a><strong>第二部分：安装 evo 工具</strong></h2><h4 id=\"Step1：-python-3-8虚拟环境搭建\"><a href=\"#Step1：-python-3-8虚拟环境搭建\" class=\"headerlink\" title=\"Step1： python 3.8虚拟环境搭建\"></a><strong>Step1： python 3.8虚拟环境搭建</strong></h4><p><code>目的</code>：构筑一个纯净python 3.8环境（github上告知最新的evo版本支持Python 3.8+，若要支持Python2.7需使用 1.12.0及以下版本）。ubuntu18.04自带python 3.6和2.7，如果不使用python虚拟环境，还可以使用 update-alternatives 命令来切换OS所使用的Python版本，以下以使用Python虚拟环境为例（使用conda方式）： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载 anaconda 或 miniconda， 以下以 miniconda 为例 </span><br><span class=\"line\">wget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh </span><br><span class=\"line\">或 </span><br><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda2-py27_4.8.3-Linux-x86_64.sh </span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装 miniconda </span><br><span class=\"line\">bash iniconda2-py27_4.8.3-Linux-x86_64.sh </span><br><span class=\"line\">source ~/.bashrc </span><br><span class=\"line\"> </span><br><span class=\"line\"># 创建 python3.8 虚拟环境 </span><br><span class=\"line\">conda create -n slam_env python=3.8 </span><br><span class=\"line\"> </span><br><span class=\"line\"># 进入虚拟环境 </span><br><span class=\"line\">conda activate slam_env </span><br><span class=\"line\"> </span><br><span class=\"line\"># 查看python虚拟环境和其pip工具 （此时提示符已经切换为 slam_env ） </span><br><span class=\"line\">(slam_env) hadoop@ubuntu:~$ pip --version </span><br><span class=\"line\">pip 21.2.4 from /home/hadoop/miniconda2/envs/slam_env/lib/python3.8/site-packages/pip (python 3.8) </span><br><span class=\"line\"> </span><br><span class=\"line\"># 查看虚拟环境已安装的python模块 </span><br><span class=\"line\">(slam_env) hadoop@ubuntu:~$ conda list </span><br><span class=\"line\"># packages inenvironment at /home/hadoop/miniconda2/envs/slam_env:# </span><br><span class=\"line\"># Name                    Version                   Build  Channel </span><br><span class=\"line\">_libgcc_mutex             0.1                        main </span><br><span class=\"line\">_openmp_mutex             4.5                       1_gnu </span><br><span class=\"line\">ca-certificates           2021.10.26           h06a4308_2 </span><br><span class=\"line\">certifi                   2021.10.8        py38h06a4308_2 </span><br><span class=\"line\">ld_impl_linux-64          2.35.1               h7274673_9 </span><br><span class=\"line\">libffi                    3.3                  he6710b0_2 </span><br><span class=\"line\">(下略） </span><br><span class=\"line\"> </span><br><span class=\"line\"># 升级 pip 到最新版本 </span><br><span class=\"line\">(slam_env) hadoop@ubuntu:~$ pip install -U pip  </span><br><span class=\"line\"> </span><br><span class=\"line\"># pip 使用国内 pypi 镜像站（清华） </span><br><span class=\"line\">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple </span><br></pre></td></tr></table></figure>\n\n<p>至此，完成python虚拟环境搭建完毕，使用时使用 conda activate slam_env 即可进入python虚拟环境提示符。 </p>\n<h4 id=\"Step2：-使用pip安装-evo-到虚拟环境\"><a href=\"#Step2：-使用pip安装-evo-到虚拟环境\" class=\"headerlink\" title=\"Step2： 使用pip安装 evo 到虚拟环境\"></a><strong>Step2： 使用pip安装 evo 到虚拟环境</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 进入虚拟环境 </span><br><span class=\"line\">(base) hadoop@ubuntu:~$ conda activate slam_env </span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装evo工具 </span><br><span class=\"line\">(slam_env) hadoop@ubuntu:~$ pip install evo --upgrade --no-binary evo --user </span><br><span class=\"line\"> </span><br><span class=\"line\"># 查看evo工具 </span><br><span class=\"line\">ls ~/.local/bin </span><br><span class=\"line\"> </span><br><span class=\"line\"># 编辑 ~/.bashrc， 把 ~/.local/bin 目录加入到 PATH 环境变量 </span><br><span class=\"line\">echo &#x27;export PATH=~/.local/bin:$PATH&#x27; &gt;&gt; ~/.bashrc </span><br><span class=\"line\">source ~/.bashrc </span><br><span class=\"line\"> </span><br><span class=\"line\"># 确认evo工具可用 </span><br><span class=\"line\">evo_ape --help </span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装tkinter，防止运行 evo 时报错 tkinter 找不到 </span><br><span class=\"line\">sudo apt install  python3-tk </span><br></pre></td></tr></table></figure>\n\n<p><strong>备注1: 安装过程会自动安装所依赖的科学计算库和绘图库如numpy、scipy、pandas、matplotlib、pillow等.</strong> </p>\n<h4 id=\"Step3：工具位置介绍\"><a href=\"#Step3：工具位置介绍\" class=\"headerlink\" title=\"Step3：工具位置介绍\"></a><strong>Step3：工具位置介绍</strong></h4><ul>\n<li><h5 id=\"安装好的-evo-的命令行工具在目录-local-bin-下\"><a href=\"#安装好的-evo-的命令行工具在目录-local-bin-下\" class=\"headerlink\" title=\"安装好的 evo 的命令行工具在目录 ~&#x2F;.local&#x2F;bin 下\"></a><strong>安装好的 evo 的命令行工具在目录 ~&#x2F;.local&#x2F;bin 下</strong></h5></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls ~/.local/bin </span><br><span class=\"line\">    activate-global-python-argcomplete  evo_traj    pygmentize </span><br><span class=\"line\">    evo                                 f2py        python-argcomplete-check-easy-install-script </span><br><span class=\"line\">    evo_ape                             f2py3       python-argcomplete-tcsh </span><br><span class=\"line\">    evo_config                          f2py3.8     register-python-argcomplete </span><br><span class=\"line\">    evo_fig                             fonttools   rosbags-convert </span><br><span class=\"line\">    evo_ipython                         natsort     ttx </span><br><span class=\"line\">    evo_res                             pyftmerge </span><br><span class=\"line\">    evo_rpe                             pyftsubset </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>轨迹误差评估方面</strong>：<ul>\n<li>evo_ape : 计算绝对位姿误差(absolute pose error)，用于整体评估整条轨迹的<code>全局一致性</code>； </li>\n<li>evo_rpe : 计算相对位姿误差(relative pose error)，用于评价轨迹局部的<code>准确性</code>。</li>\n</ul>\n</li>\n<li><strong>绘图方面</strong>：<ul>\n<li>evo_traj : 分析&#x2F;绘图&#x2F;导出一条或多条轨迹</li>\n</ul>\n</li>\n<li><strong>评估结果比较方面</strong>：<ul>\n<li>evo_res : 比较一个或多个结果文件, 结果文件来自 evo_ape 或 evp_rpe的输出</li>\n</ul>\n</li>\n<li><strong>其他</strong>： <ul>\n<li>evo_config : 对evo工具的全局设置</li>\n</ul>\n</li>\n<li><strong>需要注意, EUROC数据集、TUM数据集、KITTI数据集使用四元数的顺序是不一样的， 因此在使用 evo 命令时， 需要增加一个命令选项参数进行区分。</strong></li>\n</ul>\n<h2 id=\"第三部分：-基本概念简介\"><a href=\"#第三部分：-基本概念简介\" class=\"headerlink\" title=\"第三部分： 基本概念简介\"></a><strong>第三部分： 基本概念简介</strong></h2><p>在使用evo工具之前， 先介绍一些evo工具使用过程中会遇到的轨迹评估方面的基本概念，以便于更好的理解工具的输出信息和图表。 </p>\n<p>基本介绍信息如下所示。 </p>\n<h3 id=\"1-轨迹对齐\"><a href=\"#1-轨迹对齐\" class=\"headerlink\" title=\"1. 轨迹对齐\"></a><strong>1. 轨迹对齐</strong></h3><p>在定量轨迹评估过程时，如图所示，首先估计的轨迹（蓝色）要和真值（黑色）对齐，然后再利用特性的误差度量计算对气候的轨迹估计误差。 </p>\n<p><img src=\"/./media/GetImage6.png\"></p>\n<p>下图左图是对齐前，右图是对齐后； 其中灰色线为对应的状态 </p>\n<p><img src=\"/./media/GetImage7.png\"></p>\n<h3 id=\"2-尺度变换\"><a href=\"#2-尺度变换\" class=\"headerlink\" title=\"2. 尺度变换\"></a><strong>2. 尺度变换</strong></h3><p><strong>尺度歧义性</strong>？ </p>\n<p>根据单目相机相机测量模型可知其尺度歧义性，如图所示，相机将3D点（红色×）投影到成像平面上的2D点（黑色○）。对于单目相机，相同方向但不同距离的3D点（灰色x）投影到相同的2D点，从而导致尺度歧义性。 </p>\n<p><strong>尺度变换</strong>： 相当于添加一个恒定的尺度变换 TsT_sTs到第二个相机，消除该歧义性；</p>\n<p> <img src=\"/./media/GetImage8.png\"></p>\n<h3 id=\"3-绝对轨迹误差和相对轨迹误差\"><a href=\"#3-绝对轨迹误差和相对轨迹误差\" class=\"headerlink\" title=\"3. 绝对轨迹误差和相对轨迹误差\"></a><strong>3. 绝对轨迹误差和相对轨迹误差</strong></h3><ul>\n<li>绝对轨迹误差计算的每一个点对（待评估轨迹的点与真值轨迹的点）的绝对值误差。 </li>\n<li>相对轨迹误差计算的是，针对两条轨迹，分别计算第 k时刻和 k+Δ时刻的误差，然后这两个误差间再计算绝对值误差。</li>\n</ul>\n<p><img src=\"/./media/GetImage9.png\"></p>\n<h3 id=\"4-补充\"><a href=\"#4-补充\" class=\"headerlink\" title=\"4. 补充\"></a><strong>4. 补充</strong></h3><p>可以在相关文献获取更加详细的信息: A Tutorial on Quantitative Trajectory Evaluation for Visual(-Inertial) Odometry。 </p>\n<h2 id=\"第四部分：evo初体验\"><a href=\"#第四部分：evo初体验\" class=\"headerlink\" title=\"第四部分：evo初体验\"></a><strong>第四部分：evo初体验</strong></h2><h3 id=\"1-evo-traj-体验\"><a href=\"#1-evo-traj-体验\" class=\"headerlink\" title=\"1.evo_traj 体验\"></a><strong>1.evo_traj 体验</strong></h3><ul>\n<li><p>介绍：evo_traj 可以分析、绘制、导出一个或多个轨迹；可以打开任意多个轨迹，查看统计信息， 还可以将轨迹转换为其他格式； </p>\n</li>\n<li><p>体验</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># evo_traj 执行，以KITTI_00_gt为参考，绘制 KITTI_00_ORB  KITTI_00_SPTAMcd evo/test/data </span><br><span class=\"line\">evo_traj kitti KITTI_00_ORB.txt KITTI_00_SPTAM.txt --ref=KITTI_00_gt.txt -p --plot_mode=xz </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出现如下的图示 </p>\n<p><img src=\"/./media/GetImage3.png\"></p>\n<p>注：虚线为参考值；由于参数设置了xz，因此只显示轨迹在xz平面上投影；坐标表示活动轨迹范围； </p>\n<p><img src=\"/./media/GetImage4.png\"></p>\n<p>注： 以起始点作为基准点，针对每个pose点（横），按x&#x2F;y&#x2F;z三个方向的分量，描述其距离原点距离（纵）</p>\n</li>\n<li><p>本文后面章节会详细讲解 evo_traj 的每一个命令参数。</p>\n</li>\n</ul>\n<h3 id=\"2-evo-ape-体验-绝对轨迹误差计算方法\"><a href=\"#2-evo-ape-体验-绝对轨迹误差计算方法\" class=\"headerlink\" title=\"2.evo_ape 体验 + 绝对轨迹误差计算方法\"></a><strong>2.evo_ape 体验 + 绝对轨迹误差计算方法</strong></h3><ul>\n<li>介绍：evo_ape 可以评估轨迹绝对位姿误差(absolute pose error) </li>\n<li>绝对位姿误差常被用作比较估计轨迹和参考估计并计算整个轨迹误差的统计数据， 适用于测试轨迹的全局一致性。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建存放结果的目录 </span><br><span class=\"line\">mkdir results </span><br><span class=\"line\">evo_ape kitti KITTI_00_gt.txt KITTI_00_SPTAM.txt -vas  --plot --plot_mode xz --save_results results/SPTAM_APE.zip </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>出现如下图示效果</p>\n<ul>\n<li><p>绝对轨迹误差信息如下图：</p>\n<p><img src=\"/./media/GetImage10.png\"></p>\n<p>注：针对所有位姿点描述绝对误差大小，并与均方根误差、中位值、均值、标准差等直观比较；std覆盖区域为 [mean−std, mean+std], 反应组内个体间离散程度； </p>\n<p>注：默认情况下计算的是ATE(absolute trajectory error)绝对轨迹误差。终端输出 Calculating APE for translation part pose relation… 表示计算的是平移误差；可以使用 -r full 同时计算平移+旋转误差； </p>\n</li>\n<li><p>轨迹直观误差信息如下图</p>\n<p><img src=\"/./media/GetImage11.png\"></p>\n<p>注： 针对整个轨迹，使用颜色显示偏差的大小，按蓝-绿-红渐变色偏差依次变大；放大后可更清楚的查看局部轨迹差；<br>本文后面章节会详细讲解 evo_ape 的每一个命令参数。</p>\n</li>\n</ul>\n</li>\n<li><p>Umeyama算法</p>\n<p>Umeyama算法用于做点云匹配对齐，因为点集合之间的对应关系已知，它可以计算出两组点云数据间的旋转+平移变换矩阵和相似变换矩阵；<br>原理就是通过点对之间距离平方和的最小二乘误差计算出T，和ICP的损失函数是类似的。 </p>\n<p><img src=\"/./media/GetImage12.png\"></p>\n<p>最后计算得到:</p>\n<p><img src=\"/./media/GetImage13.png\"></p>\n<p>此外， Eigen 库也封装了函数 Eigen::umeyama（），可直接传入两个点云集合调用求解. </p>\n<p>SE(3)与Sim(3)，对于双目SLAM和RGB-D SLAM，尺度统一，因此需要通过最小二乘计算估计位姿到真实位姿的转换矩阵 S∈SE(3); </p>\n<p>对于单目相机，尺度不确定性，因此需要计算从估计位姿到真实位姿的相似变换矩阵 S∈Sim(3)。 默认为SE(3)，加 -s 参数使用 Sim(3); </p>\n<p>补充说明：可以通过Umeyama的文献获取更进一步的信息： Least-Squares Estimation of Transformation Parameters Between Two Point Patterns</p>\n</li>\n</ul>\n<p>注：终端输出表示的是用 Umeyama 计算得到的相似矩阵选装、平移和尺度变换的结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rotation of alignment: </span><br><span class=\"line\"> [[ 0.99972834 -0.01321112  0.01920198] </span><br><span class=\"line\">[ 0.01357949  0.99972379 -0.01918176] </span><br><span class=\"line\">  [-0.01894327  0.0194373   0.9996316 ]] </span><br><span class=\"line\"> Translation of alignment: </span><br><span class=\"line\"> [1.18538132 2.10165699 2.31548455] </span><br><span class=\"line\"> Scale correction: 1.0045265524039808 </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>绝对轨迹误差（ATE）计算公式 </p>\n<p>为什要计算绝对轨迹误差？ 绝对轨迹误差实际上在计算什么？<br>对于视觉SLAM系统， 估计轨迹的全局一致性是重要度量，如何评估全局一致性？ 就是通过比较被估计值和真值轨迹之间的绝对距离来得到。<br>首先先将两条轨迹对齐。 记P1:n代表待估计的轨迹，Q1:n代表真值轨迹， 则时间戳 iii处的绝对估计误差为： </p>\n<p><img src=\"/./media/GetImage14.png\"></p>\n<p>可以这么理解公式：对 A&#x3D;[R∣t]∈SE(3), 有A−1A&#x3D;[I∣0]； 那么这里的 SPi 是估计的 Qi， 计算 Qi−1SPi可以直观得到两条轨迹的差值。<br>则针对所有时刻定义平移分量的 均方根误差(RMSE)、和方差（SSE)：</p>\n<p><img src=\"/./media/GetImage15.png\"></p>\n<p>补充说明：可以通过文献获取更进一步的信息： A Benchmark for the Evaluation of RGB-D SLAM Systems</p>\n</li>\n</ul>\n<h3 id=\"3-evo-rpe-体验-相对轨迹误差计算方法\"><a href=\"#3-evo-rpe-体验-相对轨迹误差计算方法\" class=\"headerlink\" title=\"3.evo_rpe 体验 + 相对轨迹误差计算方法\"></a><strong>3.evo_rpe 体验 + 相对轨迹误差计算方法</strong></h3><ul>\n<li><p>介绍： evo_rpe 可以用来计算相对轨迹误差（relative pose error） </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_rpe kitti KITTI_00_gt.txt KITTI_00_SPTAM.txt  -r full -va --plot --plot_mode xyz --save_results results/SPTAM_RPE.zip </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-r full 指定对平移和旋转的误差均进行计算。 </li>\n<li>-as 采用SE(3) Umeyama对齐，处理平移和旋转和尺度</li>\n</ul>\n</li>\n<li><p>终端输出的轨迹对齐的旋转矩阵和平移矩阵， 以及统计信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------------------------------------------- </span><br><span class=\"line\">  Aligning using Umeyama&#x27;s method... (with scale correction) </span><br><span class=\"line\">  Rotation of alignment: </span><br><span class=\"line\">  [[ 0.99972834 -0.01321112  0.01920198] </span><br><span class=\"line\">   [ 0.01357949  0.99972379 -0.01918176] </span><br><span class=\"line\">   [-0.01894327  0.0194373   0.9996316 ]] </span><br><span class=\"line\">  Translation of alignment: </span><br><span class=\"line\">  [1.18538132 2.10165699 2.31548455] </span><br><span class=\"line\">  Scale correction: 1.0045265524039808 </span><br><span class=\"line\">  -------------------------------------------------------------------------------- </span><br><span class=\"line\">  Found 4540 pairs with delta 1 (frames) among 4541 poses using consecutive pairs. </span><br><span class=\"line\">  Compared 4540 relative pose pairs, delta = 1 (frames) with consecutive pairs. </span><br><span class=\"line\">  Calculating RPE for full transformation pose relation... </span><br><span class=\"line\">  -------------------------------------------------------------------------------- </span><br><span class=\"line\">  RPE w.r.t. full transformation (unit-less) </span><br><span class=\"line\">  for delta = 1 (frames) using consecutive pairs </span><br><span class=\"line\">  (with Sim(3) Umeyama alignment) </span><br><span class=\"line\"> </span><br><span class=\"line\">        max      1.136092 </span><br><span class=\"line\">        mean      0.024773 </span><br><span class=\"line\">        median      0.020434 </span><br><span class=\"line\">        min      0.001043 </span><br><span class=\"line\">        rmse      0.035773 </span><br><span class=\"line\">        sse      5.809960 </span><br><span class=\"line\">        std      0.025807 </span><br><span class=\"line\">  -------------------------------------------------------------------------------- </span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>相对位姿误差(RPE) 计算公式</strong></p>\n<p>为什要计算相对轨迹误差？ 相对轨迹误差实际上在计算什么？<br>相对位姿误差测量了轨迹在一个固定的时间区间 Δ\\DeltaΔ内的局部准确度。 因此，相对位姿误差对应轨迹的漂移。<br>先定义时间步 iii处的相对位姿误差如下，可知相对位姿误差计算的是相隔固定时间差 Δ 两帧位姿差：</p>\n<p><img src=\"/./media/GetImage16.png\"></p>\n<p>根据上式，对于一个有n个相机位姿的序列中，我们获得 m&#x3D;n−Δm&#x3D;n-\\Deltam&#x3D;n−Δ个独立的沿着序列的相对位姿误差。则可以定义平移分量的的所有时刻的均方根误差RMSE: </p>\n<p><img src=\"/./media/GetImage17.png\"></p>\n<p>可以这么理解公式：对 A&#x3D;[R∣t]∈SE(3), 有 A−1A&#x3D;[I∣0].<br>上式中的 (Pi−1Pi+Δ)(P_i^{-1}P_{i+\\Delta}) (Pi−1Pi+Δ)是估计的 Qi−1Qi+ΔQ_i^{-1}Q_{i+\\Delta}Qi−1Qi+Δ，计算 (Qi−1Qi+Δ)−1(Pi−1Pi+Δ)(Q_i^{-1}Q_{i+\\Delta})^{-1} (P_i^{-1}P_{i+\\Delta})(Qi−1Qi+Δ)−1(Pi−1Pi+Δ)可以直观的得到两条轨迹的差值；<br>此处计算的是 EiE_iEi的平移分量，旋转误差也可以被估计，但一般平移误差就足够了（因为旋转误差会随着平移误差的上升而增加）。时间参数 Δ\\DeltaΔ对于帧速较快的相同，如30Hz的传感器，可选择 Δ&#x3D;30\\Delta&#x3D;30Δ&#x3D;30以得到每秒的漂移。<br>补充说明：可以通过文献获取更进一步的信息： A Benchmark for the Evaluation of RGB-D SLAM Systems</p>\n</li>\n</ul>\n<h3 id=\"4-evo-res-体验\"><a href=\"#4-evo-res-体验\" class=\"headerlink\" title=\"4.evo_res 体验\"></a><strong>4.evo_res 体验</strong></h3><ul>\n<li><p>介绍： evo_res 可以用来比较多个结果文件， 打印统计信息、绘图、保存结果到表格等。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_res results/*.zip -p --save_table results/table.csv </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如下图示 </p>\n<p>绝对轨迹误差对比：</p>\n<p><img src=\"/./media/GetImage18.png\"></p>\n</li>\n</ul>\n<h2 id=\"第五部分：-evo-命令参数详解\"><a href=\"#第五部分：-evo-命令参数详解\" class=\"headerlink\" title=\"第五部分： evo 命令参数详解\"></a><strong>第五部分： evo 命令参数详解</strong></h2><h3 id=\"1-evo-ape-命令详解\"><a href=\"#1-evo-ape-命令详解\" class=\"headerlink\" title=\"1.evo_ape 命令详解\"></a><strong>1.evo_ape 命令详解</strong></h3><ul>\n<li><p>用途：计算绝对位姿误差 </p>\n</li>\n<li><p>绝对位姿误差常被用作比较估计轨迹和参考估计并计算整个轨迹误差的统计数据， 适用于测试轨迹的全局一致性。 </p>\n</li>\n<li><p>命令语法： evo_ape 数据格式 参考轨迹 估计轨迹 可选项 </p>\n<ul>\n<li>数据格式： euroc, tum, kitti 等</li>\n</ul>\n</li>\n<li><p>常用命令示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_ape euroc MH_data3.csv pose_graphloop.txt -r full -va --plot --plot_mode xyz --save_plot ./VINSplot --save_results ./VINS.zip </span><br></pre></td></tr></table></figure>\n\n<p>命令含义： 考虑平移和旋转部分误差的ape， 进行平移和旋转对齐，以详细模式显示，画图并保存计算结果。</p>\n</li>\n<li><p>参数说明： </p>\n<ul>\n<li>-r : 即 -pose_relation， 此参数可选, 若不添加此参数，则默认为 trans_part。 有如下可选项：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>可选项</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>full</td>\n<td>表示同时考虑旋转和平移误差得到的ape,无单位（unit-less）</td>\n</tr>\n<tr>\n<td>trans_part</td>\n<td>考虑平移部分得到的ape，单位为m</td>\n</tr>\n<tr>\n<td>rot_part</td>\n<td>考虑旋转部分得到的ape，无单位（unit-less）</td>\n</tr>\n<tr>\n<td>angle_deg</td>\n<td>考虑旋转角得到的ape,单位°（deg）</td>\n</tr>\n<tr>\n<td>angle_rad</td>\n<td>考虑旋转角得到的ape,单位弧度（rad）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>-v : 表示 verbose mode， 详细模式 </p>\n</li>\n<li><p>-a ：即 -align, 表示采用 SE(3) Umeyama 对齐。 除了 -a 外，其他可选项如下</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a&#x2F;–align</td>\n<td>采用SE(3) Umeyama对齐，只处理平移和旋转</td>\n</tr>\n<tr>\n<td>-as&#x2F;–align –correct_scale</td>\n<td>采用Sim(3) Umeyama对齐，同时处理平移旋转和尺度</td>\n</tr>\n<tr>\n<td>-s&#x2F;–correct_scale</td>\n<td>仅对齐尺度</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>-plot ： 表示画图 </p>\n<ul>\n<li>–plot_mode : 选择画图模式， 二维图或三维图，默认为 xyz， 可选项有[xy, xz, yz, zx, zy, xyz]. </li>\n<li>–save_plot : 后跟保存图像的文件路径， 如 .&#x2F;VINSplot. 保存文件的类型， 可以通过 evo_config 命令设置， 常见的可以保存为 png, pdf等</li>\n</ul>\n</li>\n<li><p>-save_results : 后跟存储结果的压缩文件路径， 如 .&#x2F;VINS.zip， 是一个压缩文件。 </p>\n</li>\n<li><p>–help: 显示帮助信息， 格式为： evo_ape 格式 –help , 如 evo_ape euroc –help</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-evo-rpe-命令详解\"><a href=\"#2-evo-rpe-命令详解\" class=\"headerlink\" title=\"2.evo_rpe 命令详解\"></a><strong>2.evo_rpe 命令详解</strong></h3><ul>\n<li><p>用途：计算相对位子误差 </p>\n</li>\n<li><p>相对位姿误差不进行绝对位姿的比较，相对位姿误差比较运动（姿态增量）。相对位姿误差可以给出局部精度，例如slam系统每米的平移或者旋转漂移量。 </p>\n</li>\n<li><p>命令语法： evo_ape 数据格式 参考轨迹 估计轨迹 可选项 </p>\n<ul>\n<li>数据格式： euroc, tum, kitti 等</li>\n</ul>\n</li>\n<li><p>常用命令示例： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_rpe euroc MH_data3.csv pose_graphloop.txt -r angle_deg \\ </span><br><span class=\"line\">  --delta 1 --delta_unit m -va --plot --plot_mode xyz \\ </span><br><span class=\"line\">  --save_plot ./VINSplot --save_results ./VINS.zip </span><br></pre></td></tr></table></figure>\n\n<p>命令含义： 求每米的旋转角的rpe，以详细模式显示，画图并保存计算结果。</p>\n</li>\n<li><p>参数说明： </p>\n<ul>\n<li>-r : 即 -pose_relation， 此参数可选, 若不添加此参数，则默认为 trans_part。具体参数选项内容 同 evo_ape，具体项可参见前一章节说明.</li>\n<li>-d&#x2F;–delta : 表示相对位姿之间的增量，后跟数值，默认为1， 然后通过 -u&#x2F;–delta_unit 指定单位； </li>\n<li>-u&#x2F;–delta_unit : 表示增量的单位，可选参数为 f, d, r, m 分别表示 frames, deg, rad, meters 。默认为f。 当此参数为 f 时，则 -d&#x2F;–delta必须为整型， 其余情况可谓浮点型；-d&#x2F;–delta 和 -u&#x2F;–delta_unit 联合起来表示衡量局部精度的单位，如 每米、每弧度、每百米等。  </li>\n<li>-v –plot –plot_mode xyz –save_results results&#x2F;VINS.zip –save_plot ： 这些参数同 evo_ape， 具体可参见前一章节说明。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-evo-traj-命令详解\"><a href=\"#3-evo-traj-命令详解\" class=\"headerlink\" title=\"3.evo_traj 命令详解\"></a><strong>3.evo_traj 命令详解</strong></h3><ul>\n<li><p>用途： 轨迹管理工具 </p>\n</li>\n<li><p>可以打开任意多个轨迹，查看统计信息， 还可以将轨迹转换为其他格式 </p>\n</li>\n<li><p>常用命令示例1： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_traj euroc MH_data1.csv MH_data3.csv -v --full_check </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明： </p>\n<ul>\n<li>-v : 以详细模式显示 </li>\n<li>–full_check : 对轨迹进行检查</li>\n</ul>\n</li>\n<li><p>常用命令示例2：对轨迹进行对齐， 此时需要利用 –ref 指定参考轨迹 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_traj bag ROS_example.bag ORB-SLAM S-PTAM --ref groundtruth -s </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明：  </p>\n</li>\n<li><p>-a ：即 -align, 轨迹对齐的选项参数， 如 -a&#x2F;–align, -s&#x2F;–correct_scale, –n_to_align 等等，与evo_ape 相同，详情可参见前一章节 evo_ape 中轨迹说明中的参数解释。 </p>\n</li>\n<li><p>常用命令示例3： 转换格式 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_traj euroc data.csv --save_as_tum  </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明： </p>\n</li>\n<li><p>–save_as_tum : 指定目标数据集格式为 tum </p>\n</li>\n<li><p>数据集格式转换表如下：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>源数据集</strong></th>\n<th><strong>ROS Bag</strong></th>\n<th><strong>KITTI</strong></th>\n<th><strong>TUM</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>–save_as_bag</td>\n<td>–save_as_kitti</td>\n<td>–ave_as_tum</td>\n</tr>\n<tr>\n<td>bag</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>euroc</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>kitti</td>\n<td>no(no timestamps)</td>\n<td>yes</td>\n<td>no(no timestamps)</td>\n</tr>\n<tr>\n<td>tum</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-轨迹的对齐和尺度缩放\"><a href=\"#4-轨迹的对齐和尺度缩放\" class=\"headerlink\" title=\"4.轨迹的对齐和尺度缩放\"></a><strong>4.轨迹的对齐和尺度缩放</strong></h3><p>单目相机会存在尺度的不确定性，evo_traj 支持使用-s（或 –correct_scale）参数进行Sim(3)上的对齐（旋转、平移与尺度缩放）。<br>例子1： 下图从左到右三幅图中两条曲线的结果分别是：未对齐、SE(3)对齐、尺度缩放 </p>\n<p><img src=\"/./media/GetImage19.png\"></p>\n<p>例子2： 不同的对齐命令效果图，分别是未对齐、SE(3)对齐、Sim(3)对齐、尺度缩放 </p>\n<p><img src=\"/./media/GetImage20.png\"></p>\n<h3 id=\"5-evo-res-命令详解\"><a href=\"#5-evo-res-命令详解\" class=\"headerlink\" title=\"5.evo_res 命令详解\"></a><strong>5.evo_res 命令详解</strong></h3><ul>\n<li><p>用途：结果比较 </p>\n</li>\n<li><p>evo_ape&#x2F;evo_rpe中将结果保存为.zip文件后，可以利用evo_res对不同的结果进行比较 </p>\n</li>\n<li><p>常用命令示例1： evo_ape得到MH3_1.zip和MH3_2.zip两个文件后，对这两个结果进行比较 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_res MH3.zip MH3_2.zip -v </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明： </p>\n<ul>\n<li>-v : 详细模式展示信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-evo-config-命令详解\"><a href=\"#6-evo-config-命令详解\" class=\"headerlink\" title=\"6.evo_config 命令详解\"></a><strong>6.evo_config 命令详解</strong></h3><ul>\n<li>用途：全局设置和配置文件的操作</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>evo_config show</td>\n<td>查看设计文件中的参数配置</td>\n</tr>\n<tr>\n<td>evo_config set</td>\n<td>进行参数设置</td>\n</tr>\n<tr>\n<td>evo_config generate</td>\n<td>导出配置到指定的json文件</td>\n</tr>\n<tr>\n<td>evo_config reset</td>\n<td>将参数还原到默认值</td>\n</tr>\n<tr>\n<td>evo_config show|set|generate|reset help</td>\n<td>将参数还原到默认值</td>\n</tr>\n</tbody></table>\n<ul>\n<li>evo_config set 命令最为常用，下面是几个常用的参数，其含义以及可选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>参数</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>可选项</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>plot_export_format</td>\n<td>输出图像时图像存储格式</td>\n<td>常用png,pdf等</td>\n</tr>\n<tr>\n<td>plot_linewidth</td>\n<td>作图时线的宽度</td>\n<td>matplotlib支持的宽度，默认1.5</td>\n</tr>\n<tr>\n<td>plot_reference_color</td>\n<td>图像中参考轨迹的颜色</td>\n<td>black,red,green等</td>\n</tr>\n<tr>\n<td>plot_reference_linestyle</td>\n<td>参考轨迹的线型</td>\n<td>matplotlib支持的线型，默认–</td>\n</tr>\n<tr>\n<td>plot_seaborn_style</td>\n<td>图像背景和网格</td>\n<td>whitegrid,darkgrid,white,dark</td>\n</tr>\n<tr>\n<td>plot_split</td>\n<td>是否分开显示&#x2F;存储图像</td>\n<td>false&#x2F;true</td>\n</tr>\n<tr>\n<td>plot_figsize</td>\n<td>画图的图像大小</td>\n<td>默认宽高均为6，可使用其他值</td>\n</tr>\n<tr>\n<td>table_export_format</td>\n<td>表格数据输出格式</td>\n<td>常用 csv,excel,latex,json</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>命令示例 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将画图背景更改成白色网格 </span><br><span class=\"line\">evo_config set plot_seaborn_style whitegrid  </span><br><span class=\"line\"> </span><br><span class=\"line\"># 将字体改为衬线型并调为1.2倍大小 </span><br><span class=\"line\">evo_config set plot_fontfamily serif plot_fontscale 1.2  </span><br><span class=\"line\"> </span><br><span class=\"line\"># 将画图所使用的线型改为  </span><br><span class=\"line\">evo_config set plot_reference_linestyle -  </span><br><span class=\"line\"> </span><br><span class=\"line\"># 将所画图的图像大小调整为10 9（宽 高） </span><br><span class=\"line\">evo_config set plot_figsize 10 9  </span><br><span class=\"line\"> </span><br><span class=\"line\"># 将参数还原到默认值 </span><br><span class=\"line\">evo_config reset       </span><br><span class=\"line\"> </span><br><span class=\"line\"># 导出配置 </span><br><span class=\"line\">evo_config generate --pose_relation angle_deg --delta 1 --delta_unit m --verbose --plot --out rpe_config.json </span><br><span class=\"line\"> </span><br><span class=\"line\"># 导入配置 </span><br><span class=\"line\">evo_rpe euroc MH_data3.csv pose_graphloop.txt -c rpe_config.json</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"7-evo-其他常用命令\"><a href=\"#7-evo-其他常用命令\" class=\"headerlink\" title=\"7.evo 其他常用命令\"></a><strong>7.evo 其他常用命令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>evo pkg   –version</td>\n<td>查看evo版本</td>\n</tr>\n<tr>\n<td>evo pkg   –info</td>\n<td>查看evo的简要介绍和描述</td>\n</tr>\n<tr>\n<td>evo pkg   –pyversion</td>\n<td>查看python版本</td>\n</tr>\n<tr>\n<td>evo pkg   –license</td>\n<td>查看许可证</td>\n</tr>\n<tr>\n<td>evo pkg   –location</td>\n<td>查看evo安装路径</td>\n</tr>\n<tr>\n<td>evo pkg   –logfile</td>\n<td>查看日志文件路径</td>\n</tr>\n<tr>\n<td>evo pkg   –open_log</td>\n<td>打开日志文件</td>\n</tr>\n<tr>\n<td>evo pkg   –clear_log</td>\n<td>清除日志文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"第六部分：-在程序中调用-evo-函数\"><a href=\"#第六部分：-在程序中调用-evo-函数\" class=\"headerlink\" title=\"第六部分： 在程序中调用 evo 函数\"></a><strong>第六部分： 在程序中调用 evo 函数</strong></h2><p>除了在命令行中使用外， 还可以在程序中使用 evo 能力。 </p>\n<h3 id=\"例子1：轨迹对齐\"><a href=\"#例子1：轨迹对齐\" class=\"headerlink\" title=\"例子1：轨迹对齐\"></a><strong>例子1：轨迹对齐</strong></h3><p>调用 evo 函数实现不同对齐方式的轨迹结果绘图并比较 </p>\n<p>alignment_demo.py: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot; </span><br><span class=\"line\">trajectory alignment functions </span><br><span class=\"line\">&quot;&quot;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">import copy </span><br><span class=\"line\">import logging </span><br><span class=\"line\">import sys </span><br><span class=\"line\"></span><br><span class=\"line\">import evo.core.lie_algebra as lie </span><br><span class=\"line\">from evo.core import trajectory </span><br><span class=\"line\">from evo.tools import plot, file_interface, log </span><br><span class=\"line\"></span><br><span class=\"line\">import numpy as np </span><br><span class=\"line\">import matplotlib.pyplot as plt </span><br><span class=\"line\"></span><br><span class=\"line\">logger = logging.getLogger(&quot;evo&quot;) </span><br><span class=\"line\">log.configure_logging(verbose=True) </span><br><span class=\"line\"></span><br><span class=\"line\"># 读取参考轨迹数据和待评估轨迹数据 </span><br><span class=\"line\">traj_ref = file_interface.read_kitti_poses_file(&quot;./data/KITTI_00_gt.txt&quot;) </span><br><span class=\"line\">traj_est = file_interface.read_kitti_poses_file( &quot;./data/KITTI_00_ORB.txt&quot;) </span><br><span class=\"line\"></span><br><span class=\"line\"># add artificial Sim(3) transformation </span><br><span class=\"line\">traj_est.transform(lie.se3(np.eye(3), np.array([0, 0, 0]))) </span><br><span class=\"line\"></span><br><span class=\"line\"># 尺寸缩放 </span><br><span class=\"line\">traj_est.scale(0.5) </span><br><span class=\"line\"></span><br><span class=\"line\">logger.info(&quot;\\nUmeyama alignment without scaling&quot;) </span><br><span class=\"line\">traj_est_aligned = copy.deepcopy(traj_est) </span><br><span class=\"line\"></span><br><span class=\"line\"># 对齐轨迹（但不做尺寸缩放） </span><br><span class=\"line\">traj_est_aligned.align(traj_ref) </span><br><span class=\"line\"></span><br><span class=\"line\">logger.info(&quot;\\nUmeyama alignment with scaling&quot;) </span><br><span class=\"line\">traj_est_aligned_scaled = copy.deepcopy(traj_est) </span><br><span class=\"line\"># 对齐轨迹（同时尺寸缩放） </span><br><span class=\"line\">traj_est_aligned_scaled.align(traj_ref, correct_scale=True) </span><br><span class=\"line\"></span><br><span class=\"line\">logger.info(&quot;\\nUmeyama alignment with scaling only&quot;) </span><br><span class=\"line\">traj_est_aligned_only_scaled = copy.deepcopy(traj_est) </span><br><span class=\"line\"># 对齐轨迹（仅仅尺寸缩放） </span><br><span class=\"line\">traj_est_aligned_only_scaled.align(traj_ref, correct_only_scale=True) </span><br><span class=\"line\"></span><br><span class=\"line\"># 以下部分为绘图部分 </span><br><span class=\"line\">fig = plt.figure(figsize=(8, 8)) </span><br><span class=\"line\">plot_mode = plot.PlotMode.xz </span><br><span class=\"line\"></span><br><span class=\"line\">ax = plot.prepare_axis(fig, plot_mode, subplot_arg=221) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_est, &#x27;-&#x27;, &#x27;blue&#x27;) </span><br><span class=\"line\">fig.axes.append(ax) </span><br><span class=\"line\">plt.title(&#x27;not aligned&#x27;) </span><br><span class=\"line\"></span><br><span class=\"line\">ax = plot.prepare_axis(fig, plot_mode, subplot_arg=222) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_est_aligned, &#x27;-&#x27;, &#x27;blue&#x27;) </span><br><span class=\"line\">fig.axes.append(ax) </span><br><span class=\"line\">plt.title(&#x27;$\\mathrm&#123;SE&#125;(3)$ alignment&#x27;) </span><br><span class=\"line\"></span><br><span class=\"line\">ax = plot.prepare_axis(fig, plot_mode, subplot_arg=223) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_est_aligned_scaled, &#x27;-&#x27;, &#x27;blue&#x27;) </span><br><span class=\"line\">fig.axes.append(ax) </span><br><span class=\"line\">plt.title(&#x27;$\\mathrm&#123;Sim&#125;(3)$ alignment&#x27;) </span><br><span class=\"line\"></span><br><span class=\"line\">ax = plot.prepare_axis(fig, plot_mode, subplot_arg=224) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_est_aligned_only_scaled, &#x27;-&#x27;, &#x27;blue&#x27;) </span><br><span class=\"line\">fig.axes.append(ax) </span><br><span class=\"line\">plt.title(&#x27;only scaled&#x27;) </span><br><span class=\"line\"></span><br><span class=\"line\">fig.tight_layout() </span><br><span class=\"line\">plt.show() </span><br></pre></td></tr></table></figure>\n\n<p>执行后如图所示：</p>\n<p><img src=\"/./media/GetImage21.png\"></p>\n<h3 id=\"例子2：计算APE\"><a href=\"#例子2：计算APE\" class=\"headerlink\" title=\"例子2：计算APE\"></a><strong>例子2：计算APE</strong></h3><p>调用 evo 函数计算APE和统计值MEAN </p>\n<p>calc_ape.py: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot; </span><br><span class=\"line\">caculate ape of two trajectories </span><br><span class=\"line\">&quot;&quot;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;loading required evo modules&quot;) </span><br><span class=\"line\">from evo.core import trajectory, sync, metrics </span><br><span class=\"line\">from evo.tools import file_interface </span><br><span class=\"line\"></span><br><span class=\"line\"># 读取参考轨迹数据和待评估轨迹数据 </span><br><span class=\"line\">print(&quot;loading trajectories&quot;) </span><br><span class=\"line\">traj_ref = file_interface.read_tum_trajectory_file( &quot;./data/fr2_desk_groundtruth.txt&quot;) </span><br><span class=\"line\">traj_est = file_interface.read_tum_trajectory_file( &quot;./data/fr2_desk_ORB.txt&quot;) </span><br><span class=\"line\"></span><br><span class=\"line\"># 调用时间同步算法进行同步，主要是根据 timestamps进行同步 </span><br><span class=\"line\"># 具体实现参考 evo/core/syn.py 源码 </span><br><span class=\"line\">print(&quot;registering and aligning trajectories&quot;) </span><br><span class=\"line\">traj_ref, traj_est = sync.associate_trajectories(traj_ref, traj_est) </span><br><span class=\"line\"></span><br><span class=\"line\"># 对齐轨迹（不带尺度缩放） </span><br><span class=\"line\">traj_est.align(traj_ref, correct_scale=False) </span><br><span class=\"line\"></span><br><span class=\"line\"># 计算APE </span><br><span class=\"line\">print(&quot;calculating APE&quot;) </span><br><span class=\"line\">data = (traj_ref, traj_est)     </span><br><span class=\"line\"></span><br><span class=\"line\"># 仅针对平移部分计算 </span><br><span class=\"line\">ape_metric = metrics.APE(metrics.PoseRelation.translation_part) </span><br><span class=\"line\"></span><br><span class=\"line\"># 对SE(3)的位姿点集合计算APE </span><br><span class=\"line\"># 详细实现参见 evo/core/metrics.py 源码 </span><br><span class=\"line\">ape_metric.process_data(data) </span><br><span class=\"line\"></span><br><span class=\"line\"># 得到rmse，sse，mean，median,max,min,std等统计值 </span><br><span class=\"line\">ape_statistics = ape_metric.get_all_statistics() </span><br><span class=\"line\">print(&quot;mean:&quot;, ape_statistics[&quot;mean&quot;]) </span><br><span class=\"line\"></span><br><span class=\"line\"># 以下为绘图部分 </span><br><span class=\"line\">print(&quot;loading plot modules&quot;) </span><br><span class=\"line\">from evo.tools import plot </span><br><span class=\"line\">import matplotlib.pyplot as plt  </span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;plotting&quot;) </span><br><span class=\"line\">plot_collection = plot.PlotCollection(&quot;Example&quot;) </span><br><span class=\"line\"># metric values </span><br><span class=\"line\">fig_1 = plt.figure(figsize=(8, 8)) </span><br><span class=\"line\">plot.error_array(fig_1.gca(), ape_metric.error, statistics=ape_statistics, </span><br><span class=\"line\">                                 name=&quot;APE&quot;, title=str(ape_metric)) </span><br><span class=\"line\">plot_collection.add_figure(&quot;raw&quot;, fig_1) </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"># trajectory colormapped with error </span><br><span class=\"line\">fig_2 = plt.figure(figsize=(8, 8)) </span><br><span class=\"line\">plot_mode = plot.PlotMode.xy </span><br><span class=\"line\">ax = plot.prepare_axis(fig_2, plot_mode) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;, &#x27;reference&#x27;) </span><br><span class=\"line\">plot.traj_colormap(ax, traj_est, ape_metric.error, plot_mode, </span><br><span class=\"line\">                                   min_map=ape_statistics[&quot;min&quot;], </span><br><span class=\"line\">                                   max_map=ape_statistics[&quot;max&quot;], </span><br><span class=\"line\">                                   title=&quot;APE mapped onto trajectory&quot;) </span><br><span class=\"line\">plot_collection.add_figure(&quot;traj (error)&quot;, fig_2) </span><br><span class=\"line\"></span><br><span class=\"line\"># trajectory colormapped with speed </span><br><span class=\"line\">fig_3 = plt.figure(figsize=(8, 8)) </span><br><span class=\"line\">plot_mode = plot.PlotMode.xy </span><br><span class=\"line\">ax = plot.prepare_axis(fig_3, plot_mode) </span><br><span class=\"line\">speeds = [ </span><br><span class=\"line\">        trajectory.calc_speed(traj_est.positions_xyz[i], </span><br><span class=\"line\">                                traj_est.positions_xyz[i + 1], </span><br><span class=\"line\">                                traj_est.timestamps[i], traj_est.timestamps[i + 1]) </span><br><span class=\"line\">        for i in range(len(traj_est.positions_xyz) - 1) </span><br><span class=\"line\">] </span><br><span class=\"line\">speeds.append(0) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;, &#x27;reference&#x27;) </span><br><span class=\"line\">plot.traj_colormap(ax, traj_est, speeds, plot_mode, min_map=min(speeds), </span><br><span class=\"line\">                        max_map=max(speeds), title=&quot;speed mapped onto trajectory&quot;) </span><br><span class=\"line\">fig_3.axes.append(ax) </span><br><span class=\"line\">plot_collection.add_figure(&quot;traj (speed)&quot;, fig_3) </span><br><span class=\"line\"> </span><br><span class=\"line\">plot_collection.show()  </span><br></pre></td></tr></table></figure>\n\n<p>终端输出信息： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loading required evo modules </span><br><span class=\"line\">loading trajectories </span><br><span class=\"line\">registering and aligning trajectories </span><br><span class=\"line\">calculating APE </span><br><span class=\"line\">mean: 0.0074917768702161495 </span><br></pre></td></tr></table></figure>\n\n<p>计算并打印了MEAN信息 </p>\n<h2 id=\"附录：数据集以及-evo-使用例子\"><a href=\"#附录：数据集以及-evo-使用例子\" class=\"headerlink\" title=\"附录：数据集以及 evo 使用例子\"></a><strong>附录：数据集以及 evo 使用例子</strong></h2><h3 id=\"TUM数据集\"><a href=\"#TUM数据集\" class=\"headerlink\" title=\"TUM数据集\"></a><strong>TUM数据集</strong></h3><ul>\n<li><p>数据格式为 ： timestamp tx ty tz qx qy qz qw 每行8个元素， 结尾没有空格， 时间戳以秒为单位， 精确到小数点后9位 </p>\n<p><img src=\"/./media/GetImage22.png\"></p>\n</li>\n<li><p>evo_ape 计算轨迹绝对误差的例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> mkdir results </span><br><span class=\"line\">  </span><br><span class=\"line\"> # 计算轨迹绝对误差 evo_ape </span><br><span class=\"line\"> evo_ape tum fr2_desk_groundtruth.txt  fr2_desk_ORB.txt -va --plot --plot_mode xz --save_results results/ORB_fr2_desk.zi </span><br><span class=\"line\">  </span><br><span class=\"line\"># 分析多条曲线 evo_res </span><br><span class=\"line\">evo_res results/*.zip -p --save_table results/table.csv </span><br><span class=\"line\">  </span><br><span class=\"line\"># 绘制多条轨迹 evo_traj</span><br><span class=\"line\">evo_traj tum freiburg1_xyz-ORB_kf_mono.txt freiburg1_xyz-rgbdslam.txt  --ref=freiburg1_xyz-groundtruth.txt -va --plot --plot_mode xy </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"KITTI数据集\"><a href=\"#KITTI数据集\" class=\"headerlink\" title=\"KITTI数据集\"></a><strong>KITTI数据集</strong></h3><ul>\n<li><p>KITTI数据集格式： r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz 存储变换矩阵的前三行,每行12元素，空格隔开, 无时间戳 </p>\n<p><img src=\"/./media/GetImage23.png\"></p>\n</li>\n<li><p>evo_ape 计算轨迹绝对误差, evo_traj 绘制多条曲线轨迹 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir results </span><br><span class=\"line\">  </span><br><span class=\"line\"># 计算轨迹绝对误差 evo_ape </span><br><span class=\"line\">evo_ape kitti KITTI_00_gt.txt KITTI_00_ORB.txt -va --plot --plot_mode xz --save_results results/KITTI_00_ORB.zip </span><br><span class=\"line\">  </span><br><span class=\"line\"># 分析多条曲线 evo_res </span><br><span class=\"line\">evo_res results/*.zip -p --save_table results/table.csv </span><br><span class=\"line\">  </span><br><span class=\"line\"># 绘制多条轨迹 </span><br><span class=\"line\">cd test/data </span><br><span class=\"line\">evo_traj kitti KITTI_00_ORB.txt KITTI_00_SPTAM.txt --ref=KITTI_00_gt.txt -p --plot_mode=xz  </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"EUROC数据集\"><a href=\"#EUROC数据集\" class=\"headerlink\" title=\"EUROC数据集\"></a><strong>EUROC数据集</strong></h3><ul>\n<li><p>EUROC数据格式为：timestamp,px,py,pz,qw,qx,qy,qz,vx,vy,vz,bwx,bwy,bwz,bax,bay,baz 每行17个元素，逗号隔开，时间以纳秒为单位, 无小数</p>\n<p><img src=\"/./media/GetImage24.png\"></p>\n</li>\n<li><p>evo_ape 计算轨迹绝对误差 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir results </span><br><span class=\"line\"></span><br><span class=\"line\"> # 计算轨迹绝对误差 evo_ape </span><br><span class=\"line\"> evo_ape euroc V102_groundtruth.csv V102.txt -va --plot --plot_mode xy --save_results results/EUROC.zip </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"附录：相关文献\"><a href=\"#附录：相关文献\" class=\"headerlink\" title=\"附录：相关文献\"></a><strong>附录：相关文献</strong></h2><ul>\n<li>Z. Zhang, D. Scaramuzza. A Tutorial on Quantitative Trajectory Evaluation for Visual(-Inertial) Odometry. <em>IEEE&#x2F;RSJ International Conference on Intelligent Robots and Systems</em>, 7244-7251, 2018. 基本概念介绍教程，包括尺度、对齐等等 </li>\n<li>J. Sturm, N. Engelhard, F. Endres, W. Burgard, D. Cremers. A Benchmark for the Evaluation of RGB-D SLAM Systems. <em>IEEE International Conference on Robotics and Automation</em>, 573-580, 2012. 讲解绝对轨迹误差和相对轨迹误差的概念，以及计算 </li>\n<li>Least-Squares Estimation of Transformation Parameters Between Two Point Patterns, 讲解Umeyama轨迹对齐算法原理和最小二乘过程</li>\n</ul>\n<h3 id=\"参考教程\"><a href=\"#参考教程\" class=\"headerlink\" title=\"参考教程\"></a><a href=\"https://juejin.cn/post/7063041669725159461\">参考教程</a></h3>","site":{"data":{"link":[{"class_name":"��������","class_desc":"��Щ�ˣ���Щ��","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"���١�����ǿ�����־���"}]},{"class_name":"��վ","class_desc":"ֵ���Ƽ�����վ","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"��Ƶ��վ"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"�й�����罻����ƽ̨"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"�罻����ƽ̨"}]}]}},"cover":"/img/material-6.png","cover_type":"img","excerpt":"","more":"<h1 id=\"轨迹评估介绍与evo工具使用\"><a href=\"#轨迹评估介绍与evo工具使用\" class=\"headerlink\" title=\"轨迹评估介绍与evo工具使用\"></a>轨迹评估介绍与evo工具使用</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a><strong>介绍</strong></h2><p>本文介绍了轨迹评估的基本概念，包括轨迹对齐、尺度变换、绝对轨迹误差、相对轨迹误差以及计算方法、相关文献，以及evo轨迹评估工具的安装、使用举例、命令参数详解。 </p>\n<h2 id=\"第一部分：evo-介绍\"><a href=\"#第一部分：evo-介绍\" class=\"headerlink\" title=\"第一部分：evo 介绍\"></a><strong>第一部分：evo 介绍</strong></h2><ul>\n<li>evo是一款用于视觉里程计和SLAM问题的轨迹评估工具. 核心功能是能够绘制相机的轨迹, 或评估轨迹与真值之间的误差. </li>\n<li>它支持多种数据集的轨迹格式(TUM、KITTI、EuRoC MAV、ROS的bag)， 同时支持这些数据格式之间的相互转换。 </li>\n<li>灵活的输出&#x2F;绘图和导出选项(例如LaTeX绘图或Excel表格) </li>\n<li>强大的可配置的CLI, 可以涵盖多种场景使用 </li>\n<li>用于自定义扩展的模块化 </li>\n<li>github：<a href=\"https://link.juejin.cn/?target=https://github.com/MichaelGrupp/evo.git\">github.com&#x2F;MichaelGrup…</a> </li>\n<li>wiki： <a href=\"https://link.juejin.cn/?target=https://github.com/MichaelGrupp/evo/wiki\">github.com&#x2F;MichaelGrup…</a></li>\n</ul>\n<h2 id=\"第二部分：安装-evo-工具\"><a href=\"#第二部分：安装-evo-工具\" class=\"headerlink\" title=\"第二部分：安装 evo 工具\"></a><strong>第二部分：安装 evo 工具</strong></h2><h4 id=\"Step1：-python-3-8虚拟环境搭建\"><a href=\"#Step1：-python-3-8虚拟环境搭建\" class=\"headerlink\" title=\"Step1： python 3.8虚拟环境搭建\"></a><strong>Step1： python 3.8虚拟环境搭建</strong></h4><p><code>目的</code>：构筑一个纯净python 3.8环境（github上告知最新的evo版本支持Python 3.8+，若要支持Python2.7需使用 1.12.0及以下版本）。ubuntu18.04自带python 3.6和2.7，如果不使用python虚拟环境，还可以使用 update-alternatives 命令来切换OS所使用的Python版本，以下以使用Python虚拟环境为例（使用conda方式）： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 下载 anaconda 或 miniconda， 以下以 miniconda 为例 </span><br><span class=\"line\">wget https://repo.anaconda.com/archive/Anaconda3-2019.07-Linux-x86_64.sh </span><br><span class=\"line\">或 </span><br><span class=\"line\">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda2-py27_4.8.3-Linux-x86_64.sh </span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装 miniconda </span><br><span class=\"line\">bash iniconda2-py27_4.8.3-Linux-x86_64.sh </span><br><span class=\"line\">source ~/.bashrc </span><br><span class=\"line\"> </span><br><span class=\"line\"># 创建 python3.8 虚拟环境 </span><br><span class=\"line\">conda create -n slam_env python=3.8 </span><br><span class=\"line\"> </span><br><span class=\"line\"># 进入虚拟环境 </span><br><span class=\"line\">conda activate slam_env </span><br><span class=\"line\"> </span><br><span class=\"line\"># 查看python虚拟环境和其pip工具 （此时提示符已经切换为 slam_env ） </span><br><span class=\"line\">(slam_env) hadoop@ubuntu:~$ pip --version </span><br><span class=\"line\">pip 21.2.4 from /home/hadoop/miniconda2/envs/slam_env/lib/python3.8/site-packages/pip (python 3.8) </span><br><span class=\"line\"> </span><br><span class=\"line\"># 查看虚拟环境已安装的python模块 </span><br><span class=\"line\">(slam_env) hadoop@ubuntu:~$ conda list </span><br><span class=\"line\"># packages inenvironment at /home/hadoop/miniconda2/envs/slam_env:# </span><br><span class=\"line\"># Name                    Version                   Build  Channel </span><br><span class=\"line\">_libgcc_mutex             0.1                        main </span><br><span class=\"line\">_openmp_mutex             4.5                       1_gnu </span><br><span class=\"line\">ca-certificates           2021.10.26           h06a4308_2 </span><br><span class=\"line\">certifi                   2021.10.8        py38h06a4308_2 </span><br><span class=\"line\">ld_impl_linux-64          2.35.1               h7274673_9 </span><br><span class=\"line\">libffi                    3.3                  he6710b0_2 </span><br><span class=\"line\">(下略） </span><br><span class=\"line\"> </span><br><span class=\"line\"># 升级 pip 到最新版本 </span><br><span class=\"line\">(slam_env) hadoop@ubuntu:~$ pip install -U pip  </span><br><span class=\"line\"> </span><br><span class=\"line\"># pip 使用国内 pypi 镜像站（清华） </span><br><span class=\"line\">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple </span><br></pre></td></tr></table></figure>\n\n<p>至此，完成python虚拟环境搭建完毕，使用时使用 conda activate slam_env 即可进入python虚拟环境提示符。 </p>\n<h4 id=\"Step2：-使用pip安装-evo-到虚拟环境\"><a href=\"#Step2：-使用pip安装-evo-到虚拟环境\" class=\"headerlink\" title=\"Step2： 使用pip安装 evo 到虚拟环境\"></a><strong>Step2： 使用pip安装 evo 到虚拟环境</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 进入虚拟环境 </span><br><span class=\"line\">(base) hadoop@ubuntu:~$ conda activate slam_env </span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装evo工具 </span><br><span class=\"line\">(slam_env) hadoop@ubuntu:~$ pip install evo --upgrade --no-binary evo --user </span><br><span class=\"line\"> </span><br><span class=\"line\"># 查看evo工具 </span><br><span class=\"line\">ls ~/.local/bin </span><br><span class=\"line\"> </span><br><span class=\"line\"># 编辑 ~/.bashrc， 把 ~/.local/bin 目录加入到 PATH 环境变量 </span><br><span class=\"line\">echo &#x27;export PATH=~/.local/bin:$PATH&#x27; &gt;&gt; ~/.bashrc </span><br><span class=\"line\">source ~/.bashrc </span><br><span class=\"line\"> </span><br><span class=\"line\"># 确认evo工具可用 </span><br><span class=\"line\">evo_ape --help </span><br><span class=\"line\"> </span><br><span class=\"line\"># 安装tkinter，防止运行 evo 时报错 tkinter 找不到 </span><br><span class=\"line\">sudo apt install  python3-tk </span><br></pre></td></tr></table></figure>\n\n<p><strong>备注1: 安装过程会自动安装所依赖的科学计算库和绘图库如numpy、scipy、pandas、matplotlib、pillow等.</strong> </p>\n<h4 id=\"Step3：工具位置介绍\"><a href=\"#Step3：工具位置介绍\" class=\"headerlink\" title=\"Step3：工具位置介绍\"></a><strong>Step3：工具位置介绍</strong></h4><ul>\n<li><h5 id=\"安装好的-evo-的命令行工具在目录-local-bin-下\"><a href=\"#安装好的-evo-的命令行工具在目录-local-bin-下\" class=\"headerlink\" title=\"安装好的 evo 的命令行工具在目录 ~&#x2F;.local&#x2F;bin 下\"></a><strong>安装好的 evo 的命令行工具在目录 ~&#x2F;.local&#x2F;bin 下</strong></h5></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls ~/.local/bin </span><br><span class=\"line\">    activate-global-python-argcomplete  evo_traj    pygmentize </span><br><span class=\"line\">    evo                                 f2py        python-argcomplete-check-easy-install-script </span><br><span class=\"line\">    evo_ape                             f2py3       python-argcomplete-tcsh </span><br><span class=\"line\">    evo_config                          f2py3.8     register-python-argcomplete </span><br><span class=\"line\">    evo_fig                             fonttools   rosbags-convert </span><br><span class=\"line\">    evo_ipython                         natsort     ttx </span><br><span class=\"line\">    evo_res                             pyftmerge </span><br><span class=\"line\">    evo_rpe                             pyftsubset </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>轨迹误差评估方面</strong>：<ul>\n<li>evo_ape : 计算绝对位姿误差(absolute pose error)，用于整体评估整条轨迹的<code>全局一致性</code>； </li>\n<li>evo_rpe : 计算相对位姿误差(relative pose error)，用于评价轨迹局部的<code>准确性</code>。</li>\n</ul>\n</li>\n<li><strong>绘图方面</strong>：<ul>\n<li>evo_traj : 分析&#x2F;绘图&#x2F;导出一条或多条轨迹</li>\n</ul>\n</li>\n<li><strong>评估结果比较方面</strong>：<ul>\n<li>evo_res : 比较一个或多个结果文件, 结果文件来自 evo_ape 或 evp_rpe的输出</li>\n</ul>\n</li>\n<li><strong>其他</strong>： <ul>\n<li>evo_config : 对evo工具的全局设置</li>\n</ul>\n</li>\n<li><strong>需要注意, EUROC数据集、TUM数据集、KITTI数据集使用四元数的顺序是不一样的， 因此在使用 evo 命令时， 需要增加一个命令选项参数进行区分。</strong></li>\n</ul>\n<h2 id=\"第三部分：-基本概念简介\"><a href=\"#第三部分：-基本概念简介\" class=\"headerlink\" title=\"第三部分： 基本概念简介\"></a><strong>第三部分： 基本概念简介</strong></h2><p>在使用evo工具之前， 先介绍一些evo工具使用过程中会遇到的轨迹评估方面的基本概念，以便于更好的理解工具的输出信息和图表。 </p>\n<p>基本介绍信息如下所示。 </p>\n<h3 id=\"1-轨迹对齐\"><a href=\"#1-轨迹对齐\" class=\"headerlink\" title=\"1. 轨迹对齐\"></a><strong>1. 轨迹对齐</strong></h3><p>在定量轨迹评估过程时，如图所示，首先估计的轨迹（蓝色）要和真值（黑色）对齐，然后再利用特性的误差度量计算对气候的轨迹估计误差。 </p>\n<p><img src=\"/./media/GetImage6.png\"></p>\n<p>下图左图是对齐前，右图是对齐后； 其中灰色线为对应的状态 </p>\n<p><img src=\"/./media/GetImage7.png\"></p>\n<h3 id=\"2-尺度变换\"><a href=\"#2-尺度变换\" class=\"headerlink\" title=\"2. 尺度变换\"></a><strong>2. 尺度变换</strong></h3><p><strong>尺度歧义性</strong>？ </p>\n<p>根据单目相机相机测量模型可知其尺度歧义性，如图所示，相机将3D点（红色×）投影到成像平面上的2D点（黑色○）。对于单目相机，相同方向但不同距离的3D点（灰色x）投影到相同的2D点，从而导致尺度歧义性。 </p>\n<p><strong>尺度变换</strong>： 相当于添加一个恒定的尺度变换 TsT_sTs到第二个相机，消除该歧义性；</p>\n<p> <img src=\"/./media/GetImage8.png\"></p>\n<h3 id=\"3-绝对轨迹误差和相对轨迹误差\"><a href=\"#3-绝对轨迹误差和相对轨迹误差\" class=\"headerlink\" title=\"3. 绝对轨迹误差和相对轨迹误差\"></a><strong>3. 绝对轨迹误差和相对轨迹误差</strong></h3><ul>\n<li>绝对轨迹误差计算的每一个点对（待评估轨迹的点与真值轨迹的点）的绝对值误差。 </li>\n<li>相对轨迹误差计算的是，针对两条轨迹，分别计算第 k时刻和 k+Δ时刻的误差，然后这两个误差间再计算绝对值误差。</li>\n</ul>\n<p><img src=\"/./media/GetImage9.png\"></p>\n<h3 id=\"4-补充\"><a href=\"#4-补充\" class=\"headerlink\" title=\"4. 补充\"></a><strong>4. 补充</strong></h3><p>可以在相关文献获取更加详细的信息: A Tutorial on Quantitative Trajectory Evaluation for Visual(-Inertial) Odometry。 </p>\n<h2 id=\"第四部分：evo初体验\"><a href=\"#第四部分：evo初体验\" class=\"headerlink\" title=\"第四部分：evo初体验\"></a><strong>第四部分：evo初体验</strong></h2><h3 id=\"1-evo-traj-体验\"><a href=\"#1-evo-traj-体验\" class=\"headerlink\" title=\"1.evo_traj 体验\"></a><strong>1.evo_traj 体验</strong></h3><ul>\n<li><p>介绍：evo_traj 可以分析、绘制、导出一个或多个轨迹；可以打开任意多个轨迹，查看统计信息， 还可以将轨迹转换为其他格式； </p>\n</li>\n<li><p>体验</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># evo_traj 执行，以KITTI_00_gt为参考，绘制 KITTI_00_ORB  KITTI_00_SPTAMcd evo/test/data </span><br><span class=\"line\">evo_traj kitti KITTI_00_ORB.txt KITTI_00_SPTAM.txt --ref=KITTI_00_gt.txt -p --plot_mode=xz </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>出现如下的图示 </p>\n<p><img src=\"/./media/GetImage3.png\"></p>\n<p>注：虚线为参考值；由于参数设置了xz，因此只显示轨迹在xz平面上投影；坐标表示活动轨迹范围； </p>\n<p><img src=\"/./media/GetImage4.png\"></p>\n<p>注： 以起始点作为基准点，针对每个pose点（横），按x&#x2F;y&#x2F;z三个方向的分量，描述其距离原点距离（纵）</p>\n</li>\n<li><p>本文后面章节会详细讲解 evo_traj 的每一个命令参数。</p>\n</li>\n</ul>\n<h3 id=\"2-evo-ape-体验-绝对轨迹误差计算方法\"><a href=\"#2-evo-ape-体验-绝对轨迹误差计算方法\" class=\"headerlink\" title=\"2.evo_ape 体验 + 绝对轨迹误差计算方法\"></a><strong>2.evo_ape 体验 + 绝对轨迹误差计算方法</strong></h3><ul>\n<li>介绍：evo_ape 可以评估轨迹绝对位姿误差(absolute pose error) </li>\n<li>绝对位姿误差常被用作比较估计轨迹和参考估计并计算整个轨迹误差的统计数据， 适用于测试轨迹的全局一致性。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建存放结果的目录 </span><br><span class=\"line\">mkdir results </span><br><span class=\"line\">evo_ape kitti KITTI_00_gt.txt KITTI_00_SPTAM.txt -vas  --plot --plot_mode xz --save_results results/SPTAM_APE.zip </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>出现如下图示效果</p>\n<ul>\n<li><p>绝对轨迹误差信息如下图：</p>\n<p><img src=\"/./media/GetImage10.png\"></p>\n<p>注：针对所有位姿点描述绝对误差大小，并与均方根误差、中位值、均值、标准差等直观比较；std覆盖区域为 [mean−std, mean+std], 反应组内个体间离散程度； </p>\n<p>注：默认情况下计算的是ATE(absolute trajectory error)绝对轨迹误差。终端输出 Calculating APE for translation part pose relation… 表示计算的是平移误差；可以使用 -r full 同时计算平移+旋转误差； </p>\n</li>\n<li><p>轨迹直观误差信息如下图</p>\n<p><img src=\"/./media/GetImage11.png\"></p>\n<p>注： 针对整个轨迹，使用颜色显示偏差的大小，按蓝-绿-红渐变色偏差依次变大；放大后可更清楚的查看局部轨迹差；<br>本文后面章节会详细讲解 evo_ape 的每一个命令参数。</p>\n</li>\n</ul>\n</li>\n<li><p>Umeyama算法</p>\n<p>Umeyama算法用于做点云匹配对齐，因为点集合之间的对应关系已知，它可以计算出两组点云数据间的旋转+平移变换矩阵和相似变换矩阵；<br>原理就是通过点对之间距离平方和的最小二乘误差计算出T，和ICP的损失函数是类似的。 </p>\n<p><img src=\"/./media/GetImage12.png\"></p>\n<p>最后计算得到:</p>\n<p><img src=\"/./media/GetImage13.png\"></p>\n<p>此外， Eigen 库也封装了函数 Eigen::umeyama（），可直接传入两个点云集合调用求解. </p>\n<p>SE(3)与Sim(3)，对于双目SLAM和RGB-D SLAM，尺度统一，因此需要通过最小二乘计算估计位姿到真实位姿的转换矩阵 S∈SE(3); </p>\n<p>对于单目相机，尺度不确定性，因此需要计算从估计位姿到真实位姿的相似变换矩阵 S∈Sim(3)。 默认为SE(3)，加 -s 参数使用 Sim(3); </p>\n<p>补充说明：可以通过Umeyama的文献获取更进一步的信息： Least-Squares Estimation of Transformation Parameters Between Two Point Patterns</p>\n</li>\n</ul>\n<p>注：终端输出表示的是用 Umeyama 计算得到的相似矩阵选装、平移和尺度变换的结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rotation of alignment: </span><br><span class=\"line\"> [[ 0.99972834 -0.01321112  0.01920198] </span><br><span class=\"line\">[ 0.01357949  0.99972379 -0.01918176] </span><br><span class=\"line\">  [-0.01894327  0.0194373   0.9996316 ]] </span><br><span class=\"line\"> Translation of alignment: </span><br><span class=\"line\"> [1.18538132 2.10165699 2.31548455] </span><br><span class=\"line\"> Scale correction: 1.0045265524039808 </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>绝对轨迹误差（ATE）计算公式 </p>\n<p>为什要计算绝对轨迹误差？ 绝对轨迹误差实际上在计算什么？<br>对于视觉SLAM系统， 估计轨迹的全局一致性是重要度量，如何评估全局一致性？ 就是通过比较被估计值和真值轨迹之间的绝对距离来得到。<br>首先先将两条轨迹对齐。 记P1:n代表待估计的轨迹，Q1:n代表真值轨迹， 则时间戳 iii处的绝对估计误差为： </p>\n<p><img src=\"/./media/GetImage14.png\"></p>\n<p>可以这么理解公式：对 A&#x3D;[R∣t]∈SE(3), 有A−1A&#x3D;[I∣0]； 那么这里的 SPi 是估计的 Qi， 计算 Qi−1SPi可以直观得到两条轨迹的差值。<br>则针对所有时刻定义平移分量的 均方根误差(RMSE)、和方差（SSE)：</p>\n<p><img src=\"/./media/GetImage15.png\"></p>\n<p>补充说明：可以通过文献获取更进一步的信息： A Benchmark for the Evaluation of RGB-D SLAM Systems</p>\n</li>\n</ul>\n<h3 id=\"3-evo-rpe-体验-相对轨迹误差计算方法\"><a href=\"#3-evo-rpe-体验-相对轨迹误差计算方法\" class=\"headerlink\" title=\"3.evo_rpe 体验 + 相对轨迹误差计算方法\"></a><strong>3.evo_rpe 体验 + 相对轨迹误差计算方法</strong></h3><ul>\n<li><p>介绍： evo_rpe 可以用来计算相对轨迹误差（relative pose error） </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_rpe kitti KITTI_00_gt.txt KITTI_00_SPTAM.txt  -r full -va --plot --plot_mode xyz --save_results results/SPTAM_RPE.zip </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-r full 指定对平移和旋转的误差均进行计算。 </li>\n<li>-as 采用SE(3) Umeyama对齐，处理平移和旋转和尺度</li>\n</ul>\n</li>\n<li><p>终端输出的轨迹对齐的旋转矩阵和平移矩阵， 以及统计信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-------------------------------------------------------------------------------- </span><br><span class=\"line\">  Aligning using Umeyama&#x27;s method... (with scale correction) </span><br><span class=\"line\">  Rotation of alignment: </span><br><span class=\"line\">  [[ 0.99972834 -0.01321112  0.01920198] </span><br><span class=\"line\">   [ 0.01357949  0.99972379 -0.01918176] </span><br><span class=\"line\">   [-0.01894327  0.0194373   0.9996316 ]] </span><br><span class=\"line\">  Translation of alignment: </span><br><span class=\"line\">  [1.18538132 2.10165699 2.31548455] </span><br><span class=\"line\">  Scale correction: 1.0045265524039808 </span><br><span class=\"line\">  -------------------------------------------------------------------------------- </span><br><span class=\"line\">  Found 4540 pairs with delta 1 (frames) among 4541 poses using consecutive pairs. </span><br><span class=\"line\">  Compared 4540 relative pose pairs, delta = 1 (frames) with consecutive pairs. </span><br><span class=\"line\">  Calculating RPE for full transformation pose relation... </span><br><span class=\"line\">  -------------------------------------------------------------------------------- </span><br><span class=\"line\">  RPE w.r.t. full transformation (unit-less) </span><br><span class=\"line\">  for delta = 1 (frames) using consecutive pairs </span><br><span class=\"line\">  (with Sim(3) Umeyama alignment) </span><br><span class=\"line\"> </span><br><span class=\"line\">        max      1.136092 </span><br><span class=\"line\">        mean      0.024773 </span><br><span class=\"line\">        median      0.020434 </span><br><span class=\"line\">        min      0.001043 </span><br><span class=\"line\">        rmse      0.035773 </span><br><span class=\"line\">        sse      5.809960 </span><br><span class=\"line\">        std      0.025807 </span><br><span class=\"line\">  -------------------------------------------------------------------------------- </span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>相对位姿误差(RPE) 计算公式</strong></p>\n<p>为什要计算相对轨迹误差？ 相对轨迹误差实际上在计算什么？<br>相对位姿误差测量了轨迹在一个固定的时间区间 Δ\\DeltaΔ内的局部准确度。 因此，相对位姿误差对应轨迹的漂移。<br>先定义时间步 iii处的相对位姿误差如下，可知相对位姿误差计算的是相隔固定时间差 Δ 两帧位姿差：</p>\n<p><img src=\"/./media/GetImage16.png\"></p>\n<p>根据上式，对于一个有n个相机位姿的序列中，我们获得 m&#x3D;n−Δm&#x3D;n-\\Deltam&#x3D;n−Δ个独立的沿着序列的相对位姿误差。则可以定义平移分量的的所有时刻的均方根误差RMSE: </p>\n<p><img src=\"/./media/GetImage17.png\"></p>\n<p>可以这么理解公式：对 A&#x3D;[R∣t]∈SE(3), 有 A−1A&#x3D;[I∣0].<br>上式中的 (Pi−1Pi+Δ)(P_i^{-1}P_{i+\\Delta}) (Pi−1Pi+Δ)是估计的 Qi−1Qi+ΔQ_i^{-1}Q_{i+\\Delta}Qi−1Qi+Δ，计算 (Qi−1Qi+Δ)−1(Pi−1Pi+Δ)(Q_i^{-1}Q_{i+\\Delta})^{-1} (P_i^{-1}P_{i+\\Delta})(Qi−1Qi+Δ)−1(Pi−1Pi+Δ)可以直观的得到两条轨迹的差值；<br>此处计算的是 EiE_iEi的平移分量，旋转误差也可以被估计，但一般平移误差就足够了（因为旋转误差会随着平移误差的上升而增加）。时间参数 Δ\\DeltaΔ对于帧速较快的相同，如30Hz的传感器，可选择 Δ&#x3D;30\\Delta&#x3D;30Δ&#x3D;30以得到每秒的漂移。<br>补充说明：可以通过文献获取更进一步的信息： A Benchmark for the Evaluation of RGB-D SLAM Systems</p>\n</li>\n</ul>\n<h3 id=\"4-evo-res-体验\"><a href=\"#4-evo-res-体验\" class=\"headerlink\" title=\"4.evo_res 体验\"></a><strong>4.evo_res 体验</strong></h3><ul>\n<li><p>介绍： evo_res 可以用来比较多个结果文件， 打印统计信息、绘图、保存结果到表格等。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_res results/*.zip -p --save_table results/table.csv </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如下图示 </p>\n<p>绝对轨迹误差对比：</p>\n<p><img src=\"/./media/GetImage18.png\"></p>\n</li>\n</ul>\n<h2 id=\"第五部分：-evo-命令参数详解\"><a href=\"#第五部分：-evo-命令参数详解\" class=\"headerlink\" title=\"第五部分： evo 命令参数详解\"></a><strong>第五部分： evo 命令参数详解</strong></h2><h3 id=\"1-evo-ape-命令详解\"><a href=\"#1-evo-ape-命令详解\" class=\"headerlink\" title=\"1.evo_ape 命令详解\"></a><strong>1.evo_ape 命令详解</strong></h3><ul>\n<li><p>用途：计算绝对位姿误差 </p>\n</li>\n<li><p>绝对位姿误差常被用作比较估计轨迹和参考估计并计算整个轨迹误差的统计数据， 适用于测试轨迹的全局一致性。 </p>\n</li>\n<li><p>命令语法： evo_ape 数据格式 参考轨迹 估计轨迹 可选项 </p>\n<ul>\n<li>数据格式： euroc, tum, kitti 等</li>\n</ul>\n</li>\n<li><p>常用命令示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_ape euroc MH_data3.csv pose_graphloop.txt -r full -va --plot --plot_mode xyz --save_plot ./VINSplot --save_results ./VINS.zip </span><br></pre></td></tr></table></figure>\n\n<p>命令含义： 考虑平移和旋转部分误差的ape， 进行平移和旋转对齐，以详细模式显示，画图并保存计算结果。</p>\n</li>\n<li><p>参数说明： </p>\n<ul>\n<li>-r : 即 -pose_relation， 此参数可选, 若不添加此参数，则默认为 trans_part。 有如下可选项：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>可选项</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>full</td>\n<td>表示同时考虑旋转和平移误差得到的ape,无单位（unit-less）</td>\n</tr>\n<tr>\n<td>trans_part</td>\n<td>考虑平移部分得到的ape，单位为m</td>\n</tr>\n<tr>\n<td>rot_part</td>\n<td>考虑旋转部分得到的ape，无单位（unit-less）</td>\n</tr>\n<tr>\n<td>angle_deg</td>\n<td>考虑旋转角得到的ape,单位°（deg）</td>\n</tr>\n<tr>\n<td>angle_rad</td>\n<td>考虑旋转角得到的ape,单位弧度（rad）</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>-v : 表示 verbose mode， 详细模式 </p>\n</li>\n<li><p>-a ：即 -align, 表示采用 SE(3) Umeyama 对齐。 除了 -a 外，其他可选项如下</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-a&#x2F;–align</td>\n<td>采用SE(3) Umeyama对齐，只处理平移和旋转</td>\n</tr>\n<tr>\n<td>-as&#x2F;–align –correct_scale</td>\n<td>采用Sim(3) Umeyama对齐，同时处理平移旋转和尺度</td>\n</tr>\n<tr>\n<td>-s&#x2F;–correct_scale</td>\n<td>仅对齐尺度</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>-plot ： 表示画图 </p>\n<ul>\n<li>–plot_mode : 选择画图模式， 二维图或三维图，默认为 xyz， 可选项有[xy, xz, yz, zx, zy, xyz]. </li>\n<li>–save_plot : 后跟保存图像的文件路径， 如 .&#x2F;VINSplot. 保存文件的类型， 可以通过 evo_config 命令设置， 常见的可以保存为 png, pdf等</li>\n</ul>\n</li>\n<li><p>-save_results : 后跟存储结果的压缩文件路径， 如 .&#x2F;VINS.zip， 是一个压缩文件。 </p>\n</li>\n<li><p>–help: 显示帮助信息， 格式为： evo_ape 格式 –help , 如 evo_ape euroc –help</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-evo-rpe-命令详解\"><a href=\"#2-evo-rpe-命令详解\" class=\"headerlink\" title=\"2.evo_rpe 命令详解\"></a><strong>2.evo_rpe 命令详解</strong></h3><ul>\n<li><p>用途：计算相对位子误差 </p>\n</li>\n<li><p>相对位姿误差不进行绝对位姿的比较，相对位姿误差比较运动（姿态增量）。相对位姿误差可以给出局部精度，例如slam系统每米的平移或者旋转漂移量。 </p>\n</li>\n<li><p>命令语法： evo_ape 数据格式 参考轨迹 估计轨迹 可选项 </p>\n<ul>\n<li>数据格式： euroc, tum, kitti 等</li>\n</ul>\n</li>\n<li><p>常用命令示例： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_rpe euroc MH_data3.csv pose_graphloop.txt -r angle_deg \\ </span><br><span class=\"line\">  --delta 1 --delta_unit m -va --plot --plot_mode xyz \\ </span><br><span class=\"line\">  --save_plot ./VINSplot --save_results ./VINS.zip </span><br></pre></td></tr></table></figure>\n\n<p>命令含义： 求每米的旋转角的rpe，以详细模式显示，画图并保存计算结果。</p>\n</li>\n<li><p>参数说明： </p>\n<ul>\n<li>-r : 即 -pose_relation， 此参数可选, 若不添加此参数，则默认为 trans_part。具体参数选项内容 同 evo_ape，具体项可参见前一章节说明.</li>\n<li>-d&#x2F;–delta : 表示相对位姿之间的增量，后跟数值，默认为1， 然后通过 -u&#x2F;–delta_unit 指定单位； </li>\n<li>-u&#x2F;–delta_unit : 表示增量的单位，可选参数为 f, d, r, m 分别表示 frames, deg, rad, meters 。默认为f。 当此参数为 f 时，则 -d&#x2F;–delta必须为整型， 其余情况可谓浮点型；-d&#x2F;–delta 和 -u&#x2F;–delta_unit 联合起来表示衡量局部精度的单位，如 每米、每弧度、每百米等。  </li>\n<li>-v –plot –plot_mode xyz –save_results results&#x2F;VINS.zip –save_plot ： 这些参数同 evo_ape， 具体可参见前一章节说明。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-evo-traj-命令详解\"><a href=\"#3-evo-traj-命令详解\" class=\"headerlink\" title=\"3.evo_traj 命令详解\"></a><strong>3.evo_traj 命令详解</strong></h3><ul>\n<li><p>用途： 轨迹管理工具 </p>\n</li>\n<li><p>可以打开任意多个轨迹，查看统计信息， 还可以将轨迹转换为其他格式 </p>\n</li>\n<li><p>常用命令示例1： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_traj euroc MH_data1.csv MH_data3.csv -v --full_check </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明： </p>\n<ul>\n<li>-v : 以详细模式显示 </li>\n<li>–full_check : 对轨迹进行检查</li>\n</ul>\n</li>\n<li><p>常用命令示例2：对轨迹进行对齐， 此时需要利用 –ref 指定参考轨迹 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_traj bag ROS_example.bag ORB-SLAM S-PTAM --ref groundtruth -s </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明：  </p>\n</li>\n<li><p>-a ：即 -align, 轨迹对齐的选项参数， 如 -a&#x2F;–align, -s&#x2F;–correct_scale, –n_to_align 等等，与evo_ape 相同，详情可参见前一章节 evo_ape 中轨迹说明中的参数解释。 </p>\n</li>\n<li><p>常用命令示例3： 转换格式 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_traj euroc data.csv --save_as_tum  </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明： </p>\n</li>\n<li><p>–save_as_tum : 指定目标数据集格式为 tum </p>\n</li>\n<li><p>数据集格式转换表如下：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>源数据集</strong></th>\n<th><strong>ROS Bag</strong></th>\n<th><strong>KITTI</strong></th>\n<th><strong>TUM</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>–save_as_bag</td>\n<td>–save_as_kitti</td>\n<td>–ave_as_tum</td>\n</tr>\n<tr>\n<td>bag</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>euroc</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>kitti</td>\n<td>no(no timestamps)</td>\n<td>yes</td>\n<td>no(no timestamps)</td>\n</tr>\n<tr>\n<td>tum</td>\n<td>yes</td>\n<td>yes</td>\n<td>yes</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-轨迹的对齐和尺度缩放\"><a href=\"#4-轨迹的对齐和尺度缩放\" class=\"headerlink\" title=\"4.轨迹的对齐和尺度缩放\"></a><strong>4.轨迹的对齐和尺度缩放</strong></h3><p>单目相机会存在尺度的不确定性，evo_traj 支持使用-s（或 –correct_scale）参数进行Sim(3)上的对齐（旋转、平移与尺度缩放）。<br>例子1： 下图从左到右三幅图中两条曲线的结果分别是：未对齐、SE(3)对齐、尺度缩放 </p>\n<p><img src=\"/./media/GetImage19.png\"></p>\n<p>例子2： 不同的对齐命令效果图，分别是未对齐、SE(3)对齐、Sim(3)对齐、尺度缩放 </p>\n<p><img src=\"/./media/GetImage20.png\"></p>\n<h3 id=\"5-evo-res-命令详解\"><a href=\"#5-evo-res-命令详解\" class=\"headerlink\" title=\"5.evo_res 命令详解\"></a><strong>5.evo_res 命令详解</strong></h3><ul>\n<li><p>用途：结果比较 </p>\n</li>\n<li><p>evo_ape&#x2F;evo_rpe中将结果保存为.zip文件后，可以利用evo_res对不同的结果进行比较 </p>\n</li>\n<li><p>常用命令示例1： evo_ape得到MH3_1.zip和MH3_2.zip两个文件后，对这两个结果进行比较 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evo_res MH3.zip MH3_2.zip -v </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数说明： </p>\n<ul>\n<li>-v : 详细模式展示信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-evo-config-命令详解\"><a href=\"#6-evo-config-命令详解\" class=\"headerlink\" title=\"6.evo_config 命令详解\"></a><strong>6.evo_config 命令详解</strong></h3><ul>\n<li>用途：全局设置和配置文件的操作</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>evo_config show</td>\n<td>查看设计文件中的参数配置</td>\n</tr>\n<tr>\n<td>evo_config set</td>\n<td>进行参数设置</td>\n</tr>\n<tr>\n<td>evo_config generate</td>\n<td>导出配置到指定的json文件</td>\n</tr>\n<tr>\n<td>evo_config reset</td>\n<td>将参数还原到默认值</td>\n</tr>\n<tr>\n<td>evo_config show|set|generate|reset help</td>\n<td>将参数还原到默认值</td>\n</tr>\n</tbody></table>\n<ul>\n<li>evo_config set 命令最为常用，下面是几个常用的参数，其含义以及可选项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>参数</strong></th>\n<th><strong>含义</strong></th>\n<th><strong>可选项</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>plot_export_format</td>\n<td>输出图像时图像存储格式</td>\n<td>常用png,pdf等</td>\n</tr>\n<tr>\n<td>plot_linewidth</td>\n<td>作图时线的宽度</td>\n<td>matplotlib支持的宽度，默认1.5</td>\n</tr>\n<tr>\n<td>plot_reference_color</td>\n<td>图像中参考轨迹的颜色</td>\n<td>black,red,green等</td>\n</tr>\n<tr>\n<td>plot_reference_linestyle</td>\n<td>参考轨迹的线型</td>\n<td>matplotlib支持的线型，默认–</td>\n</tr>\n<tr>\n<td>plot_seaborn_style</td>\n<td>图像背景和网格</td>\n<td>whitegrid,darkgrid,white,dark</td>\n</tr>\n<tr>\n<td>plot_split</td>\n<td>是否分开显示&#x2F;存储图像</td>\n<td>false&#x2F;true</td>\n</tr>\n<tr>\n<td>plot_figsize</td>\n<td>画图的图像大小</td>\n<td>默认宽高均为6，可使用其他值</td>\n</tr>\n<tr>\n<td>table_export_format</td>\n<td>表格数据输出格式</td>\n<td>常用 csv,excel,latex,json</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>命令示例 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将画图背景更改成白色网格 </span><br><span class=\"line\">evo_config set plot_seaborn_style whitegrid  </span><br><span class=\"line\"> </span><br><span class=\"line\"># 将字体改为衬线型并调为1.2倍大小 </span><br><span class=\"line\">evo_config set plot_fontfamily serif plot_fontscale 1.2  </span><br><span class=\"line\"> </span><br><span class=\"line\"># 将画图所使用的线型改为  </span><br><span class=\"line\">evo_config set plot_reference_linestyle -  </span><br><span class=\"line\"> </span><br><span class=\"line\"># 将所画图的图像大小调整为10 9（宽 高） </span><br><span class=\"line\">evo_config set plot_figsize 10 9  </span><br><span class=\"line\"> </span><br><span class=\"line\"># 将参数还原到默认值 </span><br><span class=\"line\">evo_config reset       </span><br><span class=\"line\"> </span><br><span class=\"line\"># 导出配置 </span><br><span class=\"line\">evo_config generate --pose_relation angle_deg --delta 1 --delta_unit m --verbose --plot --out rpe_config.json </span><br><span class=\"line\"> </span><br><span class=\"line\"># 导入配置 </span><br><span class=\"line\">evo_rpe euroc MH_data3.csv pose_graphloop.txt -c rpe_config.json</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"7-evo-其他常用命令\"><a href=\"#7-evo-其他常用命令\" class=\"headerlink\" title=\"7.evo 其他常用命令\"></a><strong>7.evo 其他常用命令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>命令</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>evo pkg   –version</td>\n<td>查看evo版本</td>\n</tr>\n<tr>\n<td>evo pkg   –info</td>\n<td>查看evo的简要介绍和描述</td>\n</tr>\n<tr>\n<td>evo pkg   –pyversion</td>\n<td>查看python版本</td>\n</tr>\n<tr>\n<td>evo pkg   –license</td>\n<td>查看许可证</td>\n</tr>\n<tr>\n<td>evo pkg   –location</td>\n<td>查看evo安装路径</td>\n</tr>\n<tr>\n<td>evo pkg   –logfile</td>\n<td>查看日志文件路径</td>\n</tr>\n<tr>\n<td>evo pkg   –open_log</td>\n<td>打开日志文件</td>\n</tr>\n<tr>\n<td>evo pkg   –clear_log</td>\n<td>清除日志文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"第六部分：-在程序中调用-evo-函数\"><a href=\"#第六部分：-在程序中调用-evo-函数\" class=\"headerlink\" title=\"第六部分： 在程序中调用 evo 函数\"></a><strong>第六部分： 在程序中调用 evo 函数</strong></h2><p>除了在命令行中使用外， 还可以在程序中使用 evo 能力。 </p>\n<h3 id=\"例子1：轨迹对齐\"><a href=\"#例子1：轨迹对齐\" class=\"headerlink\" title=\"例子1：轨迹对齐\"></a><strong>例子1：轨迹对齐</strong></h3><p>调用 evo 函数实现不同对齐方式的轨迹结果绘图并比较 </p>\n<p>alignment_demo.py: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot; </span><br><span class=\"line\">trajectory alignment functions </span><br><span class=\"line\">&quot;&quot;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">import copy </span><br><span class=\"line\">import logging </span><br><span class=\"line\">import sys </span><br><span class=\"line\"></span><br><span class=\"line\">import evo.core.lie_algebra as lie </span><br><span class=\"line\">from evo.core import trajectory </span><br><span class=\"line\">from evo.tools import plot, file_interface, log </span><br><span class=\"line\"></span><br><span class=\"line\">import numpy as np </span><br><span class=\"line\">import matplotlib.pyplot as plt </span><br><span class=\"line\"></span><br><span class=\"line\">logger = logging.getLogger(&quot;evo&quot;) </span><br><span class=\"line\">log.configure_logging(verbose=True) </span><br><span class=\"line\"></span><br><span class=\"line\"># 读取参考轨迹数据和待评估轨迹数据 </span><br><span class=\"line\">traj_ref = file_interface.read_kitti_poses_file(&quot;./data/KITTI_00_gt.txt&quot;) </span><br><span class=\"line\">traj_est = file_interface.read_kitti_poses_file( &quot;./data/KITTI_00_ORB.txt&quot;) </span><br><span class=\"line\"></span><br><span class=\"line\"># add artificial Sim(3) transformation </span><br><span class=\"line\">traj_est.transform(lie.se3(np.eye(3), np.array([0, 0, 0]))) </span><br><span class=\"line\"></span><br><span class=\"line\"># 尺寸缩放 </span><br><span class=\"line\">traj_est.scale(0.5) </span><br><span class=\"line\"></span><br><span class=\"line\">logger.info(&quot;\\nUmeyama alignment without scaling&quot;) </span><br><span class=\"line\">traj_est_aligned = copy.deepcopy(traj_est) </span><br><span class=\"line\"></span><br><span class=\"line\"># 对齐轨迹（但不做尺寸缩放） </span><br><span class=\"line\">traj_est_aligned.align(traj_ref) </span><br><span class=\"line\"></span><br><span class=\"line\">logger.info(&quot;\\nUmeyama alignment with scaling&quot;) </span><br><span class=\"line\">traj_est_aligned_scaled = copy.deepcopy(traj_est) </span><br><span class=\"line\"># 对齐轨迹（同时尺寸缩放） </span><br><span class=\"line\">traj_est_aligned_scaled.align(traj_ref, correct_scale=True) </span><br><span class=\"line\"></span><br><span class=\"line\">logger.info(&quot;\\nUmeyama alignment with scaling only&quot;) </span><br><span class=\"line\">traj_est_aligned_only_scaled = copy.deepcopy(traj_est) </span><br><span class=\"line\"># 对齐轨迹（仅仅尺寸缩放） </span><br><span class=\"line\">traj_est_aligned_only_scaled.align(traj_ref, correct_only_scale=True) </span><br><span class=\"line\"></span><br><span class=\"line\"># 以下部分为绘图部分 </span><br><span class=\"line\">fig = plt.figure(figsize=(8, 8)) </span><br><span class=\"line\">plot_mode = plot.PlotMode.xz </span><br><span class=\"line\"></span><br><span class=\"line\">ax = plot.prepare_axis(fig, plot_mode, subplot_arg=221) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_est, &#x27;-&#x27;, &#x27;blue&#x27;) </span><br><span class=\"line\">fig.axes.append(ax) </span><br><span class=\"line\">plt.title(&#x27;not aligned&#x27;) </span><br><span class=\"line\"></span><br><span class=\"line\">ax = plot.prepare_axis(fig, plot_mode, subplot_arg=222) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_est_aligned, &#x27;-&#x27;, &#x27;blue&#x27;) </span><br><span class=\"line\">fig.axes.append(ax) </span><br><span class=\"line\">plt.title(&#x27;$\\mathrm&#123;SE&#125;(3)$ alignment&#x27;) </span><br><span class=\"line\"></span><br><span class=\"line\">ax = plot.prepare_axis(fig, plot_mode, subplot_arg=223) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_est_aligned_scaled, &#x27;-&#x27;, &#x27;blue&#x27;) </span><br><span class=\"line\">fig.axes.append(ax) </span><br><span class=\"line\">plt.title(&#x27;$\\mathrm&#123;Sim&#125;(3)$ alignment&#x27;) </span><br><span class=\"line\"></span><br><span class=\"line\">ax = plot.prepare_axis(fig, plot_mode, subplot_arg=224) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_est_aligned_only_scaled, &#x27;-&#x27;, &#x27;blue&#x27;) </span><br><span class=\"line\">fig.axes.append(ax) </span><br><span class=\"line\">plt.title(&#x27;only scaled&#x27;) </span><br><span class=\"line\"></span><br><span class=\"line\">fig.tight_layout() </span><br><span class=\"line\">plt.show() </span><br></pre></td></tr></table></figure>\n\n<p>执行后如图所示：</p>\n<p><img src=\"/./media/GetImage21.png\"></p>\n<h3 id=\"例子2：计算APE\"><a href=\"#例子2：计算APE\" class=\"headerlink\" title=\"例子2：计算APE\"></a><strong>例子2：计算APE</strong></h3><p>调用 evo 函数计算APE和统计值MEAN </p>\n<p>calc_ape.py: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot; </span><br><span class=\"line\">caculate ape of two trajectories </span><br><span class=\"line\">&quot;&quot;&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;loading required evo modules&quot;) </span><br><span class=\"line\">from evo.core import trajectory, sync, metrics </span><br><span class=\"line\">from evo.tools import file_interface </span><br><span class=\"line\"></span><br><span class=\"line\"># 读取参考轨迹数据和待评估轨迹数据 </span><br><span class=\"line\">print(&quot;loading trajectories&quot;) </span><br><span class=\"line\">traj_ref = file_interface.read_tum_trajectory_file( &quot;./data/fr2_desk_groundtruth.txt&quot;) </span><br><span class=\"line\">traj_est = file_interface.read_tum_trajectory_file( &quot;./data/fr2_desk_ORB.txt&quot;) </span><br><span class=\"line\"></span><br><span class=\"line\"># 调用时间同步算法进行同步，主要是根据 timestamps进行同步 </span><br><span class=\"line\"># 具体实现参考 evo/core/syn.py 源码 </span><br><span class=\"line\">print(&quot;registering and aligning trajectories&quot;) </span><br><span class=\"line\">traj_ref, traj_est = sync.associate_trajectories(traj_ref, traj_est) </span><br><span class=\"line\"></span><br><span class=\"line\"># 对齐轨迹（不带尺度缩放） </span><br><span class=\"line\">traj_est.align(traj_ref, correct_scale=False) </span><br><span class=\"line\"></span><br><span class=\"line\"># 计算APE </span><br><span class=\"line\">print(&quot;calculating APE&quot;) </span><br><span class=\"line\">data = (traj_ref, traj_est)     </span><br><span class=\"line\"></span><br><span class=\"line\"># 仅针对平移部分计算 </span><br><span class=\"line\">ape_metric = metrics.APE(metrics.PoseRelation.translation_part) </span><br><span class=\"line\"></span><br><span class=\"line\"># 对SE(3)的位姿点集合计算APE </span><br><span class=\"line\"># 详细实现参见 evo/core/metrics.py 源码 </span><br><span class=\"line\">ape_metric.process_data(data) </span><br><span class=\"line\"></span><br><span class=\"line\"># 得到rmse，sse，mean，median,max,min,std等统计值 </span><br><span class=\"line\">ape_statistics = ape_metric.get_all_statistics() </span><br><span class=\"line\">print(&quot;mean:&quot;, ape_statistics[&quot;mean&quot;]) </span><br><span class=\"line\"></span><br><span class=\"line\"># 以下为绘图部分 </span><br><span class=\"line\">print(&quot;loading plot modules&quot;) </span><br><span class=\"line\">from evo.tools import plot </span><br><span class=\"line\">import matplotlib.pyplot as plt  </span><br><span class=\"line\"></span><br><span class=\"line\">print(&quot;plotting&quot;) </span><br><span class=\"line\">plot_collection = plot.PlotCollection(&quot;Example&quot;) </span><br><span class=\"line\"># metric values </span><br><span class=\"line\">fig_1 = plt.figure(figsize=(8, 8)) </span><br><span class=\"line\">plot.error_array(fig_1.gca(), ape_metric.error, statistics=ape_statistics, </span><br><span class=\"line\">                                 name=&quot;APE&quot;, title=str(ape_metric)) </span><br><span class=\"line\">plot_collection.add_figure(&quot;raw&quot;, fig_1) </span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"># trajectory colormapped with error </span><br><span class=\"line\">fig_2 = plt.figure(figsize=(8, 8)) </span><br><span class=\"line\">plot_mode = plot.PlotMode.xy </span><br><span class=\"line\">ax = plot.prepare_axis(fig_2, plot_mode) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;, &#x27;reference&#x27;) </span><br><span class=\"line\">plot.traj_colormap(ax, traj_est, ape_metric.error, plot_mode, </span><br><span class=\"line\">                                   min_map=ape_statistics[&quot;min&quot;], </span><br><span class=\"line\">                                   max_map=ape_statistics[&quot;max&quot;], </span><br><span class=\"line\">                                   title=&quot;APE mapped onto trajectory&quot;) </span><br><span class=\"line\">plot_collection.add_figure(&quot;traj (error)&quot;, fig_2) </span><br><span class=\"line\"></span><br><span class=\"line\"># trajectory colormapped with speed </span><br><span class=\"line\">fig_3 = plt.figure(figsize=(8, 8)) </span><br><span class=\"line\">plot_mode = plot.PlotMode.xy </span><br><span class=\"line\">ax = plot.prepare_axis(fig_3, plot_mode) </span><br><span class=\"line\">speeds = [ </span><br><span class=\"line\">        trajectory.calc_speed(traj_est.positions_xyz[i], </span><br><span class=\"line\">                                traj_est.positions_xyz[i + 1], </span><br><span class=\"line\">                                traj_est.timestamps[i], traj_est.timestamps[i + 1]) </span><br><span class=\"line\">        for i in range(len(traj_est.positions_xyz) - 1) </span><br><span class=\"line\">] </span><br><span class=\"line\">speeds.append(0) </span><br><span class=\"line\">plot.traj(ax, plot_mode, traj_ref, &#x27;--&#x27;, &#x27;gray&#x27;, &#x27;reference&#x27;) </span><br><span class=\"line\">plot.traj_colormap(ax, traj_est, speeds, plot_mode, min_map=min(speeds), </span><br><span class=\"line\">                        max_map=max(speeds), title=&quot;speed mapped onto trajectory&quot;) </span><br><span class=\"line\">fig_3.axes.append(ax) </span><br><span class=\"line\">plot_collection.add_figure(&quot;traj (speed)&quot;, fig_3) </span><br><span class=\"line\"> </span><br><span class=\"line\">plot_collection.show()  </span><br></pre></td></tr></table></figure>\n\n<p>终端输出信息： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loading required evo modules </span><br><span class=\"line\">loading trajectories </span><br><span class=\"line\">registering and aligning trajectories </span><br><span class=\"line\">calculating APE </span><br><span class=\"line\">mean: 0.0074917768702161495 </span><br></pre></td></tr></table></figure>\n\n<p>计算并打印了MEAN信息 </p>\n<h2 id=\"附录：数据集以及-evo-使用例子\"><a href=\"#附录：数据集以及-evo-使用例子\" class=\"headerlink\" title=\"附录：数据集以及 evo 使用例子\"></a><strong>附录：数据集以及 evo 使用例子</strong></h2><h3 id=\"TUM数据集\"><a href=\"#TUM数据集\" class=\"headerlink\" title=\"TUM数据集\"></a><strong>TUM数据集</strong></h3><ul>\n<li><p>数据格式为 ： timestamp tx ty tz qx qy qz qw 每行8个元素， 结尾没有空格， 时间戳以秒为单位， 精确到小数点后9位 </p>\n<p><img src=\"/./media/GetImage22.png\"></p>\n</li>\n<li><p>evo_ape 计算轨迹绝对误差的例子</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> mkdir results </span><br><span class=\"line\">  </span><br><span class=\"line\"> # 计算轨迹绝对误差 evo_ape </span><br><span class=\"line\"> evo_ape tum fr2_desk_groundtruth.txt  fr2_desk_ORB.txt -va --plot --plot_mode xz --save_results results/ORB_fr2_desk.zi </span><br><span class=\"line\">  </span><br><span class=\"line\"># 分析多条曲线 evo_res </span><br><span class=\"line\">evo_res results/*.zip -p --save_table results/table.csv </span><br><span class=\"line\">  </span><br><span class=\"line\"># 绘制多条轨迹 evo_traj</span><br><span class=\"line\">evo_traj tum freiburg1_xyz-ORB_kf_mono.txt freiburg1_xyz-rgbdslam.txt  --ref=freiburg1_xyz-groundtruth.txt -va --plot --plot_mode xy </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"KITTI数据集\"><a href=\"#KITTI数据集\" class=\"headerlink\" title=\"KITTI数据集\"></a><strong>KITTI数据集</strong></h3><ul>\n<li><p>KITTI数据集格式： r11 r12 r13 tx r21 r22 r23 ty r31 r32 r33 tz 存储变换矩阵的前三行,每行12元素，空格隔开, 无时间戳 </p>\n<p><img src=\"/./media/GetImage23.png\"></p>\n</li>\n<li><p>evo_ape 计算轨迹绝对误差, evo_traj 绘制多条曲线轨迹 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir results </span><br><span class=\"line\">  </span><br><span class=\"line\"># 计算轨迹绝对误差 evo_ape </span><br><span class=\"line\">evo_ape kitti KITTI_00_gt.txt KITTI_00_ORB.txt -va --plot --plot_mode xz --save_results results/KITTI_00_ORB.zip </span><br><span class=\"line\">  </span><br><span class=\"line\"># 分析多条曲线 evo_res </span><br><span class=\"line\">evo_res results/*.zip -p --save_table results/table.csv </span><br><span class=\"line\">  </span><br><span class=\"line\"># 绘制多条轨迹 </span><br><span class=\"line\">cd test/data </span><br><span class=\"line\">evo_traj kitti KITTI_00_ORB.txt KITTI_00_SPTAM.txt --ref=KITTI_00_gt.txt -p --plot_mode=xz  </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"EUROC数据集\"><a href=\"#EUROC数据集\" class=\"headerlink\" title=\"EUROC数据集\"></a><strong>EUROC数据集</strong></h3><ul>\n<li><p>EUROC数据格式为：timestamp,px,py,pz,qw,qx,qy,qz,vx,vy,vz,bwx,bwy,bwz,bax,bay,baz 每行17个元素，逗号隔开，时间以纳秒为单位, 无小数</p>\n<p><img src=\"/./media/GetImage24.png\"></p>\n</li>\n<li><p>evo_ape 计算轨迹绝对误差 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir results </span><br><span class=\"line\"></span><br><span class=\"line\"> # 计算轨迹绝对误差 evo_ape </span><br><span class=\"line\"> evo_ape euroc V102_groundtruth.csv V102.txt -va --plot --plot_mode xy --save_results results/EUROC.zip </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"附录：相关文献\"><a href=\"#附录：相关文献\" class=\"headerlink\" title=\"附录：相关文献\"></a><strong>附录：相关文献</strong></h2><ul>\n<li>Z. Zhang, D. Scaramuzza. A Tutorial on Quantitative Trajectory Evaluation for Visual(-Inertial) Odometry. <em>IEEE&#x2F;RSJ International Conference on Intelligent Robots and Systems</em>, 7244-7251, 2018. 基本概念介绍教程，包括尺度、对齐等等 </li>\n<li>J. Sturm, N. Engelhard, F. Endres, W. Burgard, D. Cremers. A Benchmark for the Evaluation of RGB-D SLAM Systems. <em>IEEE International Conference on Robotics and Automation</em>, 573-580, 2012. 讲解绝对轨迹误差和相对轨迹误差的概念，以及计算 </li>\n<li>Least-Squares Estimation of Transformation Parameters Between Two Point Patterns, 讲解Umeyama轨迹对齐算法原理和最小二乘过程</li>\n</ul>\n<h3 id=\"参考教程\"><a href=\"#参考教程\" class=\"headerlink\" title=\"参考教程\"></a><a href=\"https://juejin.cn/post/7063041669725159461\">参考教程</a></h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"cllqhd66r000bgcr79q9qe1te","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66u000kgcr75ff01bc7"},{"post_id":"cllqhd66m0003gcr736557n96","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66v000ogcr7fwuj8t03"},{"post_id":"cllqhd66r000dgcr78ndd9vhn","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66w000rgcr70syd3om5"},{"post_id":"cllqhd66t000hgcr7g0crgcb2","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66w000wgcr774jedvg7"},{"post_id":"cllqhd66u000jgcr72klmd2m2","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66x000zgcr701ybg6p0"},{"post_id":"cllqhd66v000qgcr7egzlgyki","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66x0013gcr78xv1ba3u"},{"post_id":"cllqhd66q0009gcr7d9a2a9pu","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66y0016gcr7e5k6cm90"},{"post_id":"cllqhd66q0009gcr7d9a2a9pu","category_id":"cllqhd66u000lgcr7giekcomx","_id":"cllqhd66y001agcr73zhyf3bs"},{"post_id":"cllqhd66v000ngcr728sdettz","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66z001dgcr7fog5cn90"},{"post_id":"cllqhd66v000ngcr728sdettz","category_id":"cllqhd66u000lgcr7giekcomx","_id":"cllqhd66z001hgcr7gt2s2in0"},{"post_id":"cllqhd66w000vgcr72wtr5n5z","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd66z001kgcr7a163ecot"},{"post_id":"cllqhd66w000ygcr7hapvetcd","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd670001ogcr75uht7e51"},{"post_id":"cllqhd66n0005gcr7d6fqbqk0","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd670001rgcr7e7b34j6t"},{"post_id":"cllqhd66n0005gcr7d6fqbqk0","category_id":"cllqhd66u000lgcr7giekcomx","_id":"cllqhd671001ugcr70lqfbkwp"},{"post_id":"cllqhd66x0012gcr7gyig5gb8","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd671001xgcr7ekqn1y3l"},{"post_id":"cllqhd66x0015gcr7hul26fi8","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd6710020gcr722mlge51"},{"post_id":"cllqhd66y0019gcr7cujg7qsn","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd6720023gcr733fi84uq"},{"post_id":"cllqhd66y001cgcr7eou99g4g","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd6720026gcr7e99bgue5"},{"post_id":"cllqhd66z001ggcr7gm28fysv","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd6730029gcr7bqlpa6si"},{"post_id":"cllqhd66z001jgcr79vz9gxtl","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd673002cgcr77wpad8lu"},{"post_id":"cllqhd670001ngcr73wm34i26","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd673002fgcr72xw38m1z"},{"post_id":"cllqhd670001qgcr7ay7i4pfp","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd674002igcr7fleu9paa"},{"post_id":"cllqhd670001tgcr7hrdoh4wu","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd674002lgcr7cjr4g2pu"},{"post_id":"cllqhd671001wgcr70sk8be2j","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd674002ogcr7czjsf47z"},{"post_id":"cllqhd671001zgcr78wl452ua","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd675002tgcr734psg2tc"},{"post_id":"cllqhd6710022gcr71nzc72a4","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd675002wgcr7f88mgu8k"},{"post_id":"cllqhd6720025gcr7g40m7j55","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd6760031gcr7gzlu9ofp"},{"post_id":"cllqhd6720028gcr7epal3so6","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd6760034gcr7f185bdbg"},{"post_id":"cllqhd673002bgcr7465h8y7x","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd6780038gcr73s50brdv"},{"post_id":"cllqhd673002egcr7hvd69yhi","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd679003cgcr7ed312rgi"},{"post_id":"cllqhd673002hgcr71ja306vk","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd679003fgcr7ex82ay6c"},{"post_id":"cllqhd674002ngcr7b63d85mi","category_id":"cllqhd66o0006gcr7e6og2zm7","_id":"cllqhd67a003jgcr70lpc12as"},{"post_id":"cllqhd675002vgcr73segcpu4","category_id":"cllqhd674002pgcr71qy598em","_id":"cllqhd67a003ngcr7hxut82st"},{"post_id":"cllqhd674002kgcr70vjyaulq","category_id":"cllqhd674002pgcr71qy598em","_id":"cllqhd67b003rgcr7frkzffdb"},{"post_id":"cllqhd675002ygcr7g5mdgwtp","category_id":"cllqhd674002pgcr71qy598em","_id":"cllqhd67b003vgcr72j0g2xr8"},{"post_id":"cllqhd675002sgcr7f924d130","category_id":"cllqhd674002pgcr71qy598em","_id":"cllqhd67c003zgcr7by5g0azo"},{"post_id":"cllqhd67a003mgcr771d3akyk","category_id":"cllqhd67a003kgcr7bmb2asx2","_id":"cllqhd67c0043gcr76jxg7tma"},{"post_id":"cllqhd6760036gcr7fi3ucnxb","category_id":"cllqhd67a003kgcr7bmb2asx2","_id":"cllqhd67d0047gcr7eg7yewhq"},{"post_id":"cllqhd679003agcr7cksa6dxj","category_id":"cllqhd67b003sgcr70age5sfr","_id":"cllqhd67d004bgcr7dg9vcgur"},{"post_id":"cllqhd679003egcr70fd52806","category_id":"cllqhd67b003sgcr70age5sfr","_id":"cllqhd67e004fgcr7g1xnc29s"},{"post_id":"cllqhd6760033gcr7489ma6qj","category_id":"cllqhd679003bgcr70sgd4md9","_id":"cllqhd67f004pgcr704e3dy6q"},{"post_id":"cllqhd6760033gcr7489ma6qj","category_id":"cllqhd67d0048gcr7gi5ceata","_id":"cllqhd67g004tgcr7eqim0m09"},{"post_id":"cllqhd67a003igcr702s1bxfi","category_id":"cllqhd67b003sgcr70age5sfr","_id":"cllqhd67g004xgcr73j139j16"},{"post_id":"cllqhd67g004rgcr75gq8gje1","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67h0053gcr71wx39mum"},{"post_id":"cllqhd67b003qgcr74dvu8zle","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67i0057gcr7ezd58ngy"},{"post_id":"cllqhd67b003ugcr7ft0le0mq","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67j005cgcr7aebf2pvm"},{"post_id":"cllqhd67c003ygcr736fcapy1","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67k005jgcr7aavnbm7g"},{"post_id":"cllqhd67c0042gcr7aneefvgi","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67l005pgcr7a7n8hgm0"},{"post_id":"cllqhd67d0045gcr7gdyz6omf","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67l005vgcr7d3dg6kt2"},{"post_id":"cllqhd67d004agcr7d9pr4sdv","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67m005ygcr743kh5gjy"},{"post_id":"cllqhd67d004dgcr7ebsjaujf","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67m0062gcr7a2mw34u8"},{"post_id":"cllqhd67e004hgcr73zr0cmvr","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67m0066gcr79iiu4n3q"},{"post_id":"cllqhd67f004kgcr75c7l4pu1","category_id":"cllqhd67f004ogcr7ck03bdfw","_id":"cllqhd67n0069gcr7a1as5yw0"},{"post_id":"cllqhd67f004ngcr7as8k5q9o","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67n006egcr74snefnfw"},{"post_id":"cllqhd67g004vgcr741di32lk","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67n006igcr73lki78o0"},{"post_id":"cllqhd67h004zgcr79mchcpcx","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67o006mgcr717p3brqz"},{"post_id":"cllqhd67h0052gcr75pmc7t2j","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67o006rgcr727vmbo4j"},{"post_id":"cllqhd67i0056gcr7ctw6bxk3","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67o006vgcr7ce6ca0y3"},{"post_id":"cllqhd67i005agcr79u46ewbb","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67p006zgcr75wge4ocg"},{"post_id":"cllqhd67j005egcr722ji2lsv","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67p0074gcr7hplh8csh"},{"post_id":"cllqhd67j005hgcr751xm3sqj","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67p0078gcr7afuq1ksf"},{"post_id":"cllqhd67k005lgcr71dy358iz","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67q007cgcr77qkba32j"},{"post_id":"cllqhd67k005ngcr71re2drer","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67q007dgcr7gly8560d"},{"post_id":"cllqhd67l005rgcr715qqbhxa","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67q007fgcr79m1udf17"},{"post_id":"cllqhd67q007ggcr7ff9d6vpd","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67r007jgcr7gma5cobm"},{"post_id":"cllqhd67r007hgcr710bh4ic7","category_id":"cllqhd67m0065gcr74fj6ftuo","_id":"cllqhd67r007kgcr72zujgxo4"}],"PostTag":[{"post_id":"cllqhd66r000bgcr79q9qe1te","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd66t000ggcr74dp4asgg"},{"post_id":"cllqhd66m0003gcr736557n96","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd66u000igcr74tgqhfmt"},{"post_id":"cllqhd66u000jgcr72klmd2m2","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd66v000pgcr7do88eyyr"},{"post_id":"cllqhd66v000ngcr728sdettz","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd66w000ugcr71p8rg8x8"},{"post_id":"cllqhd66v000ngcr728sdettz","tag_id":"cllqhd66u000mgcr72chg3ww9","_id":"cllqhd66w000xgcr71kjp3x9p"},{"post_id":"cllqhd66n0005gcr7d6fqbqk0","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd66x0011gcr75qiw9kwn"},{"post_id":"cllqhd66n0005gcr7d6fqbqk0","tag_id":"cllqhd66u000mgcr72chg3ww9","_id":"cllqhd66x0014gcr70ccucngd"},{"post_id":"cllqhd66v000qgcr7egzlgyki","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd66y0018gcr7g4ed2rag"},{"post_id":"cllqhd66w000ygcr7hapvetcd","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd66y001bgcr75a7jbjed"},{"post_id":"cllqhd66x0012gcr7gyig5gb8","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd66z001fgcr72v3qgsmv"},{"post_id":"cllqhd66q0009gcr7d9a2a9pu","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd66z001igcr79pszdygk"},{"post_id":"cllqhd66q0009gcr7d9a2a9pu","tag_id":"cllqhd66u000mgcr72chg3ww9","_id":"cllqhd670001mgcr79tyw4lee"},{"post_id":"cllqhd66x0015gcr7hul26fi8","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd670001pgcr7g9a6bh8e"},{"post_id":"cllqhd66y0019gcr7cujg7qsn","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd670001sgcr7embj19sg"},{"post_id":"cllqhd66r000dgcr78ndd9vhn","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd671001vgcr7e6nidj2k"},{"post_id":"cllqhd66r000dgcr78ndd9vhn","tag_id":"cllqhd66y0017gcr73t4ucqec","_id":"cllqhd671001ygcr7dyd3fgz0"},{"post_id":"cllqhd66y001cgcr7eou99g4g","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd6710021gcr742sadhxf"},{"post_id":"cllqhd66z001ggcr7gm28fysv","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd6720024gcr79azba98m"},{"post_id":"cllqhd66t000hgcr7g0crgcb2","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd6720027gcr77zkyc05b"},{"post_id":"cllqhd66t000hgcr7g0crgcb2","tag_id":"cllqhd66y0017gcr73t4ucqec","_id":"cllqhd673002agcr78ctu28s8"},{"post_id":"cllqhd66z001jgcr79vz9gxtl","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd673002dgcr7cbfue6wi"},{"post_id":"cllqhd670001ngcr73wm34i26","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd673002ggcr79xog9iyn"},{"post_id":"cllqhd66w000vgcr72wtr5n5z","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd674002jgcr7dox97zr6"},{"post_id":"cllqhd66w000vgcr72wtr5n5z","tag_id":"cllqhd66z001lgcr77iaw9xor","_id":"cllqhd674002mgcr78rqw0cjg"},{"post_id":"cllqhd670001qgcr7ay7i4pfp","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd675002rgcr75lka65h8"},{"post_id":"cllqhd670001tgcr7hrdoh4wu","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd675002ugcr70due2qtx"},{"post_id":"cllqhd671001wgcr70sk8be2j","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd675002xgcr71xake9ek"},{"post_id":"cllqhd671001zgcr78wl452ua","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd6760032gcr763fp2wd5"},{"post_id":"cllqhd6710022gcr71nzc72a4","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd6760035gcr76oyego8f"},{"post_id":"cllqhd6720025gcr7g40m7j55","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd6790039gcr72cie8yxe"},{"post_id":"cllqhd6720028gcr7epal3so6","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd679003dgcr7ak6dfw5o"},{"post_id":"cllqhd6720028gcr7epal3so6","tag_id":"cllqhd66z001lgcr77iaw9xor","_id":"cllqhd67a003hgcr747o87jux"},{"post_id":"cllqhd673002bgcr7465h8y7x","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd67a003lgcr778vfecls"},{"post_id":"cllqhd673002egcr7hvd69yhi","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd67a003pgcr765i30wft"},{"post_id":"cllqhd673002hgcr71ja306vk","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd67b003tgcr73gfj2dim"},{"post_id":"cllqhd674002ngcr7b63d85mi","tag_id":"cllqhd66p0007gcr7658qgnq7","_id":"cllqhd67c003xgcr79jj11kt6"},{"post_id":"cllqhd675002vgcr73segcpu4","tag_id":"cllqhd675002qgcr7fufhdsy5","_id":"cllqhd67c0041gcr773hmg536"},{"post_id":"cllqhd674002kgcr70vjyaulq","tag_id":"cllqhd675002qgcr7fufhdsy5","_id":"cllqhd67c0044gcr73it36n8r"},{"post_id":"cllqhd675002ygcr7g5mdgwtp","tag_id":"cllqhd675002qgcr7fufhdsy5","_id":"cllqhd67d0049gcr7b68104lv"},{"post_id":"cllqhd675002sgcr7f924d130","tag_id":"cllqhd675002qgcr7fufhdsy5","_id":"cllqhd67d004cgcr7b3qdetdw"},{"post_id":"cllqhd675002sgcr7f924d130","tag_id":"cllqhd6780037gcr703hs9hv9","_id":"cllqhd67e004ggcr7f1x57bdd"},{"post_id":"cllqhd6760033gcr7489ma6qj","tag_id":"cllqhd679003ggcr738cx0q2o","_id":"cllqhd67e004jgcr7a5mha9s8"},{"post_id":"cllqhd6760033gcr7489ma6qj","tag_id":"cllqhd67a003ogcr73zh33fnv","_id":"cllqhd67f004mgcr70zhw6typ"},{"post_id":"cllqhd67c0042gcr7aneefvgi","tag_id":"cllqhd6780037gcr703hs9hv9","_id":"cllqhd67f004qgcr7gq9s7bna"},{"post_id":"cllqhd6760036gcr7fi3ucnxb","tag_id":"cllqhd67b003wgcr714uzbojk","_id":"cllqhd67g004ugcr7ax7p6j4o"},{"post_id":"cllqhd6760036gcr7fi3ucnxb","tag_id":"cllqhd67d0046gcr7dgpdhi0w","_id":"cllqhd67h004ygcr7ckj20ijp"},{"post_id":"cllqhd679003agcr7cksa6dxj","tag_id":"cllqhd67e004egcr74nd25buj","_id":"cllqhd67h0051gcr74snnh018"},{"post_id":"cllqhd67f004kgcr75c7l4pu1","tag_id":"cllqhd67a003ogcr73zh33fnv","_id":"cllqhd67h0055gcr7gtov8gte"},{"post_id":"cllqhd679003egcr70fd52806","tag_id":"cllqhd67e004egcr74nd25buj","_id":"cllqhd67i0059gcr782cx6zjq"},{"post_id":"cllqhd679003egcr70fd52806","tag_id":"cllqhd67g004sgcr7c67gaivq","_id":"cllqhd67j005dgcr761v4epaw"},{"post_id":"cllqhd67a003igcr702s1bxfi","tag_id":"cllqhd67e004egcr74nd25buj","_id":"cllqhd67j005ggcr738x912nj"},{"post_id":"cllqhd67j005egcr722ji2lsv","tag_id":"cllqhd6780037gcr703hs9hv9","_id":"cllqhd67k005kgcr769r81egi"},{"post_id":"cllqhd67a003mgcr771d3akyk","tag_id":"cllqhd67b003wgcr714uzbojk","_id":"cllqhd67l005qgcr71o70fx7q"},{"post_id":"cllqhd67a003mgcr771d3akyk","tag_id":"cllqhd67d0046gcr7dgpdhi0w","_id":"cllqhd67l005sgcr7hjcxd7fa"},{"post_id":"cllqhd67b003qgcr74dvu8zle","tag_id":"cllqhd67k005mgcr7298a6qik","_id":"cllqhd67l005wgcr75f4ahsz1"},{"post_id":"cllqhd67b003ugcr7ft0le0mq","tag_id":"cllqhd67l005tgcr7g21k0g1b","_id":"cllqhd67m0060gcr721xzg23v"},{"post_id":"cllqhd67c003ygcr736fcapy1","tag_id":"cllqhd67m005zgcr7dysj7rsh","_id":"cllqhd67m0064gcr7gnc3f5cr"},{"post_id":"cllqhd67d0045gcr7gdyz6omf","tag_id":"cllqhd67k005mgcr7298a6qik","_id":"cllqhd67n0068gcr71afq8hmb"},{"post_id":"cllqhd67d004dgcr7ebsjaujf","tag_id":"cllqhd67m0067gcr76pmpf3yg","_id":"cllqhd67n006cgcr7h80vc6ks"},{"post_id":"cllqhd67e004hgcr73zr0cmvr","tag_id":"cllqhd67k005mgcr7298a6qik","_id":"cllqhd67n006ggcr7dg5z36k3"},{"post_id":"cllqhd67f004ngcr7as8k5q9o","tag_id":"cllqhd67n006fgcr772wahahh","_id":"cllqhd67o006kgcr7hrpu95e6"},{"post_id":"cllqhd67f004ngcr7as8k5q9o","tag_id":"cllqhd67b003wgcr714uzbojk","_id":"cllqhd67o006ngcr7h2ix75zk"},{"post_id":"cllqhd67g004rgcr75gq8gje1","tag_id":"cllqhd67k005mgcr7298a6qik","_id":"cllqhd67o006pgcr74ggb1oou"},{"post_id":"cllqhd67g004vgcr741di32lk","tag_id":"cllqhd67o006ogcr77h1d50wy","_id":"cllqhd67o006tgcr7gcypc46a"},{"post_id":"cllqhd67h0052gcr75pmc7t2j","tag_id":"cllqhd67o006ogcr77h1d50wy","_id":"cllqhd67p006xgcr7egtaav54"},{"post_id":"cllqhd67h0052gcr75pmc7t2j","tag_id":"cllqhd66z001lgcr77iaw9xor","_id":"cllqhd67p0070gcr7euype00a"},{"post_id":"cllqhd67i0056gcr7ctw6bxk3","tag_id":"cllqhd67m005zgcr7dysj7rsh","_id":"cllqhd67p0072gcr7h0m4c8q8"},{"post_id":"cllqhd67i005agcr79u46ewbb","tag_id":"cllqhd67l005tgcr7g21k0g1b","_id":"cllqhd67p0076gcr7dm6e5k2c"},{"post_id":"cllqhd67k005lgcr71dy358iz","tag_id":"cllqhd67p0075gcr7hwqfarko","_id":"cllqhd67p007agcr7auxr13h4"},{"post_id":"cllqhd67k005ngcr71re2drer","tag_id":"cllqhd67p0079gcr71ykl7ww6","_id":"cllqhd67q007egcr74ses6c6x"},{"post_id":"cllqhd67q007ggcr7ff9d6vpd","tag_id":"cllqhd67r007igcr7g03j2e5w","_id":"cllqhd67r007mgcr71jpm311b"},{"post_id":"cllqhd67r007hgcr710bh4ic7","tag_id":"cllqhd679003ggcr738cx0q2o","_id":"cllqhd67r007ngcr74qkwdnz7"},{"post_id":"cllqhd67r007hgcr710bh4ic7","tag_id":"cllqhd67r007lgcr7c9ue908m","_id":"cllqhd67r007ogcr7fxbqei6j"}],"Tag":[{"name":"C++","_id":"cllqhd66p0007gcr7658qgnq7"},{"name":"CMakelists","_id":"cllqhd66u000mgcr72chg3ww9"},{"name":"Eigen","_id":"cllqhd66y0017gcr73t4ucqec"},{"name":"Opencv","_id":"cllqhd66z001lgcr77iaw9xor"},{"name":"Qt","_id":"cllqhd675002qgcr7fufhdsy5"},{"name":"Xavier","_id":"cllqhd6780037gcr703hs9hv9"},{"name":"SLAM","_id":"cllqhd679003ggcr738cx0q2o"},{"name":"ROS","_id":"cllqhd67a003ogcr73zh33fnv"},{"name":"Linux","_id":"cllqhd67b003wgcr714uzbojk"},{"name":"Shell","_id":"cllqhd67d0046gcr7dgpdhi0w"},{"name":"Jottings","_id":"cllqhd67e004egcr74nd25buj"},{"name":"Clash","_id":"cllqhd67g004sgcr7c67gaivq"},{"name":"Git","_id":"cllqhd67k005mgcr7298a6qik"},{"name":"LIO-SAM","_id":"cllqhd67l005tgcr7g21k0g1b"},{"name":"ORB-SLAM","_id":"cllqhd67m005zgcr7dysj7rsh"},{"name":"Velodyne","_id":"cllqhd67m0067gcr76pmpf3yg"},{"name":"Ubuntu","_id":"cllqhd67n006fgcr772wahahh"},{"name":"Ros","_id":"cllqhd67o006ogcr77h1d50wy"},{"name":"VINS","_id":"cllqhd67p0075gcr7hwqfarko"},{"name":"Rtabmap","_id":"cllqhd67p0079gcr71ykl7ww6"},{"name":"Calib","_id":"cllqhd67r007igcr7g03j2e5w"},{"name":"evo","_id":"cllqhd67r007lgcr7c9ue908m"}]}}